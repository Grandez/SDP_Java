package com.jgg.sdp.calculator;

import java.util.*;
import java_cup.runtime.*;

import com.jgg.sdp.tools.JGGJava;

parser code {:

   Object base = null;
   Object root = null;
   
   HashMap<String, CalcItem> vars = new HashMap<String, CalcItem>();
   
   public void setObjectBase(Object base) {
      this.base = base;
   }
   
   public void setObjectRoot(Object root) {
      this.root = root;
   }
   
   public void setVariables(HashMap<String, Integer> vars) {
      if (vars == null) return;
      this.vars = new HashMap<String, CalcItem>();
      for (Map.Entry<String, Integer> entry : vars.entrySet()) {
         this.vars.put(entry.getKey(), new CalcItem(entry.getValue()));
      }
   }
   
:}

action code {:

   private CalcItem getGlobalValue(Symbol s) throws CalculatorException {
      String name = (String) s.value;
      
      // Primero mira en la tabla de simbolos
      CalcItem value = parser.vars.get(name);
      if (value == null) {
          value = loadValue(name, s);
          if (value == null) {
              throw new CalculatorException(s, "Variable doesn't exists");
          }
          parser.vars.put(name, value);
      }
      return new CalcItem(value);
   }
   
   private CalcItem getLocalValue(Symbol s) throws CalculatorException {
      CalcItem value = parser.vars.get((String) s.value);
      if (value == null) throw new CalculatorException(s, "Variable doesn't exists");
      return value;
   }
   
   private CalcItem loadValue(String name, Symbol s) {
      CalcItem item = null;
      
      String[] toks = name.substring(1).split("\\.");
      int idx = 0;
      Object obj = parser.base;
      
      if (toks.length > 1) {
         obj = parser.root;

         do {
           obj = JGGJava.executeMethod(obj, "get" + toks[idx++]);
         } while (idx + 1 < toks.length);
      }
      
      Object res = JGGJava.executeMethod(obj, "get" + toks[idx]);
      
      if (res instanceof Integer)  item = new CalcItem((Integer) res);
      if (res instanceof Long)     item = new CalcItem((Long) res);
      if (res instanceof int[])    item = new CalcItem((int[]) res);
      if (res instanceof long[])   item = new CalcItem((long[]) res);
      
      if (item != null) item.setSymbol(s);
      
      return item;
  
   }

   private CalcItem storeVar(Symbol s, CalcItem value) {
      String var = (String) ((Symbol) s.value).value;
      if (parser.vars == null) parser.vars = new HashMap<String, CalcItem>();
      parser.vars.put(var, value);
      return value;
   }
      
:}

init with {:

:}


/****************************************************************************/
/****************************************************************************/
/*               VERBOS                                                     */
/****************************************************************************/
/****************************************************************************/

terminal Symbol ABS       ;
terminal Symbol LOG       ;
terminal Symbol LOG2      ;
terminal Symbol LN        ;
terminal Symbol EXP       ;
terminal Symbol SUM       ;
terminal Symbol PROD      ;

terminal Symbol AND       ;
terminal Symbol OR        ;

terminal CalcItem NUMBER    ;

terminal Symbol PLUS      ; 
terminal Symbol MINUS     ;
terminal Symbol MULT      ;
terminal Symbol DIV       ;
terminal Symbol MOD       ;
terminal Symbol POW       ;

terminal Symbol LPAR      ;
terminal Symbol RPAR      ;

terminal Symbol ASSIGN    ;
terminal Symbol EQ        ;
terminal Symbol NE        ;
terminal Symbol GT        ;
terminal Symbol GE        ;
terminal Symbol LT        ;
terminal Symbol LE        ;

terminal Symbol STORE     ;
terminal Symbol LOCAL     ;
terminal Symbol GLOBAL    ;

terminal Symbol ENDS      ;

/****************************************************************************/
/****************************************************************************/
/*               NO TERMINALES                                              */
/****************************************************************************/
/****************************************************************************/

non terminal Symbol     ax                    ;
non terminal Symbol     main_operation        ;
non terminal Symbol     full_operation        ;
non terminal Symbol     operation             ;

non terminal            assign_operation_list ;
non terminal            assign_operation_lst  ;
non terminal            assign_operation      ;
non terminal CalcItem   numeric_operation     ;

non terminal Boolean    logical_operation ;
non terminal Boolean    relational_operation ;
non terminal Boolean    logical_or        ;
non terminal Boolean    logical_and       ;


non terminal CalcItem factor        ;
non terminal CalcItem function      ;
non terminal CalcItem func_op       ;
non terminal CalcItem primary       ;  

                    
precedence left PLUS, MINUS    ;
precedence left MULT, DIV, MOD ;
precedence left POW            ;

precedence nonassoc LPAR, RPAR ;

/**********************************************************************/
/**********************************************************************/
/**********************************************************************/
/*                        INICIO PARSER                               */
/**********************************************************************/
/**********************************************************************/
/**********************************************************************/

// Siempre se envia un punto y coma
ax ::= assign_operation_list main_operation:m {: RESULT = m; :}
   |   ENDS                                   {: RESULT = new Symbol(0, 0,0, new Boolean(false)); :}
   ;

// Esta es la ultima operacion de la lista
main_operation ::= full_operation:f   {: RESULT = f; :}
               ;
                                        
full_operation ::= operation:o ENDS   {: RESULT = o;  :}
               ;

operation ::= numeric_operation:n {: RESULT = new Symbol(n.intValue(), 0,0, n.getValue()); :}
          |   logical_operation:l {: RESULT = new Symbol(0, 0,0, l); :}
          ;                         
   

/*************************************************************************************/
/*         ASSIGN  STORE VAR = expression                                            */
/*************************************************************************************/

assign_operation_list ::= assign_operation_lst:l {: RESULT = l; :}
                      |
                      ;
                      
assign_operation_lst ::= assign_operation:a                           {: RESULT = a; :}
                     |   assign_operation_lst ENDS assign_operation:a {: RESULT = a; :}
                     ;

assign_operation ::= STORE LOCAL:v ASSIGN numeric_operation:d ENDS  {: RESULT = storeVar(v, d); :}
                 ;

/*************************************************************************************/
/*         NUMERIC EXPRESSION                                                        */
/*************************************************************************************/
          
numeric_operation ::= factor:f PLUS  numeric_operation:o   {: RESULT = f.add(o);            :}
                  |   factor:f MINUS numeric_operation:o   {: RESULT = f.subtract(o);       :}
                  |   factor:f MULT  numeric_operation:o   {: RESULT = f.multiply(o);       :}
                  |   factor:f POW   numeric_operation:o   {: RESULT = f.pow(o.intValue()); :}
                  |   factor:f MOD   numeric_operation:o   {: RESULT = f.remainder(o);      :}          
                  |   factor:f                             {: RESULT = f; :}
                  |   factor:f DIV   numeric_operation:o   {: CalcItem aux = null;
                                                      try {
                                                        aux = f.divide(o);
                                                     } catch (ArithmeticException ex) {
                                                        aux = new CalcItem(f.doubleValue()/o.doubleValue());
                                                     }       
                                                     RESULT = aux;
                                                   :}
                ;

factor ::= LPAR numeric_operation:o RPAR      {: RESULT = o;       :}
       |   function:f                         {: RESULT = f;       :} 
       |   primary:p                          {: RESULT = p;       :}   
       ;

function ::= LOG  func_op:f {: RESULT = new CalcItem(Math.log10(f.doubleValue())); :}
         |   LOG2 func_op:f {: RESULT = new CalcItem(Math.log10(f.doubleValue()) / Math.log(2)); :}
         |   LN   func_op:f {: RESULT = new CalcItem(Math.log(f.doubleValue())); :}
         |   EXP  func_op:f {: RESULT = new CalcItem(Math.exp(f.doubleValue())); :}
         |   ABS  func_op:f {: RESULT = f.abs();  :}
         |   SUM  func_op:f {: RESULT = f.sum();  :}         
         |   PROD func_op:f {: RESULT = f.prod(); :}         
         ;

func_op ::= LPAR numeric_operation:o RPAR  {: RESULT = o; :}
        ;
        
primary ::= NUMBER:n    {: RESULT = n; :}
        |   LOCAL:v     {: RESULT = getLocalValue(v);  :}
        |   GLOBAL:v    {: RESULT = getGlobalValue(v); :}        
        ;
               
/*************************************************************************************/
/*         LOGICAL OPERATION                                                         */
/*         RELATIONAL_OPERATION [AND | OR RELATIONAL_OPERATION]*                     */
/*************************************************************************************/

logical_operation ::= logical_or:l {: RESULT = l; :}
                  ;
                  
logical_or ::= logical_and:l                  {: RESULT = l; :}
           |   logical_or:o OR logical_and:a  {: RESULT = (o || a); :}
           ;

logical_and ::= relational_operation:o                   {: RESULT = o; :}
            |   logical_and:a AND relational_operation:o {: RESULT = (a && o); :}
            ;
            
relational_operation ::= numeric_operation:l EQ numeric_operation:r  {: RESULT = (l.compare(r) == 0); :}
                     |   numeric_operation:l NE numeric_operation:r  {: RESULT = (l.compare(r) != 0); :}
                     |   numeric_operation:l GT numeric_operation:r  {: RESULT = (l.compare(r) >  0); :}
                     |   numeric_operation:l LT numeric_operation:r  {: RESULT = (l.compare(r) <  0); :}
                     |   numeric_operation:l GE numeric_operation:r  {: RESULT = (l.compare(r) >= 0); :}
                     |   numeric_operation:l LE numeric_operation:r  {: RESULT = (l.compare(r) <= 0); :}                                    
                    ;
