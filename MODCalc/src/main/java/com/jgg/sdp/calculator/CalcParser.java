
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Sep 19 23:58:56 CEST 2017
//----------------------------------------------------

package com.jgg.sdp.calculator;

import java.util.*;
import java_cup.runtime.*;
import com.jgg.sdp.tools.JGGJava;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Sep 19 23:58:56 CEST 2017
  */
public class CalcParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CalcParser() {super();}

  /** Constructor which sets the default scanner. */
  public CalcParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CalcParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\004\004\000\002\005\003" +
    "\000\002\005\003\000\002\006\003\000\002\006\002\000" +
    "\002\007\003\000\002\007\005\000\002\010\007\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\003\000\002\011\005" +
    "\000\002\016\005\000\002\016\003\000\002\016\003\000" +
    "\002\017\004\000\002\017\004\000\002\017\004\000\002" +
    "\017\004\000\002\017\004\000\002\017\004\000\002\017" +
    "\004\000\002\020\005\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\012\003\000\002\014\003\000" +
    "\002\014\005\000\002\015\003\000\002\015\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\116\000\006\035\004\040\006\001\ufff9\000\004\036" +
    "\115\001\002\000\004\040\113\001\ufffa\000\002\001\uffff" +
    "\000\030\004\032\005\023\006\014\007\017\010\024\011" +
    "\016\012\034\015\027\024\040\036\020\037\035\001\002" +
    "\000\004\002\012\001\002\000\002\001\ufff8\000\002\001" +
    "\000\000\002\001\ufffe\000\004\024\063\001\002\000\004" +
    "\014\110\001\uffe0\000\004\024\063\001\002\000\004\024" +
    "\063\001\002\000\002\001\uffe2\000\002\001\uffed\000\002" +
    "\001\001\000\004\024\063\001\002\000\004\024\063\001" +
    "\002\000\016\027\047\030\053\031\050\032\052\033\046" +
    "\034\051\001\ufffc\000\004\040\103\001\002\000\002\001" +
    "\uffe3\000\016\016\072\017\073\020\070\021\074\022\067" +
    "\023\071\001\ufff0\000\002\001\ufffb\000\004\024\063\001" +
    "\002\000\002\001\uffec\000\004\024\063\001\002\000\002" +
    "\001\uffe1\000\002\001\uffdd\000\004\013\043\001\uffdf\000" +
    "\030\004\032\005\023\006\014\007\017\010\024\011\016" +
    "\012\034\015\027\024\040\036\020\037\035\001\002\000" +
    "\004\025\042\001\002\000\002\001\uffee\000\030\004\032" +
    "\005\023\006\014\007\017\010\024\011\016\012\034\015" +
    "\027\024\040\036\020\037\035\001\002\000\016\027\047" +
    "\030\053\031\050\032\052\033\046\034\051\001\002\000" +
    "\002\001\uffdc\000\030\004\032\005\023\006\014\007\017" +
    "\010\024\011\016\012\034\015\027\024\040\036\020\037" +
    "\035\001\002\000\030\004\032\005\023\006\014\007\017" +
    "\010\024\011\016\012\034\015\027\024\040\036\020\037" +
    "\035\001\002\000\030\004\032\005\023\006\014\007\017" +
    "\010\024\011\016\012\034\015\027\024\040\036\020\037" +
    "\035\001\002\000\030\004\032\005\023\006\014\007\017" +
    "\010\024\011\016\012\034\015\027\024\040\036\020\037" +
    "\035\001\002\000\030\004\032\005\023\006\014\007\017" +
    "\010\024\011\016\012\034\015\027\024\040\036\020\037" +
    "\035\001\002\000\030\004\032\005\023\006\014\007\017" +
    "\010\024\011\016\012\034\015\027\024\040\036\020\037" +
    "\035\001\002\000\002\001\uffda\000\002\001\uffd7\000\002" +
    "\001\uffd6\000\002\001\uffd9\000\002\001\uffdb\000\002\001" +
    "\uffd8\000\002\001\uffe5\000\030\004\032\005\023\006\014" +
    "\007\017\010\024\011\016\012\034\015\027\024\040\036" +
    "\020\037\035\001\002\000\004\025\065\001\002\000\002" +
    "\001\uffe4\000\002\001\uffe7\000\030\004\032\005\023\006" +
    "\014\007\017\010\024\011\016\012\034\015\027\024\040" +
    "\036\020\037\035\001\002\000\030\004\032\005\023\006" +
    "\014\007\017\010\024\011\016\012\034\015\027\024\040" +
    "\036\020\037\035\001\002\000\030\004\032\005\023\006" +
    "\014\007\017\010\024\011\016\012\034\015\027\024\040" +
    "\036\020\037\035\001\002\000\030\004\032\005\023\006" +
    "\014\007\017\010\024\011\016\012\034\015\027\024\040" +
    "\036\020\037\035\001\002\000\030\004\032\005\023\006" +
    "\014\007\017\010\024\011\016\012\034\015\027\024\040" +
    "\036\020\037\035\001\002\000\030\004\032\005\023\006" +
    "\014\007\017\010\024\011\016\012\034\015\027\024\040" +
    "\036\020\037\035\001\002\000\002\001\uffef\000\002\001" +
    "\ufff4\000\002\001\ufff5\000\002\001\ufff2\000\002\001\ufff3" +
    "\000\002\001\ufff1\000\002\001\ufffd\000\002\001\uffe8\000" +
    "\002\001\uffeb\000\002\001\uffe9\000\002\001\uffe6\000\030" +
    "\004\032\005\023\006\014\007\017\010\024\011\016\012" +
    "\034\015\027\024\040\036\020\037\035\001\002\000\004" +
    "\013\043\001\uffde\000\002\001\uffea\000\004\035\004\001" +
    "\002\000\002\001\ufff7\000\004\026\116\001\002\000\030" +
    "\004\032\005\023\006\014\007\017\010\024\011\016\012" +
    "\034\015\027\024\040\036\020\037\035\001\002\000\004" +
    "\040\120\001\002\000\002\001\ufff6" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\116\000\012\002\007\006\006\007\004\010\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\021\004\012\005\025\011\024\012\030\013" +
    "\035\014\014\015\036\016\027\017\020\021\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\111\001\001\000\002\001\001" +
    "\000\004\020\106\001\001\000\004\020\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\104\001\001\000\004\020\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\065\001\001\000\002\001" +
    "\001\000\004\020\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\011\040\016\027\017" +
    "\020\021\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\011\043\013\044\016\027\017\020\021\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\011\060" +
    "\016\027\017\020\021\032\001\001\000\012\011\057\016" +
    "\027\017\020\021\032\001\001\000\012\011\056\016\027" +
    "\017\020\021\032\001\001\000\012\011\055\016\027\017" +
    "\020\021\032\001\001\000\012\011\054\016\027\017\020" +
    "\021\032\001\001\000\012\011\053\016\027\017\020\021" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\011\063\016\027\017\020" +
    "\021\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\011\101\016\027\017\020\021\032" +
    "\001\001\000\012\011\100\016\027\017\020\021\032\001" +
    "\001\000\012\011\077\016\027\017\020\021\032\001\001" +
    "\000\012\011\076\016\027\017\020\021\032\001\001\000" +
    "\012\011\075\016\027\017\020\021\032\001\001\000\012" +
    "\011\074\016\027\017\020\021\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\011\043\013\035\015\110\016\027\017" +
    "\020\021\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\011\116\016\027\017\020\021\032\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CalcParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CalcParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CalcParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {



    }



   Object base = null;
   Object root = null;
   
   HashMap<String, CalcItem> vars = new HashMap<String, CalcItem>();
   
   public void setObjectBase(Object base) {
      this.base = base;
   }
   
   public void setObjectRoot(Object root) {
      this.root = root;
   }
   
   public void setVariables(HashMap<String, Integer> vars) {
      if (vars == null) return;
      this.vars = new HashMap<String, CalcItem>();
      for (Map.Entry<String, Integer> entry : vars.entrySet()) {
         this.vars.put(entry.getKey(), new CalcItem(entry.getValue()));
      }
   }
   

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CalcParser$actions {



   private CalcItem getGlobalValue(Symbol s) throws CalculatorException {
      String name = (String) s.value;
      
      // Primero mira en la tabla de simbolos
      CalcItem value = parser.vars.get(name);
      if (value == null) {
          value = loadValue(name, s);
          if (value == null) {
              throw new CalculatorException(s, "Variable doesn't exists");
          }
          parser.vars.put(name, value);
      }
      return new CalcItem(value);
   }
   
   private CalcItem getLocalValue(Symbol s) throws CalculatorException {
      CalcItem value = parser.vars.get((String) s.value);
      if (value == null) throw new CalculatorException(s, "Variable doesn't exists");
      return value;
   }
   
   private CalcItem loadValue(String name, Symbol s) {
      CalcItem item = null;
      
      String[] toks = name.substring(1).split("\\.");
      int idx = 0;
      Object obj = parser.base;
      
      if (toks.length > 1) {
         obj = parser.root;

         do {
           obj = JGGJava.executeMethod(obj, "get" + toks[idx++]);
         } while (idx + 1 < toks.length);
      }
      
      Object res = JGGJava.executeMethod(obj, "get" + toks[idx]);
      
      if (res instanceof Integer)  item = new CalcItem((Integer) res);
      if (res instanceof Long)     item = new CalcItem((Long) res);
      if (res instanceof int[])    item = new CalcItem((int[]) res);
      if (res instanceof long[])   item = new CalcItem((long[]) res);
      
      if (item != null) item.setSymbol(s);
      
      return item;
  
   }

   private CalcItem storeVar(Symbol s, CalcItem value) {
      String var = (String) ((Symbol) s.value).value;
      if (parser.vars == null) parser.vars = new HashMap<String, CalcItem>();
      parser.vars.put(var, value);
      return value;
   }
      

  private final CalcParser parser;

  /** Constructor */
  CUP$CalcParser$actions(CalcParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CalcParser$do_action(
    int                        CUP$CalcParser$act_num,
    java_cup.runtime.lr_parser CUP$CalcParser$parser,
    java.util.Stack            CUP$CalcParser$stack,
    int                        CUP$CalcParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CalcParser$result;

      /* select the action based on the action number */
      switch (CUP$CalcParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // relational_operation ::= numeric_operation LE numeric_operation 
            {
              Boolean RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).right;
		CalcItem l = (CalcItem)((java_cup.runtime.Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		CalcItem r = (CalcItem)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = (l.compare(r) <= 0); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("relational_operation",9, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // relational_operation ::= numeric_operation GE numeric_operation 
            {
              Boolean RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).right;
		CalcItem l = (CalcItem)((java_cup.runtime.Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		CalcItem r = (CalcItem)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = (l.compare(r) >= 0); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("relational_operation",9, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // relational_operation ::= numeric_operation LT numeric_operation 
            {
              Boolean RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).right;
		CalcItem l = (CalcItem)((java_cup.runtime.Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		CalcItem r = (CalcItem)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = (l.compare(r) <  0); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("relational_operation",9, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // relational_operation ::= numeric_operation GT numeric_operation 
            {
              Boolean RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).right;
		CalcItem l = (CalcItem)((java_cup.runtime.Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		CalcItem r = (CalcItem)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = (l.compare(r) >  0); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("relational_operation",9, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // relational_operation ::= numeric_operation NE numeric_operation 
            {
              Boolean RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).right;
		CalcItem l = (CalcItem)((java_cup.runtime.Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		CalcItem r = (CalcItem)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = (l.compare(r) != 0); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("relational_operation",9, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // relational_operation ::= numeric_operation EQ numeric_operation 
            {
              Boolean RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).right;
		CalcItem l = (CalcItem)((java_cup.runtime.Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		CalcItem r = (CalcItem)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = (l.compare(r) == 0); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("relational_operation",9, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // logical_and ::= logical_and AND relational_operation 
            {
              Boolean RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		Boolean o = (Boolean)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = (a && o); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("logical_and",11, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // logical_and ::= relational_operation 
            {
              Boolean RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		Boolean o = (Boolean)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = o; 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("logical_and",11, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // logical_or ::= logical_or OR logical_and 
            {
              Boolean RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).right;
		Boolean o = (Boolean)((java_cup.runtime.Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = (o || a); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("logical_or",10, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // logical_or ::= logical_and 
            {
              Boolean RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		Boolean l = (Boolean)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = l; 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("logical_or",10, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // logical_operation ::= logical_or 
            {
              Boolean RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		Boolean l = (Boolean)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = l; 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("logical_operation",8, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // primary ::= GLOBAL 
            {
              CalcItem RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = getGlobalValue(v); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("primary",15, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // primary ::= LOCAL 
            {
              CalcItem RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = getLocalValue(v);  
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("primary",15, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // primary ::= NUMBER 
            {
              CalcItem RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		CalcItem n = (CalcItem)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = n; 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("primary",15, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // func_op ::= LPAR numeric_operation RPAR 
            {
              CalcItem RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).right;
		CalcItem o = (CalcItem)((java_cup.runtime.Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).value;
		 RESULT = o; 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("func_op",14, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // function ::= PROD func_op 
            {
              CalcItem RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		CalcItem f = (CalcItem)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = f.prod(); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("function",13, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // function ::= SUM func_op 
            {
              CalcItem RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		CalcItem f = (CalcItem)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = f.sum();  
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("function",13, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // function ::= ABS func_op 
            {
              CalcItem RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		CalcItem f = (CalcItem)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = f.abs();  
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("function",13, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // function ::= EXP func_op 
            {
              CalcItem RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		CalcItem f = (CalcItem)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = new CalcItem(Math.exp(f.doubleValue())); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("function",13, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // function ::= LN func_op 
            {
              CalcItem RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		CalcItem f = (CalcItem)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = new CalcItem(Math.log(f.doubleValue())); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("function",13, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // function ::= LOG2 func_op 
            {
              CalcItem RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		CalcItem f = (CalcItem)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = new CalcItem(Math.log10(f.doubleValue()) / Math.log(2)); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("function",13, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // function ::= LOG func_op 
            {
              CalcItem RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		CalcItem f = (CalcItem)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = new CalcItem(Math.log10(f.doubleValue())); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("function",13, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // factor ::= primary 
            {
              CalcItem RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		CalcItem p = (CalcItem)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = p;       
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // factor ::= function 
            {
              CalcItem RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		CalcItem f = (CalcItem)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = f;       
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // factor ::= LPAR numeric_operation RPAR 
            {
              CalcItem RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).right;
		CalcItem o = (CalcItem)((java_cup.runtime.Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).value;
		 RESULT = o;       
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // numeric_operation ::= factor DIV numeric_operation 
            {
              CalcItem RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).right;
		CalcItem f = (CalcItem)((java_cup.runtime.Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		CalcItem o = (CalcItem)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 CalcItem aux = null;
                                                      try {
                                                        aux = f.divide(o);
                                                     } catch (ArithmeticException ex) {
                                                        aux = new CalcItem(f.doubleValue()/o.doubleValue());
                                                     }       
                                                     RESULT = aux;
                                                   
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("numeric_operation",7, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // numeric_operation ::= factor 
            {
              CalcItem RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		CalcItem f = (CalcItem)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = f; 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("numeric_operation",7, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // numeric_operation ::= factor MOD numeric_operation 
            {
              CalcItem RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).right;
		CalcItem f = (CalcItem)((java_cup.runtime.Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		CalcItem o = (CalcItem)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = f.remainder(o);      
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("numeric_operation",7, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // numeric_operation ::= factor POW numeric_operation 
            {
              CalcItem RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).right;
		CalcItem f = (CalcItem)((java_cup.runtime.Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		CalcItem o = (CalcItem)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = f.pow(o.intValue()); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("numeric_operation",7, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // numeric_operation ::= factor MULT numeric_operation 
            {
              CalcItem RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).right;
		CalcItem f = (CalcItem)((java_cup.runtime.Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		CalcItem o = (CalcItem)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = f.multiply(o);       
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("numeric_operation",7, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // numeric_operation ::= factor MINUS numeric_operation 
            {
              CalcItem RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).right;
		CalcItem f = (CalcItem)((java_cup.runtime.Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		CalcItem o = (CalcItem)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = f.subtract(o);       
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("numeric_operation",7, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // numeric_operation ::= factor PLUS numeric_operation 
            {
              CalcItem RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).right;
		CalcItem f = (CalcItem)((java_cup.runtime.Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		CalcItem o = (CalcItem)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = f.add(o);            
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("numeric_operation",7, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // assign_operation ::= STORE LOCAL ASSIGN numeric_operation ENDS 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-3)).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).right;
		CalcItem d = (CalcItem)((java_cup.runtime.Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).value;
		 RESULT = storeVar(v, d); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("assign_operation",6, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-4)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // assign_operation_lst ::= assign_operation_lst ENDS assign_operation 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = a; 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("assign_operation_lst",5, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-2)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // assign_operation_lst ::= assign_operation 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = a; 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("assign_operation_lst",5, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // assign_operation_list ::= 
            {
              Object RESULT =null;

              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("assign_operation_list",4, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // assign_operation_list ::= assign_operation_lst 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = l; 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("assign_operation_list",4, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // operation ::= logical_operation 
            {
              Symbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		Boolean l = (Boolean)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = new Symbol(0, 0,0, l); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("operation",3, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // operation ::= numeric_operation 
            {
              Symbol RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		CalcItem n = (CalcItem)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = new Symbol(n.intValue(), 0,0, n.getValue()); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("operation",3, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // full_operation ::= operation ENDS 
            {
              Symbol RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).value;
		 RESULT = o;  
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("full_operation",2, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // main_operation ::= full_operation 
            {
              Symbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = f; 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("main_operation",1, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ax ::= ENDS 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol(0, 0,0, new Boolean(false)); 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("ax",0, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= ax EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).right;
		Symbol start_val = (Symbol)((java_cup.runtime.Symbol) CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)).value;
		RESULT = start_val;
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CalcParser$parser.done_parsing();
          return CUP$CalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // ax ::= assign_operation_list main_operation 
            {
              Symbol RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()).right;
		Symbol m = (Symbol)((java_cup.runtime.Symbol) CUP$CalcParser$stack.peek()).value;
		 RESULT = m; 
              CUP$CalcParser$result = parser.getSymbolFactory().newSymbol("ax",0, ((java_cup.runtime.Symbol)CUP$CalcParser$stack.elementAt(CUP$CalcParser$top-1)), ((java_cup.runtime.Symbol)CUP$CalcParser$stack.peek()), RESULT);
            }
          return CUP$CalcParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

