package com.jgg.sdp.parser.lang;

import java.util.*;

import java_cup.runtime.*;

import com.jgg.sdp.module.base.*;
import com.jgg.sdp.module.items.*;
import com.jgg.sdp.module.factorias.*;
import com.jgg.sdp.core.ctes.*;
import com.jgg.sdp.core.config.*;

import com.jgg.sdp.parser.base.*;
import com.jgg.sdp.parser.stmt.*;
import com.jgg.sdp.parser.symbol.*;
import com.jgg.sdp.parser.code.*;

parser code {:
   GenericScanner scanner = null;
   Module        module   = ModulesFactory.getDefaultModule();
   Summary       summary  = module.getSummary();
   Configuration cfg      = Configuration.getInstance();
   ParserInfo    info     = ParserInfo.getInstance();
             
   public void syntax_error(Symbol token) throws ParseException {
          info.syntax_error(token);
   }

   public void unrecovered_syntax_error(Symbol token) throws ParseException {
      info.unrecovered_syntax_error(token);
   }
   
   public void setScanner(GenericScanner scanner) {
       this.scanner = scanner;
   }
   
:}

action code {:
   Module          module   = null;
   Summary         summary  = null;
   Persistence     fichero  = null;
   ZCCCode         code     = null;
   Sections        sections = null;
   ParserInfo      info     = ParserInfo.getInstance();
      
   Variable  currVar       = null;
   StmtCobol lastStmt      = null;  // Ultima instruccion
   StmtCobol currStmt      = null;  // Instruccion en proceso
   Option    currOption    = null;  // Option en proceso
   boolean   hasEndProgram = false; // Hay STOPRUN o GOBACK?
    
   boolean master     = false;  // El fichero es el maestro?   
   int     numFillers = 0;
   
   public void initActionClass() {
      module = ModulesFactory.getMainModule();
      summary = module.getSummary();
      sections = module.getSections();
      code = new ZCCCode(module);
   }

   public String getSymbolName(Symbol s)    { return (String) s.value; }
   public int    getSymbolLine(Symbol s)    { return (int)    s.left;  }
   
   public void debug(String txt) { 
      System.err.println(txt); 
   }
   public void print(String txt) { 
      System.out.println(txt); 
   }

:}

init with {: action_obj.initActionClass();    :}
scan with {: if (scanner == null) return getScanner().next_token();
             return scanner.tokenCobolCode(); 
          :}

/****************************************************************************/
/****************************************************************************/
/*               LOS SIMBOLOS SON COMUNES                                   */
/****************************************************************************/
/****************************************************************************/

// terminal Symbol COPY     ;

terminal Symbol PROC_DIV ;

terminal Symbol ID        ;
terminal Symbol NUMERO    ;

//terminal Symbol HEX_VAL   ;
terminal Symbol PARRAFO   ;
terminal Symbol LITERAL   ;
// terminal Symbol LITCONCAT ;
terminal Symbol END_PGM   ;
terminal Symbol COMMA     ; 


terminal Symbol OP_POW       ;
terminal Symbol OP_MUL       ;
terminal Symbol OP_DIV       ;
terminal Symbol OP_SUB       ;
terminal Symbol OP_ADD       ;
terminal Symbol OP_COL       ;

terminal Symbol REL_GE  ;
terminal Symbol REL_LE  ;
terminal Symbol REL_GT  ;
terminal Symbol REL_LT  ;
terminal Symbol REL_EQ  ;

terminal Symbol DATA         ;
terminal Symbol SPACES       ;
terminal Symbol ZERO         ; 
terminal Symbol HIGHVAL      ;
terminal Symbol LOWVAL       ;
terminal Symbol QUOTE        ;
terminal Symbol ALPHABETIC   ;
terminal Symbol ALPHANUMERIC ;
terminal Symbol NUMERIC      ;
terminal Symbol KANJI        ;
terminal Symbol POSITIVE     ;
terminal Symbol NEGATIVE     ;
terminal Symbol NULL         ;
terminal Symbol DBCS         ;
terminal Symbol EGCS         ;
terminal Symbol NATIONAL     ;

terminal Symbol DUPLICATES ;

/* Verbos */
 
terminal Symbol ACCEPT     ;
terminal Symbol ADD        ;
terminal Symbol ALLOCATE   ;
terminal Symbol CALL       ;
terminal Symbol CANCEL     ;
terminal Symbol CLOSE      ;
terminal Symbol COMMIT     ;
terminal Symbol COMPUTE    ;
terminal Symbol CONTINUE   ;
terminal Symbol DELETE     ;
terminal Symbol DISPLAY    ;
terminal Symbol DIVIDE     ;     
terminal Symbol EVALUATE   ;
terminal Symbol EXITPGM    ;
terminal Symbol EXITP      ;
terminal Symbol EXIT       ;
terminal Symbol FREE       ;
terminal Symbol GOBACK     ;
terminal Symbol GOTO       ;
terminal Symbol IF         ;
terminal Symbol INITIALIZE ;
terminal Symbol INSPECT    ;
terminal Symbol MERGE      ;
terminal Symbol MOVE       ;
terminal Symbol MULTIPLY   ;
terminal Symbol NEXT       ;
terminal Symbol OPEN       ;
terminal Symbol PERFORM    ;
terminal Symbol READ       ;
terminal Symbol RELEASE    ;
terminal Symbol RETURN     ;
terminal Symbol REWRITE    ;
terminal Symbol ROLLBACK   ;
terminal Symbol SEARCH     ;
terminal Symbol SET        ;
terminal Symbol SORT       ;
terminal Symbol START      ;
terminal Symbol STOPRUN    ;
terminal Symbol STRING     ;
terminal Symbol SUBTRACT   ;
terminal Symbol TRANSFORM  ; 
terminal Symbol UNLOCK     ;
terminal Symbol UNSTRING   ;
terminal Symbol WRITE      ;

/* Palabras reservadas */

terminal Symbol AFTER      ;
terminal Symbol ALL        ;
terminal Symbol ALSO       ;
terminal Symbol AND        ;
terminal Symbol ASCENDING  ;
terminal Symbol ATEND      ;
terminal Symbol BEFORE     ;
terminal Symbol BY         ;
terminal Symbol CHARACTER  ;
// terminal Symbol CLASS      ;
terminal Symbol CONVERTING ;
terminal Symbol CORR       ;
terminal Symbol COUNT      ;
//terminal Symbol DEC_POINT  ;
terminal Symbol DEPENDING    ;
terminal Symbol DELIMITED  ;
terminal Symbol DELIMITER  ;
terminal Symbol DESCENDING ;
terminal Symbol ELSE       ;
terminal Symbol ENDEVAL    ;
terminal Symbol ENDIF      ;
terminal Symbol ENDPERFORM ;
terminal Symbol ENDP       ;
terminal Symbol ENDSEARCH  ;
terminal Symbol ENDVERB    ;
terminal Symbol EOP        ;
terminal Symbol EQUAL      ;
terminal Symbol EXCEPTION  ;
terminal Symbol EXTEND     ;
terminal Symbol FIRST      ;
terminal Symbol FOREVER    ;
terminal Symbol FOR        ;
terminal Symbol FROM       ;
terminal Symbol GIVING     ;
terminal Symbol GREATER    ;
terminal Symbol INPUT      ;
terminal Symbol INTO       ;
terminal Symbol INVALID    ;
terminal Symbol IN         ;
terminal Symbol IO         ;
terminal Symbol KEY        ;
terminal Symbol LEADING    ;
terminal Symbol LENGTH     ;
terminal Symbol LINE       ;
terminal Symbol LOCK       ;
terminal Symbol NOT        ;
terminal Symbol NO         ;
terminal Symbol OF         ;
terminal Symbol OR         ;
terminal Symbol OTHER      ;
terminal Symbol OUTPUT     ;
terminal Symbol OVERFLOW   ;
terminal Symbol PAGE       ;
terminal Symbol PARAGRAPH  ;
terminal Symbol POINTER    ;
terminal Symbol PROGRAM    ;
terminal Symbol REFERENCE  ;
terminal Symbol REPLACING  ;
terminal Symbol RETURNING  ;
terminal Symbol ROUNDED    ;
terminal Symbol SECTION    ;
terminal Symbol SIZE       ;
terminal Symbol TALLYING   ;
terminal Symbol TEST       ;
terminal Symbol THRU       ;
terminal Symbol TIMES      ;
terminal Symbol UNTIL      ;
terminal Symbol USING      ;
terminal Symbol VALUE      ;
terminal Symbol VARYING    ;
terminal Symbol WHEN       ;

/* Simbolos gramaticales y palabras comunes */

terminal Symbol LPAR   ;
terminal Symbol RPAR   ;
terminal Symbol TO     ;
terminal Symbol WITH   ;
terminal Symbol LESS   ;    


terminal Symbol SIZE_ERROR  ;

terminal Symbol FUNCTION ;
terminal Symbol INTRINSIC ;

terminal Symbol CICSCODE ;
terminal Symbol SQLCODE  ;
terminal Symbol ENDEXEC  ;

/* CICS  Caso especial DFHxxx*/

terminal Symbol DFHCICS ;

///////////////////////////////////////////////////////
// Division 
///////////////////////////////////////////////////////

non terminal procedure_division  ;
non terminal end_program         ;

non terminal        proc_div_header ; 
non terminal        bloque_procedure;

//////////////////////////////////////////////////////
// No terminales para comerse el resto de sentencias
/////////////////////////////////////////////////////

non terminal Tokens stmtAccept_detail ;

non terminal Statement add_verb  ;
non terminal Tokens add_options_opt  ;
non terminal Tokens add_options   ;
non terminal Tokens add_option   ;

non terminal Symbol compute_lvalue  ;
non terminal Symbol compute_rvalues ;
non terminal Symbol compute_rvalue  ;
non terminal Symbol compute_options_opt ;
non terminal Symbol compute_options     ;
non terminal Symbol compute_option      ;

non terminal StmtCobol stmtDivide        ;
non terminal StmtCobol divide_verb       ;
non terminal Symbol    divide_mode       ;
non terminal Option    divide_options_opt;
non terminal Option    divide_options    ;
non terminal Option    divide_option     ;

non terminal StmtCobol stmtInitialize     ;
non terminal StmtCobol initialize_verb    ;
non terminal           initialize_detail  ;
non terminal           initialize_rep_opt ;
non terminal           initialize_rep_lst ;
non terminal           initialize_rep     ;
non terminal           initialize_rep_val ;

non terminal Tokens stmtMultiply_detail  ;
non terminal Tokens stmtMultiply_by      ;
non terminal        multiply_options_opt ;
non terminal        multiply_options     ;
non terminal        multiply_option      ;
                   
non terminal StmtCobol stmtRead            ;                   
non terminal Tokens    stmtRead_detail     ;
non terminal Tokens    stmtRead_options    ;
non terminal Tokens    stmtRead_option     ;
non terminal Tokens    stmtRead_into       ;
non terminal Tokens    stmtRead_key        ;

non terminal StmtCobol stmtSearch         ;
non terminal StmtCobol search_verb        ;
non terminal Tokens    search_detail  ;
non terminal Tokens    search_options ;
non terminal Tokens    search_option  ;
non terminal Tokens    search_opt     ;
non terminal Tokens    search_varying ;

non terminal Tokens stmtSet_detail ;
non terminal Tokens stmtSet_resto  ;

non terminal StmtCobol stmtSort ;
non terminal stmtSort_detail ;
non terminal stmtSort_option ;
non terminal stmtSort_order  ;
non terminal stmtSort_duplicates  ;
non terminal stmtSort_using  ;
non terminal stmtSort_giving ;
non terminal stmtSort_procedure ;


non terminal StmtCobol stmtStart               ;
non terminal Tokens    stmtStart_key           ;

non terminal StmtCobol stmtString       ;
non terminal StmtCobol string_verb      ;
non terminal           string_from      ;
non terminal           string_from_item ; 
non terminal           string_rvalues   ;
non terminal           string_delimited       ;
non terminal           string_delimited_token ;
non terminal           string_into            ;
non terminal           string_pointer_opt     ;

non terminal StmtCobol stmtSubtract           ; 
non terminal Tokens    stmtSubtract_detail    ;
non terminal Tokens    stmtSubtract_options   ;
non terminal Tokens    stmtSubtract_option    ;

non terminal Tokens stmtUnstring_detail          ;
non terminal Tokens stmtUnstring_delimited_opt   ;
non terminal Tokens stmtUnstring_to              ;
non terminal Tokens stmtUnstring_targets         ;
non terminal Tokens stmtUnstring_target          ;  
non terminal Tokens stmtUnstring_delimited       ;
non terminal Tokens stmtUnstring_delimiteds      ;
non terminal Tokens stmtUnstring_delimited_token ;
non terminal Tokens stmtUnstring_delimiters_opt  ;
non terminal Tokens stmtUnstring_delimiters      ;
non terminal Tokens stmtUnstring_delimiter       ;
non terminal Tokens stmtUnstring_options_opt     ;
non terminal Tokens stmtUnstring_options         ;
non terminal Tokens stmtUnstring_option          ;

non terminal        stmtWrite_detail   ;
non terminal        stmtWrite_options  ;
non terminal        stmtWrite_option   ; 
non terminal        stmtWrite_from     ;
non terminal        stmtWrite_position ;
non terminal        stmtWrite_after    ;
non terminal        stmtWrite_eop      ;

non terminal Symbol option_and_or       ;
non terminal        option_position     ;
non terminal        option_order        ;

                   
non terminal Tokens eatClose   , eatCloseLst , eatCloseItem ;
non terminal Tokens eatWrite   , eatWriteLst , eatWriteItem ;

//////////////////////////////////////////////////////
// Generales
/////////////////////////////////////////////////////

non terminal StmtCobol cobolCode   ; 
non terminal           module      ;

/* Parrafos y sentencias */

non terminal lista_parrafos , bloque_parrafos  , bloque_parrafo ;
non terminal         bloque_inicial ; 
non terminal Integer bloque_sentences ;
non terminal Symbol  parrafo_name ;
non terminal Boolean parr_section;

non terminal Symbol exitType;

non terminal           lista_stmt   ;
non terminal StmtCobol stmt     ;
non terminal StmtCobol verbos   ;
non terminal StmtCobol noverbos ;

non terminal Tokens    resto_call      ;
non terminal Tokens    list_parms_opt  ;
non terminal Tokens    list_parms      ;
non terminal Tokens    proc_parms_list ;
non terminal Tokens    proc_parms      ;
non terminal Tokens    proc_parm       ;


non terminal StmtCobol stmtCommit     ;
non terminal StmtCobol stmtMerge      ;
non terminal StmtCobol stmtUnstring   ;
non terminal StmtCobol stmtClose      ;
non terminal StmtCobol stmtTransform  ;
non terminal StmtCobol stmtCompute    ;
non terminal StmtCobol stmtDelete     ;
non terminal StmtCobol stmtAllocate   ;
non terminal StmtCobol stmtDisplay    ;

non terminal StmtCobol stmtContinue    ;
non terminal StmtCobol stmtGoback      ;
non terminal StmtCobol stmtExit        ;
non terminal StmtCobol stmtExitP       ; 
non terminal StmtCobol stmtExitG       ;
non terminal StmtCobol stmtExitPgm     ;
non terminal StmtCobol exitTypes       ;
non terminal StmtCobol stmtEvaluate    ;
non terminal StmtCobol evaluate_verb   ;
non terminal StmtCobol evaluate_object ;
non terminal StmtCobol when_condition ;
non terminal StmtCobol when_item      ;

non terminal Symbol    when_other     ;

non terminal StmtCobol stmtPerform           ; 
non terminal StmtCobol perform_verb          ;
non terminal Option    perform_from      ;
non terminal Option    perform_options_opt   ;
non terminal Option    perform_options       ;
non terminal Option    perform_options_label_opt ;
non terminal Option    perform_options_label ;
non terminal Option    perform_option_times  ;
non terminal Option    perform_option_first  ;
non terminal Option    perform_option_second ;
non terminal           perform_label         ;
non terminal Option    perform_test          ;
non terminal Option    perform_until         ;
non terminal Option    perform_thru          ;
non terminal Option    perform_varying       ;
non terminal Option    perform_after         ;

                               
non terminal StmtCobol stmtFree     ;                               
non terminal StmtCobol stmtRelease  ;

non terminal StmtCobol stmtGoTo               ;
non terminal           stmtGoto_procs         ;
non terminal           stmtGoto_depending_opt ;
non terminal           stmtGoto_depending     ;
 
non terminal StmtCobol stmtRewrite      ;

non terminal StmtCobol stmtMove         ;
non terminal StmtCobol move_verb        ;

non terminal StmtCobol stmtMultiply   ;
non terminal StmtCobol stmtAccept     ;
non terminal StmtCobol stmtUnlock     ;
non terminal StmtCobol stmtNext       ;
non terminal StmtCobol stmtCancel     ;
non terminal StmtCobol stmtWrite      ;
non terminal StmtCobol stmtOpen       ;

non terminal           stmtAcceptOpt  ;

non terminal StmtCobol stmtInspect                ; 
non terminal           stmtInspect_detail         ;
non terminal           stmtInspect_token          ;

non terminal StmtCobol stmtCall               ;
non terminal           stmtCall_using_opt     ;
non terminal           stmtCall_using         ;
non terminal           stmtCall_returning_opt ;
non terminal           stmtCall_returning     ;
non terminal           stmtCall_parm_list     ;
non terminal           stmtCall_parm          ;
non terminal           stmtCall_parm_type     ;

non terminal Symbol    moduloCall ;


non terminal StmtCobol stmtEndEvaluate ;
non terminal StmtCobol stmtEndExec   ;
non terminal StmtCobol stmtEndIf     ;
non terminal StmtCobol stmtEndPerform ; 
non terminal StmtCobol stmtEndP      ;
non terminal StmtCobol stmtEndSearch ;

non terminal StmtCobol stmtExec      ;
non terminal StmtCobol stmtRollback  ;

non terminal StmtCobol stmtReturn ;             
non terminal StmtCobol stmtStop   ;             
non terminal StmtCobol stmtAdd    ;             
             
non terminal StmtCobol stmtSet    ;             

non terminal StmtCobol optionOverflow     ;

non terminal StmtCobol stmtAtEnd;
non terminal StmtCobol stmtInvalid;
non terminal StmtCobol stmtException;

non terminal StmtCobol stmtIf    ;
non terminal StmtCobol if_verb   ;
non terminal StmtCobol stmtElse  ;

non terminal StmtCobol stmtWhen  ;
non terminal StmtCobol when_verb ;
non terminal Tokens    when_thru ;

non terminal StmtCobol stmtEndVerb ;         

non terminal StmtCobol stmtDatos   , stmtDatos1   , stmtDatos2   ;
non terminal StmtCobol stmtIO      ;
non terminal StmtCobol stmtIO1     ;
non terminal StmtCobol stmtIO2     ;
non terminal StmtCobol stmtControl ;
non terminal StmtCobol stmtControl1 ;
non terminal StmtCobol  stmtControl2 ;
non terminal StmtCobol stmtFlujo   ;
non terminal StmtCobol stmtArit    ; 
non terminal StmtCobol stmtLang    ;

/** OPEN ***/

non terminal Tokens    stmtOpen_files ;
non terminal Tokens    stmtOpen_list ,  stmtOpen_group ;
non terminal StmtCobol stmtOpen_mode     ;

non terminal Tokens closeFile , closeLstFiles ;

non terminal SymbolExt expression         ;
non terminal           expression_arit    ;
non terminal           expr_colon         ;
non terminal           expr_colon_opt     ;
non terminal           expr_colon_value   ;
non terminal           expr_operand       ;
non terminal           expr_primary       ;

non terminal           logical_op         ;
non terminal           logical_oper       ;
non terminal           logical_not        ;
non terminal           logical_condition  ;
non terminal           logical_expression ;
non terminal           logical_class      ;
non terminal           logical_class_opt  ;
non terminal           logical_unary      ;
non terminal           logical_figurative ;
non terminal           logical_rel        ;
non terminal           logical_expr       ;
non terminal           logical_operand    ;

non terminal           operator_arit      ;

/***********************************************************/
/*    OTRAS SENTENCIAS                                     */
/***********************************************************/

non terminal Symbol        function               ;
non terminal               function_parms         ;
non terminal               function_parms_lst_opt ;
non terminal               function_parms_lst     ;
non terminal               function_parm          ;


non terminal SymbolExt     rvalue      ;
non terminal SymbolExt     figurative  ;
non terminal SymbolExt     constantes  ;
non terminal SymbolExt     constante   ;

non terminal SymbolExt     lvalue      ; 
non terminal SymbolExtList lvalue_list ; 
non terminal SymbolExtList rvalue_list ;

non terminal SymbolExt     variable               ;
non terminal SymbolExt     var_base               ;
non terminal SymbolExt     var_int                ;

non terminal SymbolExt     id                     ;
non terminal               literal                ;
non terminal               indices_opt            ;
non terminal               indices                ;
non terminal               indice                 ;
non terminal               indice_lst             ;
non terminal               indice_item            ;
non terminal SymbolExt     padres_opt             ;
// non terminal               padre_indicator        ;
non terminal SymbolExt     padres                 ;
non terminal SymbolExt     padre                  ;

non terminal Option rvalue_options_opt  ;
non terminal Option rvalue_options      ;
non terminal Option rvalue_option       ;
non terminal Option option_all          ;
non terminal Option option_corr         ; 
non terminal Option option_giving       ;
non terminal Option option_rounded      ;

non terminal Option option_size_error   ;

/***  WORK  ***/

non terminal Tokens token ;
non terminal Tokens tokens;
non terminal Tokens optTokens ;

non terminal Symbol opt_all   ;
non terminal Symbol opt_by    ;
non terminal Symbol opt_comma ;
non terminal Symbol opt_data  ;
non terminal Symbol opt_in    ;
non terminal Symbol opt_key   ;
non terminal Symbol opt_to    ;
non terminal Symbol opt_with  ;

precedence nonassoc LPAR, RPAR ;

/**********************************************************************/
/**********************************************************************/
/**********************************************************************/
/*                        INICIO PARSER                               */
/**********************************************************************/
/**********************************************************************/
/**********************************************************************/

cobolCode ::=  module {: code.EndOfFile(lastStmt, hasEndProgram);
                         RESULT = null;  
                      :}
          ; 

module ::= procedure_division      
           end_program                        
       ;

end_program  ::= END_PGM:s ID ENDP {: hasEndProgram = true; 
                                      StmtCobol stmt = new StmtCobol(s); 
                                      code.endProgram(stmt);
                                      lastStmt = stmt;
                                   :}
             |
             ;


/*********************************************************************/
/* Procedure division                                                */
/*********************************************************************/
                                             
procedure_division ::= proc_div_header  bloque_procedure
                   ;

proc_div_header    ::= PROC_DIV:s  resto_call:p {: code.beginCode(s); :}
                   ;

resto_call         ::=  proc_parms_list:p {: RESULT = p; :} 
                        ENDP:s          {: code.parrafoVirtual(s); :}
                   ;

proc_parms_list ::= proc_parms 
                |              
                ;
                 
proc_parms ::= proc_parm
           |   proc_parms proc_parm
           ;
              
proc_parm ::= USING list_parms_opt 
          |   RETURNING rvalue 
          ;

list_parms_opt ::= list_parms
               |
               ;
                                                
list_parms ::= ID:s               {: RESULT = new Tokens(s); :}
           |   list_parms:l ID:s  {: RESULT = l.add(s);      :} 
           ;
                                         
bloque_procedure   ::= bloque_inicial  lista_parrafos
                   ;

// Bloque sentences podria ser vacio
// Por eso no es necesario indicarlo en bloque_inicial                 

bloque_inicial  ::= bloque_sentences
                ;

lista_parrafos ::= bloque_parrafos
               |
               ;
               
bloque_parrafos ::= bloque_parrafo
                |   bloque_parrafos bloque_parrafo
                ;
                
bloque_parrafo   ::= parrafo_name  bloque_sentences
                 ;

bloque_sentences ::= lista_stmt  
                 |               
                 ;
                        
parrafo_name     ::= PARRAFO:p parr_section:b ENDP 
                     {: // if (b == true) code.notSupportedSection(p); 
                        RESULT = code.processParrafo(p, lastStmt); 
                     :}   
                 ;  
 
parr_section     ::= SECTION:s {: RESULT = true;  :}
                 |             {: RESULT = false; :}
                 ;                               
                 
lista_stmt ::= stmt:s             {: lastStmt = code.processStatement(currStmt, lastStmt); :} 
           |   lista_stmt stmt:s  {: lastStmt = code.processStatement(currStmt, lastStmt); :}
           ;

stmt     ::= verbos:s         {: RESULT = s; code.incStmt(); :}
         |   noverbos:s       {: RESULT = s; :}
         ;  

verbos   ::= stmtControl:s    {: RESULT = s; module.incStmtControl(); :}
         |   stmtFlujo:s      {: RESULT = s; module.incStmtFlujo();   :}
         |   stmtDatos:s      {: RESULT = s; module.incStmtDatos();   :}
         |   stmtArit:s       {: RESULT = s; module.incStmtArit();    :}
         |   stmtIO:s         {: RESULT = s; module.incStmtIO();      :}
         |   stmtLang:s       {: RESULT = s; module.incStmtLang();    :}       
         |   stmtExec:s       {: RESULT = s;                         :}
         ;

noverbos ::= stmtEndP:s        {: RESULT = code.checkFlujo( s, lastStmt);:}
         |   stmtEndIf:s       {: RESULT = code.endIf(s);              :}                       
         |   stmtEndPerform:s  {: RESULT = code.endPerform(s);        :}        
         |   stmtEndVerb:s     {: RESULT = s;                         :}
         |   stmtWhen:s        {: RESULT = code.processWhen(s);       :}
         |   stmtElse:s        {: RESULT = code.processElse(s);       :}         
         |   stmtAtEnd:s       {: RESULT = s;                         :}  
         |   stmtInvalid:s     {: RESULT = s;                         :}         
         |   stmtException:s   {: RESULT = s;                         :}         
         |   stmtEndExec:s     {: RESULT = s;                         :}
         |   stmtEndEvaluate:s {: RESULT = code.endEvaluate(s);       :}
         |   stmtEndSearch:s   {: RESULT = code.endSearch(s);         :}

         ;
  
/* Verbos que tienen tratamiento especial
 * Cuando se procesa el verbo, se inyecta codigo
 * En estos casos hay que inyectar el codigo y preparar el siguiente
 * En el bloque todavia no se ha contado la sentencia If
 */
          

/* Sentencias de control de programa */

stmtControl ::= stmtControl1:s optTokens:t {: RESULT = s;          :}
             |  stmtExit:s                 {: RESULT =  code.processExit(s);    :}    
             |  stmtControl2:s             {: hasEndProgram = true; RESULT = s; :}
             ;
            
stmtControl1 ::= stmtNext:s         {: RESULT = s; :}
             ;

stmtControl2 ::= stmtStop:s         {: hasEndProgram = true;
                                       RESULT = s; 
                                       code.trapEndModule(); 
                                   :}
             | stmtGoback:s       {:  hasEndProgram = true;
                                      code.trapEndModule();
                                      RESULT = s; 
                                   :}
             ;
             

/* Sentencias de control de flujo */

stmtFlujo ::= stmtPerform:s     {: RESULT = s; :}
          |   stmtCall:s        {: RESULT = s; :}
          |   stmtIf:s          {: RESULT = s; :}
          |   stmtEvaluate:s    {: RESULT = s; :}
          |   stmtGoTo:s        {: RESULT = s; :}
          |   stmtContinue:s    {: RESULT = s; :}
          |   stmtSearch:s      {: RESULT = s; :}          
          ;
             
/* Sentencias de manipulacion de datos */

stmtDatos ::= stmtDatos1:s  optTokens:t {: RESULT = s; :}
          |   stmtDatos2:s              {: RESULT = s; :}
          ;

stmtDatos1 ::= stmtTransform:s      {: RESULT = s; :}
           ;
             
stmtDatos2 ::= stmtMove:s           {: RESULT = s; :}
           |   stmtString:s         {: RESULT = s; :}
           |   stmtInspect:s        {: RESULT = s; :}
           |   stmtUnstring:s       {: RESULT = s; :}
           |   stmtInitialize:s     {: RESULT = s; :}
           |   stmtSet:s            {: RESULT = s; :}
           ;
            
/* Sentencias de entrada/salida */

stmtIO    ::= stmtIO1:s optTokens:t {: RESULT = s; :}
          |   stmtIO2:s             {: RESULT = s; :}
          ;
          
stmtIO1   ::= stmtCommit:s         {: RESULT = s; :}
          |   stmtUnlock:s         {: RESULT = s; :}
          |   stmtMerge:s          {: RESULT = s; :}
          |   stmtStart:s          {: RESULT = s; :}
          |   stmtRollback:s       {: RESULT = s; :}
          ;

stmtIO2 ::= stmtAccept:s         {: RESULT = s; :}
        |   stmtDisplay:s        {: RESULT = s; :}
        |   stmtOpen:s           {: RESULT = s; :}
        |   stmtClose:s          {: RESULT = s; :}
        |   stmtRead:s           {: RESULT = s; :}
        |   stmtRelease:s        {: RESULT = s; :}          
        |   stmtReturn:s         {: RESULT = s; :}
        |   stmtWrite:s          {: RESULT = s; :}
        |   stmtDelete:s         {: RESULT = s; :}
        |   stmtRewrite:s        {: RESULT = s; :}
        |   stmtSort:s           {: RESULT = s; :}        
        ;
                    
/* Sentencias de operaciones aritmeticas */
stmtArit ::= stmtMultiply:s    {: RESULT = s; :}
         |   stmtCompute:s     {: RESULT = s; :}
         |   stmtAdd:s         {: RESULT = s; :}
         |   stmtDivide:s      {: RESULT = s; :}
         |   stmtSubtract:s    {: RESULT = s; :}
         ;
            
/* Sentencias del lenguaje */

stmtLang    ::= stmtAllocate:s    {: RESULT = s; :}
            |   stmtCancel:s      {: RESULT = s; :}
            |   stmtFree:s        {: RESULT = s; :}
            ;

/* Verbos */
                                                   

stmtTransform   ::=  TRANSFORM:s  {: RESULT = new StmtCobol(s, code.getStmts()); :}     ;
stmtAllocate    ::=  ALLOCATE:s   {: RESULT = new StmtCobol(s, code.getStmts()); :}     ;
stmtContinue    ::=  CONTINUE:s   {: RESULT = new StmtCobol(s, code.getStmts()); :}     ;



stmtCommit ::=  COMMIT:s     {: RESULT = new StmtCobol(s, code.getStmts()); :}     ;

stmtGoback      ::=  GOBACK:s     {: RESULT = new StmtCobol(s, code.getStmts()); :}     ;
stmtUnlock      ::=  UNLOCK:s     {: RESULT = new StmtCobol(s, code.getStmts()); :}     ;
stmtMerge       ::=  MERGE:s      {: RESULT = new StmtCobol(s, code.getStmts()); :}     ;


stmtAccept ::=  ACCEPT:s lvalue stmtAccept_detail    {: RESULT = new StmtCobol(s, code.getStmts()); :}     ;
stmtAcceptOpt ::= ID
              |
              ;

moduloCall ::= variable:i  {: RESULT = i; :}
           |   LITERAL:l {: RESULT = l; :}
           ;
                
// EXIT PERFORM crea un conflicto. por eso se controla EXIT PERFORM
// en el analizador lexico

stmtExit        ::= exitTypes:s   {: RESULT = s; :}
                ;

exitTypes ::= stmtExitG:s {: RESULT = s; :} 
          |   stmtExitP:s {: RESULT = s; :}
          |   stmtExitPgm:s {: RESULT = s; :}
          ;  
                        
stmtExitG ::=  EXIT:s  exitType:t   {: StmtCobol stmt = new StmtCobol(s, code.getStmts());
                                       RESULT = stmt.addRValue(t); 
                                    :}    
          ;

stmtExitP ::=  EXITP:s  {: StmtCobol stmt = new StmtCobol(s, code.getStmts());
                           RESULT = stmt.addRValue(code.makeSymbol(ZCCSym.PERFORM, -1, -1, "PERFORM")); 
                        :}    
          ;

stmtExitPgm ::=  EXITPGM:s  {: StmtCobol stmt = new StmtCobol(s, code.getStmts());
                               RESULT = stmt.addRValue(s); 
                            :}
            ;                    

exitType  ::= PROGRAM:s   {: RESULT = s; :}
          |   PARAGRAPH:s {: RESULT = s; :}
          |   SECTION:s   {: RESULT = s; :}
          |               {: RESULT = code.makeSymbol(ZCCSym.PARAGRAPH, -1, -1, ""); :}
          ;
          
stmtFree     ::=  FREE:s       {: RESULT = new StmtCobol(s, code.getStmts()); :}     ;

stmtRollback ::=  ROLLBACK:s   {: RESULT = new StmtCobol(s, code.getStmts()); :}     ;
stmtNext     ::=  NEXT:s       {: RESULT = new StmtCobol(s, code.getStmts()); :}     ;

stmtReturn   ::=  RETURN:r  ID:i stmtRead_detail:j     
                  {: StmtCobol stmt = code.fileAccess(TRAP.ACC_READ, r, i);
                     RESULT = stmt; // .addTokens(j); 
                  :}
             ;
stmtExec ::= CICSCODE:s {: module.incStmtCics(); RESULT = new StmtCobol(s, code.getStmts()); :}     
         |   SQLCODE:s  {: module.incStmtSql();  RESULT = new StmtCobol(s, code.getStmts()); :}     
         ;

stmtEndExec ::= ENDEXEC:s {: RESULT = new StmtCobol(s, code.getStmts()); :}     
            ;
            
/*************************************************************************************/
/*************************************************************************************/
/***                     STATEMENT DETAILS                                         ***/ 
/*************************************************************************************/
/*************************************************************************************/

// ACCEPT

stmtAccept_detail ::= FROM rvalue stmtAcceptOpt
                  |
                  ;

// ADD

stmtAdd ::=  add_verb rvalue_options_opt rvalue_list TO lvalue_list add_options_opt {: RESULT = currStmt; :}     
        ;
             
add_verb ::= ADD:s  {: currStmt = new StmtCobol(s); :}
         ;
         
add_options_opt ::= add_options
                |
                ;
                                  
add_options ::= add_option
            |   add_options add_option
            ;
                
add_option ::= option_giving
           |   option_rounded
           |   option_corr
           ;

// CALL

stmtCall ::=  CALL:s moduloCall:i 
                     stmtCall_using_opt
                     stmtCall_returning_opt      {: RESULT = code.processCall(s, i); :}     
         ;

stmtCall_using_opt ::= stmtCall_using
                   |
                   ;
                     
stmtCall_using ::= USING stmtCall_parm_list
               ;

stmtCall_parm_list ::= stmtCall_parm
                   |   stmtCall_parm_list stmtCall_parm
                   ;
               
stmtCall_parm ::= rvalue
              |   BY stmtCall_parm_type
              ;
              
stmtCall_parm_type ::= VALUE
                   |   REFERENCE
                   ;

stmtCall_returning_opt ::= stmtCall_returning
                       |
                       ;
                       
stmtCall_returning ::= RETURNING lvalue
                   ;
                                                                                      
// CANCEL

stmtCancel ::= CANCEL:s rvalue  {: RESULT = new StmtCobol(s, code.getStmts()); :}     ;               

// COMPUTE 

stmtCompute  ::=  COMPUTE:s compute_lvalue REL_EQ compute_rvalues compute_options_opt
                   {: StmtCobol stmt = new StmtCobol(s, code.getStmts());
//                      stmt.addSymbol(i);
                      RESULT = stmt; 
                   :}     
              ;

compute_lvalue ::= lvalue:i rvalue_options_opt
               ;

compute_rvalues ::= compute_rvalue
                |   compute_rvalues compute_rvalue
                ;                   
                   
compute_rvalue ::= expression
               ;

compute_options_opt ::= compute_options
                    |
                    ;
                        
compute_options ::= compute_option
                |   compute_options compute_option
                ;

compute_option ::= option_size_error
                   ;
// DISPLAY

stmtDisplay ::= DISPLAY:s rvalue_list {: RESULT = new StmtCobol(s, code.getStmts()); :}     
            ;
                                                                                              
// DIVIDE

stmtDivide ::= divide_verb:s rvalue divide_mode divide_options_opt      {: RESULT = s; :}
           ;

divide_verb ::= DIVIDE:s {: RESULT = new StmtCobol(s, currStmt); :}
            ;

divide_mode ::= INTO lvalue_list
            |   BY   rvalue_list
            ;

divide_options_opt ::= divide_options
                   |
                   ;

divide_options ::= divide_option:o                
               |   divide_options divide_option:o 
               ;

divide_option ::= option_giving:o  {: currStmt.addOption(o); :}
              |   option_rounded:o {: currStmt.addOption(o); :}
              ;
                                                                      
// EVALUATE

stmtEvaluate ::=  evaluate_verb:s evaluate_object {: RESULT = code.processEvaluate(s); :}  
             ;

evaluate_verb ::= EVALUATE:s {: RESULT = new StmtCobol(s, currStmt);  :}
              ;
              
evaluate_object ::= logical_condition
                    ;

stmtWhen ::=  when_verb:s when_condition {: RESULT = s; :}
         ;

when_verb ::= WHEN:s {: RESULT = new StmtCobol(s, currStmt); :}
          ; 
          
when_condition ::= when_item
               |   when_other:o {: currStmt.addOption(new Option(o)); :}
               ;
                                                     
when_item ::= logical_condition:t when_thru
//        |   when_item ALSO logical_condition:t when_thru
                  /*
                    {: RESULT = new StmtCobol(s, currStmt);
                        // stmt.addTokens(t);   
                    :} 
                  */  
          ;

when_other ::= OTHER:o {: RESULT = o; :}
           ;
                    
when_thru ::= THRU logical_condition
          |
          ;
                  
// GO TO

stmtGoTo ::=  GOTO:s opt_to 
                     stmtGoto_procs 
                     stmtGoto_depending_opt   
                     {: RESULT = new StmtCobol(s, code.getStmts()); :} 
         ;

stmtGoto_procs ::= ID
               |   stmtGoto_procs ID
               ;

stmtGoto_depending_opt ::= stmtGoto_depending
                       |
                       ;
                       
stmtGoto_depending ::= DEPENDING rvalue
                   ;
                                                          
// IF

stmtIf ::= if_verb:s logical_condition {:  RESULT = code.processIf(s); :}
       ;

if_verb ::= IF:s {: RESULT = new StmtCobol(s, currStmt); :}
        ;
                       
// INITIALIZE

stmtInitialize  ::=  initialize_verb:s initialize_detail {: RESULT = s;  :}     
                ;

initialize_verb ::=  INITIALIZE:s {: RESULT = new StmtCobol(s, currStmt); :}
                ;
                               
initialize_detail ::= lvalue_list initialize_rep_opt
                  ;
                      
initialize_rep_opt ::= REPLACING:r {: currOption = new Option(r); :} initialize_rep_lst {: currStmt.addOption(currOption); :} 
                   |
                   ;

initialize_rep_lst ::= initialize_rep
                   |   initialize_rep_lst initialize_rep
                   ;

initialize_rep ::= figurative opt_data BY initialize_rep_val
               ;
               
initialize_rep_val ::= rvalue:v   {: currOption.addSymbol(v); :}
                   ;
                                                                                                          
// INSPECT

stmtInspect ::=  INSPECT:s rvalue:l stmtInspect_detail
                                {: RESULT = new StmtCobol(s); :}     
            ;

stmtInspect_detail ::= stmtInspect_token
                   |   stmtInspect_detail stmtInspect_token
                   ;

stmtInspect_token ::= ALL
                |     BY
                |     BEFORE
                |     AFTER
                |     LEADING
                |     FIRST
                |     CHARACTER
                |     TO
                |     TALLYING
                |     REPLACING
                |     CONVERTING
                |     rvalue
                ;
                   

// MOVE

stmtMove ::= move_verb:s rvalue_options_opt expression:r TO lvalue_list:l      
                   {: code.checkCall(l, r);
                      s.addRValue(r);
                      s.addLValue(l);
                      RESULT = s; 
                   :}     
              ;

move_verb ::= MOVE:s {: RESULT = new StmtCobol(s, currStmt); :}
          ;
           
// MULTIPLY

stmtMultiply ::=  MULTIPLY:s stmtMultiply_detail {: RESULT = new StmtCobol(s, code.getStmts()); :}
             ;
             
stmtMultiply_detail ::= stmtMultiply_by multiply_options_opt
                   ;
                   
stmtMultiply_by ::= rvalue BY rvalue
                ;

multiply_options_opt ::= multiply_options
                     |
                     ;
                     
multiply_options ::= multiply_option
                 |   multiply_options multiply_option
                 ;
                 
multiply_option ::= option_giving
                |   option_size_error
                ;
                
// OPEN

stmtOpen ::=  OPEN:o stmtOpen_list:l 
                   {: RESULT = code.fileAction(TRAP.ACC_OPEN, o, l); :} 
         ;

stmtOpen_list ::= stmtOpen_group:s                  {: RESULT = s;         :}
              |   stmtOpen_list:l stmtOpen_group:s  {: RESULT = l.add(s);  :}
              ;

stmtOpen_group  ::= stmtOpen_mode:o stmtOpen_files:l 
                 {: Persistence f;
                 /*JGG
                    for (Symbol s : l.getTokens()) {
                        f = module.getFile(getSymbolName(s));
                        f.setAccess(o.getId());
                    }
                    */
                    RESULT = l;
                 :}
              ; 

stmtOpen_mode ::= INPUT:s   {: StmtCobol stmt = new StmtCobol(s);
                               stmt.setId(Persistence.INPUT);
                               RESULT = stmt; 
                            :}
              |   OUTPUT:s  {: StmtCobol stmt = new StmtCobol(s);
                               stmt.setId(Persistence.OUTPUT);
                               RESULT = stmt;
                            :}
              |   IO:s      {: StmtCobol stmt = new StmtCobol(s);
                               stmt.setId(Persistence.IO);
                               RESULT = stmt;
                            :}
              |   EXTEND:s  {: StmtCobol stmt = new StmtCobol(s);
                               stmt.setId(Persistence.EXTEND);
                               RESULT = stmt;
                            :}
              ;      

stmtOpen_files ::= ID:s                    {: RESULT = new Tokens(s); :}
               |   stmtOpen_files:l ID:s   {: RESULT = l.add(s);      :}
               ;

                
// PERFORM
// Caso 1: PERFORM inline
// Caso 2: PERFORM PARRAFO X TIMES (Por eso from es recursivo
// Caso 3: PERFORM PARRAFO OPCIONES
// Caso 4: PERFORM PARRAFO OPCIONES X TIMES
// El caso TIMES NECESITA TRATAMIENTO ESPECIAL

stmtPerform ::=  perform_verb perform_from   {: RESULT = code.processPerform(currStmt, lastStmt); :} 
            ;

perform_verb ::= PERFORM:s  {: currStmt = new StmtCobol(s); :}
             ;

perform_from ::= perform_label perform_options_label_opt
             |   perform_options_opt
             ;

perform_label ::= variable:v {: currStmt.addOption(new Option(v)); :}
              ;

perform_options_opt ::= perform_options
                    |
                    ;

perform_options_label_opt ::= perform_options_label
                          |
                          ;

perform_options_label ::= perform_option_first:o                         {: currStmt.addOption(o); :}
                      |   perform_option_times:o                         {: currStmt.addOption(o); :}
                      |   perform_options_label perform_option_second:o  {: currStmt.addOption(o); :}
                      ;
                      
perform_option_times ::= variable:o {: RESULT = new Option(o); :}
                     |   NUMERO:o   {: RESULT = new Option(o); :}
                     ;
                                               
perform_options ::= perform_option_first:o                    {: currStmt.addOption(o); :}
                |   perform_options perform_option_second:o   {: currStmt.addOption(o); :}
                ;

perform_option_first ::= FOREVER:o           {: RESULT = new Option(o); :}
                     |   TIMES:o             {: currStmt.replaceOption(new Option(o)); :}
                     |   perform_until:o     {: RESULT = o; :} 
                     |   perform_thru:o      {: RESULT = o; :}
                     |   perform_varying:o   {: RESULT = o; :}
                     |   perform_after:o     {: RESULT = o; :}                         
                     |   perform_test:o      {: RESULT = o; :}
                     ;
                   
perform_option_second ::= perform_option_first:o  {: RESULT = o;                :}
                      |   var_int:v               {: RESULT = new Option(v); :}
                      ;

perform_thru ::= THRU:o id:i                   {: RESULT = new Option(o, i); :}
             ;
             
perform_until ::= UNTIL:o   logical_condition:t        {: RESULT = new Option(o); :}
              ;
              
perform_varying ::= VARYING:o var_int FROM var_int BY var_int
                ; 

perform_after ::= AFTER:o var_int FROM var_int BY var_int
                ; 
                                     
perform_test ::= TEST:o    BEFORE {: RESULT = new Option(o);    :}
             |   TEST:o    AFTER  {: RESULT = new Option(o);    :}
             ;

// READ

stmtRead     ::=  READ:r  ID:i stmtRead_detail:s     
                  {: StmtCobol stmt = code.fileAccess(TRAP.ACC_READ, r, i);
                     RESULT = stmt; 
                  :}
             ;

stmtRead_detail ::= stmtRead_options
                |
                ;
                
stmtRead_options ::= stmtRead_option
                 |   stmtRead_options stmtRead_option
                 ;

stmtRead_option ::= stmtRead_into
                |   stmtRead_key
                ;
                
stmtRead_into ::= INTO:i lvalue:d {: Tokens t = new Tokens(i); RESULT = t.add(d); :}
              ;
              
stmtRead_key ::= KEY rvalue
             ;              

// SEARCH

stmtSearch ::= search_verb:s opt_all search_detail {: RESULT = code.processSearch(s); :}
           ;

search_verb ::= SEARCH:s  {: RESULT = currStmt = new StmtCobol(s); :}
            ;
                       
search_detail ::= rvalue search_options 
              ;
                  
search_options ::= search_option
               |
               ;
                                     
search_option ::= search_opt
              |   search_option search_opt
              ;
                  
search_opt ::= search_varying
           ;
               
search_varying ::= VARYING rvalue
               ;
                   
// SET

stmtSet_detail ::= lvalue_list stmtSet_resto
               ;
               
stmtSet_resto ::= TO rvalue 
              |   BY rvalue
              ;
              
// SORT

stmtSort ::= SORT:s {: RESULT = new StmtCobol(s); :} ID stmtSort_detail
         ;
         
stmtSort_detail ::= stmtSort_option
                |   stmtSort_detail stmtSort_option
                ;

stmtSort_option ::= stmtSort_order
                |   stmtSort_duplicates
                |   stmtSort_using
                |   stmtSort_giving
                |   stmtSort_procedure                
                ;
                
stmtSort_order ::= option_order opt_key rvalue_list
               ;                       
               
stmtSort_duplicates ::= DUPLICATES 
                    ;
                    
stmtSort_using ::= USING rvalue_list 
               ;

stmtSort_giving ::= GIVING rvalue_list 
               ;

stmtSort_procedure ::= INPUT ID
                   |   OUTPUT ID
                   ;
                                                                                      
// START

stmtStart ::= START:s ID stmtStart_key    {: RESULT = new StmtCobol(s, code.getStmts()); :}     ;

stmtStart_key ::= KEY logical_oper rvalue
              |
              ;        

// STRING

stmtString ::=  string_verb:s string_from string_into   {: RESULT = s; :} 
           ; 

string_verb ::= STRING:s {: RESULT = new StmtCobol(s, currStmt); :}
            ;

string_from ::= string_from_item 
            |   string_from string_from_item 
            ; 

string_from_item ::= string_rvalues string_delimited
                 ;
                 
string_rvalues ::= rvalue
               |   string_rvalues rvalue
               ;
               
string_delimited ::= DELIMITED  opt_by string_delimited_token
                 ;
                                
string_delimited_token ::= rvalue
                       |   SIZE
                       ;

string_into ::= INTO lvalue string_pointer_opt
            ;
                
string_pointer_opt ::= opt_with POINTER lvalue
                   |
                   ;
                                        
                                                                
// SUBTRACT

stmtSubtract ::= SUBTRACT:s stmtSubtract_detail {: RESULT = new StmtCobol(s, code.getStmts()); :}     
             ;
             
stmtSubtract_detail ::= rvalue_list stmtSubtract_options
                    ;

stmtSubtract_options ::= stmtSubtract_option
                     |   stmtSubtract_options stmtSubtract_option
                     ;
                     
stmtSubtract_option ::= FROM rvalue_list 
                    |   option_giving
                    |   option_size_error
                    ;
// UNSTRING

stmtUnstring ::=  UNSTRING:s  stmtUnstring_detail {: RESULT = new StmtCobol(s, code.getStmts()); :}     
             ;

stmtUnstring_detail ::= rvalue stmtUnstring_delimited_opt stmtUnstring_to stmtUnstring_options_opt 
                    ;
                     
stmtUnstring_delimited_opt ::= stmtUnstring_delimited
                           |
                           ;
                                                 
stmtUnstring_delimited ::= DELIMITED opt_by opt_all stmtUnstring_delimiteds
                       ;
                    
stmtUnstring_delimiteds ::= stmtUnstring_delimited_token
                        |   stmtUnstring_delimiteds stmtUnstring_delimited_token
                        ;
                        
stmtUnstring_delimited_token ::= rvalue
                             |   OR
                             ;
                                                   
stmtUnstring_to ::= INTO stmtUnstring_targets 
                ;

stmtUnstring_targets ::= stmtUnstring_target
                     |   stmtUnstring_targets stmtUnstring_target
                     ;

stmtUnstring_target ::= lvalue stmtUnstring_delimiters_opt
                    ;
                     
stmtUnstring_delimiters_opt ::= stmtUnstring_delimiters
                           |
                           ;
                           
stmtUnstring_delimiters ::= stmtUnstring_delimiter
                        |   stmtUnstring_delimiters stmtUnstring_delimiter
                        ;
                        
stmtUnstring_delimiter ::= DELIMITER opt_in lvalue 
                       |   COUNT opt_in lvalue
                       ;

stmtUnstring_options_opt ::= stmtUnstring_options
                         |
                         ;
                         
stmtUnstring_options ::= stmtUnstring_option
                     |   stmtUnstring_options stmtUnstring_option
                     ;
                     
stmtUnstring_option ::= POINTER   lvalue
                    |   TALLYING  opt_in lvalue
                    |   optionOverflow
                    ; 
// WRITE

stmtWrite    ::=  WRITE:w ID:i stmtWrite_detail 
                  {: RESULT = code.fileAccess(TRAP.ACC_INSERT, w, i); :}       
             ;
stmtRewrite  ::=  REWRITE:r ID:i  stmtWrite_detail 
                  {: RESULT = code.fileAccess(TRAP.ACC_UPDATE, r, i); :}
             ;

stmtWrite_detail ::= stmtWrite_options
                 |
                 ;
                 
stmtWrite_options ::= stmtWrite_option
                  |   stmtWrite_options stmtWrite_option
                  ;

stmtWrite_option ::= stmtWrite_from
                 |   stmtWrite_position
                 |   stmtWrite_after
                 |   stmtWrite_eop
                 ;
                                                  
stmtWrite_from ::= FROM rvalue
               ;

stmtWrite_position ::= option_position rvalue
                   ;
                
stmtWrite_after ::= AFTER
                ;
                                
stmtWrite_eop ::= EOP:s {: code.setImperative(); 
                                   RESULT = new StmtCobol(s); 
                                :}                         
              ;
                     
stmtRelease  ::=  RELEASE:s  ID:i eatWrite:e  
                  {: StmtCobol stmt = new StmtCobol(s);
                     RESULT = stmt.addLValue(i);
                  :}     
             ;

stmtDelete   ::=  DELETE:d ID:i      
                 {: RESULT = code.fileAccess(TRAP.ACC_DELETE, d, i); :}
             ;

stmtStop     ::=  STOPRUN:s  optTokens  {: RESULT = new StmtCobol(s, code.getStmts()); :}     
             ;

stmtSet      ::=  SET:s stmtSet_detail       {: RESULT = new StmtCobol(s, code.getStmts()); :}     
             ;

stmtClose       ::=  CLOSE:c  closeLstFiles:l  
                    {: RESULT = code.fileAction(TRAP.ACC_CLOSE, c, l); :}
                ;

closeLstFiles   ::= closeFile:c                  {: RESULT = c;         :}
                |   closeLstFiles:l closeFile:c  {: RESULT = l.add(c);  :}
                ;

closeFile       ::= ID:s eatClose:e   {: Tokens t = new Tokens(s);
                                         RESULT = t.add(e); 
                                      :}
                ;


stmtAtEnd ::= ATEND:s     {: StmtCobol stmt = new StmtCobol(s);
                             RESULT = code.setAtEnd(stmt); 
                          :}
          ;

stmtInvalid       ::= INVALID:s opt_key    {: StmtCobol stmt = new StmtCobol(s);
                                              RESULT = code.setAtEnd(stmt); 
                                           :}
                ;

stmtException ::= EXCEPTION:s  {: RESULT = new StmtCobol(s); :}
              ;
                                                      
/**************************************************************/     
/* Opciones comunes                                           */
/**************************************************************/

rvalue_options_opt ::= rvalue_options
                   |
                   ;

rvalue_options ::= rvalue_option
               |   rvalue_options rvalue_option    
               ;
               
rvalue_options ::= option_all
               |   option_corr
               |   option_rounded
               ;
                              
option_all ::= ALL:o {: RESULT = new Option(o); :}
           ;

option_corr ::= CORR:o {: RESULT = new Option(o); :}
            ;

option_giving ::= GIVING:o lvalue_list {: RESULT = new Option(o); :}
              ;
             
option_rounded ::= ROUNDED:r  {: currStmt.addOption(new Option(r)); :}
               ;
               
optionOverflow  ::= OVERFLOW:i  {: code.setImperative(); 
                                   RESULT = new StmtCobol(i); 
                                :}
                ;
                
option_size_error ::= SIZE_ERROR:i {: code.setImperative(); 
                                   RESULT = new Option(i); 
                                :}
                  ;
                  
                       
option_position ::= BEFORE
                |   AFTER
                ;

option_and_or ::= AND:a    {: RESULT = a; code.incComplexity(); :}
              |   OR:o     {: RESULT = o; code.incComplexity(); :}
              |   ALSO:a   {: RESULT = a; code.incComplexity(); :}
              ;

option_order ::= ASCENDING
             |   DESCENDING
             ;

/**************************************************************/     
/* Otras palabras reservadas                                  */
/**************************************************************/

stmtEndP        ::= ENDP:s        {: RESULT = new StmtCobol(s); :} ;
stmtElse        ::= ELSE:s        {: RESULT = new StmtCobol(s); :} ;   
stmtEndIf       ::= ENDIF:s       {: RESULT = new StmtCobol(s); :} ;
stmtEndPerform  ::= ENDPERFORM:s  {: RESULT = new StmtCobol(s); :} ;
stmtEndEvaluate ::= ENDEVAL:s     {: RESULT = new StmtCobol(s); :} ;
stmtEndVerb     ::= ENDVERB:s     {: RESULT = new StmtCobol(s); :} ;
stmtEndSearch   ::= ENDSEARCH:s   {: RESULT = new StmtCobol(s); :} ;
                                       
///////////////////////////////////////////////////////
// No terminales para eliminar el resto de las sentencias
//////////////////////////////////////////////////////

eatClose ::= eatCloseLst:l {: RESULT = l;            :}
         |                 {: RESULT = new Tokens(); :}
         ;

eatCloseLst ::= eatCloseItem:i               {: RESULT = new Tokens(i); :}
            |   eatCloseLst:l eatCloseItem:i {: RESULT = l.add(i);      :}
            ;

eatCloseItem ::= WITH:s {: RESULT = new Tokens(s); :}
             |   NO:s   {: RESULT = new Tokens(s); :}
             |   FOR:s  {: RESULT = new Tokens(s); :}
             ;

    
eatWrite ::= eatWriteLst:l {: RESULT = l;            :}
         |                 {: RESULT = new Tokens(); :}
         ;

eatWriteLst ::= eatWriteItem:e               {: RESULT = new Tokens(e); :}
            |   eatWriteLst:x eatWriteItem:i {: RESULT = x.add(i);      :}
            ;

eatWriteItem ::= token:s {: RESULT = new Tokens(s); :} 
             |   WITH:s  {: RESULT = new Tokens(s); :}
             |   LOCK:s  {: RESULT = new Tokens(s); :}
             |   NO:s    {: RESULT = new Tokens(s); :}
             |   LINE:s  {: RESULT = new Tokens(s); :}
             |   PAGE:s  {: RESULT = new Tokens(s); :}
             |   AFTER:s  {: RESULT = new Tokens(s); :}
             ;

/*****************************************************************/
/*****************************************************************/
/***              EXPRESION ARITMETICA                         ***/
/*****************************************************************/
/*****************************************************************/

expression ::= expression_arit
           ;
            
expression_arit ::= expr_operand
                |   expression_arit operator_arit expr_operand
                ;

expr_colon ::= expression expr_colon_opt
           ;
           
expr_colon_opt ::= OP_COL expr_colon_value
               |
               ;

expr_colon_value ::= expr_primary
                 |
                 ;
                                           
expr_operand ::= expr_primary
             |   LPAR expr_colon RPAR
             ;

expr_primary ::= rvalue
             ;

                                        
/*****************************************************************/
/*****************************************************************/
/***              EXPRESION LOGICA                             ***/
/*****************************************************************/
/*****************************************************************/

logical_condition ::= logical_expression                
                 |    logical_condition option_and_or logical_expression
                 ;

logical_expression ::= logical_class
                   |   logical_expression logical_oper logical_class
                   |   logical_oper logical_class
                   ;

logical_class ::= logical_unary logical_class_opt
              ;

logical_class_opt ::= figurative
                  |
                  ;
                                 
logical_unary ::= logical_expr
              |   figurative
              |   LPAR logical_condition RPAR
              ;                   

logical_expr ::= logical_operand
             |   logical_expr operator_arit logical_operand
             ;

logical_operand ::= expr_primary
            ;
                        
logical_oper ::= logical_not
             ;
             
logical_not ::= NOT logical_op
            |   logical_op
            ;
             
logical_op ::= REL_EQ
           |   REL_GT
           |   REL_GE
           |   REL_LT
           |   REL_LE
           |   logical_rel
           ;

logical_rel ::= logical_figurative 
            |   logical_rel OR logical_figurative
            ;
            
logical_figurative ::= EQUAL opt_to
                   |   GREATER
                   |   LESS 
                   ;                                          

///////////////////////////////////////////////////////
// WORK
//////////////////////////////////////////////////////

optTokens ::= tokens:t {: RESULT = t;               :}
          |            {: RESULT = new Tokens();    :}
          ;
           
tokens ::= token:t          {: RESULT = t;        :}
       |   tokens:l token:t {: RESULT = l.add(t); :}
       ;
 
token ::= ID:s                {: RESULT = new Tokens(s); :}
      |   LITERAL:s           {: RESULT = new Tokens(s); :}
      |   NUMERO:s            {: RESULT = new Tokens(s); :} 
      |   LPAR tokens:t RPAR  {: RESULT = new Tokens(t); :}
      |   figurative:f        {: RESULT = new Tokens(f); :}
//      |   FILLER:f            {: RESULT = new Tokens(f); :}
      ;

figurative ::= QUOTE:f        {: RESULT = new SymbolExt(f); :}
           |   POSITIVE:f     {: RESULT = new SymbolExt(f); :}
           |   NEGATIVE:f     {: RESULT = new SymbolExt(f); :}
           |   ALPHABETIC:f   {: RESULT = new SymbolExt(f); :}
           |   ALPHANUMERIC:f {: RESULT = new SymbolExt(f); :}           
           |   NUMERIC:f      {: RESULT = new SymbolExt(f); :}           
           |   KANJI:f        {: RESULT = new SymbolExt(f); :}
           |   DBCS:f         {: RESULT = new SymbolExt(f); :}           
           |   EGCS:f         {: RESULT = new SymbolExt(f); :}
           |   NATIONAL:f     {: RESULT = new SymbolExt(f); :}              
           |   NULL:f         {: RESULT = new SymbolExt(f); :}
           ;

function ::= FUNCTION:f INTRINSIC:i function_parms {: RESULT = f; :} 
         |   LENGTH:l OF rvalue {: RESULT = l; :} 
         ;

function_parms ::= LPAR function_parms_lst_opt RPAR
               ;

function_parms_lst_opt ::= function_parms_lst
                       |
                       ;
                               
function_parms_lst ::= function_parm
                   |   function_parms_lst COMMA function_parm
                   ;
                   
function_parm ::= expr_colon
              |   literal
              ;

operator_arit ::= OP_ADD
              |   OP_SUB
              |   OP_MUL
              |   OP_DIV
              |   OP_POW
              ;

/*****************************************************************/
/*****************************************************************/
/*** IDENTIFICADORES  LVALUES   RVALUES                        ***/
/*****************************************************************/
/*****************************************************************/

lvalue ::= variable:i  {: RESULT = i; code.setVarWrite(i); :}  
       ;
       
lvalue_list ::= lvalue:i                {: RESULT = new SymbolExtList(i); :}
            |   lvalue_list:l opt_comma lvalue:i  {: RESULT = l.add(i);       :}
            ;
                   
rvalue_list ::= rvalue 
            |   rvalue_list rvalue
            ;

rvalue ::= variable:i         {: RESULT = i;  code.setVarRead(i); :}
       |   constantes:c  {: RESULT = c; :}
       |   function:f    {: RESULT = new SymbolExt(f);    :}
       ;

variable ::= var_base:i  padres_opt {: RESULT = i;    :}
         ;

var_base ::= id:i indices_opt {: RESULT = i; :}
        ;

var_int ::= rvalue
        ;
             
id ::= ID:i  {: RESULT = new SymbolExt(i); :} 
   ;


indices_opt ::= indices
            |
            ;
            
indices ::= indice
        |   indices indice
        ;
        
indice ::= LPAR indice_lst RPAR
       ;

indice_lst ::= indice_item
           |   indice_lst COMMA indice_item
           ;

indice_item ::= expr_colon 
            ;
                                 
padres_opt ::= padres
           |
           ;
                                                   
padres ::= padre
       |   padres padre
       ;

padre ::= IN var_base
      |   OF var_base
      ;
             
constantes ::= constante:c   {: RESULT = c; :}
//           |   figurative:f  {: f.setId(ZCZSym.FIGURATIVE); RESULT = f; :}
           ;
            
constante  ::= LITERAL:l     {: RESULT = new SymbolExt(l); :}
           |   NUMERO:n      {: RESULT = new SymbolExt(n); :}
           |   DFHCICS:d     {: RESULT = new SymbolExt(d); :}
           |   SPACES:f      {: RESULT = new SymbolExt(f); :}
           |   ZERO:f        {: RESULT = new SymbolExt(f); :}
           |   HIGHVAL:f     {: RESULT = new SymbolExt(f); :}
           |   LOWVAL:f      {: RESULT = new SymbolExt(f); :}           
           ;


/*****************************************************************/
/***  TERMINOS OPCIONALES                                      ***/
/*****************************************************************/

opt_all ::= ALL:s {: RESULT = s; :}
        |
        ;
                                                      
opt_by ::= BY:s {: RESULT = s; :}
       |
       ;

opt_comma ::= COMMA:s  {: RESULT = s; :} //JGG Avisar del uso de coma
          |
          ;

opt_data ::= DATA:s  {: RESULT = s; :} 
         |
         ;

opt_in ::= IN:s {: RESULT = s; :}
       |
       ;

opt_to ::= TO:s {: RESULT = s; :}
       |
       ;
                                                                                   
opt_key ::= KEY:s {: RESULT = s; :}
        |
        ;

opt_with ::= WITH:s {: RESULT = s; :}
         |
         ;
          