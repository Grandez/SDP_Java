package com.jgg.sdp.parser.lang;

import java_cup.runtime.*;

import com.jgg.sdp.common.ctes.*;
import com.jgg.sdp.common.config.*;

import com.jgg.sdp.module.base.*;
import com.jgg.sdp.module.items.*;
import com.jgg.sdp.module.factorias.*;

import com.jgg.sdp.parser.base.*;
import com.jgg.sdp.parser.code.*;
import com.jgg.sdp.parser.stmt.*;

import com.jgg.sdp.blocks.stmt.*;

import com.jgg.sdp.parser.symbols.*;
import com.jgg.sdp.rules.components.RulesData;

parser code {:
   GenericScanner scanner = null;
   Module module     = ModulesFactory.getDefaultModule();
//   Summary summary   = module.getSummary();
   Configuration cfg = ConfigurationBase.getInstance();
   ParserInfo    info     = ParserInfo.getInstance();
             
   public void syntax_error(SDPSymbol token) throws ParseException {
          info.syntax_error(token);
   }

   public void unrecovered_syntax_error(SDPSymbol token) throws ParseException {
      info.unrecovered_syntax_error(token);
   }
   
:}

action code {:
   Module          module   = null;
//   Summary         summary  = null;
   Persistence     fichero  = null;
   ZCDCode         code     = null;
   BlockCode       currBlock = null; 
   RulesData       rules     = new RulesData();

   SDPSymbolFactory sf = new SDPSymbolFactory();
 
   ParserInfo      info     = ParserInfo.getInstance();
      
   Variable  currVar    = null;
   StmtGral  currStmt   = null;  // Instruccion en proceso
   Option    currOption = null;  // Opcion en proceso

   boolean   hasEndProgram = false; // Hay STOPRUN o GOBACK?
    
   boolean master     = false;  // El fichero es el maestro?   
   int     numFillers = 0;
          
   public void initActionClass() {
      module  = info.getModule();
      code = new ZCDCode(module);
   }

   public String getSymbolName(SDPSymbol s)    { return (String) s.value; }
   public int    getSymbolLine(SDPSymbol s)    { return (int)    s.line;  }
   
   public void debug(String txt) { System.err.println(txt); }
   public void print(String txt) { 
      System.out.println(txt); 
   }

   void notSupportedException(int idMsg) {
        throw new NotSupportedException(idMsg);
   }

:}

init with {: action_obj.initActionClass();    :}
/*
scan with {: if (scanner == null) return getScanner().next_token();
             return scanner.tokenCobolData(); 
          :}
*/
terminal SDPSymbol DIV_ID   ;
terminal SDPSymbol DIV_ENV  ;
terminal SDPSymbol DIV_DATA ;

terminal SDPSymbol ID        ;
terminal SDPSymbol IDTOKEN   ;
terminal SDPSymbol PGMNAME   ;
terminal SDPSymbol NUMERO    ;
terminal SDPSymbol LEVELXX   ;
terminal SDPSymbol LEVEL66   ;
terminal SDPSymbol LEVEL77   ;
terminal SDPSymbol LEVEL88   ;
terminal SDPSymbol HEX_VAL   ;
terminal SDPSymbol LITERAL   ;

terminal SDPSymbol FILE_SECTION    ;
terminal SDPSymbol WORKING_SECTION ;
terminal SDPSymbol LOCAL_SECTION   ;
terminal SDPSymbol LINKAGE_SECTION ;
terminal SDPSymbol FILE_CONTROL    ;
terminal SDPSymbol CONF_SECTION    ;
terminal SDPSymbol IO_SECTION      ;
terminal SDPSymbol SPECIAL_NAMES   ;
terminal SDPSymbol SOURCE_COMPUTER ;
terminal SDPSymbol OBJECT_COMPUTER ;

/* Verbos de IDENTIFICATION */

terminal SDPSymbol PGMID        ;
terminal SDPSymbol CLASSID      ;
terminal SDPSymbol FACTORYID    ;
terminal SDPSymbol OBJECTID     ;
terminal SDPSymbol METHODID     ;
terminal SDPSymbol RECURSIVE    ;
terminal SDPSymbol COMMON       ;
terminal SDPSymbol INITIAL      ;
terminal SDPSymbol DEBUGGING    ;

terminal SDPSymbol AUTHOR       ;
terminal SDPSymbol DATEW        ;
terminal SDPSymbol DATEC        ;
terminal SDPSymbol INSTALLATION ;
terminal SDPSymbol SECURITY     ;
terminal SDPSymbol MEMORY       ;
terminal SDPSymbol WORDS        ;
terminal SDPSymbol CHARACTERS   ;
terminal SDPSymbol MODULES      ;
terminal SDPSymbol SEQUENCE     ;
terminal SDPSymbol SEGMENT      ;
terminal SDPSymbol MODE         ;
terminal SDPSymbol IN           ;
terminal SDPSymbol IS           ;
terminal SDPSymbol COMMA        ;
terminal SDPSymbol XMLSCHEMA    ;
terminal SDPSymbol ON           ;
terminal SDPSymbol OFF          ;

/* Verbos de ENVIRONMENT */

terminal SDPSymbol ACCESS       ;
terminal SDPSymbol AREAS        ;
terminal SDPSymbol ALPHABET     ;
terminal SDPSymbol ALTERNATE    ;
terminal SDPSymbol ASSIGN       ;
terminal SDPSymbol BLOCK        ;
terminal SDPSymbol CURRENCY     ;
terminal SDPSymbol DATA         ;
terminal SDPSymbol DECIMALPOINT ;
terminal SDPSymbol DELIMITER    ;
terminal SDPSymbol DUPLICATES   ;
terminal SDPSymbol DYNAMIC      ;
terminal SDPSymbol EBCDIC       ;
terminal SDPSymbol FD           ;
terminal SDPSymbol FILE         ;
terminal SDPSymbol INDEXED      ;
terminal SDPSymbol INDEX        ;
terminal SDPSymbol KEY          ;
terminal SDPSymbol LABEL        ;
terminal SDPSymbol LINAGE       ;
terminal SDPSymbol LINE         ;
terminal SDPSymbol OPTIONAL     ;
terminal SDPSymbol ORGANIZATION ;
terminal SDPSymbol PADDING      ;
terminal SDPSymbol PASSWORD     ;
terminal SDPSymbol NATIVE       ;
terminal SDPSymbol RANDOM       ;
terminal SDPSymbol RECORDING    ;
terminal SDPSymbol RECORDS      ;
terminal SDPSymbol RECORD       ;
terminal SDPSymbol RELATIVE     ;
terminal SDPSymbol REPOSITORY   ;
terminal SDPSymbol RESERVE      ;
terminal SDPSymbol SD           ;
terminal SDPSymbol SEQUENTIAL   ;
terminal SDPSymbol SELECT       ;
terminal SDPSymbol STATUS       ;
terminal SDPSymbol STANDARD     ;
terminal SDPSymbol STANDARD1    ;
terminal SDPSymbol SIZE         ;
terminal SDPSymbol SIGN         ;
terminal SDPSymbol SYMBOLIC     ;

/* Working y datos */

terminal SDPSymbol BINARY       ;
terminal SDPSymbol BLOB         ;
terminal SDPSymbol BLOB_LOCATOR ;
terminal SDPSymbol COMP1        ;
terminal SDPSymbol COMP2        ;
terminal SDPSymbol COMP3        ;
terminal SDPSymbol COMP4        ;
terminal SDPSymbol COMP5        ;
terminal SDPSymbol COMP6        ;
terminal SDPSymbol DFHCICS      ;
terminal SDPSymbol FILLER       ;
terminal SDPSymbol REDEFINES    ;
terminal SDPSymbol RENAMES      ;
terminal SDPSymbol PACKED       ;
terminal SDPSymbol PICTURE      ;
terminal SDPSymbol VALUE        ;
terminal SDPSymbol OCCURS       ;
terminal SDPSymbol DEPENDING    ;
terminal SDPSymbol ORDER        ;

terminal SDPSymbol POINTER       ;
terminal SDPSymbol PIC_ALPHANUM  ;
terminal SDPSymbol PIC_ALPHA     ;
terminal SDPSymbol PIC_DEC       ;
terminal SDPSymbol PIC_DEC_EMPTY ;
terminal SDPSymbol PIC_NUM       ;
terminal SDPSymbol PIC_FMT       ;
terminal SDPSymbol PIC_LEN       ;
terminal SDPSymbol PIC_V         ;

terminal SDPSymbol ROWID        ;
terminal SDPSymbol SYMBOL       ;

terminal SDPSymbol SPACES  ;
terminal SDPSymbol USAGE   ;
terminal SDPSymbol ZERO    ; 
terminal SDPSymbol HIGHVAL ;
terminal SDPSymbol LOWVAL  ;
terminal SDPSymbol QUOTE   ;
terminal SDPSymbol NULL    ;

/* Palabras reservadas */

terminal SDPSymbol CLASS     ;
terminal SDPSymbol DISPLAY   ;
terminal SDPSymbol ENDP      ;
terminal SDPSymbol THRU      ;
terminal SDPSymbol WITH      ;

/* Simbolos gramaticales y palabras comunes */

terminal SDPSymbol LPAR   ;
terminal SDPSymbol RPAR   ;
terminal SDPSymbol TO     ;

terminal SDPSymbol SQLDATA  ;
terminal SDPSymbol ENDSQL  ;

/* SDP */

terminal SDPSymbol SDPMASTER ;  

/****************************************************************************/
/****************************************************************************/
/*               LOS SIMBOLOS SON COMUNES                                   */
/****************************************************************************/
/****************************************************************************/

///////////////////////////////////////////////////////
// Division 
///////////////////////////////////////////////////////

non terminal environment_division;
non terminal data_division       ;

//////////////////////////////////////////////////////
// Identificacion division
/////////////////////////////////////////////////////

non terminal           identification_division ;
non terminal           ident_header        ;
non terminal           ident_options_opt       ;
non terminal           ident_options           ;
non terminal Option    ident_option            ;
non terminal Option    ident_opt               ;
non terminal SDPSymbol ident_opt_word          ;
non terminal SDPSymbol ident_endp              ;
non terminal           pgmid_endp              ;

non terminal           ident_type              ;
non terminal           ident_type_program      ;
non terminal           ident_type_class        ;
non terminal           ident_type_factory      ;
non terminal           ident_type_object       ;
non terminal           ident_type_method       ;

non terminal Option     programId          ;
non terminal SDPSymbol  programId_verb     ;
non terminal SDPSymbol  programId_name     ;
non terminal SDPSymbol  programId_type_opt ;
non terminal SDPSymbol  programId_type     ;

non terminal SDPSymbol   ident_opt_entry  ;
non terminal SDPSymbol   ident_entry      ;
non terminal SDPSymbol   ident_entry_line ;

non terminal env_div_header ;
non terminal data_div_header;
non terminal env_div_sections     ;

/* CONFIGURATION SECTION */

non terminal            configuration_section_opt  ;
non terminal  Option    configuration_section      ;
non terminal  Option    conf_sect_header           ;
non terminal            opt_configuration_data     ;
non terminal            configuration_data         ;
non terminal  Option    configuration_item         ;
non terminal  Option    configuration_source       ;
non terminal  Option    configuration_object       ;
non terminal  Option    configuration_names        ;
non terminal  Option    configuration_repo         ;
non terminal  Option    opt_conf_sect_names        ;
non terminal  Option    conf_sect_names            ;
non terminal  Option    conf_sect_names_item       ;
non terminal  Option    special_names_id           ;
non terminal  Option    special_names_alphabet     ;
non terminal  Option    special_names_symbolic     ;
non terminal  Option    special_names_class        ;
non terminal  Option    special_names_currency     ;
non terminal  Option    special_names_decimal      ;
non terminal  Option    special_names_xml          ;
non terminal  SDPSymbol alphabet_name              ;
non terminal  SDPSymbol opt_conf_sect_src          ;
non terminal  SDPSymbol opt_conf_sect_obj          ;
non terminal  SDPSymbol opt_conf_sect_mem          ;
non terminal  SDPSymbol opt_conf_sect_entry        ;
non terminal  SDPSymbol conf_sect_mem_type         ;
non terminal  SDPSymbol conf_sect_entry            ;
non terminal  SDPSymbol conf_sect_entry_item       ;
non terminal  Option    opt_conf_sect_repo         ;
non terminal  Option    conf_sect_repo             ;
non terminal  Option    conf_sect_repo_item        ;

// non terminal         special_names_classes      ;
// non terminal         special_names_class_name   ;
// non terminal         opt_class_thru             ;

non terminal  Option    io_section_opt             ;
non terminal  Option    io_section                 ;

non terminal  Option    io_sect_header             ;
non terminal io_sect_bloques       ;
non terminal file_control_decl     ;
non terminal file_control_header   ;


non terminal bloque_data    ;

non terminal section_file        ;
non terminal sect_file_header    ;
non terminal file_data           ; 
non terminal section_working     ;
non terminal sect_working_header ;
non terminal working_data        ;
non terminal section_local       ;
non terminal sect_local_header   ;
non terminal local_data          ;
non terminal section_linkage     ;
non terminal sect_linkage_header ;
non terminal linkage_data ;

//////////////////////////////////////////////////////
// Generales
/////////////////////////////////////////////////////

non terminal StmtCobol   cobolData   ; 
non terminal module      ;

non terminal SDPSymbol endp_opt ;

/***********************************************************/
/*                   VARIABLES                             */
/***********************************************************/

non terminal SDPSymbol var_value            ;
non terminal SDPSymbol var_occurs           ;
non terminal SDPSymbol var_occurs_from      ;
non terminal SDPSymbol var_occurs_to        ;
non terminal SDPSymbol var_occurs_bound     ;
non terminal SDPSymbol var_occurs_depending ;
non terminal SDPSymbol var_indexed          ;
non terminal SDPSymbol var_indexes          ;
non terminal SDPSymbol var_index            ;
non terminal SDPSymbol var_type             ;
non terminal SDPSymbol var_order            ;
non terminal SDPSymbol var_name             ;
non terminal SDPSymbol var_filler           ; 
non terminal SDPSymbol init_val             ;

non terminal Variable variables     ;
non terminal Variable variable      ;
non terminal Variable var_xx        ;
non terminal Variable var_66        ;
non terminal Variable var_77        ;
non terminal Variable var_88        ;
non terminal Variable var_xx_head   ;
non terminal Variable var_66_head   ;
non terminal Variable var_77_head   ;
non terminal Variable var_88_head   ;

non terminal Var      var_data      ;
non terminal Var      var_data_def  ;
non terminal          var_usage     ;
non terminal SDPSymbol   var_attr      ;
non terminal SDPSymbol   var_redefines ;
non terminal SDPSymbol   var_renames   ;
non terminal SDPSymbol   var_renames_opt ;
non terminal SDPSymbol   var_picture   ;
non terminal SDPSymbol   pic_types     ;
non terminal SDPSymbol   pic_type      ;
non terminal SDPSymbol   pic_size_opt  ;
non terminal SDPSymbol   pic_size      ;
non terminal SDPSymbol   pic_len       ;
non terminal SDPSymbol   pic_dec_opt   ;
non terminal SDPSymbol   pic_dec       ;
non terminal SDPSymbol   compn ;


/***********************************************************/
/*                    SELECT FICHEROS                      */
/***********************************************************/

non terminal select_files     ;
non terminal select_file      ;
non terminal select_file_mark ;
non terminal select_file_list ;

non terminal file_select        ;
non terminal file_attrs         ;
non terminal file_attr_first    ;
non terminal file_attr_type     ;
non terminal file_attr_reserve  ;
non terminal file_attr_rest_opt ;
non terminal file_attr_rest     ;
non terminal Option      file_attr_item    ;

non terminal Option      file_attr_assign       ;
non terminal Option      file_attr_assign_dd    ;
non terminal Option      file_attr_fs           ;
non terminal Option      file_attr_padding      ;
non terminal SDPSymbol   file_attr_padding_type ;
non terminal Option      file_attr_password     ;
non terminal Option      file_attr_record       ;
non terminal SDPSymbol   file_attr_record_type  ;
non terminal Option      file_attr_key          ;
non terminal Option      file_attr_alternate    ;
non terminal Option      file_attr_access       ;
non terminal SDPSymbol   file_attr_access_type  ;
non terminal SDPSymbol   file_attr_access_rel   ;

non terminal             fd                ;
non terminal             fd_list           ;
non terminal             fd_fields         ;
non terminal             fd_attr_label     ;
non terminal Option      fd_attrs_opt ;
non terminal Option      fd_attrs     ;
non terminal Option      fd_attr      ;
non terminal Option      fd_attr_names     ;
non terminal SDPSymbol   fd_attr_name      ;
non terminal SDPSymbol   fd_attr_record    ;
non terminal SDPSymbol   fd_attr_record_detail ;
non terminal SDPSymbol   fd_attr_record_size   ;
non terminal SDPSymbol   fd_attr_records   ;
non terminal SDPSymbol   fd_attr_record_to ;

non terminal Option fd_attr_mode      ;
non terminal SDPSymbol fd_attr_mode_type ;

non terminal fd_attr_block     ;
non terminal fd_attr_block_records ;
non terminal fd_attr_number    ;
non terminal fd_attr_linage    ;
non terminal fd_attr_depending ;

non terminal Variable    fd_def       ;
non terminal SDPSymbol      fd_desc      ;

/***********************************************************/
/*    CLAUSES                                              */
/***********************************************************/

non terminal SDPSymbol      clause_on_off         ;
non terminal SDPSymbol      clause_on_off_item    ;
non terminal clause_renames        ;

non terminal clause_thru_opt ;
non terminal clause_thru     ;

non terminal clause_value          ;
non terminal clause_value_list     ;
non terminal clause_value_item     ;


/***********************************************************/
/*    OTRAS SENTENCIAS                                     */
/***********************************************************/

non terminal SDPSymbol    data_name   ;
non terminal SDPSymbol    rvalue      ;

non terminal SDPSymbol   figurative  ;
non terminal SDPSymbol   constant    ;

/***********************************************************/
/*   PALABRAS OPCIONALES                                   */
/***********************************************************/

non terminal SDPSymbol      opt_is_on_off  ;
non terminal SDPSymbol      opt_on_off     ;
non terminal SDPSymbol      on_off         ;

non terminal SDPSymbol      opt_areas      ;
non terminal SDPSymbol      opt_character  ;

non terminal SDPSymbol      opt_collating  ;
non terminal SDPSymbol      opt_currency_picture ;
non terminal SDPSymbol      opt_debugging  ;
non terminal SDPSymbol          debugging  ;
non terminal SDPSymbol      opt_duplicates ;
non terminal SDPSymbol      opt_endp       ;

non terminal SDPSymbol      opt_is         ;
non terminal SDPSymbol          is         ;
non terminal SDPSymbol      opt_key        ;

non terminal SDPSymbol      opt_mode       ;   
non terminal SDPSymbol      opt_organization   ;
non terminal SDPSymbol      opt_optional   ;
non terminal SDPSymbol      opt_program    ;
non terminal SDPSymbol      opt_record     ;

non terminal SDPSymbol      opt_sign       ;
non terminal SDPSymbol          sign       ;

non terminal SDPSymbol      opt_size       ;
non terminal SDPSymbol          size       ;

non terminal SDPSymbol      opt_status     ;
non terminal SDPSymbol          status     ;

non terminal SDPSymbol      opt_symbolic_in       ;
//non terminal SDPSymbol          size       ;

non terminal SDPSymbol      opt_with       ;
non terminal SDPSymbol         wwith       ;

/**********************************************************************/
/**********************************************************************/
/**********************************************************************/
/*                        INICIO PARSER                               */
/**********************************************************************/
/**********************************************************************/
/**********************************************************************/

cobolData ::=  module {: RESULT = null; :}
          ; 

/*JGG Conceptualmente trataremos cada uno como si fuera un parrafo con instrucciones 
      para procesar sus issues
*/
                         
module ::= identification_division 
           environment_division    
           data_division           
       ;

/*********************************************************************/
/* Identification division                                           */
/*********************************************************************/

identification_division ::= ident_header ident_type ident_options_opt 
                            {: rules.checkDivision(currStmt); :}
                        ;

ident_header ::= DIV_ID:s  ENDP:p  {: currStmt = new StmtGral(s); :}
             ;                      

ident_type ::= ident_type_program
           |   ident_type_class
           |   ident_type_factory
           |   ident_type_object
           |   ident_type_method
           ;

ident_type_program ::= programId                                                   ;
ident_type_class   ::= CLASSID   {: notSupportedException(MSG.SUPPORT_CLASS);   :} ;
ident_type_factory ::= FACTORYID {: notSupportedException(MSG.SUPPORT_FACTORY); :} ;
ident_type_object  ::= OBJECTID  {: notSupportedException(MSG.SUPPORT_OBJECT);  :} ;
ident_type_method  ::= METHODID  {: notSupportedException(MSG.SUPPORT_METHOD);  :} ;

programId ::= programId_verb:v ident_endp:p programId_name:n programId_type_opt pgmid_endp:i  
              {: currStmt.addOption(new Option(v, n)); 
                 rules.checkIdentificationVerbEndP(v,p);
                 rules.checkProgramIDEndP(n,i);  
              :}
          ;

programId_verb ::= PGMID:w   {: RESULT = w; :}  ;
programId_name ::= PGMNAME:w {: RESULT = w; :}  ;
               
programId_type_opt ::= programId_type:t {: rules.checkProgramType(t); :}
                   |
                   ;

programId_type ::= RECURSIVE:w  {: RESULT = w; :}
               |   COMMON:w     {: RESULT = w; :}
               |   INITIAL:w    {: RESULT = w; :}
               ;

ident_options_opt ::= ident_options
                  |   
                  ;

ident_options ::= ident_option:s                 {: currStmt.addOption(s); :}
              |   ident_options ident_option:s   {: currStmt.addOption(s); :}
              ;
ident_option ::= ident_opt:s  {: RESULT = s; :}
             ;

ident_opt ::= ident_opt_word:w  ident_endp:p ident_opt_entry:o {: RESULT = new Option(w, o); :}
          ;
          
ident_opt_word ::= AUTHOR:w         {: RESULT = w; :}
               |   INSTALLATION:w   {: RESULT = w; :}
               |   SECURITY:w       {: RESULT = w; :}
               |   DATEW:w          {: RESULT = w; :} 
               |   DATEC:w          {: RESULT = w; :}
               ;
                           
ident_endp ::= ENDP:w {: RESULT = w;     :}
           |          {: RESULT = null;  :} 
           ;

pgmid_endp ::= ENDP:w {: RESULT = w;     :}
           |          {: RESULT = null;  :}
           ;
              
ident_opt_entry ::= ident_entry:o {: RESULT = o;    :}
                  |                   {: RESULT = null; :}
                  ;
                
ident_entry ::= IDTOKEN:l                        {: RESULT = code.removePoint(l); :}
            |   ident_entry:a ident_entry_line:l {: RESULT = a.add(l);            :}
            ;

ident_entry_line ::= IDTOKEN:s            {: RESULT = code.removePoint(s); :}
                 |   ENDP:p               {: RESULT = code.removePoint(p); :}
                 ;
                   
/*********************************************************************/
/* Environment division                                              */
/*********************************************************************/

environment_division  ::= env_div_header env_div_sections  {: rules.checkDivision(currStmt); :}
                      |
                      ;
                     
env_div_header ::= DIV_ENV:s ENDP:p {: currStmt = new StmtGral(s); 
                                       currBlock = new BlockCode(s, p); 
                                       code.setDivision(CDG.SECT_ENV, s.line); 
                                    :} 
               ;

env_div_sections ::= configuration_section_opt io_section_opt
                 ;

configuration_section_opt ::= configuration_section:o {: currStmt.addOption(o);    :}
                          |                           
                          ;

io_section_opt ::= io_section:o 
               |
               ;

/*********************************************************************/
/* CONFIGURATION SECTION                                             */
/*********************************************************************/
                          
configuration_section ::= conf_sect_header:o opt_configuration_data {: RESULT = o; :}
                      ;
                      
conf_sect_header ::= CONF_SECTION:s ENDP:w {: currOption = sf.option(s, w);
                                              code.setSection(CDG.SECT_CONF, s.line);
                                              RESULT = currOption;  
                                           :}
                  ;
opt_configuration_data ::= configuration_data
                       |
                       ;
                       
configuration_data ::= configuration_item:o                    {: currOption.add(o); :}
                   |   configuration_data configuration_item:o {: currOption.add(o); :}
                   ;
                   
configuration_item ::= configuration_source:o {: RESULT = o; :}
                   |   configuration_object:o {: RESULT = o; :}
                   |   configuration_names:o  {: RESULT = o; :}
                   |   configuration_repo:o   {: RESULT = o; :}
                   ;

configuration_source ::= SOURCE_COMPUTER:o ENDP opt_conf_sect_src:w   {: RESULT = sf.option(o, w); :}  ;
configuration_object ::= OBJECT_COMPUTER:o ENDP opt_conf_sect_obj:w   {: RESULT = sf.option(o, w); :}  ;
configuration_names ::=  SPECIAL_NAMES:o   ENDP opt_conf_sect_names:w {: RESULT = sf.option(o, w); :}  ;
configuration_repo ::=   REPOSITORY:o      ENDP opt_conf_sect_repo:w  {: RESULT = sf.option(o, w); :}  ;

opt_conf_sect_src ::= ID:w opt_with:w1 opt_debugging:w2 ENDP:w3 {: RESULT = w.add(w1, w2, w3); :} 
                  |                                             {: RESULT = null;              :} 
                  ;
                                   

opt_conf_sect_obj ::= ID:w opt_conf_sect_mem:w1 opt_conf_sect_entry:w2 ENDP:w3 {: RESULT = w.add(w1, w2, w3); :}
                  |                                                            {: RESULT = null;              :}
                  ;
                                                      
opt_conf_sect_mem ::= MEMORY:w opt_size:w1 ID:w2 conf_sect_mem_type:w3      {: RESULT = w.add(w1, w2, w3); :}
                  |                                                         {: RESULT = null;              :}
                  ;

conf_sect_mem_type ::= WORDS:w       {: RESULT = w; :}
                   |   CHARACTERS:w  {: RESULT = w; :}
                   |   MODULES:w     {: RESULT = w; :}
                   ;

opt_conf_sect_entry ::= conf_sect_entry:w  {: RESULT = w;   :}
                    |                      {: RESULT = null; :}
                    ;
                    

conf_sect_entry ::= conf_sect_entry_item:w                    {: RESULT = w;         :}
                |   conf_sect_entry:w conf_sect_entry_item:w1 {: RESULT = w.add(w1); :}
                ;
                
conf_sect_entry_item ::= opt_program opt_collating SEQUENCE:w ID:w1 {: RESULT = w.add(w1); :}
                     |   SEGMENT:w opt_is NUMERO:w1                 {: RESULT = w.add(w1); :}
                     ;



opt_conf_sect_names ::= conf_sect_names:w {: RESULT = w; :}
                    |
                    ;

conf_sect_names ::= conf_sect_names_item:o  opt_endp:w                    {: RESULT = o.add(w);         :}
                |   conf_sect_names:o conf_sect_names_item:o1  opt_endp:w {: RESULT = o.add(o1.add(w)); :}
                ;
                
conf_sect_names_item ::= special_names_id:o        {: RESULT = o; :}
                     |   special_names_alphabet:o  {: RESULT = o; :}
                     |   special_names_symbolic:o  {: RESULT = o; :}
                     |   special_names_class:o     {: RESULT = o; :}
                     |   special_names_currency:o  {: RESULT = o; :}
                     |   special_names_decimal:o   {: RESULT = o; :}
                     |   special_names_xml:o       {: RESULT = o; :}
                     ;

special_names_id ::=       ID:o opt_is_on_off:w ID:w1 opt_on_off:w2                 {: RESULT = sf.option(o, w.add(w1,w2));   :}  ;
special_names_alphabet ::= ALPHABET:o ID:w opt_is alphabet_name:w1                  {: RESULT = sf.option(o, w.add(w1));      :}  ;
special_names_symbolic ::= SYMBOLIC:o opt_character ID:w opt_symbolic_in:w1        {: RESULT = sf.option(o, w.add(w1));      :}  ;
special_names_class ::=    CLASS:o ID:w opt_is ID:w1                                {: RESULT = sf.option(o, w.add(w1));      :}  ;
special_names_currency ::= CURRENCY:o opt_sign opt_is ID:w opt_currency_picture:w1  {: RESULT = sf.option(o, w.add(w1));      :}  ;
special_names_decimal ::=  DECIMALPOINT:o opt_is COMMA:w                            {: RESULT = sf.option(o, w);              :}  ; 
special_names_xml ::=      XMLSCHEMA:o ID:w opt_is ID:w1                            {: RESULT = sf.option(o, w.add(w1));      :}  ;

opt_is_on_off ::= is
               |  on_off
               |
               ;

opt_on_off ::= clause_on_off
           |
           ;

clause_on_off ::= clause_on_off_item
              |   clause_on_off clause_on_off_item
              ;

clause_on_off_item ::= on_off opt_status opt_is ID
                   ;
                                 

alphabet_name ::= STANDARD:w  {: RESULT = w; :}
              |   NATIVE:w    {: RESULT = w; :}
              |   EBCDIC:w    {: RESULT = w; :}
              |   LITERAL:w   {: RESULT = w; :}
              ;
                                                                       

opt_symbolic_in ::= IN:w1 ID:w {: RESULT = w.setPrefix(w1); :}
                |              {: RESULT = null;            :} 
                ;

/*
special_names_classes ::= special_names_class_name
                      |   special_names_classes special_names_class_name
                      ;

special_names_class_name ::= ID opt_class_thru
                         ;
                         
opt_class_thru ::= THRU ID
               |
               ;
*/  
opt_currency_picture ::= opt_with PICTURE SYMBOL ID                                                              
                     |   
                     ;
           
opt_conf_sect_repo ::= conf_sect_repo:o  {: RESULT = o;    :}
                   |                     {: RESULT = null; :}
                   ;
                     
conf_sect_repo ::= conf_sect_repo_item:o                    {: RESULT = o;         :}
               |   conf_sect_repo:o conf_sect_repo_item:o1  {: RESULT = o.add(o1); :}
               ;
               
conf_sect_repo_item ::= CLASS:w ID:w1 opt_is ID:w2   {: RESULT = sf.option(w, w1.add(w2)); :} 
                    ;               

/*********************************************************************/
/* I-O SECTION                                                       */
/*********************************************************************/
               
io_section ::= io_sect_header:o io_sect_bloques {: currStmt.addOption(o);    :}
           ;

io_sect_header ::= IO_SECTION:s ENDP:w {: currOption = sf.option(s, w);
                                          code.setSection(CDG.SECT_IO, s.line);
                                          RESULT = currOption;  
                                       :}
               ;

io_sect_bloques ::= file_control_decl
                |
                ;       

file_control_decl ::= file_control_header select_file_list
                  ;
                      
file_control_header ::= FILE_CONTROL ENDP 
                    ;

select_file_list ::= select_files
                 |
                 ;
                                                                  
select_files ::= select_file_mark
             |   select_files select_file_mark
             ;

select_file_mark ::= SDPMASTER    {: master = true; :}
                 |   select_file
                 ;
                      
select_file ::= file_select  file_attr_first  file_attr_rest_opt ENDP 
            ;         

file_select ::= SELECT opt_optional:w ID:s {: fichero = new Persistence(s.setPrefix(w).value, master);
                                              module.addFile(fichero);
                                           :}
            ;

file_attr_first ::= file_attr_assign file_attr_reserve opt_organization file_attr_type 
                ;

file_attr_assign ::= ASSIGN file_attr_assign_dd
                 ;  
                      
file_attr_assign_dd ::= LITERAL:s  {: fichero.setPhysicalName(s.value); :} 
                    |   ID:s       {: fichero.setPhysicalName(s.value); :} 
                    |   DISPLAY:s  {: fichero.setPhysicalName(s.value);  :}   
                    ;

file_attr_reserve ::= RESERVE NUMERO opt_areas
                  |
                  ;

file_attr_type ::= SEQUENTIAL:w         {: fichero.setType(Persistence.SEQUENTIAL); :}
               |   INDEXED:w            {: fichero.setType(Persistence.INDEXED);    :}
               |   RELATIVE:w           {: fichero.setType(Persistence.RELATIVE);   :}
               |   LINE:w SEQUENTIAL:w1 {: fichero.setType(Persistence.LINE);       :}
               |                        {: fichero.setType(Persistence.SEQUENTIAL); :}
               ;
               

file_attr_rest_opt ::= file_attr_rest
                   |
                   ;
                                      
file_attr_rest ::= file_attr_item:o             {: fichero.addOption(o); :}
               |   file_attrs file_attr_item:o  {: fichero.addOption(o); :}
               ;

file_attr_item ::= file_attr_access:o           {: RESULT = o; :}
               |   file_attr_record:o           {: RESULT = o; :}
               |   file_attr_padding:o          {: RESULT = o; :}
               |   file_attr_password:o         {: RESULT = o; :}
               |   file_attr_fs:o               {: RESULT = o; :}
               |   file_attr_alternate:o        {: RESULT = o; :}
               |   file_attr_key:o              {: RESULT = o; :}
               ;
                      
file_attr_padding ::= PADDING:w opt_character:w1 file_attr_padding_type:w2 {: RESULT = sf.option(w.add(w1,w2)); :}                               
                  ;
                                        
file_attr_padding_type ::= ID:w          {: RESULT = w; :}
                       |   LITERAL:w     {: RESULT = w; :}
                       ;

file_attr_record ::= RECORD:w DELIMITER:w1  file_attr_record_type:w2 {: RESULT = sf.option(w.setSuffix(w1).add(w2)); :}                               
                 ;
                                                                 
file_attr_record_type ::= STANDARD1:w  {: RESULT = w; :}
                      |   ID:w         {: RESULT = w; :}
                      ;

file_attr_access ::= ACCESS:w opt_mode:w1 file_attr_access_type:w2 file_attr_access_rel:w3
                             {: RESULT = sf.option(w.add(w1,w2,w3)); :}
                 ;                            

file_attr_access_type ::= SEQUENTIAL:w   {: RESULT = w; fichero.setType(Persistence.ACC_SEQUENTIAL); :}
                      |   DYNAMIC:w      {: RESULT = w; fichero.setType(Persistence.ACC_DYNAMIC);    :}
                      |   RANDOM:w       {: RESULT = w; fichero.setType(Persistence.ACC_RANDOM);     :}
                      ;

file_attr_access_rel ::= RELATIVE:w opt_key:w1 opt_is data_name:w2 {: RESULT = w.add(w1, w2); :}
                     |                                             {: RESULT = null;          :} 
                     ;
                         
file_attr_password ::= PASSWORD:w data_name:w1 {: RESULT = sf.option(w.add(w1)); :}
                   ;                            
                      
file_attr_fs ::= FILE:p STATUS:w ID:w1   {: RESULT = sf.option(w.setPrefix(p).add(w1)); :}
             |   STATUS:w ID:w1          {: RESULT = sf.option(w.add(w1));              :}
             ;

file_attr_alternate ::= ALTERNATE:w opt_record:w1 opt_key:w2 opt_is:w3 data_name:w4 opt_duplicates:w5
                                  {: RESULT = sf.option(w.add(w1,w2,w3,w4,w5)); :}
                    ;


file_attr_key ::= RECORD:p ID:w {: RESULT = sf.option(p, w); :}
              ;

                                                                   
/*********************************************************************/
/* Data division                                                     */
/*********************************************************************/

data_division   ::= data_div_header bloque_data  {: rules.checkDivision(currStmt); :}
                |
                ;

data_div_header ::=  DIV_DATA:s ENDP:p {: currStmt = new StmtGral(s); 
                                          currBlock = new BlockCode(s, p); 
                                          code.setDivision(CDG.SECT_DATA, s.line); 
                                       :}
                ;
                
bloque_data     ::= section_file 
                    section_working 
                    section_local 
                    section_linkage 
                ;

/***************************************************************/
/*         FILE SECTION                                        */
/***************************************************************/

section_file ::= sect_file_header file_data 
             |
             ;

sect_file_header ::= FILE_SECTION:s {: code.setSection(CDG.SECT_FILE, s.line); :} ENDP
                 ;
                 

file_data ::= fd_list
          |
          ;

fd_list   ::= fd
          |   fd_list fd
          ;
        
fd        ::= fd_def:d fd_fields  
          ;

fd_def ::= fd_desc ID:s fd_attrs_opt:a ENDP  
//JGG                   {: module.setRecordName(s.value, a.getOptionValues(ZCDSym.DATA)); :}  
       ;

fd_desc ::= FD:i    {: RESULT = i; :}
        |   SD:i    {: RESULT = i; :}
        ;
        
fd_attrs_opt ::= fd_attrs:f {: RESULT = f;                :}
//             |              {: RESULT = new OptionList(); :}
             ;
fd_attrs ::= fd_attr:f             
         |   fd_attrs:t fd_attr:f   
         ;

/*             
fd_attrs ::= fd_attr:f             {: RESULT = new OptionList(f); :}
         |   fd_attrs:t fd_attr:f  {: RESULT = t; :} //JGG t.add(f);          :} 
         ;
*/
fd_attr ::= fd_attr_names:f        {: RESULT = f; :}
        |   fd_attr_mode:f         {: RESULT = f; :} 
        |   fd_attr_label          {: RESULT = new Option(); :}
        |   fd_attr_block          {: RESULT = new Option(); :}
        |   fd_attr_record         {: RESULT = new Option(); :}
        |   fd_attr_linage         {: RESULT = new Option(); :}
        |   fd_attr_depending      {: RESULT = new Option(); :}  
        ;

fd_attr_names ::= DATA:d fd_attr_records fd_attr_name:f  {: RESULT = new Option(d, f); :}
              ;
                                      
fd_attr_name ::= ID:w                  {: RESULT = w;         :}
             |   fd_attr_name:w ID:i   {: RESULT = w.add(i);  :}
             ;

fd_attr_mode ::= RECORDING:i fd_attr_mode_type:a  {: RESULT = new Option(i, a); :}
             ;

fd_attr_mode_type ::= ID:i        {: RESULT = i; :}
                  |   PIC_DEC:i   {: RESULT = i; :} 
                  |   FILLER:i    {: RESULT = i; :}
                  ;
                    
fd_attr_label ::= LABEL fd_attr_records ;    
                
fd_attr_block ::= BLOCK NUMERO fd_attr_block_records ;

fd_attr_block_records ::= RECORDS
                      |
                      ;

fd_attr_record ::= RECORD fd_attr_record_detail
               ; 
 
fd_attr_record_detail ::= fd_attr_record_size
                      |   fd_attr_depending
                      ; 

fd_attr_record_size ::= fd_attr_number fd_attr_record_to
                    ;   


fd_attr_record_to ::= TO fd_attr_number
                  |
                  ;

fd_attr_records ::= RECORD
                |   RECORDS
                ;
                
fd_fields ::= variables
          |              // Case de que la copy no exista
          ;

fd_attr_linage ::= LINAGE fd_attr_number
               ; 
                           
fd_attr_number ::= NUMERO 
               |   PIC_NUM
               ;

fd_attr_depending ::= DEPENDING rvalue 
                  ;               
                                                
/***************************************************************/
/*         WORKING-STORAGE SECTION                             */
/***************************************************************/

section_working ::= sect_working_header working_data
                |
                ;

sect_working_header ::= WORKING_SECTION:s {: code.setSection(CDG.SECT_WORK, s.line); :} ENDP  
                    ;

working_data        ::= variables
                    |
                    ;

/***************************************************************/
/*         LOCAL-STORAGE SECTION                               */
/***************************************************************/
                  
section_local     ::= sect_local_header local_data
                  |
                  ;

sect_local_header ::= LOCAL_SECTION:s {: code.setSection(CDG.SECT_LOCAL, s.line); :} ENDP 
                  ;

local_data        ::= variables
                  | 
                  ;

/***************************************************************/
/*         LINKAGE SECTION                                     */
/***************************************************************/
                 
section_linkage     ::= sect_linkage_header linkage_data
                    |
                    ; 

sect_linkage_header ::= LINKAGE_SECTION:s {: code.setSection(CDG.SECT_LINK, s.line); :} ENDP 
                    ;

linkage_data        ::= variables
                    | 
                    ;
             
/***************************************************************/
/*   TRATAMIENTO DE VARIABLES                                  */
/***************************************************************/

variables ::= variable 
          |   variables variable 
          ;
           
variable ::= var_xx:v {: RESULT = module.addVariable(v); :}
         |   var_66:v {: RESULT = module.addVariable(v); :}
         |   var_77:v {: RESULT = module.addVariable(v); :}
         |   var_88:v {: RESULT = module.addVariable(v); :}
         |   SQLDATA 
         |   ENDSQL // endp_opt
         ;
           
var_xx ::= var_xx_head:v var_data_def endp_opt  {: RESULT = v; :}  ;
var_66 ::= var_66_head:v clause_renames ENDP    {: RESULT = v; :}  ;
var_77 ::= var_77_head:v var_data_def   ENDP    {: RESULT = v; :}  ;
var_88 ::= var_88_head:v clause_value   ENDP    {: RESULT = v; :}  ;

var_xx_head ::= LEVELXX:l var_name:v {: currVar = code.createVar(l,v);  RESULT = currVar; :} ;
var_66_head ::= LEVEL66:l ID:v       {: currVar = code.createVar(l,v);  RESULT = currVar; :} ;
var_77_head ::= LEVEL77:l ID:v       {: currVar = code.createVar(l,v);  RESULT = currVar; :} ;
var_88_head ::= LEVEL88:l ID:v       {: currVar = code.createVar(l,v);  RESULT = currVar; :} ;
              
var_name   ::= ID:s           {: RESULT = s; :}
           |   PIC_ALPHANUM:s {: RESULT = s; :}
           |   PIC_ALPHA:s    {: RESULT = s; :}
           |   var_filler:s   {: RESULT = s.setValue("F_" + ++numFillers);  :}                  
           ;
           
var_filler ::=  FILLER:f   {: RESULT = f; :}      
           |               {: RESULT = new SDPSymbol(ZCDSym.FILLER,0,0, " "); :}        
           ;
           
var_data_def ::= var_data
             |
             ;

var_data   ::= var_attr
           |   var_data var_attr
           ;
var_attr   ::= var_redefines
           |   var_renames
           |   var_picture
           |   var_occurs
           |   var_indexed
           |   var_value
           |   var_order
           |   var_type:v   {: code.setVarType(currVar,v); :}
           |   var_usage
           ;

var_redefines ::= REDEFINES var_name:i  {: module.setRedefines(currVar, (String)i.value); :}
              ;

var_renames ::= RENAMES var_name:i  var_renames_opt 
              ;

var_renames_opt ::= THRU var_name
                |
                ;
                
var_occurs ::= OCCURS var_occurs_from:from var_occurs_to:to var_occurs_depending
                     {: 
                        code.setBounds(currVar, from, to);
                     :}
           ;

var_occurs_from ::= var_occurs_bound:v {: RESULT = v; :}
                ;  
                
var_occurs_to ::= TO var_occurs_bound:n {: RESULT = n; :}
              |                         {: RESULT = new SDPSymbol(0, 0, 0, "0"); :}
              ; 

var_occurs_bound ::= NUMERO:n   {: RESULT = n; :}
                |    PIC_NUM:p  {: RESULT = p; :}
                ;                                                                                    

var_occurs_depending ::= DEPENDING rvalue
                     |
                     ;

var_order ::= ORDER var_indexes
          ;
                      
var_indexed ::= INDEXED var_indexes
             ;

var_indexes ::= var_index
            |   var_indexes var_index
            ;
            
var_index ::= rvalue
          |   PIC_ALPHA
          |   FILLER
          ;
                 
var_usage ::= USAGE var_type:c {: code.setVarType(currVar,c); :} 
          ;

var_type ::= POINTER:c       {: RESULT = c; :}
         |   INDEX:c         {: RESULT = c; :} 
         |   PACKED:c        {: RESULT = c; :}
         |   DISPLAY:c       {: RESULT = c; :}
         |   BINARY:c        {: RESULT = c; :}
         |   ROWID:c         {: RESULT = c; :}
         |   BLOB_LOCATOR:c  {: RESULT = c; :}
         |   BLOB:c PIC_LEN  {: RESULT = c; :}       
         |   compn:c         {: RESULT = c; :}
         ;

compn ::= COMP1:c {: RESULT = c; :}
      |   COMP2:c {: RESULT = c; :}
      |   COMP3:c {: RESULT = c; :}
      |   COMP4:c {: RESULT = c; :}
      |   COMP5:c {: RESULT = c; :}
      |   COMP6:c {: RESULT = c; :}
      ;
                                                                                                          
var_picture ::= PICTURE pic_types 
           ;
           
pic_types ::= pic_type
          |   pic_types pic_type
          ;
          
pic_type ::= PIC_ALPHANUM {: code.addSize(currVar, 1); :}
         |   PIC_ALPHA    {: code.addSize(currVar, 1); :}
         |   PIC_NUM      {: code.addSize(currVar, 1); :}
         |   PIC_FMT:p    {: code.calculateSizeFormat(currVar, p); :}
         |   PIC_DEC
         |   PIC_DEC_EMPTY
         |   PIC_V:p      {: code.calculateSize(currVar, p); :}
         |   PIC_LEN:p    {: code.calculateSizeLen(currVar, p); :}
         |   NUMERO
         |   pic_size          
         ;          

pic_size ::= LPAR pic_len:s RPAR  {: code.addSize(currVar, s.setFunction()); :}
         ;

pic_len ::= NUMERO:s  {: RESULT = s; :}
        |   PIC_NUM:p {: RESULT = p; :}   // Caso 9(9)
        ;

pic_dec_opt ::= pic_dec
            |
            ;

pic_dec   ::= PIC_DEC:p  pic_size_opt {: RESULT = p; :}
          ;

pic_size_opt ::= pic_size
             |
             ;
             
                      
var_value ::= VALUE init_val:v {: currVar.setInitValue((String) v.value); :}  
          ;

init_val ::= constant:s       {: RESULT = s; :}
         |   DFHCICS:s        {: RESULT = s; :}
         |   PIC_FMT:s pic_dec_opt {: RESULT = s; :}
         |   PIC_NUM:s        {: RESULT = s; :}
         |   PIC_ALPHANUM init_val:v {: RESULT = v; :}
         ;

rvalue ::= ID:i  {: RESULT = i; :}
       ; 

endp_opt ::= ENDP:e   {: RESULT = e;    :}
         |            {: RESULT = null; :}
         ;


figurative ::= SPACES:f   {: RESULT = f; :}
           |   ZERO:f     {: RESULT = f; :}
           |   HIGHVAL:f  {: RESULT = f; :}
           |   LOWVAL:f   {: RESULT = f; :}
           |   QUOTE:f    {: RESULT = f; :}  
           |   NULL:f     {: RESULT = f; :}
           ;

constant ::= figurative:c {: RESULT = c; :}
         |   LITERAL:c    {: RESULT = c; :}
         |   NUMERO:c     {: RESULT = c; :}
         |   LEVELXX:c    {: RESULT = c; :}
         |   HEX_VAL:c    {: RESULT = c; :}
         ;
         
clause_renames ::= RENAMES ID clause_thru_opt
               ;
               
clause_value ::= VALUE clause_value_list
             ;
             
clause_value_list ::= clause_value_item
                  |   clause_value_list clause_value_item
                  ;
                  
clause_value_item ::= constant clause_thru_opt
                  ;

clause_thru_opt ::= clause_thru
                |
                ;
                      
clause_thru ::= THRU constant
            ;


data_name ::= LITERAL
          |   ID
          ;
           
on_off ::= ON:w   {: RESULT = w;    :}
       |   OFF:w  {: RESULT = w;    :}
       ;

opt_areas ::= AREAS:w {: RESULT = w;    :}
          |           {: RESULT = null; :}
          ;

opt_character ::= CHARACTERS:w {: RESULT = w;    :}
              |                {: RESULT = null; :}
              ;
        
opt_debugging ::= debugging:w {: RESULT = w;    :}
              |               {: RESULT = null; :}
              ;

opt_duplicates ::= opt_with:p DUPLICATES:w {: RESULT = w.setPrefix(p); :}
               |                           {: RESULT = null;           :}
               ;

opt_endp ::= ENDP:w {: RESULT = w;    :}
         |          {: RESULT = null; :}
         ;

opt_is ::= is:w {: RESULT = w;    :}
       |        {: RESULT = null; :}
       ;

opt_key ::= KEY:w {: RESULT = w;    :}
        |         {: RESULT = null; :}
        ;

opt_mode ::= MODE:w {: RESULT = w;    :}
         |          {: RESULT = null; :}
         ;

opt_optional ::= OPTIONAL:w {: RESULT = w;    :}
             |              {: RESULT = null; :}
             ;

opt_organization ::= ORGANIZATION:w {: RESULT = w;    :}
                 |                  {: RESULT = null; :}
                 ;

opt_record ::= RECORD:w {: RESULT = w;    :}
           |                  {: RESULT = null; :}
           ;

opt_sign ::= sign:w {: RESULT = w;    :}      
         |          {: RESULT = null; :}
         ;

opt_size ::= size:w {: RESULT = w;    :}      
         |          {: RESULT = null; :}
         ;

opt_status ::= status:w {: RESULT = w;    :}      
           |            {: RESULT = null; :}
           ;
              
opt_with ::= wwith:w {: RESULT = w;    :}      
         |           {: RESULT = null; :}
         ;

debugging ::= DEBUGGING:w MODE:w2 {: RESULT = w.add(w2); :}   ;
is        ::= IS:w                {: RESULT = w;         :}   ;
sign      ::= SIGN:w              {: RESULT = w;         :}   ;        
size      ::= SIZE:w              {: RESULT = w;         :}   ;
status    ::= STATUS:w            {: RESULT = w;         :}   ;
wwith     ::= WITH:w              {: RESULT = w;         :}   ;                         