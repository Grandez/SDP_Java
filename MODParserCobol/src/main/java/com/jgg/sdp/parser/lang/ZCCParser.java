
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jul 06 13:14:39 CEST 2017
//----------------------------------------------------

package com.jgg.sdp.parser.lang;

import java.util.*;
import java_cup.runtime.*;
import com.jgg.sdp.module.base.*;
import com.jgg.sdp.module.items.*;
import com.jgg.sdp.module.factorias.*;
import com.jgg.sdp.core.ctes.*;
import com.jgg.sdp.core.config.*;
import com.jgg.sdp.parser.base.*;
import com.jgg.sdp.parser.stmt.*;
import com.jgg.sdp.parser.symbol.*;
import com.jgg.sdp.parser.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jul 06 13:14:39 CEST 2017
  */
public class ZCCParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ZCCParser() {super();}

  /** Constructor which sets the default scanner. */
  public ZCCParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ZCCParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u023b\000\002\147\003\000\002\002\004\000\002\150" +
    "\004\000\002\003\005\000\002\003\002\000\002\002\004" +
    "\000\002\004\004\000\002\u012f\002\000\002\165\005\000" +
    "\002\170\003\000\002\170\002\000\002\171\003\000\002" +
    "\171\004\000\002\172\004\000\002\172\004\000\002\166" +
    "\003\000\002\166\002\000\002\167\003\000\002\167\004" +
    "\000\002\005\004\000\002\154\003\000\002\151\003\000" +
    "\002\151\002\000\002\152\003\000\002\152\004\000\002" +
    "\153\004\000\002\155\003\000\002\155\002\000\002\156" +
    "\005\000\002\157\003\000\002\157\002\000\002\161\003" +
    "\000\002\161\004\000\002\162\003\000\002\162\003\000" +
    "\002\163\003\000\002\163\003\000\002\163\003\000\002" +
    "\163\003\000\002\163\003\000\002\163\003\000\002\163" +
    "\003\000\002\164\003\000\002\164\003\000\002\164\003" +
    "\000\002\164\003\000\002\164\003\000\002\164\003\000" +
    "\002\164\003\000\002\164\003\000\002\164\003\000\002" +
    "\164\003\000\002\164\003\000\002\164\003\000\002\332" +
    "\004\000\002\332\003\000\002\332\003\000\002\333\003" +
    "\000\002\334\003\000\002\334\003\000\002\335\003\000" +
    "\002\335\003\000\002\335\003\000\002\335\003\000\002" +
    "\335\003\000\002\335\003\000\002\335\003\000\002\326" +
    "\003\000\002\326\003\000\002\326\003\000\002\326\003" +
    "\000\002\326\003\000\002\326\003\000\002\327\004\000" +
    "\002\327\003\000\002\330\003\000\002\330\003\000\002" +
    "\331\003\000\002\331\003\000\002\331\003\000\002\331" +
    "\003\000\002\331\003\000\002\331\003\000\002\331\003" +
    "\000\002\331\003\000\002\331\003\000\002\331\003\000" +
    "\002\331\003\000\002\336\003\000\002\336\003\000\002" +
    "\336\003\000\002\336\003\000\002\336\003\000\002\337" +
    "\003\000\002\201\003\000\002\202\003\000\002\173\003" +
    "\000\002\266\003\000\002\266\003\000\002\203\003\000" +
    "\002\207\003\000\002\207\003\000\002\207\003\000\002" +
    "\205\004\000\002\204\003\000\002\206\003\000\002\160" +
    "\003\000\002\160\003\000\002\160\002\000\002\247\003" +
    "\000\002\276\005\000\002\275\003\000\002\275\003\000" +
    "\002\270\003\000\002\006\005\000\002\007\003\000\002" +
    "\010\004\000\002\011\003\000\002\011\004\000\002\011" +
    "\004\000\002\011\003\000\002\011\003\000\002\300\010" +
    "\000\002\012\003\000\002\013\003\000\002\013\002\000" +
    "\002\014\003\000\002\014\004\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\256\006\000\002\257" +
    "\003\000\002\257\002\000\002\260\004\000\002\263\003" +
    "\000\002\263\004\000\002\264\003\000\002\264\004\000" +
    "\002\265\003\000\002\265\003\000\002\261\003\000\002" +
    "\261\002\000\002\262\004\000\002\250\004\000\002\176" +
    "\007\000\002\016\004\000\002\017\003\000\002\017\004" +
    "\000\002\020\003\000\002\021\003\000\002\021\002\000" +
    "\002\022\003\000\002\022\004\000\002\023\003\000\002" +
    "\200\004\000\002\024\006\000\002\025\003\000\002\026" +
    "\004\000\002\026\004\000\002\027\003\000\002\027\002" +
    "\000\002\030\003\000\002\030\004\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\210\004\000\002" +
    "\211\003\000\002\212\003\000\002\322\004\000\002\323" +
    "\003\000\002\213\003\000\002\213\003\000\002\214\004" +
    "\000\002\215\003\000\002\324\004\000\002\324\002\000" +
    "\002\237\006\000\002\240\003\000\002\240\004\000\002" +
    "\241\003\000\002\241\002\000\002\242\004\000\002\317" +
    "\004\000\002\320\003\000\002\032\004\000\002\033\003" +
    "\000\002\034\004\000\002\u0130\002\000\002\035\005\000" +
    "\002\035\002\000\002\036\003\000\002\036\004\000\002" +
    "\037\006\000\002\040\003\000\002\253\005\000\002\254" +
    "\003\000\002\254\004\000\002\255\003\000\002\255\003" +
    "\000\002\255\003\000\002\255\003\000\002\255\003\000" +
    "\002\255\003\000\002\255\003\000\002\255\003\000\002" +
    "\255\003\000\002\255\003\000\002\255\003\000\002\255" +
    "\003\000\002\244\007\000\002\245\003\000\002\246\004" +
    "\000\002\041\004\000\002\042\005\000\002\043\003\000" +
    "\002\043\002\000\002\044\003\000\002\044\004\000\002" +
    "\045\003\000\002\045\003\000\002\252\004\000\002\341" +
    "\003\000\002\341\004\000\002\342\004\000\002\343\003" +
    "\000\002\343\003\000\002\343\003\000\002\343\003\000" +
    "\002\340\003\000\002\340\004\000\002\216\004\000\002" +
    "\217\003\000\002\220\004\000\002\220\003\000\002\230" +
    "\003\000\002\221\003\000\002\221\002\000\002\223\003" +
    "\000\002\223\002\000\002\224\003\000\002\224\003\000" +
    "\002\224\004\000\002\225\003\000\002\225\003\000\002" +
    "\222\003\000\002\222\004\000\002\226\003\000\002\226" +
    "\003\000\002\226\003\000\002\226\003\000\002\226\003" +
    "\000\002\226\003\000\002\227\003\000\002\227\003\000" +
    "\002\233\004\000\002\232\004\000\002\234\010\000\002" +
    "\235\010\000\002\231\004\000\002\231\004\000\002\046" +
    "\005\000\002\047\003\000\002\047\002\000\002\050\003" +
    "\000\002\050\004\000\002\051\003\000\002\051\003\000" +
    "\002\052\004\000\002\053\004\000\002\054\005\000\002" +
    "\055\003\000\002\056\004\000\002\057\003\000\002\057" +
    "\002\000\002\060\003\000\002\060\004\000\002\061\003" +
    "\000\002\062\004\000\002\301\004\000\002\302\003\000" +
    "\002\303\003\000\002\303\004\000\002\304\004\000\002" +
    "\305\003\000\002\306\003\000\002\306\003\000\002\307" +
    "\004\000\002\307\004\000\002\311\004\000\002\312\004" +
    "\000\002\312\004\000\002\310\003\000\002\310\003\000" +
    "\002\310\003\000\002\310\003\000\002\310\003\000\002" +
    "\u0131\002\000\002\063\006\000\002\064\003\000\002\064" +
    "\004\000\002\065\003\000\002\065\003\000\002\065\003" +
    "\000\002\065\003\000\002\065\003\000\002\066\005\000" +
    "\002\067\003\000\002\070\004\000\002\071\004\000\002" +
    "\072\004\000\002\072\004\000\002\073\005\000\002\074" +
    "\005\000\002\074\002\000\002\075\005\000\002\076\003" +
    "\000\002\077\003\000\002\077\004\000\002\100\004\000" +
    "\002\101\003\000\002\101\004\000\002\102\005\000\002" +
    "\103\003\000\002\103\003\000\002\104\005\000\002\105" +
    "\005\000\002\105\002\000\002\106\004\000\002\107\004" +
    "\000\002\110\003\000\002\110\004\000\002\111\004\000" +
    "\002\111\003\000\002\111\003\000\002\174\004\000\002" +
    "\112\006\000\002\113\003\000\002\113\002\000\002\117" +
    "\006\000\002\120\003\000\002\120\004\000\002\121\003" +
    "\000\002\121\003\000\002\114\004\000\002\115\003\000" +
    "\002\115\004\000\002\116\004\000\002\122\003\000\002" +
    "\122\002\000\002\123\003\000\002\123\004\000\002\124" +
    "\005\000\002\124\005\000\002\125\003\000\002\125\002" +
    "\000\002\126\003\000\002\126\004\000\002\127\004\000" +
    "\002\127\005\000\002\127\003\000\002\251\005\000\002" +
    "\243\005\000\002\130\003\000\002\130\002\000\002\131" +
    "\003\000\002\131\004\000\002\132\003\000\002\132\003" +
    "\000\002\132\003\000\002\132\003\000\002\133\004\000" +
    "\002\134\004\000\002\135\003\000\002\136\003\000\002" +
    "\236\005\000\002\177\004\000\002\277\004\000\002\277" +
    "\004\000\002\175\004\000\002\345\003\000\002\345\004" +
    "\000\002\344\004\000\002\314\004\000\002\315\004\000" +
    "\002\316\003\000\002\u011a\003\000\002\u011a\002\000\002" +
    "\u011b\003\000\002\u011b\004\000\002\u011b\003\000\002\u011b" +
    "\003\000\002\u011b\003\000\002\u011d\003\000\002\u011e\003" +
    "\000\002\u011f\004\000\002\u0121\003\000\002\313\003\000" +
    "\002\u0120\004\000\002\u0122\003\000\002\137\003\000\002" +
    "\137\003\000\002\140\003\000\002\140\003\000\002\273" +
    "\003\000\002\321\003\000\002\271\003\000\002\272\003" +
    "\000\002\267\003\000\002\325\003\000\002\274\003\000" +
    "\002\141\003\000\002\141\002\000\002\142\003\000\002" +
    "\142\004\000\002\143\003\000\002\143\003\000\002\143" +
    "\003\000\002\144\003\000\002\144\002\000\002\145\003" +
    "\000\002\145\004\000\002\146\003\000\002\146\003\000" +
    "\002\146\003\000\002\146\003\000\002\146\003\000\002" +
    "\146\003\000\002\146\003\000\002\346\003\000\002\347" +
    "\003\000\002\347\005\000\002\350\004\000\002\351\004" +
    "\000\002\351\002\000\002\352\003\000\002\352\002\000" +
    "\002\353\003\000\002\353\005\000\002\354\003\000\002" +
    "\355\003\000\002\355\005\000\002\356\003\000\002\357" +
    "\005\000\002\357\004\000\002\357\003\000\002\364\003" +
    "\000\002\364\005\000\002\364\004\000\002\365\003\000" +
    "\002\365\005\000\002\365\004\000\002\377\003\000\002" +
    "\377\004\000\002\367\004\000\002\367\003\000\002\370" +
    "\003\000\002\370\003\000\002\370\005\000\002\373\003" +
    "\000\002\373\005\000\002\374\003\000\002\361\003\000" +
    "\002\361\002\000\002\362\003\000\002\362\003\000\002" +
    "\362\003\000\002\362\003\000\002\362\003\000\002\362" +
    "\003\000\002\372\003\000\002\372\005\000\002\371\004" +
    "\000\002\371\003\000\002\371\003\000\002\366\003\000" +
    "\002\366\003\000\002\366\003\000\002\366\003\000\002" +
    "\366\003\000\002\366\003\000\002\366\003\000\002\360" +
    "\003\000\002\360\003\000\002\360\003\000\002\u0125\003" +
    "\000\002\u0125\002\000\002\u0124\003\000\002\u0124\004\000" +
    "\002\u0123\003\000\002\u0123\003\000\002\u0123\003\000\002" +
    "\u0123\005\000\002\u0123\003\000\002\u0107\003\000\002\u0107" +
    "\003\000\002\u0107\003\000\002\u0107\003\000\002\u0107\003" +
    "\000\002\u0107\003\000\002\u0107\003\000\002\u0107\003\000" +
    "\002\u0107\003\000\002\u0107\003\000\002\u0101\005\000\002" +
    "\u0101\005\000\002\u0102\005\000\002\u0103\003\000\002\u0103" +
    "\002\000\002\u0104\003\000\002\u0104\005\000\002\u0105\003" +
    "\000\002\u0105\003\000\002\u0100\003\000\002\u0100\003\000" +
    "\002\u0100\003\000\002\u0100\003\000\002\u0100\003\000\002" +
    "\u010a\003\000\002\u010b\003\000\002\u010b\005\000\002\u010c" +
    "\003\000\002\u010c\005\000\002\u0106\003\000\002\u0106\003" +
    "\000\002\u0106\003\000\002\u010d\004\000\002\u010e\004\000" +
    "\002\u010f\003\000\002\u0110\003\000\002\u0112\003\000\002" +
    "\u0112\002\000\002\u0113\003\000\002\u0113\004\000\002\u0114" +
    "\005\000\002\u0115\003\000\002\u0115\005\000\002\u0116\003" +
    "\000\002\u0117\003\000\002\u0117\002\000\002\u0118\003\000" +
    "\002\u0118\004\000\002\u0119\004\000\002\u0119\004\000\002" +
    "\u0108\003\000\002\u0109\003\000\002\u0109\003\000\002\u0109" +
    "\003\000\002\u0109\003\000\002\u0109\003\000\002\u0109\003" +
    "\000\002\u0109\003\000\002\u0126\003\000\002\u0126\002\000" +
    "\002\u0127\003\000\002\u0127\002\000\002\u0128\003\000\002" +
    "\u0128\002\000\002\u0129\003\000\002\u0129\002\000\002\u012a" +
    "\003\000\002\u012a\002\000\002\u012b\003\000\002\u012b\002" +
    "\000\002\u012d\003\000\002\u012d\002\000\002\u012c\003\000" +
    "\002\u012c\002\000\002\u012e\003\000\002\u012e\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02d0\000\004\004\006\001\002\000\004\015\u02d0\001" +
    "\ufffd\000\002\001\001\000\006\u0127\u02c1\u0171\u02c4\001\ufff7" +
    "\000\004\002\u02c0\001\002\000\154\007\203\010\075\013" +
    "\046\014\030\016\150\032\066\033\156\035\115\063\011" +
    "\075\216\076\125\104\020\122\065\126\165\153\110\160" +
    "\056\162\106\171\120\200\127\202\145\206\067\212\140" +
    "\230\200\232\202\235\160\256\141\265\166\273\033\277" +
    "\027\302\014\330\173\336\045\340\101\344\034\362\213" +
    "\377\130\u010f\025\u011a\171\u0125\116\u012a\133\u0130\170\u013b" +
    "\161\u0143\212\u014f\164\u0151\060\u0152\206\u0153\172\u016b\142" +
    "\u0175\076\u017a\105\u018b\211\u018c\072\u018d\114\001\uffe6\000" +
    "\004\172\u02bf\001\002\000\010\041\u0202\130\u0205\u012c\u0206" +
    "\001\ufe7d\000\002\001\uffc5\000\004\311\u010b\001\ufdc9\000" +
    "\002\001\uffda\000\002\001\uffb6\000\002\001\uffab\000\004" +
    "\005\u02aa\001\002\000\002\001\uffd4\000\002\001\uffc7\000" +
    "\002\001\uffe2\000\004\041\u018f\001\ufdd7\000\004\005\u029c" +
    "\001\002\000\002\001\uffd6\000\026\005\225\006\245\012" +
    "\236\250\235\261\233\315\243\326\251\u014c\250\u0186\246" +
    "\u018e\247\001\002\000\002\001\uff98\000\002\001\uffce\000" +
    "\002\001\uffcf\000\002\001\uff46\000\002\001\uff94\000\002" +
    "\001\uffd3\000\002\001\uffaf\000\002\001\uffa6\000\002\001" +
    "\uffdc\000\050\005\225\006\245\012\236\043\u01c2\241\u01c4" +
    "\250\235\261\233\315\243\326\251\343\u01b7\346\u01b5\347" +
    "\u01bb\351\u01b4\u0104\u01ba\u014c\250\u0168\u01b9\u0186\246\u0187\u01c1" +
    "\u018e\247\001\002\000\026\005\225\006\245\012\236\250" +
    "\235\261\233\315\243\326\251\u014c\250\u0186\246\u018e\247" +
    "\001\002\000\002\001\uffac\000\002\001\uffdf\000\002\001" +
    "\uff2d\000\002\001\uff99\000\002\001\uffa7\000\002\001\uffed" +
    "\000\020\005\225\040\u025e\u015c\u0255\u0160\u0259\u0162\u0252\u016c" +
    "\u025f\u0174\u0262\001\uff13\000\002\001\ufffc\000\002\001\uffb1" +
    "\000\002\001\uffd8\000\004\005\225\001\002\000\026\005" +
    "\225\006\245\012\236\250\235\261\233\315\243\326\251" +
    "\u014c\250\u0186\246\u018e\247\001\002\000\002\001\uffd5\000" +
    "\036\005\u012a\006\u012f\012\u0126\043\u011f\046\u0129\142\u012d" +
    "\167\u012c\310\u0131\341\u0128\343\u0125\347\u0135\351\u0133\u0104" +
    "\u0120\u0187\u0136\001\ufe1a\000\002\001\uffba\000\002\001\uffc1" +
    "\000\002\001\uffa4\000\002\001\uff9c\000\004\005\225\001" +
    "\002\000\004\u0164\u01d7\001\ufdcb\000\002\001\ufe69\000\002" +
    "\001\uffd2\000\002\001\uff9d\000\002\001\uff91\000\002\001" +
    "\uffc6\000\002\001\uffae\000\002\001\ufe67\000\002\001\uff56" +
    "\000\002\001\uffb9\000\002\001\uffd0\000\026\005\225\006" +
    "\245\012\236\250\235\261\233\315\243\326\251\u014c\250" +
    "\u0186\246\u018e\247\001\002\000\002\001\uffa9\000\052\005" +
    "\225\006\245\012\236\043\u01c2\241\u01c4\250\235\261\233" +
    "\315\243\326\251\343\u01b7\346\u01b5\347\u01bb\351\u01b4\367" +
    "\u021d\u0104\u01ba\u014c\250\u0168\u01b9\u0186\246\u0187\u01c1\u018e\247" +
    "\001\002\000\002\001\uffb4\000\004\005\u021a\001\002\000" +
    "\002\001\uff64\000\002\001\uffbc\000\004\005\u0219\001\002" +
    "\000\002\001\uff9e\000\002\001\uffde\000\002\001\uffca\000" +
    "\002\001\uff90\000\002\001\uff86\000\004\005\u020e\001\002" +
    "\000\154\007\203\010\075\013\046\014\030\016\150\032" +
    "\066\033\156\035\115\063\011\075\216\076\125\104\020" +
    "\122\065\126\165\153\110\160\056\162\106\171\120\200" +
    "\127\202\145\206\067\212\140\230\200\232\202\235\160" +
    "\256\141\265\166\273\033\277\027\302\014\330\173\336" +
    "\045\340\101\344\034\362\213\377\130\u010f\025\u011a\171" +
    "\u0125\116\u012a\133\u0130\170\u013b\161\u0143\212\u014f\164\u0151" +
    "\060\u0152\206\u0153\172\u016b\142\u0175\076\u017a\105\u018b\211" +
    "\u018c\072\u018d\114\001\uffe7\000\002\001\ufe6b\000\010\041" +
    "\u0202\130\u0205\u012c\u0206\001\ufe7d\000\026\005\225\006\245" +
    "\012\236\250\235\261\233\315\243\326\251\u014c\250\u0186" +
    "\246\u018e\247\001\002\000\050\005\225\006\245\012\236" +
    "\043\u01c2\241\u01c4\250\235\261\233\315\243\326\251\343" +
    "\u01b7\346\u01b5\347\u01bb\351\u01b4\u0104\u01ba\u014c\250\u0168\u01b9" +
    "\u0186\246\u0187\u01c1\u018e\247\001\002\000\002\001\uffbf\000" +
    "\026\005\225\006\245\012\236\250\235\261\233\315\243" +
    "\326\251\u014c\250\u0186\246\u018e\247\001\002\000\002\001" +
    "\uffdb\000\002\001\ufe68\000\002\001\uff18\000\002\001\uffb7" +
    "\000\036\005\u012a\006\u012f\012\u0126\043\u011f\046\u0129\142" +
    "\u012d\167\u012c\310\u0131\341\u0128\343\u0125\347\u0135\351\u0133" +
    "\u0104\u0120\u0187\u0136\001\ufe1a\000\004\005\u01a0\001\002\000" +
    "\004\011\u019a\001\uffeb\000\002\001\uffb3\000\002\001\uffad" +
    "\000\002\001\uffe0\000\002\001\ufe66\000\002\001\uffa2\000" +
    "\026\005\225\006\245\012\236\250\235\261\233\315\243" +
    "\326\251\u014c\250\u0186\246\u018e\247\001\002\000\002\001" +
    "\uffd9\000\002\001\uffbb\000\002\001\ufe6a\000\002\001\uffaa" +
    "\000\002\001\uffc9\000\036\005\u012a\006\u012f\012\u0126\043" +
    "\u011f\046\u0129\142\u012d\167\u012c\310\u0131\341\u0128\343\u0125" +
    "\347\u0135\351\u0133\u0104\u0120\u0187\u0136\001\ufe1a\000\002\001" +
    "\uffa8\000\004\005\225\001\002\000\036\005\u012a\006\u012f" +
    "\012\u0126\043\u011f\046\u0129\142\u012d\167\u012c\310\u0131\341" +
    "\u0128\343\u0125\347\u0135\351\u0133\u0104\u0120\u0187\u0136\001\ufe1a" +
    "\000\002\001\uffb2\000\002\001\uffbd\000\002\001\uff8e\000" +
    "\002\001\uffcc\000\006\u010a\u015a\u0131\u0158\001\uff95\000\002" +
    "\001\ufee8\000\002\001\uffc4\000\004\005\225\001\002\000" +
    "\004\005\u013c\001\002\000\002\001\uffa3\000\002\001\uff48" +
    "\000\002\001\uffc0\000\002\001\ufef1\000\004\005\u011d\001" +
    "\002\000\026\005\225\006\245\012\236\250\235\261\233" +
    "\315\243\326\251\u014c\250\u0186\246\u018e\247\001\002\000" +
    "\002\001\uffa1\000\002\001\uffa5\000\002\001\uffd7\000\002" +
    "\001\uff9b\000\002\001\uffb0\000\002\001\uff59\000\002\001" +
    "\uffc2\000\002\001\ufe7f\000\002\001\ufe6c\000\002\001\uffdd" +
    "\000\002\001\uffcd\000\002\001\ufec4\000\002\001\uffc3\000" +
    "\002\001\uffc8\000\002\001\uff92\000\002\001\ufed7\000\012" +
    "\236\353\262\346\274\350\370\347\001\002\000\002\001" +
    "\uffb5\000\002\001\uffd1\000\006\005\225\012\220\001\002" +
    "\000\002\001\uffbe\000\002\001\uff9f\000\006\266\337\356" +
    "\342\001\ufde5\000\002\001\uffa0\000\004\u0187\323\001\ufded" +
    "\000\004\u0171\230\001\uff7c\000\002\001\ufdef\000\002\001" +
    "\uff7d\000\004\u0127\316\001\uff73\000\030\005\225\006\245" +
    "\012\236\074\241\250\235\261\233\315\243\326\251\u014c" +
    "\250\u0186\246\u018e\247\001\002\000\002\001\uff7a\000\002" +
    "\001\ufdf3\000\002\001\ufdda\000\002\001\ufde0\000\004\u018a" +
    "\260\001\002\000\002\001\ufddf\000\030\005\225\006\245" +
    "\012\236\074\241\250\235\261\233\315\243\326\251\u014c" +
    "\250\u0186\246\u018e\247\001\uff7b\000\002\001\ufdf4\000\006" +
    "\u0117\256\u0172\255\001\002\000\002\001\uff78\000\004\356" +
    "\252\001\002\000\002\001\ufdf5\000\002\001\ufdde\000\002" +
    "\001\ufddb\000\002\001\ufddd\000\002\001\ufddc\000\002\001" +
    "\ufdd9\000\026\005\225\006\245\012\236\250\235\261\233" +
    "\315\243\326\251\u014c\250\u0186\246\u018e\247\001\002\000" +
    "\002\001\ufe07\000\002\001\uff77\000\002\001\uff76\000\002" +
    "\001\uff75\000\002\001\uff79\000\004\u0187\261\001\002\000" +
    "\030\005\225\006\245\012\236\250\235\261\233\315\243" +
    "\326\251\u014c\250\u0186\246\u0187\273\u018e\247\001\ufe04\000" +
    "\002\001\ufe08\000\002\001\ufe03\000\002\001\ufe52\000\004" +
    "\u0188\315\001\002\000\014\017\306\020\307\021\311\022" +
    "\313\023\310\001\ufe53\000\004\024\302\001\ufe4e\000\002" +
    "\001\ufe4b\000\002\001\ufe49\000\002\001\ufe00\000\030\005" +
    "\225\006\245\012\236\250\235\261\233\315\243\326\251" +
    "\u014c\250\u0186\246\u0187\273\u018e\247\001\002\000\004\112" +
    "\276\001\ufe05\000\002\001\ufe01\000\030\005\225\006\245" +
    "\012\236\250\235\261\233\315\243\326\251\u014c\250\u0186" +
    "\246\u0187\273\u018e\247\001\002\000\002\001\ufe02\000\004" +
    "\u0188\301\001\002\000\002\001\ufe4a\000\026\005\225\006" +
    "\245\012\236\250\235\261\233\315\243\326\251\u014c\250" +
    "\u0186\246\u018e\247\001\ufe4c\000\002\001\ufe50\000\002\001" +
    "\ufe4f\000\002\001\ufe4d\000\002\001\ufdfb\000\002\001\ufdfd" +
    "\000\002\001\ufdff\000\002\001\ufdfc\000\030\005\225\006" +
    "\245\012\236\250\235\261\233\315\243\326\251\u014c\250" +
    "\u0186\246\u0187\273\u018e\247\001\002\000\002\001\ufdfe\000" +
    "\002\001\ufe51\000\002\001\ufe06\000\004\005\225\001\002" +
    "\000\002\001\uff74\000\002\001\uff7e\000\002\001\uff72\000" +
    "\002\001\ufdfa\000\030\005\225\006\245\012\236\250\235" +
    "\261\233\315\243\326\251\u014c\250\u0186\246\u0187\273\u018e" +
    "\247\001\002\000\002\001\ufdf1\000\004\u0187\323\001\ufdee" +
    "\000\002\001\ufdec\000\002\001\ufdeb\000\006\112\333\u0188" +
    "\334\001\002\000\002\001\ufde9\000\002\001\ufde7\000\030" +
    "\005\225\006\245\012\236\250\235\261\233\315\243\326" +
    "\251\u014c\250\u0186\246\u0187\273\u018e\247\001\002\000\002" +
    "\001\ufdea\000\002\001\ufde8\000\006\266\337\356\342\001" +
    "\ufde6\000\004\005\225\001\002\000\002\001\ufdf2\000\002" +
    "\001\ufde4\000\004\005\225\001\002\000\002\001\ufde1\000" +
    "\002\001\ufde2\000\002\001\ufde3\000\002\001\uff1d\000\002" +
    "\001\uff1e\000\002\001\uff1f\000\012\236\353\262\346\274" +
    "\350\370\347\001\uff23\000\004\005\356\001\002\000\002" +
    "\001\uff1c\000\002\001\uff22\000\004\005\357\001\uff20\000" +
    "\002\001\uff1b\000\002\001\uff1a\000\002\001\uff21\000\004" +
    "\005\362\001\002\000\020\061\377\157\370\165\376\253" +
    "\372\274\371\370\365\u0171\373\001\002\000\004\311\u010b" +
    "\001\ufdc9\000\002\001\ufed1\000\004\005\u010a\001\002\000" +
    "\002\001\ufed0\000\002\001\ufed3\000\002\001\ufe6d\000\004" +
    "\005\u0109\001\002\000\026\005\225\006\245\012\236\250" +
    "\235\261\233\315\243\326\251\u014c\250\u0186\246\u018e\247" +
    "\001\002\000\026\005\225\006\245\012\236\250\235\261" +
    "\233\315\243\326\251\u014c\250\u0186\246\u018e\247\001\002" +
    "\000\002\001\ufed2\000\002\001\ufecf\000\002\001\ufecd\000" +
    "\002\001\ufe6e\000\002\001\ufed5\000\020\061\377\157\370" +
    "\165\376\253\372\274\371\370\365\u0171\373\001\ufed6\000" +
    "\002\001\ufed4\000\030\005\ufdd3\006\ufdd3\012\ufdd3\112\u0105" +
    "\250\ufdd3\261\ufdd3\315\ufdd3\326\ufdd3\u014c\ufdd3\u0186\ufdd3\u018e" +
    "\ufdd3\001\ufecc\000\002\001\ufdf7\000\002\001\ufdd4\000\026" +
    "\005\225\006\245\012\236\250\235\261\233\315\243\326" +
    "\251\u014c\250\u0186\246\u018e\247\001\002\000\002\001\ufdf6" +
    "\000\030\005\ufdd3\006\ufdd3\012\ufdd3\112\u0105\250\ufdd3\261" +
    "\ufdd3\315\ufdd3\326\ufdd3\u014c\ufdd3\u0186\ufdd3\u018e\ufdd3\001\ufecb" +
    "\000\002\001\ufeca\000\002\001\ufec9\000\002\001\ufdca\000" +
    "\026\005\225\006\245\012\236\250\235\261\233\315\243" +
    "\326\251\u014c\250\u0186\246\u018e\247\001\002\000\030\005" +
    "\ufdd3\006\ufdd3\012\ufdd3\112\u0105\250\ufdd3\261\ufdd3\315\ufdd3" +
    "\326\ufdd3\u014c\ufdd3\u0186\ufdd3\u018e\ufdd3\001\ufece\000\002\001" +
    "\ufeb8\000\012\112\u0105\247\u0115\253\u0113\u0189\u0112\001\ufdd3" +
    "\000\002\001\ufeb6\000\002\001\ufeb2\000\002\001\ufe71\000" +
    "\004\005\225\001\002\000\002\001\ufeb3\000\026\005\225" +
    "\006\245\012\236\250\235\261\233\315\243\326\251\u014c" +
    "\250\u0186\246\u018e\247\001\002\000\010\247\u0115\253\u0113" +
    "\u0189\u0112\001\ufeb7\000\002\001\ufeb5\000\030\005\ufdd3\006" +
    "\ufdd3\012\ufdd3\112\u0105\250\ufdd3\261\ufdd3\315\ufdd3\326\ufdd3" +
    "\u014c\ufdd3\u0186\ufdd3\u018e\ufdd3\001\ufeb4\000\002\001\ufdf9\000" +
    "\006\005\ufdd3\112\u0105\001\ufe75\000\004\005\225\001\002" +
    "\000\002\001\ufdf8\000\052\005\u012a\006\u012f\012\u0126\040" +
    "\u0130\043\u011f\046\u0129\142\u012d\167\u012c\310\u0131\321\u0132" +
    "\325\u0121\341\u0128\343\u0125\345\u0134\347\u0135\351\u0133\375" +
    "\u012b\u0104\u0120\u0177\u0127\u0187\u0136\001\ufe5d\000\002\001\ufe89" +
    "\000\002\001\ufe10\000\002\001\ufe12\000\002\001\ufe58\000" +
    "\002\001\ufe5c\000\002\001\ufe5a\000\002\001\ufe13\000\002" +
    "\001\ufe11\000\002\001\ufe16\000\002\001\ufe59\000\002\001" +
    "\ufe0a\000\002\001\ufe0f\000\002\001\ufe17\000\002\001\ufe55" +
    "\000\002\001\ufe0b\000\002\001\ufe0c\000\052\005\u012a\006" +
    "\u012f\012\u0126\040\u0130\043\u011f\046\u0129\142\u012d\167\u012c" +
    "\310\u0131\321\u0132\325\u0121\341\u0128\343\u0125\345\u0134\347" +
    "\u0135\351\u0133\375\u012b\u0104\u0120\u0177\u0127\u0187\u0136\001\ufe5e" +
    "\000\002\001\ufe15\000\002\001\ufe54\000\002\001\ufe0d\000" +
    "\002\001\ufe56\000\002\001\ufe0e\000\002\001\ufe57\000\002" +
    "\001\ufe09\000\036\005\u012a\006\u012f\012\u0126\043\u011f\046" +
    "\u0129\142\u012d\167\u012c\310\u0131\341\u0128\343\u0125\347\u0135" +
    "\351\u0133\u0104\u0120\u0187\u0136\001\002\000\002\001\ufe19\000" +
    "\040\005\u012a\006\u012f\012\u0126\043\u011f\046\u0129\142\u012d" +
    "\167\u012c\310\u0131\341\u0128\343\u0125\347\u0135\351\u0133\u0104" +
    "\u0120\u0187\u0136\u0188\u013a\001\002\000\002\001\ufe18\000\002" +
    "\001\ufe14\000\002\001\ufe5b\000\004\311\u013d\001\ufec6\000" +
    "\002\001\002\000\002\001\ufec8\000\026\005\225\006\245" +
    "\012\236\250\235\261\233\315\243\326\251\u014c\250\u0186" +
    "\246\u018e\247\001\002\000\002\001\ufec7\000\004\005\225" +
    "\001\ufee9\000\002\001\ufee7\000\006\005\ufdd3\112\u0105\001" +
    "\ufee4\000\012\074\u014c\164\u014a\u0164\u0147\u016d\u0148\001\002" +
    "\000\002\001\ufee2\000\026\005\225\006\245\012\236\250" +
    "\235\261\233\315\243\326\251\u014c\250\u0186\246\u018e\247" +
    "\001\002\000\036\005\225\006\245\012\236\241\u0152\250" +
    "\235\261\233\315\243\326\251\357\u014e\361\u014f\u014c\250" +
    "\u0168\u0150\u0186\246\u018e\247\001\002\000\004\074\u0154\001" +
    "\002\000\002\001\ufee5\000\004\074\u0153\001\002\000\002" +
    "\001\ufee3\000\036\005\225\006\245\012\236\241\u0152\250" +
    "\235\261\233\315\243\326\251\357\u014e\361\u014f\u014c\250" +
    "\u0168\u0150\u0186\246\u018e\247\001\002\000\002\001\ufee0\000" +
    "\002\001\ufed8\000\002\001\ufed9\000\002\001\ufeda\000\002" +
    "\001\ufedc\000\002\001\ufedb\000\002\001\ufedd\000\002\001" +
    "\ufede\000\002\001\ufee1\000\002\001\ufedf\000\002\001\ufee6" +
    "\000\002\001\uff96\000\002\001\uff9a\000\002\001\uff97\000" +
    "\002\001\uffcb\000\036\005\u012a\006\u012f\012\u0126\043\u011f" +
    "\046\u0129\142\u012d\167\u012c\310\u0131\341\u0128\343\u0125\347" +
    "\u0135\351\u0133\u0104\u0120\u0187\u0136\001\ufe1b\000\002\001\uff47" +
    "\000\010\005\ufdd3\112\u0105\u0120\u0160\001\uff42\000\002\001" +
    "\uff45\000\002\001\uff44\000\026\043\u011f\046\u0129\142\u012d" +
    "\167\u012c\310\u0131\341\u0128\343\u0125\347\u0135\351\u0133\u0104" +
    "\u0120\001\002\000\002\001\uff41\000\026\043\u011f\046\u0129" +
    "\142\u012d\167\u012c\310\u0131\341\u0128\343\u0125\347\u0135\351" +
    "\u0133\u0104\u0120\001\uff43\000\004\134\u0166\001\ufdd1\000\004" +
    "\074\u0167\001\002\000\002\001\ufdd2\000\026\005\225\006" +
    "\245\012\236\250\235\261\233\315\243\326\251\u014c\250" +
    "\u0186\246\u018e\247\001\002\000\002\001\uff3e\000\002\001" +
    "\uff3f\000\002\001\uff40\000\002\001\ufe86\000\004\154\u016f" +
    "\001\ufeae\000\002\001\ufeb1\000\002\001\ufeaf\000\004\074" +
    "\u018e\001\ufdd5\000\004\301\u0172\001\002\000\010\371\u0185" +
    "\u0102\u0187\u015a\u0182\001\ufe9d\000\004\005\225\001\002\000" +
    "\006\132\u017a\155\u0177\001\ufea3\000\002\001\ufea7\000\004" +
    "\005\225\001\ufea8\000\002\001\ufea6\000\004\266\u017d\001" +
    "\ufdcd\000\002\001\ufea5\000\006\132\u017a\155\u0177\001\ufea4" +
    "\000\004\266\u017d\001\ufdcd\000\002\001\ufea2\000\004\005" +
    "\225\001\002\000\002\001\ufdce\000\002\001\ufe9f\000\002" +
    "\001\ufea1\000\004\005\225\001\002\000\002\001\ufea0\000" +
    "\004\266\u017d\001\ufdcd\000\002\001\ufe98\000\002\001\ufeb0" +
    "\000\002\001\ufe73\000\010\371\u0185\u0102\u0187\u015a\u0182\001" +
    "\ufe9e\000\004\005\225\001\002\000\002\001\ufe9c\000\002" +
    "\001\ufe9a\000\002\001\ufe9b\000\004\005\225\001\002\000" +
    "\002\001\ufe99\000\004\041\u018f\001\ufdd7\000\002\001\ufdd6" +
    "\000\002\001\ufdd8\000\030\005\225\006\245\012\236\250" +
    "\235\261\233\315\243\326\251\364\u0191\u014c\250\u0186\246" +
    "\u018e\247\001\002\000\002\001\ufea9\000\002\001\ufeac\000" +
    "\030\005\225\006\245\012\236\250\235\261\233\315\243" +
    "\326\251\364\u0191\u014c\250\u0186\246\u018e\247\001\ufead\000" +
    "\002\001\ufeaa\000\002\001\ufeab\000\002\001\uffea\000\002" +
    "\001\uffee\000\154\007\203\010\075\013\046\014\030\016" +
    "\150\032\066\033\156\035\115\063\011\075\216\076\125" +
    "\104\020\122\065\126\165\153\110\160\056\162\106\171" +
    "\120\200\127\202\145\206\067\212\140\230\200\232\202" +
    "\235\160\256\141\265\166\273\033\277\027\302\014\330" +
    "\173\336\045\340\101\344\034\362\213\377\130\u010f\025" +
    "\u011a\171\u0125\116\u012a\133\u0130\170\u013b\161\u0143\212\u014f" +
    "\164\u0151\060\u0152\206\u0153\172\u016b\142\u0175\076\u017a\105" +
    "\u018b\211\u018c\072\u018d\114\001\uffe6\000\004\011\u019a\001" +
    "\uffec\000\004\u0131\u019c\001\uffe3\000\004\007\u019d\001\002" +
    "\000\002\001\uffe4\000\002\001\uffe5\000\002\001\uffe9\000" +
    "\002\001\uffe8\000\012\040\u01ab\066\u01a6\225\u01a1\247\u01aa" +
    "\001\ufe94\000\002\001\ufe8a\000\002\001\ufe91\000\002\001" +
    "\ufe8e\000\026\005\225\006\245\012\236\250\235\261\233" +
    "\315\243\326\251\u014c\250\u0186\246\u018e\247\001\002\000" +
    "\002\001\ufe8f\000\002\001\ufe70\000\002\001\ufe93\000\002" +
    "\001\ufe96\000\012\040\u01ab\066\u01a6\225\u01a1\247\u01aa\001" +
    "\ufe95\000\026\005\225\006\245\012\236\250\235\261\233" +
    "\315\243\326\251\u014c\250\u0186\246\u018e\247\001\002\000" +
    "\026\005\ufe6f\006\ufe6f\012\ufe6f\250\ufe6f\261\ufe6f\315\ufe6f" +
    "\326\ufe6f\u014c\ufe6f\u0186\ufe6f\u018e\ufe6f\001\ufe8b\000\002\001" +
    "\ufe90\000\002\001\ufe8d\000\002\001\ufe92\000\002\001\ufe8c" +
    "\000\002\001\uffb8\000\002\001\uff71\000\010\050\u01db\053" +
    "\u01da\364\u01dc\001\uff58\000\002\001\ufe42\000\002\001\ufe20" +
    "\000\046\005\225\006\245\012\236\043\u01c2\241\u01c4\250" +
    "\235\261\233\315\243\326\251\343\u01b7\347\u01bb\351\u01b4" +
    "\u0104\u01ba\u014c\250\u0168\u01b9\u0186\246\u0187\u01c1\u018e\247\001" +
    "\002\000\014\017\306\020\307\021\311\022\313\023\310" +
    "\001\ufe38\000\002\001\ufe22\000\002\001\ufe33\000\002\001" +
    "\ufe25\000\002\001\ufe23\000\002\001\ufe21\000\002\001\uff5a" +
    "\000\002\001\ufe37\000\002\001\ufe48\000\002\001\ufe35\000" +
    "\002\001\ufe39\000\050\005\225\006\245\012\236\043\u01c2" +
    "\241\u01c4\250\235\261\233\315\243\326\251\343\u01b7\346" +
    "\u01b5\347\u01bb\351\u01b4\u0104\u01ba\u014c\250\u0168\u01b9\u0186\246" +
    "\u0187\u01c1\u018e\247\001\002\000\002\001\ufe1f\000\042\025" +
    "\u01c5\026\u01cf\027\u01ce\030\u01cd\031\u01c6\043\u01c2\226\u01c7" +
    "\241\u01c4\257\u01cc\316\u01d1\343\u01b7\346\u01ca\347\u01bb\351" +
    "\u01b4\u0104\u01ba\u0168\u01b9\001\ufe46\000\002\001\ufe24\000\002" +
    "\001\ufe2e\000\002\001\ufe30\000\004\u0164\u01d7\001\ufdcb\000" +
    "\046\005\225\006\245\012\236\043\u01c2\241\u01c4\250\235" +
    "\261\233\315\243\326\251\343\u01b7\347\u01bb\351\u01b4\u0104" +
    "\u01ba\u014c\250\u0168\u01b9\u0186\246\u0187\u01c1\u018e\247\001\002" +
    "\000\002\001\ufe3c\000\040\025\u01c5\026\u01cf\027\u01ce\030" +
    "\u01cd\031\u01c6\043\u01c2\226\u01c7\241\u01c4\257\u01cc\316\u01d1" +
    "\343\u01b7\347\u01bb\351\u01b4\u0104\u01ba\u0168\u01b9\001\002\000" +
    "\002\001\ufe2a\000\002\001\ufe27\000\002\001\ufe2d\000\002" +
    "\001\ufe2f\000\002\001\ufe2c\000\002\001\ufe40\000\002\001" +
    "\ufe26\000\004\364\u01d3\001\ufe2b\000\010\226\u01c7\257\u01cc" +
    "\316\u01d1\001\002\000\002\001\ufe29\000\002\001\ufe41\000" +
    "\002\001\ufe3b\000\002\001\ufdcc\000\002\001\ufe28\000\012" +
    "\050\u01db\053\u01da\364\u01dc\u0188\u01dd\001\002\000\002\001" +
    "\ufe1e\000\002\001\ufe1c\000\002\001\ufe1d\000\002\001\ufe36" +
    "\000\070\005\225\006\245\012\236\025\u01c5\026\u01cf\027" +
    "\u01ce\030\u01cd\031\u01c6\043\u01c2\226\u01c7\241\u01c4\250\235" +
    "\257\u01cc\261\233\315\243\316\u01d1\326\251\343\u01b7\346" +
    "\u01df\347\u01bb\351\u01b4\u0104\u01ba\u014c\250\u0168\u01b9\u0186\246" +
    "\u0187\u01c1\u018e\247\001\002\000\022\025\u01c5\026\u01cf\027" +
    "\u01ce\030\u01cd\031\u01c6\226\u01c7\257\u01cc\316\u01d1\001\ufe31" +
    "\000\046\005\225\006\245\012\236\043\u01c2\241\u01c4\250" +
    "\235\261\233\315\243\326\251\343\u01b7\347\u01bb\351\u01b4" +
    "\u0104\u01ba\u014c\250\u0168\u01b9\u0186\246\u0187\u01c1\u018e\247\001" +
    "\002\000\002\001\ufe47\000\002\001\ufe3f\000\042\025\u01c5" +
    "\026\u01cf\027\u01ce\030\u01cd\031\u01c6\043\u01c2\226\u01c7\241" +
    "\u01c4\257\u01cc\316\u01d1\343\u01b7\346\u01e4\347\u01bb\351\u01b4" +
    "\u0104\u01ba\u0168\u01b9\001\ufe43\000\040\025\u01c5\026\u01cf\027" +
    "\u01ce\030\u01cd\031\u01c6\043\u01c2\226\u01c7\241\u01c4\257\u01cc" +
    "\316\u01d1\343\u01b7\347\u01bb\351\u01b4\u0104\u01ba\u0168\u01b9\001" +
    "\002\000\002\001\ufe3d\000\002\001\ufe3e\000\002\001\ufe44" +
    "\000\046\005\225\006\245\012\236\043\u01c2\241\u01c4\250" +
    "\235\261\233\315\243\326\251\343\u01b7\347\u01bb\351\u01b4" +
    "\u0104\u01ba\u014c\250\u0168\u01b9\u0186\246\u0187\u01c1\u018e\247\001" +
    "\002\000\002\001\ufe32\000\002\001\ufe45\000\026\005\225" +
    "\006\245\012\236\250\235\261\233\315\243\326\251\u014c" +
    "\250\u0186\246\u018e\247\001\002\000\002\001\ufe34\000\002" +
    "\001\ufe3a\000\002\001\ufec3\000\006\112\u0105\154\u01fa\001" +
    "\ufdd3\000\030\005\225\006\245\012\236\250\235\261\233" +
    "\301\u01f3\315\243\326\251\u014c\250\u0186\246\u018e\247\001" +
    "\002\000\002\001\ufec2\000\002\001\ufec5\000\004\005\225" +
    "\001\002\000\006\u0102\ufdc7\u0177\u01f7\001\ufeb9\000\004\u0102" +
    "\u01f8\001\002\000\002\001\ufebb\000\002\001\ufdc8\000\004" +
    "\005\225\001\002\000\002\001\ufeba\000\004\074\u018e\001" +
    "\ufdd5\000\002\001\ufec1\000\030\005\225\006\245\012\236" +
    "\250\235\261\233\315\243\326\251\u013f\u01ff\u014c\250\u0186" +
    "\246\u018e\247\001\002\000\002\001\ufebe\000\002\001\ufebd" +
    "\000\002\001\ufebc\000\002\001\ufe78\000\002\001\ufe7c\000" +
    "\002\001\ufe77\000\030\005\225\006\245\012\236\250\235" +
    "\261\233\315\243\326\251\u014c\250\u0186\246\u0187\273\u018e" +
    "\247\001\002\000\002\001\ufe79\000\002\001\ufe76\000\002" +
    "\001\ufe74\000\002\001\ufe7a\000\002\001\ufe7e\000\002\001" +
    "\ufe7b\000\004\u0164\u020b\001\002\000\004\005\225\001\002" +
    "\000\006\005\ufdd3\112\u0105\001\uff2e\000\002\001\uffe1\000" +
    "\006\301\u0214\311\u020f\001\ufef9\000\026\005\225\006\245" +
    "\012\236\250\235\261\233\315\243\326\251\u014c\250\u0186" +
    "\246\u018e\247\001\002\000\002\001\ufef8\000\002\001\uff93" +
    "\000\006\301\u0214\311\u020f\001\ufefa\000\002\001\ufef5\000" +
    "\004\005\225\001\002\000\002\001\ufef6\000\002\001\ufef4" +
    "\000\002\001\ufef7\000\002\001\ufef3\000\002\001\ufe88\000" +
    "\012\040\u01ab\066\u01a6\225\u01a1\247\u01aa\001\ufe94\000\002" +
    "\001\ufe97\000\012\050\u01db\053\u01da\364\u01dc\u0160\u0221\001" +
    "\uff50\000\002\001\uff52\000\002\001\uff54\000\002\001\uff55" +
    "\000\002\001\uff57\000\050\005\225\006\245\012\236\043" +
    "\u01c2\241\u01c4\250\235\261\233\315\243\326\251\343\u01b7" +
    "\346\u01b5\347\u01bb\351\u01b4\u0104\u01ba\u014c\250\u0168\u01b9\u0186" +
    "\246\u0187\u01c1\u018e\247\001\002\000\002\001\uff53\000\010" +
    "\050\u01db\053\u01da\364\u01dc\001\uff51\000\004\074\u022d\001" +
    "\002\000\002\001\uff2c\000\006\253\u0113\u0189\u0112\001\uff28" +
    "\000\002\001\uff27\000\006\253\u0113\u0189\u0112\001\uff29\000" +
    "\002\001\uff2b\000\002\001\uff24\000\002\001\uff25\000\002" +
    "\001\uff26\000\026\005\225\006\245\012\236\250\235\261" +
    "\233\315\243\326\251\u014c\250\u0186\246\u018e\247\001\002" +
    "\000\002\001\uff2a\000\004\005\u0231\001\002\000\006\005" +
    "\u0235\156\u0234\001\uff4b\000\002\001\uff4e\000\002\001\uff4f" +
    "\000\002\001\uff4c\000\026\005\225\006\245\012\236\250" +
    "\235\261\233\315\243\326\251\u014c\250\u0186\246\u018e\247" +
    "\001\002\000\002\001\uff4d\000\002\001\uff4a\000\010\041" +
    "\u0202\130\u0205\u012c\u0206\001\ufe7d\000\004\031\u0239\001\002" +
    "\000\030\005\225\006\245\012\236\250\235\261\233\315" +
    "\243\326\251\u014c\250\u0186\246\u0187\273\u018e\247\001\002" +
    "\000\032\005\225\006\245\012\236\250\235\261\233\315" +
    "\243\326\251\u014c\250\u0186\246\u0187\273\u0189\u0112\u018e\247" +
    "\001\uff6a\000\002\001\uff6c\000\002\001\uff6e\000\004\u0189" +
    "\u0112\001\uff6b\000\002\001\uff70\000\002\001\uff67\000\002" +
    "\001\uff69\000\002\001\uff6d\000\002\001\uff68\000\002\001" +
    "\uff6f\000\002\001\ufe87\000\030\005\ufdd3\006\ufdd3\012\ufdd3" +
    "\112\u0105\250\ufdd3\261\ufdd3\315\ufdd3\326\ufdd3\u014c\ufdd3\u0186" +
    "\ufdd3\u018e\ufdd3\001\uff66\000\004\247\u0248\001\002\000\002" +
    "\001\uff8f\000\014\005\u024e\135\u024c\140\u024d\141\u024b\u0161" +
    "\u024a\001\002\000\002\001\uff8d\000\002\001\uff88\000\002" +
    "\001\uff89\000\004\005\u0250\001\ufdcf\000\004\005\u0250\001" +
    "\ufdcf\000\002\001\uff8c\000\002\001\uff8a\000\002\001\ufdd0" +
    "\000\002\001\uff8b\000\002\001\uff09\000\002\001\uff0b\000" +
    "\022\005\225\006\u0278\040\u025e\u015c\u0255\u0160\u0259\u0162\u0252" +
    "\u016c\u025f\u0174\u0262\001\uff11\000\006\040\u0274\066\u0273\001" +
    "\002\000\002\001\uff19\000\002\001\uff04\000\002\001\uff16" +
    "\000\004\005\225\001\002\000\042\005\225\006\245\012" +
    "\236\040\u025e\250\235\261\233\315\243\326\251\u014c\250" +
    "\u015c\u0255\u0160\u0259\u0162\u0252\u016c\u025f\u0174\u0262\u0186\246\u018e" +
    "\247\001\uff14\000\002\001\uff07\000\002\001\uff06\000\002" +
    "\001\uff15\000\026\005\225\006\245\012\236\250\235\261" +
    "\233\315\243\326\251\u014c\250\u0186\246\u018e\247\001\002" +
    "\000\050\005\225\006\245\012\236\043\u01c2\241\u01c4\250" +
    "\235\261\233\315\243\326\251\343\u01b7\346\u01b5\347\u01bb" +
    "\351\u01b4\u0104\u01ba\u014c\250\u0168\u01b9\u0186\246\u0187\u01c1\u018e" +
    "\247\001\002\000\002\001\uff05\000\002\001\uff08\000\026" +
    "\005\225\006\245\012\236\250\235\261\233\315\243\326" +
    "\251\u014c\250\u0186\246\u018e\247\001\002\000\004\247\u0265" +
    "\001\002\000\002\001\ufdf0\000\026\005\225\006\245\012" +
    "\236\250\235\261\233\315\243\326\251\u014c\250\u0186\246" +
    "\u018e\247\001\002\000\004\074\u0267\001\002\000\026\005" +
    "\225\006\245\012\236\250\235\261\233\315\243\326\251" +
    "\u014c\250\u0186\246\u018e\247\001\002\000\002\001\ufeff\000" +
    "\010\050\u01db\053\u01da\364\u01dc\001\uff00\000\004\247\u026b" +
    "\001\002\000\026\005\225\006\245\012\236\250\235\261" +
    "\233\315\243\326\251\u014c\250\u0186\246\u018e\247\001\002" +
    "\000\004\074\u026d\001\002\000\026\005\225\006\245\012" +
    "\236\250\235\261\233\315\243\326\251\u014c\250\u0186\246" +
    "\u018e\247\001\002\000\002\001\ufefe\000\002\001\uff03\000" +
    "\002\001\uff02\000\002\001\uff0a\000\002\001\uff01\000\002" +
    "\001\ufefd\000\002\001\ufefc\000\002\001\uff10\000\042\005" +
    "\225\006\245\012\236\040\u025e\250\235\261\233\315\243" +
    "\326\251\u014c\250\u015c\u0255\u0160\u0259\u0162\u0252\u016c\u025f\u0174" +
    "\u0262\u0186\246\u018e\247\001\uff12\000\002\001\uff0f\000\002" +
    "\001\uff0c\000\002\001\uff0d\000\002\001\uff17\000\002\001" +
    "\uff0e\000\006\074\u027f\301\u027e\001\002\000\010\253\u0113" +
    "\u011c\u0282\u012c\u0206\001\uff60\000\004\005\225\001\002\000" +
    "\026\005\225\006\245\012\236\250\235\261\233\315\243" +
    "\326\251\u014c\250\u0186\246\u018e\247\001\002\000\030\005" +
    "\ufdd3\006\ufdd3\012\ufdd3\112\u0105\250\ufdd3\261\ufdd3\315\ufdd3" +
    "\326\ufdd3\u014c\ufdd3\u0186\ufdd3\u018e\ufdd3\001\uff62\000\006\005" +
    "\ufdd3\112\u0105\001\uff63\000\004\005\225\001\002\000\002" +
    "\001\uff5c\000\010\253\u0113\u011c\u0282\u012c\u0206\001\uff61\000" +
    "\002\001\uff5f\000\002\001\uff65\000\002\001\uff5d\000\002" +
    "\001\uff5b\000\002\001\uff5e\000\002\001\ufe72\000\010\050" +
    "\u01db\053\u01da\364\u01dc\001\uff49\000\054\005\225\006\245" +
    "\012\236\040\u0295\041\u028f\066\u0292\074\u0291\100\u028e\127" +
    "\u028d\244\u0298\250\235\261\233\313\u0290\315\243\326\251" +
    "\u0120\u0297\u014c\250\u015a\u029a\u0164\u0299\u0186\246\u018e\247\001" +
    "\002\000\002\001\uff30\000\002\001\uff34\000\002\001\uff3a" +
    "\000\002\001\uff36\000\002\001\uff39\000\002\001\uff38\000" +
    "\054\005\225\006\245\012\236\040\u0295\041\u028f\066\u0292" +
    "\074\u0291\100\u028e\127\u028d\244\u0298\250\235\261\233\313" +
    "\u0290\315\243\326\251\u0120\u0297\u014c\250\u015a\u029a\u0164\u0299" +
    "\u0186\246\u018e\247\001\uff3d\000\002\001\uff2f\000\002\001" +
    "\uff37\000\002\001\uff3c\000\002\001\uff31\000\002\001\uff35" +
    "\000\002\001\uff33\000\002\001\uff32\000\002\001\uff3b\000" +
    "\006\301\u0214\311\u020f\001\ufef9\000\002\001\ufefb\000\026" +
    "\005\225\006\245\012\236\250\235\261\233\315\243\326" +
    "\251\u014c\250\u0186\246\u018e\247\001\002\000\002\001\ufef2" +
    "\000\004\u0174\u02a5\001\ufeee\000\004\u0174\u02a5\001\ufeef\000" +
    "\002\001\ufeeb\000\002\001\ufef0\000\002\001\ufeed\000\026" +
    "\005\225\006\245\012\236\250\235\261\233\315\243\326" +
    "\251\u014c\250\u0186\246\u018e\247\001\002\000\002\001\ufeea" +
    "\000\002\001\ufeec\000\002\001\ufe84\000\004\005\u02aa\001" +
    "\ufe85\000\010\246\u02ab\345\u02af\u0177\u02ac\001\ufe64\000\002" +
    "\001\ufe5f\000\002\001\ufe61\000\002\001\ufe82\000\002\001" +
    "\ufe63\000\002\001\ufe60\000\010\246\u02ab\345\u02af\u0177\u02ac" +
    "\001\ufe65\000\002\001\ufe62\000\002\001\ufe83\000\002\001" +
    "\ufe80\000\026\005\225\006\245\012\236\250\235\261\233" +
    "\315\243\326\251\u014c\250\u0186\246\u018e\247\001\002\000" +
    "\006\112\u0105\u0164\u02b6\001\ufdd3\000\004\005\225\001\002" +
    "\000\014\005\ufdd3\112\u0105\130\u0205\253\u0113\u012c\u0206\001" +
    "\uff84\000\002\001\uff83\000\002\001\uff80\000\002\001\uff7f" +
    "\000\002\001\uff81\000\002\001\uff87\000\010\130\u0205\253" +
    "\u0113\u012c\u0206\001\uff85\000\002\001\uff82\000\002\001\ufe81" +
    "\000\002\001\000\000\026\005\225\006\245\012\236\250" +
    "\235\261\233\315\243\326\251\u014c\250\u0186\246\u018e\247" +
    "\001\002\000\002\001\ufffb\000\002\001\ufff6\000\004\005" +
    "\u02cc\001\ufff1\000\002\001\ufffa\000\006\u0127\u02c1\u0171\u02c4" +
    "\001\ufff8\000\002\001\ufff5\000\004\007\u02c9\001\002\000" +
    "\002\001\ufff9\000\002\001\ufff4\000\004\005\u02cd\001\ufff2" +
    "\000\002\001\ufff0\000\002\001\uffef\000\002\001\ufff3\000" +
    "\002\001\uffff\000\004\005\u02d1\001\002\000\004\007\u02d2" +
    "\001\002\000\002\001\ufffe" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02d0\000\012\002\003\004\007\147\006\150\004\001" +
    "\001\000\004\003\u02ce\001\001\000\002\001\001\000\012" +
    "\165\u02c1\170\u02c4\171\u02c5\172\u02c2\001\001\000\002\001" +
    "\001\000\246\005\051\006\103\007\054\012\011\024\036" +
    "\025\041\032\060\033\151\046\176\054\123\055\023\063" +
    "\145\073\213\075\154\076\121\106\173\154\133\155\047" +
    "\161\116\162\022\163\136\164\043\173\015\174\143\175" +
    "\052\176\150\177\042\200\134\201\166\202\072\203\112" +
    "\204\063\205\070\206\175\207\110\210\200\211\122\216" +
    "\012\217\050\236\035\237\061\243\016\244\216\245\120" +
    "\246\101\247\207\250\062\251\135\252\153\253\106\256" +
    "\161\267\204\270\030\271\025\272\056\273\174\274\156" +
    "\275\053\276\073\277\021\300\046\301\076\302\162\314" +
    "\214\315\077\316\031\317\206\320\040\321\067\322\034" +
    "\323\102\325\020\326\037\327\014\330\131\331\130\332" +
    "\111\333\152\334\146\335\203\336\125\337\142\001\001" +
    "\000\002\001\001\000\016\u011a\u02b3\u011b\u0207\u011c\u0200\u011d" +
    "\u0206\u011e\u0203\u0121\u01ff\001\001\000\002\001\001\000\004" +
    "\u012c\u02b2\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\344\u02a7\345\u02a8\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\u0126" +
    "\u029d\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\u0101\231\u0106\u028b\u0108\237\u0109\233\u010d\243\u010e\220\u0110" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\354\u01b7\355\u028a\356\u01bd\364\u01c2\366\u01bc\367" +
    "\u01b2\370\u01bf\373\u01b5\374\u01be\u0101\231\u0106\270\u0108\237" +
    "\u0109\233\u010d\243\u010e\220\u0110\222\001\001\000\020\u0101" +
    "\231\u0106\u027b\u0108\237\u0109\233\u010d\243\u010e\220\u0110\222" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\220\u0255\221\u0257\222\u0259\226\u0252\230\u0253\231" +
    "\u0256\232\u0260\233\u025a\234\u025b\235\u025f\u010d\u025c\u010e\220" +
    "\u0110\222\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\u010a\u0245\u010d\321\u010e\220\u0110\222" +
    "\001\001\000\022\u0101\231\u0106\u0103\u0108\237\u0109\233\u010c" +
    "\u0244\u010d\243\u010e\220\u0110\222\001\001\000\002\001\001" +
    "\000\012\u0107\u0123\u0123\u0136\u0124\u015b\u0125\u0243\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\016\u0237\u010a\u0236\u010d\321\u010e\220\u0110" +
    "\222\001\001\000\004\u012d\u022e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\041" +
    "\u0224\042\u0225\u0101\231\u0106\u0223\u0108\237\u0109\233\u010d\243" +
    "\u010e\220\u0110\222\001\001\000\002\001\001\000\050\213" +
    "\u021f\214\u021e\215\u021d\354\u01b7\355\u021b\356\u01bd\364\u01c2" +
    "\366\u01bc\367\u01b2\370\u01bf\373\u01b5\374\u01be\u0101\231\u0106" +
    "\270\u0108\237\u0109\233\u010d\243\u010e\220\u0110\222\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\236\006\103\007\054\012\011" +
    "\024\036\025\041\032\060\033\151\046\176\054\123\055" +
    "\023\063\145\073\213\075\154\076\121\106\173\162\u020c" +
    "\163\136\164\043\173\015\174\143\175\052\176\150\177" +
    "\042\200\134\201\166\202\072\203\112\204\063\205\070" +
    "\206\175\207\110\210\200\211\122\216\012\217\050\236" +
    "\035\237\061\243\016\244\216\245\120\246\101\247\207" +
    "\250\062\251\135\252\153\253\106\256\161\267\204\270" +
    "\030\271\025\272\056\273\174\274\156\275\053\276\073" +
    "\277\021\300\046\301\076\302\162\314\214\315\077\316" +
    "\031\317\206\320\040\321\067\322\034\323\102\325\020" +
    "\326\037\327\014\330\131\331\130\332\111\333\152\334" +
    "\146\335\203\336\125\337\142\001\001\000\002\001\001" +
    "\000\016\u011a\u0202\u011b\u0207\u011c\u0200\u011d\u0206\u011e\u0203\u0121" +
    "\u01ff\001\001\000\026\077\u01ef\100\u01ed\u0101\231\u0106\u0103" +
    "\u0108\237\u0109\233\u010c\u01ee\u010d\243\u010e\220\u0110\222\001" +
    "\001\000\044\212\u01bb\354\u01b7\355\u01b1\356\u01bd\364\u01c2" +
    "\366\u01bc\367\u01b2\370\u01bf\373\u01b5\374\u01be\u0101\231\u0106" +
    "\270\u0108\237\u0109\233\u010d\243\u010e\220\u0110\222\001\001" +
    "\000\002\001\001\000\020\u0101\231\u0106\u01b0\u0108\237\u0109" +
    "\233\u010d\243\u010e\220\u0110\222\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\u0107\u0123\u0123\u0136\u0124\u015b\u0125\u01af\001\001\000\002" +
    "\001\001\000\012\151\u0196\152\u0198\153\u0195\156\u0197\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\112\u016c\u0101" +
    "\231\u0106\u016b\u0108\237\u0109\233\u010d\243\u010e\220\u0110\222" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\u0107\u0123" +
    "\u0123\u0136\u0124\u015b\u0125\u016a\001\001\000\002\001\001\000" +
    "\016\034\u015c\u010a\u0118\u010b\u015d\u010d\321\u010e\220\u0110\222" +
    "\001\001\000\012\u0107\u0123\u0123\u0136\u0124\u015b\u0125\u015a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\160\u0158\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\303\u0140\304\u0141\305\u0143" +
    "\u010a\u0118\u010b\u0142\u010d\321\u010e\220\u0110\222\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\107" +
    "\u010d\u0101\231\u0106\u0103\u0108\237\u0109\233\u010c\u010e\u010d\243" +
    "\u010e\220\u0110\222\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\u0131\360\001\001\000\010\341\350\342\353" +
    "\343\351\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\266\223\u010d\221\u010e\220\u0110\222\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\u0117\337\u0118\335\u0119" +
    "\340\001\001\000\002\001\001\000\010\u0112\323\u0113\324" +
    "\u0114\325\001\001\000\006\257\226\260\225\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\261\317\262\316" +
    "\001\001\000\024\263\236\264\230\u0101\231\u0106\241\u0108" +
    "\237\u0109\233\u010d\243\u010e\220\u0110\222\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\264\256" +
    "\u0101\231\u0106\241\u0108\237\u0109\233\u010d\243\u010e\220\u0110" +
    "\222\001\001\000\002\001\001\000\004\265\253\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\u0101\231\u0106\252\u0108" +
    "\237\u0109\233\u010d\243\u010e\220\u0110\222\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\u0102\261\001\001\000\042" +
    "\346\266\347\265\350\274\353\263\354\267\u0101\231\u0103" +
    "\264\u0104\273\u0105\262\u0106\270\u0108\237\u0109\233\u010d\243" +
    "\u010e\220\u0110\222\u0111\271\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\u0100\311\001\001\000\004\351\302\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\346\266" +
    "\347\265\350\277\353\263\354\267\u0101\231\u0106\270\u0108" +
    "\237\u0109\233\u010d\243\u010e\220\u0110\222\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\346\266\347\265\350" +
    "\274\353\263\354\267\u0101\231\u0105\276\u0106\270\u0108\237" +
    "\u0109\233\u010d\243\u010e\220\u0110\222\u0111\271\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\352\303\354\304\u0101\231\u0106\270\u0108\237\u0109\233\u010d" +
    "\243\u010e\220\u0110\222\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\353\313" +
    "\354\267\u0101\231\u0106\270\u0108\237\u0109\233\u010d\243\u010e" +
    "\220\u0110\222\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\u010a\320\u010d\321\u010e\220\u0110" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\346\266\347\265\350" +
    "\331\353\263\354\267\u0101\231\u0106\270\u0108\237\u0109\233" +
    "\u010d\243\u010e\220\u0110\222\u0115\327\u0116\330\001\001\000" +
    "\002\001\001\000\004\u0114\326\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\346\266\347\265\350\331\353\263" +
    "\354\267\u0101\231\u0106\270\u0108\237\u0109\233\u010d\243\u010e" +
    "\220\u0110\222\u0116\334\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\u0119\344\001\001\000\006\u010e\343\u0110" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\u010e\342\u0110\222\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\342\357\343\351\001\001\000" +
    "\004\340\354\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\064\u0100\065\377" +
    "\066\366\067\373\070\363\071\365\072\374\140\362\001" +
    "\001\000\004\u012c\u010b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\u0101\231\u0106\u0103\u0108\237" +
    "\u0109\233\u010c\u0107\u010d\243\u010e\220\u0110\222\001\001\000" +
    "\022\u0101\231\u0106\u0103\u0108\237\u0109\233\u010c\u0102\u010d\243" +
    "\u010e\220\u0110\222\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\065\u0101\066\366\067\373\070\363\071\365\072" +
    "\374\140\362\001\001\000\002\001\001\000\004\u0128\u0105" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\u0101" +
    "\231\u0106\u0106\u0108\237\u0109\233\u010d\243\u010e\220\u0110\222" +
    "\001\001\000\002\001\001\000\004\u0128\u0105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\u0101\231\u0106\u0103\u0108\237\u0109\233\u010c\u010c\u010d\243\u010e" +
    "\220\u0110\222\001\001\000\004\u0128\u0105\001\001\000\002" +
    "\001\001\000\014\110\u0115\111\u010f\u011f\u0113\u0122\u0110\u0128" +
    "\u0105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\u010a\u0118\u010b\u0119\u010d\321\u010e\220\u0110" +
    "\222\001\001\000\002\001\001\000\022\u0101\231\u0106\u0103" +
    "\u0108\237\u0109\233\u010c\u0117\u010d\243\u010e\220\u0110\222\001" +
    "\001\000\010\111\u0116\u011f\u0113\u0122\u0110\001\001\000\002" +
    "\001\001\000\004\u0128\u0105\001\001\000\002\001\001\000" +
    "\004\u0128\u011a\001\001\000\012\u010a\u011b\u010d\321\u010e\220" +
    "\u0110\222\001\001\000\002\001\001\000\014\144\u011d\145" +
    "\u012d\146\u0121\u0107\u0123\u0123\u0122\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\146\u013a\u0107" +
    "\u0123\u0123\u0122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\u0107\u0123\u0123\u0136" +
    "\u0124\u0137\001\001\000\002\001\001\000\006\u0107\u0123\u0123" +
    "\u0138\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\074\u013d\001\001\000\004\363\u013e\001" +
    "\001\000\002\001\001\000\020\u0101\231\u0106\u013f\u0108\237" +
    "\u0109\233\u010d\243\u010e\220\u0110\222\001\001\000\002\001" +
    "\001\000\020\304\u0156\305\u0143\u010a\u0118\u010b\u0142\u010d\321" +
    "\u010e\220\u0110\222\001\001\000\002\001\001\000\004\u0128" +
    "\u011a\001\001\000\012\306\u0148\307\u014a\311\u0144\312\u0145" +
    "\001\001\000\002\001\001\000\020\u0101\231\u0106\u0155\u0108" +
    "\237\u0109\233\u010d\243\u010e\220\u0110\222\001\001\000\022" +
    "\310\u0154\u0101\231\u0106\u0150\u0108\237\u0109\233\u010d\243\u010e" +
    "\220\u0110\222\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\310\u014c\u0101" +
    "\231\u0106\u0150\u0108\237\u0109\233\u010d\243\u010e\220\u0110\222" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\u0107" +
    "\u0123\u0123\u0138\001\001\000\002\001\001\000\006\035\u015e" +
    "\u0128\u011a\001\001\000\002\001\001\000\004\u0130\u0160\001" +
    "\001\000\010\036\u0162\037\u0161\u0107\u0163\001\001\000\002" +
    "\001\001\000\006\037\u0169\u0107\u0163\001\001\000\004\u0129" +
    "\u0164\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\040\u0168\u0101\231\u0106\u0167\u0108\237\u0109\233\u010d\243\u010e" +
    "\220\u0110\222\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\113\u016f\117" +
    "\u016d\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\u0127\u018c\001\001\000\004\114\u0170\001\001\000\012\125" +
    "\u0183\126\u0185\127\u0187\313\u0182\001\001\000\016\115\u0174" +
    "\116\u0173\u010a\u0172\u010d\321\u010e\220\u0110\222\001\001\000" +
    "\010\122\u0177\123\u0178\124\u017a\001\001\000\002\001\001" +
    "\000\014\116\u0175\u010a\u0172\u010d\321\u010e\220\u0110\222\001" +
    "\001\000\002\001\001\000\004\u012b\u017f\001\001\000\002" +
    "\001\001\000\004\124\u017e\001\001\000\004\u012b\u017b\001" +
    "\001\000\002\001\001\000\012\u010a\u017d\u010d\321\u010e\220" +
    "\u0110\222\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\u010a\u0180\u010d\321\u010e\220\u0110\222" +
    "\001\001\000\002\001\001\000\004\u012b\u018a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\127\u0189\313\u0182\001\001\000\012\u010a\u0188\u010d\321\u010e" +
    "\220\u0110\222\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\u010a\u018b\u010d\321\u010e\220\u0110" +
    "\222\001\001\000\002\001\001\000\004\u0126\u018f\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\120\u0192\121" +
    "\u0191\u0101\231\u0106\u0193\u0108\237\u0109\233\u010d\243\u010e\220" +
    "\u0110\222\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\121\u0194\u0101\231\u0106\u0193\u0108\237\u0109\233\u010d\243" +
    "\u010e\220\u0110\222\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\242\006\103" +
    "\007\054\012\011\024\036\025\041\032\060\033\151\046" +
    "\176\054\123\055\023\063\145\073\213\075\154\076\121" +
    "\106\173\155\u019e\161\116\162\022\163\136\164\043\173" +
    "\015\174\143\175\052\176\150\177\042\200\134\201\166" +
    "\202\072\203\112\204\063\205\070\206\175\207\110\210" +
    "\200\211\122\216\012\217\050\236\035\237\061\243\016" +
    "\244\216\245\120\246\101\247\207\250\062\251\135\252" +
    "\153\253\106\256\161\267\204\270\030\271\025\272\056" +
    "\273\174\274\156\275\053\276\073\277\021\300\046\301" +
    "\076\302\162\314\214\315\077\316\031\317\206\320\040" +
    "\321\067\322\034\323\102\325\020\326\037\327\014\330" +
    "\131\331\130\332\111\333\152\334\146\335\203\336\125" +
    "\337\142\001\001\000\006\153\u019d\156\u0197\001\001\000" +
    "\004\157\u019a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\130\u01a7\131\u01a8\132\u01a6\133\u01a1\134\u01ab\135\u01a4" +
    "\136\u01a2\137\u01a3\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\u0101\231\u0106\u01ae\u0108\237" +
    "\u0109\233\u010d\243\u010e\220\u0110\222\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\132\u01ad\133\u01a1\134\u01ab\135\u01a4\136\u01a2\137" +
    "\u01a3\001\001\000\020\u0101\231\u0106\u01ac\u0108\237\u0109\233" +
    "\u010d\243\u010e\220\u0110\222\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\360" +
    "\u01dd\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\354\u01b7\366\u01bc\370\u01ec\373\u01b5\374\u01be\u0101\231\u0106" +
    "\270\u0108\237\u0109\233\u010d\243\u010e\220\u0110\222\001\001" +
    "\000\004\u0100\u01ea\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\354\u01b7\355\u01d8" +
    "\356\u01bd\364\u01c2\366\u01bc\367\u01b2\370\u01bf\373\u01b5\374" +
    "\u01be\u0101\231\u0106\270\u0108\237\u0109\233\u010d\243\u010e\220" +
    "\u0110\222\001\001\000\002\001\001\000\014\362\u01c7\366" +
    "\u01c8\371\u01ca\372\u01d1\377\u01cf\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\u012d\u01d7\001" +
    "\001\000\032\354\u01b7\366\u01bc\370\u01d5\373\u01b5\374\u01be" +
    "\u0101\231\u0106\270\u0108\237\u0109\233\u010d\243\u010e\220\u0110" +
    "\222\001\001\000\002\001\001\000\014\362\u01c7\366\u01c8" +
    "\371\u01ca\372\u01d1\377\u01d4\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\371\u01d3\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\360\u01dd\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\354" +
    "\u01b7\357\u01e0\362\u01df\365\u01e2\366\u01bc\370\u01e1\371\u01ca" +
    "\372\u01d1\373\u01b5\374\u01be\u0101\231\u0106\270\u0108\237\u0109" +
    "\233\u010d\243\u010e\220\u0110\222\001\001\000\012\361\u01e7" +
    "\362\u01e8\371\u01ca\372\u01d1\001\001\000\032\354\u01b7\366" +
    "\u01bc\370\u01e6\373\u01b5\374\u01be\u0101\231\u0106\270\u0108\237" +
    "\u0109\233\u010d\243\u010e\220\u0110\222\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\362\u01c7\366\u01c8\371\u01ca" +
    "\372\u01d1\377\u01e4\001\001\000\014\362\u01c7\366\u01c8\371" +
    "\u01ca\372\u01d1\377\u01e5\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\354\u01b7\366\u01bc\370" +
    "\u01e9\373\u01b5\374\u01be\u0101\231\u0106\270\u0108\237\u0109\233" +
    "\u010d\243\u010e\220\u0110\222\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\354\u01b7\374\u01eb\u0101\231\u0106\270" +
    "\u0108\237\u0109\233\u010d\243\u010e\220\u0110\222\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\102\u01fa\u0128\u0105\001\001\000\026\100\u01f0\104\u01f1\u0101" +
    "\231\u0106\u0103\u0108\237\u0109\233\u010c\u01ee\u010d\243\u010e\220" +
    "\u0110\222\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\u010a\u01f3\u010d\321\u010e\220\u0110\222\001\001\000\006" +
    "\105\u01f5\u012e\u01f4\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\u010a\u01f8\u010d\321\u010e\220" +
    "\u0110\222\001\001\000\002\001\001\000\004\u0127\u01fb\001" +
    "\001\000\002\001\001\000\022\103\u01fc\u0101\231\u0106\u01fd" +
    "\u0108\237\u0109\233\u010d\243\u010e\220\u0110\222\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\346" +
    "\u0209\347\265\353\263\354\267\u0101\231\u0106\270\u0108\237" +
    "\u0109\233\u010d\243\u010e\220\u0110\222\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\u011c\u0208\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\u010a\u0118\u010b\u020b\u010d\321\u010e\220\u0110\222" +
    "\001\001\000\004\u0128\u011a\001\001\000\002\001\001\000" +
    "\014\047\u0210\050\u0211\051\u020f\052\u0214\053\u0212\001\001" +
    "\000\020\u0101\231\u0106\u0217\u0108\237\u0109\233\u010d\243\u010e" +
    "\220\u0110\222\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\051\u0216\052\u0214\053\u0212\001\001\000\002\001" +
    "\001\000\012\u010a\u0215\u010d\321\u010e\220\u0110\222\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\130\u021a\131\u01a8" +
    "\132\u01a6\133\u01a1\134\u01ab\135\u01a4\136\u01a2\137\u01a3\001" +
    "\001\000\002\001\001\000\006\324\u0221\360\u01dd\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\354\u01b7\355\u0222\356\u01bd\364\u01c2" +
    "\366\u01bc\367\u01b2\370\u01bf\373\u01b5\374\u01be\u0101\231\u0106" +
    "\270\u0108\237\u0109\233\u010d\243\u010e\220\u0110\222\001\001" +
    "\000\002\001\001\000\004\360\u01dd\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\043\u0228\044\u0227\045\u0226" +
    "\u011f\u022a\u0122\u0229\001\001\000\002\001\001\000\010\045" +
    "\u022b\u011f\u022a\u0122\u0229\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\u0101" +
    "\231\u0106\u022d\u0108\237\u0109\233\u010d\243\u010e\220\u0110\222" +
    "\001\001\000\002\001\001\000\004\240\u022f\001\001\000" +
    "\006\241\u0231\242\u0232\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\u0101\231\u0106\u0235\u0108" +
    "\237\u0109\233\u010d\243\u010e\220\u0110\222\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\u011a\u0242\u011b\u0207\u011c" +
    "\u0200\u011d\u0206\u011e\u0203\u0121\u01ff\001\001\000\002\001\001" +
    "\000\034\017\u0239\020\u023b\346\u023a\347\265\353\263\354" +
    "\267\u0101\231\u0106\270\u0108\237\u0109\233\u010d\243\u010e\220" +
    "\u0110\222\001\001\000\042\020\u0240\021\u023d\022\u023c\023" +
    "\u023f\346\u023a\347\265\353\263\354\267\u0101\231\u0106\270" +
    "\u0108\237\u0109\233\u010d\243\u010e\220\u0110\222\u0122\u023e\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\u0241" +
    "\u0122\u023e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\u0128\u0105\001\001\000" +
    "\004\010\u0246\001\001\000\002\001\001\000\004\011\u0248" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\u012a\u0250\001\001\000\004\u012a\u024e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\223\u0279\224\u0275\225\u0276\226\u0274\231\u0256\232\u0260\233" +
    "\u025a\234\u025b\235\u025f\u010d\u0278\u010e\220\u0110\222\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\u0110\u0271\001\001\000\040\226\u026e" +
    "\227\u0270\231\u0256\232\u0260\233\u025a\234\u025b\235\u025f\u0101" +
    "\231\u0106\u0263\u0108\237\u0109\233\u010d\243\u010e\220\u010f\u026f" +
    "\u0110\222\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\u0101\231\u0106\u0263\u0108\237\u0109\233" +
    "\u010d\243\u010e\220\u010f\u0269\u0110\222\001\001\000\042\354" +
    "\u01b7\355\u0268\356\u01bd\364\u01c2\366\u01bc\367\u01b2\370\u01bf" +
    "\373\u01b5\374\u01be\u0101\231\u0106\270\u0108\237\u0109\233\u010d" +
    "\243\u010e\220\u0110\222\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\u0101\231\u0106\u0263\u0108\237\u0109\233\u010d" +
    "\243\u010e\220\u010f\u0262\u0110\222\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\u0101\231\u0106\u0263\u0108\237\u0109" +
    "\233\u010d\243\u010e\220\u010f\u0265\u0110\222\001\001\000\002" +
    "\001\001\000\022\u0101\231\u0106\u0263\u0108\237\u0109\233\u010d" +
    "\243\u010e\220\u010f\u0267\u0110\222\001\001\000\002\001\001" +
    "\000\004\360\u01dd\001\001\000\002\001\001\000\022\u0101" +
    "\231\u0106\u0263\u0108\237\u0109\233\u010d\243\u010e\220\u010f\u026b" +
    "\u0110\222\001\001\000\002\001\001\000\022\u0101\231\u0106" +
    "\u0263\u0108\237\u0109\233\u010d\243\u010e\220\u010f\u026d\u0110\222" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\226\u026e\227" +
    "\u027a\231\u0256\232\u0260\233\u025a\234\u025b\235\u025f\u0101\231" +
    "\u0106\u0263\u0108\237\u0109\233\u010d\243\u010e\220\u010f\u026f\u0110" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\u027c\001\001\000\016\027\u0285\030\u0283\031\u0284\u011f\u0286" +
    "\u0120\u0287\u0121\u0282\001\001\000\014\u010a\u0118\u010b\u0280\u010d" +
    "\321\u010e\220\u0110\222\001\001\000\022\u0101\231\u0106\u0103" +
    "\u0108\237\u0109\233\u010c\u027f\u010d\243\u010e\220\u0110\222\001" +
    "\001\000\004\u0128\u0105\001\001\000\004\u0128\u011a\001\001" +
    "\000\012\u010a\u0289\u010d\321\u010e\220\u0110\222\001\001\000" +
    "\002\001\001\000\012\031\u0288\u011f\u0286\u0120\u0287\u0121\u0282" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\360\u01dd\001\001\000\024\254\u0292\255\u0295\u0101" +
    "\231\u0106\u0293\u0108\237\u0109\233\u010d\243\u010e\220\u0110\222" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\255\u029a\u0101\231\u0106\u0293\u0108\237\u0109\233\u010d" +
    "\243\u010e\220\u0110\222\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\047\u029c\050\u0211\051\u020f\052\u0214\053\u0212\001" +
    "\001\000\002\001\001\000\022\056\u029e\u0101\231\u0106\u029f" +
    "\u0108\237\u0109\233\u010d\243\u010e\220\u0110\222\001\001\000" +
    "\002\001\001\000\012\057\u02a2\060\u02a0\061\u02a3\062\u02a1" +
    "\001\001\000\006\061\u02a6\062\u02a1\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\u0101\231" +
    "\u0106\u02a5\u0108\237\u0109\233\u010d\243\u010e\220\u0110\222\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\344\u02b1\001\001\000\010\141\u02ac\142\u02af\143" +
    "\u02ad\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\143" +
    "\u02b0\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\u0101\231\u0106\u0103\u0108\237\u0109\233\u010c" +
    "\u02b4\u010d\243\u010e\220\u0110\222\001\001\000\004\u0128\u0105" +
    "\001\001\000\014\u010a\u0118\u010b\u02b6\u010d\321\u010e\220\u0110" +
    "\222\001\001\000\020\013\u02bb\014\u02bc\015\u02b7\u011e\u02b9" +
    "\u011f\u02ba\u0121\u02b8\u0128\u011a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\015\u02bd\u011e\u02b9\u011f\u02ba\u0121\u02b8\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\u0101\231\u0106\u02cd\u0108\237\u0109\233\u010d\243\u010e" +
    "\220\u0110\222\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\166\u02c9\167\u02ca\001\001\000\004\u012f\u02c7\001" +
    "\001\000\004\172\u02c6\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ZCCParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ZCCParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ZCCParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 action_obj.initActionClass();    
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 if (scanner == null) return getScanner().next_token();
             return scanner.tokenCobolCode(); 
          
    }


   GenericScanner scanner = null;
   Module        module   = ModulesFactory.getDefaultModule();
   Summary       summary  = module.getSummary();
   Configuration cfg      = Configuration.getInstance();
   ParserInfo    info     = ParserInfo.getInstance();
             
   public void syntax_error(Symbol token) throws ParseException {
          info.syntax_error(token);
   }

   public void unrecovered_syntax_error(Symbol token) throws ParseException {
      info.unrecovered_syntax_error(token);
   }
   
   public void setScanner(GenericScanner scanner) {
       this.scanner = scanner;
   }
   

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ZCCParser$actions {


   Module          module   = null;
   Summary         summary  = null;
   Persistence     fichero  = null;
   ZCCCode         code     = null;
   Sections        sections = null;
   ParserInfo      info     = ParserInfo.getInstance();
      
   Variable  currVar       = null;
   StmtCobol lastStmt      = null;  // Ultima instruccion
   StmtCobol currStmt      = null;  // Instruccion en proceso
   Option    currOption    = null;  // Option en proceso
   boolean   hasEndProgram = false; // Hay STOPRUN o GOBACK?
    
   boolean master     = false;  // El fichero es el maestro?   
   int     numFillers = 0;
   
   public void initActionClass() {
      module = ModulesFactory.getMainModule();
      summary = module.getSummary();
      sections = module.getSections();
      code = new ZCCCode(module);
   }

   public String getSymbolName(Symbol s)    { return (String) s.value; }
   public int    getSymbolLine(Symbol s)    { return (int)    s.left;  }
   
   public void debug(String txt) { 
      System.err.println(txt); 
   }
   public void print(String txt) { 
      System.out.println(txt); 
   }


  private final ZCCParser parser;

  /** Constructor */
  CUP$ZCCParser$actions(ZCCParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ZCCParser$do_action(
    int                        CUP$ZCCParser$act_num,
    java_cup.runtime.lr_parser CUP$ZCCParser$parser,
    java.util.Stack            CUP$ZCCParser$stack,
    int                        CUP$ZCCParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ZCCParser$result;

      /* select the action based on the action number */
      switch (CUP$ZCCParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 570: // opt_with ::= 
            {
              Symbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("opt_with",300, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 569: // opt_with ::= WITH 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("opt_with",300, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 568: // opt_key ::= 
            {
              Symbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("opt_key",298, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 567: // opt_key ::= KEY 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("opt_key",298, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 566: // opt_to ::= 
            {
              Symbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("opt_to",299, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 565: // opt_to ::= TO 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("opt_to",299, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 564: // opt_in ::= 
            {
              Symbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("opt_in",297, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 563: // opt_in ::= IN 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("opt_in",297, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 562: // opt_date_fmt ::= 
            {
              Symbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("opt_date_fmt",296, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 561: // opt_date_fmt ::= SYM 
            {
              Symbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("opt_date_fmt",296, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 560: // opt_data ::= 
            {
              Symbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("opt_data",295, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 559: // opt_data ::= DATA 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("opt_data",295, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 558: // opt_comma ::= 
            {
              Symbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("opt_comma",294, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 557: // opt_comma ::= COMMA 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("opt_comma",294, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 556: // opt_by ::= 
            {
              Symbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("opt_by",293, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 555: // opt_by ::= BY 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("opt_by",293, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 554: // opt_all ::= 
            {
              Symbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("opt_all",292, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 553: // opt_all ::= ALL 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("opt_all",292, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 552: // constante ::= LOWVAL 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("constante",263, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 551: // constante ::= HIGHVAL 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("constante",263, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 550: // constante ::= ZERO 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("constante",263, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 549: // constante ::= SPACES 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("constante",263, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 548: // constante ::= DFHCICS 
            {
              SymbolExt RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new SymbolExt(d); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("constante",263, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 547: // constante ::= NUMERO 
            {
              SymbolExt RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol n = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new SymbolExt(n); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("constante",263, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 546: // constante ::= LITERAL 
            {
              SymbolExt RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol l = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new SymbolExt(l); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("constante",263, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 545: // constantes ::= constante 
            {
              SymbolExt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SymbolExt c = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("constantes",262, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 544: // padre ::= OF var_base 
            {
              SymbolExt RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("padre",279, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 543: // padre ::= IN var_base 
            {
              SymbolExt RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("padre",279, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 542: // padres ::= padres padre 
            {
              SymbolExt RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("padres",278, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 541: // padres ::= padre 
            {
              SymbolExt RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("padres",278, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 540: // padres_opt ::= 
            {
              SymbolExt RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("padres_opt",277, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 539: // padres_opt ::= padres 
            {
              SymbolExt RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("padres_opt",277, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 538: // indice_item ::= expr_colon 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("indice_item",276, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 537: // indice_lst ::= indice_lst COMMA indice_item 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("indice_lst",275, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 536: // indice_lst ::= indice_item 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("indice_lst",275, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 535: // indice ::= LPAR indice_lst RPAR 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("indice",274, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 534: // indices ::= indices indice 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("indices",273, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 533: // indices ::= indice 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("indices",273, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 532: // indices_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("indices_opt",272, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 531: // indices_opt ::= indices 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("indices_opt",272, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 530: // id ::= SYM 
            {
              SymbolExt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new SymbolExt(i); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("id",270, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 529: // var_int ::= rvalue 
            {
              SymbolExt RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("var_int",269, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 528: // var_base ::= id indices_opt 
            {
              SymbolExt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = i; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("var_base",268, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 527: // variable ::= var_base padres_opt 
            {
              SymbolExt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = i;    
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("variable",267, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 526: // rvalue ::= function 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new SymbolExt(f);    
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("rvalue",260, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 525: // rvalue ::= constantes 
            {
              SymbolExt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SymbolExt c = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("rvalue",260, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 524: // rvalue ::= variable 
            {
              SymbolExt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = i;  code.setVarRead(i); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("rvalue",260, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 523: // rvalue_list ::= rvalue_list opt_comma rvalue 
            {
              SymbolExtList RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("rvalue_list",266, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 522: // rvalue_list ::= rvalue 
            {
              SymbolExtList RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("rvalue_list",266, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 521: // lvalue_list ::= lvalue_list opt_comma lvalue 
            {
              SymbolExtList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		SymbolExtList l = (SymbolExtList)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = l.add(i);       
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("lvalue_list",265, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 520: // lvalue_list ::= lvalue 
            {
              SymbolExtList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new SymbolExtList(i); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("lvalue_list",265, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 519: // lvalue ::= variable 
            {
              SymbolExt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = i; code.setVarWrite(i); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("lvalue",264, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 518: // operator_arit ::= OP_POW 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("operator_arit",254, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 517: // operator_arit ::= OP_DIV 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("operator_arit",254, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 516: // operator_arit ::= OP_MUL 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("operator_arit",254, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 515: // operator_arit ::= OP_SUB 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("operator_arit",254, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 514: // operator_arit ::= OP_ADD 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("operator_arit",254, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 513: // function_parm ::= literal 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("function_parm",259, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 512: // function_parm ::= expr_colon 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("function_parm",259, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 511: // function_parms_lst ::= function_parms_lst COMMA function_parm 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("function_parms_lst",258, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 510: // function_parms_lst ::= function_parm 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("function_parms_lst",258, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 509: // function_parms_lst_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("function_parms_lst_opt",257, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 508: // function_parms_lst_opt ::= function_parms_lst 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("function_parms_lst_opt",257, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 507: // function_parms ::= LPAR function_parms_lst_opt RPAR 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("function_parms",256, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 506: // function ::= LENGTH OF rvalue 
            {
              Symbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		Symbol l = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		 RESULT = l; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("function",255, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 505: // function ::= FUNCTION INTRINSIC function_parms 
            {
              Symbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = f; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("function",255, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 504: // figurative ::= NULL 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("figurative",261, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 503: // figurative ::= NATIONAL 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("figurative",261, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 502: // figurative ::= EGCS 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("figurative",261, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 501: // figurative ::= DBCS 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("figurative",261, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 500: // figurative ::= KANJI 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("figurative",261, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 499: // figurative ::= NUMERIC 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("figurative",261, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 498: // figurative ::= ALPHANUMERIC 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("figurative",261, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 497: // figurative ::= ALPHABETIC 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("figurative",261, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 496: // figurative ::= NEGATIVE 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("figurative",261, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 495: // figurative ::= POSITIVE 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("figurative",261, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 494: // token ::= figurative 
            {
              Tokens RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SymbolExt f = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Tokens(f); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("token",289, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 493: // token ::= LPAR tokens RPAR 
            {
              Tokens RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = new Tokens(t); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("token",289, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 492: // token ::= NUMERO 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("token",289, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 491: // token ::= LITERAL 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("token",289, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 490: // token ::= SYM 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("token",289, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // tokens ::= tokens token 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = l.add(t); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("tokens",290, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // tokens ::= token 
            {
              Tokens RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = t;        
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("tokens",290, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // optTokens ::= 
            {
              Tokens RESULT =null;
		 RESULT = new Tokens();    
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("optTokens",291, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // optTokens ::= tokens 
            {
              Tokens RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = t;               
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("optTokens",291, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // logical_and_or ::= ALSO 
            {
              Symbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol a = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = a; code.incComplexity(); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_and_or",238, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // logical_and_or ::= OR 
            {
              Symbol RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = o; code.incComplexity(); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_and_or",238, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // logical_and_or ::= AND 
            {
              Symbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol a = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = a; code.incComplexity(); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_and_or",238, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // logical_class ::= ALPHABETIC 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_class",244, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // logical_class ::= NUMERIC 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_class",244, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // logical_class ::= NULL 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_class",244, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // logical_class ::= NEGATIVE 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_class",244, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // logical_class ::= POSITIVE 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_class",244, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // logical_class ::= FALSE 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_class",244, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // logical_class ::= TRUE 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_class",244, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // logical_figurative ::= LESS 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_figurative",247, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // logical_figurative ::= GREATER 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_figurative",247, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // logical_figurative ::= EQUAL opt_to 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_figurative",247, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // logical_rel ::= logical_rel OR logical_figurative 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_rel",248, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // logical_rel ::= logical_figurative 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_rel",248, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // logical_op ::= logical_rel 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_op",240, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // logical_op ::= REL_LE 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_op",240, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // logical_op ::= REL_LT 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_op",240, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // logical_op ::= REL_GE 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_op",240, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // logical_op ::= REL_GT 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_op",240, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // logical_op ::= REL_EQ 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_op",240, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // logical_op_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_op_opt",239, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // logical_op_opt ::= logical_op 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_op_opt",239, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // logical_operand ::= expr_primary 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_operand",250, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // logical_expr ::= logical_expr operator_arit logical_operand 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_expr",249, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // logical_expr ::= logical_operand 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_expr",249, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // logical_unary ::= LPAR logical_condition RPAR 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_unary",246, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // logical_unary ::= logical_class 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_unary",246, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // logical_unary ::= logical_expr 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_unary",246, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // logical_unary_not ::= logical_unary 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_unary_not",245, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // logical_unary_not ::= NOT logical_unary 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_unary_not",245, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // logical_relation ::= logical_op logical_unary 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_relation",253, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // logical_relation ::= logical_class 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_relation",253, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // logical_yes ::= logical_yes logical_relation 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_yes",243, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // logical_yes ::= logical_yes NOT logical_relation 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_yes",243, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // logical_yes ::= logical_unary 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_yes",243, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // logical_not ::= logical_not logical_relation 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_not",242, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // logical_not ::= logical_not NOT logical_relation 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_not",242, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // logical_not ::= logical_unary_not 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_not",242, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // logical_next ::= logical_yes 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_next",237, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // logical_next ::= logical_op logical_unary 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_next",237, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // logical_next ::= NOT logical_op_opt logical_unary 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_next",237, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // logical_begin ::= logical_not 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_begin",236, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // logical_condition ::= logical_condition logical_and_or logical_next 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_condition",235, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // logical_condition ::= logical_begin 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_condition",235, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // expr_primary ::= rvalue 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("expr_primary",234, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // expr_operand ::= LPAR expr_colon RPAR 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("expr_operand",233, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // expr_operand ::= expr_primary 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("expr_operand",233, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // expr_colon_value ::= 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("expr_colon_value",232, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // expr_colon_value ::= expr_primary 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("expr_colon_value",232, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // expr_colon_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("expr_colon_opt",231, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // expr_colon_opt ::= OP_COL expr_colon_value 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("expr_colon_opt",231, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // expr_colon ::= expression expr_colon_opt 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("expr_colon",230, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // expression_arit ::= expression_arit operator_arit expr_operand 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("expression_arit",229, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // expression_arit ::= expr_operand 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("expression_arit",229, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // expression ::= expression_arit 
            {
              SymbolExt RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("expression",228, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // eatWriteItem ::= AFTER 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("eatWriteItem",100, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // eatWriteItem ::= PAGE 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("eatWriteItem",100, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // eatWriteItem ::= LINE 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("eatWriteItem",100, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // eatWriteItem ::= NO 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("eatWriteItem",100, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // eatWriteItem ::= LOCK 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("eatWriteItem",100, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // eatWriteItem ::= WITH 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("eatWriteItem",100, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // eatWriteItem ::= token 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens s = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("eatWriteItem",100, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // eatWriteLst ::= eatWriteLst eatWriteItem 
            {
              Tokens RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Tokens x = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens i = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = x.add(i);      
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("eatWriteLst",99, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // eatWriteLst ::= eatWriteItem 
            {
              Tokens RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens e = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Tokens(e); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("eatWriteLst",99, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // eatWrite ::= 
            {
              Tokens RESULT =null;
		 RESULT = new Tokens(); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("eatWrite",98, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // eatWrite ::= eatWriteLst 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = l;            
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("eatWrite",98, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // eatCloseItem ::= FOR 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("eatCloseItem",97, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // eatCloseItem ::= NO 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("eatCloseItem",97, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // eatCloseItem ::= WITH 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("eatCloseItem",97, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // eatCloseLst ::= eatCloseLst eatCloseItem 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens i = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = l.add(i);      
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("eatCloseLst",96, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // eatCloseLst ::= eatCloseItem 
            {
              Tokens RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens i = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Tokens(i); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("eatCloseLst",96, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // eatClose ::= 
            {
              Tokens RESULT =null;
		 RESULT = new Tokens(); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("eatClose",95, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // eatClose ::= eatCloseLst 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = l;            
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("eatClose",95, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // stmtEndSearch ::= END_SEARCH 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtEndSearch",186, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // stmtEndVerb ::= END_VERB 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtEndVerb",211, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // stmtEndEvaluate ::= END_EVALUATE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtEndEvaluate",181, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // stmtEndPerform ::= END_PERFORM 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtEndPerform",184, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // stmtEndIf ::= END_IF 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtEndIf",183, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // stmtElse ::= ELSE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtElse",207, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // stmtEndP ::= ENDP 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtEndP",185, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // option_order ::= DESCENDING 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("option_order",94, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // option_order ::= ASCENDING 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("option_order",94, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // option_position ::= AFTER 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("option_position",93, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // option_position ::= BEFORE 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("option_position",93, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // option_size_error ::= SIZE_ERROR 
            {
              Option RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 code.setImperative(); 
                                   RESULT = new Option(i); 
                                
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("option_size_error",288, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // option_remainder ::= REMAINDER lvalue 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = new Option(o); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("option_remainder",286, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // optionOverflow ::= OVERFLOW 
            {
              StmtCobol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 code.setImperative(); 
                                   RESULT = new StmtCobol(i); 
                                
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("optionOverflow",201, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // option_rounded ::= ROUNDED 
            {
              Option RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol r = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 currStmt.addOption(new Option(r)); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("option_rounded",287, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // option_giving ::= GIVING lvalue_list 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = new Option(o); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("option_giving",285, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // option_corr ::= CORR 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Option(o); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("option_corr",284, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // option_all ::= ALL 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Option(o); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("option_all",283, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // rvalue_options ::= option_rounded 
            {
              Option RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("rvalue_options",281, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // rvalue_options ::= option_corr 
            {
              Option RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("rvalue_options",281, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // rvalue_options ::= option_all 
            {
              Option RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("rvalue_options",281, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // rvalue_options ::= rvalue_options rvalue_option 
            {
              Option RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("rvalue_options",281, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // rvalue_options ::= rvalue_option 
            {
              Option RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("rvalue_options",281, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // rvalue_options_opt ::= 
            {
              Option RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("rvalue_options_opt",280, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // rvalue_options_opt ::= rvalue_options 
            {
              Option RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("rvalue_options_opt",280, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // stmtException ::= EXCEPTION 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtException",204, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // stmtInvalid ::= INVALID opt_key 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 StmtCobol stmt = new StmtCobol(s);
                                              RESULT = code.setAtEnd(stmt); 
                                           
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtInvalid",203, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // stmtAtEnd ::= AT END 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s);
                             RESULT = code.setAtEnd(stmt); 
                          
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtAtEnd",202, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // closeFile ::= SYM eatClose 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens e = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 Tokens t = new Tokens(s);
                                         RESULT = t.add(e); 
                                      
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("closeFile",226, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // closeLstFiles ::= closeLstFiles closeFile 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens c = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = l.add(c);  
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("closeLstFiles",227, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // closeLstFiles ::= closeFile 
            {
              Tokens RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens c = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = c;         
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("closeLstFiles",227, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // stmtClose ::= CLOSE closeLstFiles 
            {
              StmtCobol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = code.fileAction(TRAP.ACC_CLOSE, c, l); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtClose",123, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // stmtStop ::= STOPRUN optTokens 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtStop",189, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // stmtStop ::= STOP optTokens 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtStop",189, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // stmtDelete ::= DELETE SYM 
            {
              StmtCobol RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = code.fileAccess(TRAP.ACC_DELETE, d, i); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtDelete",125, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // stmtRelease ::= RELEASE SYM eatWrite 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens e = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s);
                     RESULT = stmt.addLValue(i);
                  
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtRelease",156, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // stmtWrite_eop ::= EOP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 code.setImperative(); 
                                   RESULT = new StmtCobol(s); 
                                
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtWrite_eop",92, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // stmtWrite_after ::= AFTER 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtWrite_after",91, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // stmtWrite_position ::= option_position rvalue 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtWrite_position",90, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // stmtWrite_from ::= FROM rvalue 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtWrite_from",89, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // stmtWrite_option ::= stmtWrite_eop 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtWrite_option",88, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // stmtWrite_option ::= stmtWrite_after 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtWrite_option",88, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // stmtWrite_option ::= stmtWrite_position 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtWrite_option",88, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // stmtWrite_option ::= stmtWrite_from 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtWrite_option",88, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // stmtWrite_options ::= stmtWrite_options stmtWrite_option 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtWrite_options",87, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // stmtWrite_options ::= stmtWrite_option 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtWrite_options",87, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // stmtWrite_detail ::= 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtWrite_detail",86, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // stmtWrite_detail ::= stmtWrite_options 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtWrite_detail",86, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // stmtRewrite ::= REWRITE SYM stmtWrite_detail 
            {
              StmtCobol RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		Symbol r = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = code.fileAccess(TRAP.ACC_UPDATE, r, i); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtRewrite",161, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // stmtWrite ::= WRITE SYM stmtWrite_detail 
            {
              StmtCobol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		Symbol w = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = code.fileAccess(TRAP.ACC_INSERT, w, i); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtWrite",167, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // stmtUnstring_option ::= optionOverflow 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_option",85, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // stmtUnstring_option ::= TALLYING opt_in lvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_option",85, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // stmtUnstring_option ::= POINTER lvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_option",85, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // stmtUnstring_options ::= stmtUnstring_options stmtUnstring_option 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_options",84, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // stmtUnstring_options ::= stmtUnstring_option 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_options",84, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // stmtUnstring_options_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_options_opt",83, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // stmtUnstring_options_opt ::= stmtUnstring_options 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_options_opt",83, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // stmtUnstring_delimiter ::= COUNT opt_in lvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiter",82, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // stmtUnstring_delimiter ::= DELIMITER opt_in lvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiter",82, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // stmtUnstring_delimiters ::= stmtUnstring_delimiters stmtUnstring_delimiter 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiters",81, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // stmtUnstring_delimiters ::= stmtUnstring_delimiter 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiters",81, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // stmtUnstring_delimiters_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiters_opt",80, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // stmtUnstring_delimiters_opt ::= stmtUnstring_delimiters 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiters_opt",80, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // stmtUnstring_target ::= lvalue stmtUnstring_delimiters_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_target",76, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // stmtUnstring_targets ::= stmtUnstring_targets stmtUnstring_target 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_targets",75, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // stmtUnstring_targets ::= stmtUnstring_target 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_targets",75, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // stmtUnstring_to ::= INTO stmtUnstring_targets 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_to",74, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // stmtUnstring_delimited_token ::= OR 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimited_token",79, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // stmtUnstring_delimited_token ::= rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimited_token",79, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // stmtUnstring_delimiteds ::= stmtUnstring_delimiteds stmtUnstring_delimited_token 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiteds",78, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // stmtUnstring_delimiteds ::= stmtUnstring_delimited_token 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiteds",78, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // stmtUnstring_delimited ::= DELIMITED opt_by opt_all stmtUnstring_delimiteds 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimited",77, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // stmtUnstring_delimited_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimited_opt",73, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // stmtUnstring_delimited_opt ::= stmtUnstring_delimited 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimited_opt",73, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // stmtUnstring_detail ::= rvalue stmtUnstring_delimited_opt stmtUnstring_to stmtUnstring_options_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_detail",72, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // stmtUnstring ::= UNSTRING stmtUnstring_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring",122, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // stmtSubtract_option ::= option_size_error 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSubtract_option",71, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // stmtSubtract_option ::= option_giving 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSubtract_option",71, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // stmtSubtract_option ::= FROM rvalue_list 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSubtract_option",71, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // stmtSubtract_options ::= stmtSubtract_options stmtSubtract_option 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSubtract_options",70, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // stmtSubtract_options ::= stmtSubtract_option 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSubtract_options",70, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // stmtSubtract_detail ::= rvalue_list stmtSubtract_options 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSubtract_detail",69, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // stmtSubtract ::= SUBTRACT stmtSubtract_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSubtract",68, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // string_pointer_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("string_pointer_opt",67, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // string_pointer_opt ::= opt_with POINTER lvalue 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("string_pointer_opt",67, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // string_into ::= INTO lvalue string_pointer_opt 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("string_into",66, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // string_delimited_token ::= SIZE 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("string_delimited_token",65, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // string_delimited_token ::= rvalue 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("string_delimited_token",65, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // string_delimited ::= DELIMITED opt_by string_delimited_token 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("string_delimited",64, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // string_rvalues ::= string_rvalues rvalue 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("string_rvalues",63, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // string_rvalues ::= rvalue 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("string_rvalues",63, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // string_from_item ::= rvalue_list string_delimited 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("string_from_item",62, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // string_from ::= string_from string_from_item 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("string_from",61, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // string_from ::= string_from_item 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("string_from",61, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // string_verb ::= STRING 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new StmtCobol(s, currStmt); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("string_verb",60, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // stmtString ::= string_verb string_from string_into 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtString",59, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // stmtStart_key ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtStart_key",58, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // stmtStart_key ::= KEY logical_oper rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtStart_key",58, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // stmtStart ::= START SYM stmtStart_key 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtStart",57, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // stmtSort_procedure ::= OUTPUT SYM 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSort_procedure",56, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // stmtSort_procedure ::= INPUT SYM 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSort_procedure",56, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // stmtSort_giving ::= GIVING rvalue_list 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSort_giving",55, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // stmtSort_using ::= USING rvalue_list 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSort_using",54, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // stmtSort_duplicates ::= DUPLICATES 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSort_duplicates",53, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // stmtSort_order ::= option_order opt_key rvalue_list 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSort_order",52, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // stmtSort_option ::= stmtSort_procedure 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSort_option",51, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // stmtSort_option ::= stmtSort_giving 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSort_option",51, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // stmtSort_option ::= stmtSort_using 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSort_option",51, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // stmtSort_option ::= stmtSort_duplicates 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSort_option",51, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // stmtSort_option ::= stmtSort_order 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSort_option",51, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // stmtSort_detail ::= stmtSort_detail stmtSort_option 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSort_detail",50, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // stmtSort_detail ::= stmtSort_option 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSort_detail",50, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // stmtSort ::= SORT NT$2 SYM stmtSort_detail 
            {
              StmtCobol RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (StmtCobol) ((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-3)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-3)).value;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSort",49, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // NT$2 ::= 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
 RESULT = new StmtCobol(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("NT$2",303, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // set_value ::= OFF 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("set_value",198, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // set_value ::= ON 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("set_value",198, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // set_value ::= TRUE 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("set_value",198, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // set_value ::= FALSE 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("set_value",198, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // set_value ::= rvalue 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("set_value",198, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // set_index_inc ::= DOWN BY 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("set_index_inc",200, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // set_index_inc ::= UP BY 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("set_index_inc",200, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // set_index ::= set_index_inc rvalue 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("set_index",199, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // set_variable ::= BY set_value 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("set_variable",197, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // set_variable ::= TO set_value 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("set_variable",197, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // set_rvalue ::= set_index 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("set_rvalue",196, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // set_rvalue ::= set_variable 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("set_rvalue",196, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // set_lvalue ::= lvalue_list 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("set_lvalue",195, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // set_item ::= set_lvalue set_rvalue 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("set_item",194, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // set_list ::= set_list set_item 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("set_list",193, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // set_list ::= set_item 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("set_list",193, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // set_verb ::= SET 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new StmtCobol(s, currStmt); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("set_verb",192, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // stmtSet ::= set_verb set_list 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSet",191, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // search_varying ::= VARYING rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("search_varying",48, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // search_opt ::= search_varying 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("search_opt",47, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // search_option ::= search_option search_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("search_option",46, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // search_option ::= search_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("search_option",46, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // search_options ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("search_options",45, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // search_options ::= search_option 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("search_options",45, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // search_detail ::= rvalue search_options 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("search_detail",44, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // search_verb ::= SEARCH 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = currStmt = new StmtCobol(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("search_verb",43, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // stmtSearch ::= search_verb opt_all search_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		 RESULT = code.processSearch(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSearch",42, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // stmtRead_key ::= KEY rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtRead_key",41, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // stmtRead_into ::= INTO lvalue 
            {
              Tokens RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SymbolExt d = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 Tokens t = new Tokens(i); RESULT = t.add(d); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtRead_into",40, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // stmtRead_option ::= stmtRead_key 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtRead_option",39, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // stmtRead_option ::= stmtRead_into 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtRead_option",39, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // stmtRead_options ::= stmtRead_options stmtRead_option 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtRead_options",38, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // stmtRead_options ::= stmtRead_option 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtRead_options",38, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // stmtRead_detail ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtRead_detail",37, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // stmtRead_detail ::= stmtRead_options 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtRead_detail",37, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // stmtRead ::= READ SYM stmtRead_detail 
            {
              StmtCobol RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		Symbol r = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens s = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 StmtCobol stmt = code.fileAccess(TRAP.ACC_READ, r, i);
                     RESULT = stmt; 
                  
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtRead",36, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // perform_test ::= TEST AFTER 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = new Option(o);    
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_test",151, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // perform_test ::= TEST BEFORE 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = new Option(o);    
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_test",151, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // perform_after ::= AFTER var_int FROM var_int BY var_int 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-5)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-5)).value;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_after",155, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-5)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // perform_varying ::= VARYING var_int FROM var_int BY var_int 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-5)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-5)).value;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_varying",154, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-5)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // perform_until ::= UNTIL logical_condition 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Option(o); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_until",152, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // perform_thru ::= THRU id 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Option(o, i); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_thru",153, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // perform_option_second ::= var_int 
            {
              Option RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SymbolExt v = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Option(v); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_option_second",149, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // perform_option_second ::= perform_option_first 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = o;                
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_option_second",149, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // perform_option_first ::= perform_test 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_option_first",148, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // perform_option_first ::= perform_after 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_option_first",148, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // perform_option_first ::= perform_varying 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_option_first",148, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // perform_option_first ::= perform_thru 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_option_first",148, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // perform_option_first ::= perform_until 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_option_first",148, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // perform_option_first ::= TIMES 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 currStmt.replaceOption(new Option(o)); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_option_first",148, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // perform_options ::= perform_options perform_option_second 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 currStmt.addOption(o); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_options",144, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // perform_options ::= perform_option_first 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 currStmt.addOption(o); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_options",144, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // perform_option_times ::= NUMERO 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Option(o); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_option_times",147, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // perform_option_times ::= variable 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SymbolExt o = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Option(o); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_option_times",147, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // perform_options_label ::= perform_options_label perform_option_second 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 currStmt.addOption(o); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_options_label",146, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // perform_options_label ::= perform_option_times 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 currStmt.addOption(o); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_options_label",146, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // perform_options_label ::= perform_option_first 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 currStmt.addOption(o); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_options_label",146, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // perform_options_label_opt ::= 
            {
              Option RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_options_label_opt",145, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // perform_options_label_opt ::= perform_options_label 
            {
              Option RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_options_label_opt",145, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // perform_options_opt ::= 
            {
              Option RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_options_opt",143, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // perform_options_opt ::= perform_options 
            {
              Option RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_options_opt",143, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // perform_label ::= variable 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SymbolExt v = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 currStmt.addOption(new Option(v)); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_label",150, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // perform_from ::= perform_options_opt 
            {
              Option RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_from",142, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // perform_from ::= perform_label perform_options_label_opt 
            {
              Option RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_from",142, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // perform_verb ::= PERFORM 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 currStmt = new StmtCobol(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_verb",141, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // stmtPerform ::= perform_verb perform_from 
            {
              StmtCobol RESULT =null;
		 RESULT = code.processPerform(currStmt, lastStmt); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtPerform",140, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // stmtOpen_files ::= stmtOpen_files SYM 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = l.add(s);      
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtOpen_files",222, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // stmtOpen_files ::= SYM 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtOpen_files",222, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // stmtOpen_mode ::= EXTEND 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s);
                               stmt.setId(Persistence.EXTEND);
                               RESULT = stmt;
                            
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtOpen_mode",225, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // stmtOpen_mode ::= IO 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s);
                               stmt.setId(Persistence.IO);
                               RESULT = stmt;
                            
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtOpen_mode",225, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // stmtOpen_mode ::= OUTPUT 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s);
                               stmt.setId(Persistence.OUTPUT);
                               RESULT = stmt;
                            
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtOpen_mode",225, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // stmtOpen_mode ::= INPUT 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s);
                               stmt.setId(Persistence.INPUT);
                               RESULT = stmt; 
                            
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtOpen_mode",225, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // stmtOpen_group ::= stmtOpen_mode stmtOpen_files 
            {
              Tokens RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		StmtCobol o = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 Persistence f;
                 /*JGG
                    for (Symbol s : l.getTokens()) {
                        f = module.getFile(getSymbolName(s));
                        f.setAccess(o.getId());
                    }
                    */
                    RESULT = l;
                 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtOpen_group",224, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // stmtOpen_list ::= stmtOpen_list stmtOpen_group 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens s = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = l.add(s);  
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtOpen_list",223, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // stmtOpen_list ::= stmtOpen_group 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens s = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s;         
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtOpen_list",223, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // stmtOpen ::= OPEN stmtOpen_list 
            {
              StmtCobol RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = code.fileAction(TRAP.ACC_OPEN, o, l); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtOpen",168, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // multiply_option ::= option_size_error 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("multiply_option",35, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // multiply_option ::= option_giving 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("multiply_option",35, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // multiply_options ::= multiply_options multiply_option 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("multiply_options",34, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // multiply_options ::= multiply_option 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("multiply_options",34, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // multiply_options_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("multiply_options_opt",33, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // multiply_options_opt ::= multiply_options 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("multiply_options_opt",33, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // stmtMultiply_by ::= rvalue BY rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtMultiply_by",32, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // stmtMultiply_detail ::= stmtMultiply_by multiply_options_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtMultiply_detail",31, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // stmtMultiply ::= MULTIPLY stmtMultiply_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtMultiply",164, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // move_verb ::= MOVE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new StmtCobol(s, currStmt); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("move_verb",163, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // stmtMove ::= move_verb rvalue_options_opt expression TO lvalue_list 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-4)).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		SymbolExt r = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SymbolExtList l = (SymbolExtList)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 code.checkCall(l, r);
                      s.addRValue(r);
                      s.addLValue(l);
                      RESULT = s; 
                   
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtMove",162, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-4)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // stmtInspect_token ::= rvalue 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",171, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // stmtInspect_token ::= CONVERTING 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",171, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // stmtInspect_token ::= REPLACING 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",171, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // stmtInspect_token ::= TALLYING 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",171, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // stmtInspect_token ::= TO 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",171, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // stmtInspect_token ::= CHARACTER 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",171, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // stmtInspect_token ::= FIRST 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",171, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // stmtInspect_token ::= LEADING 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",171, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // stmtInspect_token ::= AFTER 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",171, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // stmtInspect_token ::= BEFORE 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",171, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // stmtInspect_token ::= BY 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",171, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // stmtInspect_token ::= ALL 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",171, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // stmtInspect_detail ::= stmtInspect_detail stmtInspect_token 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtInspect_detail",170, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // stmtInspect_detail ::= stmtInspect_token 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtInspect_detail",170, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // stmtInspect ::= INSPECT rvalue stmtInspect_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SymbolExt l = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtInspect",169, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // initialize_rep_val ::= rvalue 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SymbolExt v = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 currOption.addSymbol(v); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("initialize_rep_val",30, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // initialize_rep ::= figurative opt_data BY initialize_rep_val 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("initialize_rep",29, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // initialize_rep_lst ::= initialize_rep_lst initialize_rep 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("initialize_rep_lst",28, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // initialize_rep_lst ::= initialize_rep 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("initialize_rep_lst",28, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // initialize_rep_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("initialize_rep_opt",27, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // initialize_rep_opt ::= REPLACING NT$1 initialize_rep_lst 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		Symbol r = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		 currStmt.addOption(currOption); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("initialize_rep_opt",27, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // NT$1 ::= 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol r = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
 currOption = new Option(r); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("NT$1",302, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // initialize_detail ::= lvalue_list initialize_rep_opt 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("initialize_detail",26, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // initialize_verb ::= INITIALIZE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new StmtCobol(s, currStmt); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("initialize_verb",25, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // stmtInitialize ::= initialize_verb initialize_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = s;  
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtInitialize",24, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // if_verb ::= IF 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new StmtCobol(s, currStmt); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("if_verb",206, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // stmtIf ::= if_verb logical_condition 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		  RESULT = code.processIf(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtIf",205, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // stmtGoto_depending ::= DEPENDING rvalue 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtGoto_depending",160, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // stmtGoto_depending_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtGoto_depending_opt",159, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // stmtGoto_depending_opt ::= stmtGoto_depending 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtGoto_depending_opt",159, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // stmtGoto_procs ::= stmtGoto_procs SYM 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtGoto_procs",158, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // stmtGoto_procs ::= SYM 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtGoto_procs",158, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // stmtGoTo ::= GOTO opt_to stmtGoto_procs stmtGoto_depending_opt 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-3)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-3)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtGoTo",157, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // when_thru ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("when_thru",210, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // when_thru ::= THRU logical_condition 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("when_thru",210, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // when_other ::= OTHER 
            {
              Symbol RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("when_other",139, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // when_item ::= logical_condition when_thru 
            {
              StmtCobol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("when_item",138, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // when_condition ::= when_other 
            {
              StmtCobol RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 currStmt.addOption(new Option(o)); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("when_condition",137, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // when_condition ::= when_item 
            {
              StmtCobol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("when_condition",137, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // when_verb ::= WHEN 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new StmtCobol(s, currStmt); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("when_verb",209, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // stmtWhen ::= when_verb when_condition 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtWhen",208, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // evaluate_object ::= logical_condition 
            {
              StmtCobol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("evaluate_object",136, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // evaluate_verb ::= EVALUATE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new StmtCobol(s, currStmt);  
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("evaluate_verb",135, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // stmtEvaluate ::= evaluate_verb evaluate_object 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = code.processEvaluate(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtEvaluate",134, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // divide_option ::= option_remainder 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 currStmt.addOption(o); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("divide_option",23, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // divide_option ::= option_rounded 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 currStmt.addOption(o); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("divide_option",23, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // divide_option ::= option_giving 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 currStmt.addOption(o); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("divide_option",23, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // divide_options ::= divide_options divide_option 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("divide_options",22, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // divide_options ::= divide_option 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("divide_options",22, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // divide_options_opt ::= 
            {
              Option RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("divide_options_opt",21, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // divide_options_opt ::= divide_options 
            {
              Option RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("divide_options_opt",21, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // divide_mode ::= BY rvalue_list 
            {
              Symbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("divide_mode",20, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // divide_mode ::= INTO lvalue_list 
            {
              Symbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("divide_mode",20, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // divide_verb ::= DIVIDE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new StmtCobol(s, currStmt); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("divide_verb",19, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // stmtDivide ::= divide_verb rvalue divide_mode divide_options_opt 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-3)).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-3)).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtDivide",18, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // stmtDisplay ::= DISPLAY rvalue_list 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtDisplay",126, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // compute_option ::= option_size_error 
            {
              Symbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("compute_option",17, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // compute_options ::= compute_options compute_option 
            {
              Symbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("compute_options",16, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // compute_options ::= compute_option 
            {
              Symbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("compute_options",16, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // compute_options_opt ::= 
            {
              Symbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("compute_options_opt",15, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // compute_options_opt ::= compute_options 
            {
              Symbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("compute_options_opt",15, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // compute_rvalue ::= expression 
            {
              Symbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("compute_rvalue",14, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // compute_rvalues ::= compute_rvalues compute_rvalue 
            {
              Symbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("compute_rvalues",13, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // compute_rvalues ::= compute_rvalue 
            {
              Symbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("compute_rvalues",13, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // compute_lvalue ::= lvalue rvalue_options_opt 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("compute_lvalue",12, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // stmtCompute ::= COMPUTE compute_lvalue REL_EQ compute_rvalues compute_options_opt 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-4)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-4)).value;
		 StmtCobol stmt = new StmtCobol(s, code.getStmts());
//                      stmt.addSymbol(i);
                      RESULT = stmt; 
                   
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtCompute",124, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-4)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // stmtCancel ::= CANCEL rvalue 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtCancel",166, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // stmtCall_returning ::= RETURNING lvalue 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtCall_returning",176, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // stmtCall_returning_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtCall_returning_opt",175, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // stmtCall_returning_opt ::= stmtCall_returning 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtCall_returning_opt",175, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // stmtCall_parm_type ::= REFERENCE 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtCall_parm_type",179, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // stmtCall_parm_type ::= VALUE 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtCall_parm_type",179, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // stmtCall_parm ::= BY stmtCall_parm_type 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtCall_parm",178, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // stmtCall_parm ::= rvalue 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtCall_parm",178, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // stmtCall_parm_list ::= stmtCall_parm_list stmtCall_parm 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtCall_parm_list",177, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // stmtCall_parm_list ::= stmtCall_parm 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtCall_parm_list",177, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // stmtCall_using ::= USING stmtCall_parm_list 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtCall_using",174, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // stmtCall_using_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtCall_using_opt",173, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // stmtCall_using_opt ::= stmtCall_using 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtCall_using_opt",173, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // stmtCall ::= CALL moduloCall stmtCall_using_opt stmtCall_returning_opt 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-3)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		 RESULT = code.processCall(s, i); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtCall",172, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // add_option ::= option_corr 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("add_option",11, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // add_option ::= option_rounded 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("add_option",11, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // add_option ::= option_giving 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("add_option",11, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // add_options ::= add_options add_option 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("add_options",10, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // add_options ::= add_option 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("add_options",10, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // add_options_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("add_options_opt",9, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // add_options_opt ::= add_options 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("add_options_opt",9, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // add_verb ::= ADD 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 currStmt = new StmtCobol(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("add_verb",8, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // stmtAdd ::= add_verb rvalue_options_opt rvalue_list TO lvalue_list add_options_opt 
            {
              StmtCobol RESULT =null;
		 RESULT = currStmt; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtAdd",190, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-5)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // accept_data ::= TIME 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("accept_data",7, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // accept_data ::= DAY_OF_WEEK 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("accept_data",7, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // accept_data ::= DAY opt_date_fmt 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("accept_data",7, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // accept_data ::= DATE opt_date_fmt 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("accept_data",7, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // accept_data ::= SYM 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("accept_data",7, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // accept_from ::= FROM accept_data 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("accept_from",6, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // accept_verb ::= ACCEPT 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new StmtCobol(s, currStmt); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("accept_verb",5, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // stmtAccept ::= accept_verb lvalue accept_from 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtAccept",4, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // stmtEndExec ::= ENDEXEC 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtEndExec",182, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // stmtExec ::= SQLCODE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 module.incStmtSql();  RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtExec",187, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // stmtExec ::= CICSCODE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 module.incStmtCics(); RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtExec",187, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // stmtReturn ::= RETURN SYM stmtRead_detail 
            {
              StmtCobol RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		Symbol r = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens j = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 StmtCobol stmt = code.fileAccess(TRAP.ACC_READ, r, i);
                     RESULT = stmt; // .addTokens(j); 
                  
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtReturn",188, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // stmtNext ::= NEXT 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtNext",165, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // exitType ::= 
            {
              Symbol RESULT =null;
		 RESULT = code.makeSymbol(ZCCSym.PARRAFO, -1, -1, ""); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("exitType",110, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // exitType ::= SECTION 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("exitType",110, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // exitType ::= PROGRAM 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("exitType",110, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // stmtExitPgm ::= EXIT_PGM 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s, code.getStmts());
                               RESULT = stmt.addRValue(s); 
                            
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtExitPgm",132, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // stmtExitP ::= EXIT_PERFORM 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s, code.getStmts());
                           RESULT = stmt.addRValue(code.makeSymbol(ZCCSym.PERFORM, -1, -1, "PERFORM")); 
                        
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtExitP",130, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // stmtExitG ::= EXIT exitType 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s, code.getStmts());
                                       RESULT = stmt.addRValue(t); 
                                    
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtExitG",131, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // exitTypes ::= stmtExitPgm 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("exitTypes",133, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // exitTypes ::= stmtExitP 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("exitTypes",133, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // exitTypes ::= stmtExitG 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("exitTypes",133, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // stmtExit ::= exitTypes 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtExit",129, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // moduloCall ::= LITERAL 
            {
              Symbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol l = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = l; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("moduloCall",180, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // moduloCall ::= variable 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("moduloCall",180, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // stmtMerge ::= MERGE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtMerge",121, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // stmtGoback ::= GOBACK 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtGoback",128, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // stmtContinue ::= CONTINUE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtContinue",127, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // stmtLang ::= stmtCancel 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtLang",221, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // stmtArit ::= stmtSubtract 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtArit",220, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // stmtArit ::= stmtDivide 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtArit",220, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // stmtArit ::= stmtAdd 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtArit",220, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // stmtArit ::= stmtCompute 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtArit",220, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // stmtArit ::= stmtMultiply 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtArit",220, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // stmtIO2 ::= stmtSort 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtIO2",215, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // stmtIO2 ::= stmtRewrite 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtIO2",215, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // stmtIO2 ::= stmtDelete 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtIO2",215, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // stmtIO2 ::= stmtWrite 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtIO2",215, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // stmtIO2 ::= stmtReturn 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtIO2",215, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // stmtIO2 ::= stmtRelease 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtIO2",215, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // stmtIO2 ::= stmtRead 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtIO2",215, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // stmtIO2 ::= stmtClose 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtIO2",215, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // stmtIO2 ::= stmtOpen 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtIO2",215, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // stmtIO2 ::= stmtDisplay 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtIO2",215, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // stmtIO2 ::= stmtAccept 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtIO2",215, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // stmtIO1 ::= stmtStart 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtIO1",214, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // stmtIO1 ::= stmtMerge 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtIO1",214, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // stmtIO ::= stmtIO2 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtIO",213, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // stmtIO ::= stmtIO1 optTokens 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtIO",213, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // stmtDatos ::= stmtSet 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtDatos",212, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // stmtDatos ::= stmtInitialize 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtDatos",212, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // stmtDatos ::= stmtUnstring 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtDatos",212, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // stmtDatos ::= stmtInspect 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtDatos",212, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // stmtDatos ::= stmtString 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtDatos",212, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // stmtDatos ::= stmtMove 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtDatos",212, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // stmtFlujo ::= stmtSearch 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtFlujo",219, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // stmtFlujo ::= stmtContinue 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtFlujo",219, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // stmtFlujo ::= stmtGoTo 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtFlujo",219, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // stmtFlujo ::= stmtEvaluate 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtFlujo",219, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // stmtFlujo ::= stmtIf 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtFlujo",219, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // stmtFlujo ::= stmtCall 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtFlujo",219, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // stmtFlujo ::= stmtPerform 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtFlujo",219, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // stmtControl2 ::= stmtGoback 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		  hasEndProgram = true;
                                      code.trapEndModule();
                                      RESULT = s; 
                                   
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtControl2",218, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // stmtControl2 ::= stmtStop 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 hasEndProgram = true;
                                       RESULT = s; 
                                       code.trapEndModule(); 
                                   
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtControl2",218, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // stmtControl1 ::= stmtNext 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtControl1",217, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // stmtControl ::= stmtControl2 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 hasEndProgram = true; RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtControl",216, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // stmtControl ::= stmtExit 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT =  code.processExit(s);    
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtControl",216, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // stmtControl ::= stmtControl1 optTokens 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s;          
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtControl",216, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // noverbos ::= stmtEndSearch 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = code.endSearch(s);         
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("noverbos",114, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // noverbos ::= stmtEndEvaluate 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = code.endEvaluate(s);       
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("noverbos",114, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // noverbos ::= stmtEndExec 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s;                         
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("noverbos",114, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // noverbos ::= stmtException 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s;                         
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("noverbos",114, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // noverbos ::= stmtInvalid 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s;                         
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("noverbos",114, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // noverbos ::= stmtAtEnd 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s;                         
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("noverbos",114, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // noverbos ::= stmtElse 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = code.processElse(s);       
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("noverbos",114, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // noverbos ::= stmtWhen 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = code.processWhen(s);       
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("noverbos",114, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // noverbos ::= stmtEndVerb 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s;                         
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("noverbos",114, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // noverbos ::= stmtEndPerform 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = code.endPerform(s);        
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("noverbos",114, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // noverbos ::= stmtEndIf 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = code.endIf(s);              
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("noverbos",114, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // noverbos ::= stmtEndP 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = code.checkFlujo( s, lastStmt);
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("noverbos",114, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // verbos ::= stmtExec 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s;                         
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("verbos",113, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // verbos ::= stmtLang 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; module.incStmtLang();    
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("verbos",113, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // verbos ::= stmtIO 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; module.incStmtIO();      
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("verbos",113, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // verbos ::= stmtArit 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; module.incStmtArit();    
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("verbos",113, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // verbos ::= stmtDatos 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; module.incStmtDatos();   
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("verbos",113, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // verbos ::= stmtFlujo 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; module.incStmtFlujo();   
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("verbos",113, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // verbos ::= stmtControl 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; module.incStmtControl(); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("verbos",113, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= noverbos 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmt",112, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= verbos 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; code.incStmt(); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmt",112, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lista_stmt ::= lista_stmt stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 lastStmt = code.processStatement(s, lastStmt); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("lista_stmt",111, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lista_stmt ::= stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 lastStmt = code.processStatement(s, lastStmt); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("lista_stmt",111, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parr_section ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("parr_section",109, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parr_section ::= SECTION 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = true;  
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("parr_section",109, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parrafo_name ::= PARRAFO parr_section ENDP 
            {
              Symbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 // if (b == true) code.notSupportedSection(p); 
                        RESULT = code.processParrafo(p, lastStmt); 
                     
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("parrafo_name",108, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bloque_sentences ::= 
            {
              Integer RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("bloque_sentences",107, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bloque_sentences ::= lista_stmt 
            {
              Integer RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("bloque_sentences",107, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bloque_parrafo ::= parrafo_name bloque_sentences 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("bloque_parrafo",105, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bloque_parrafos ::= bloque_parrafos bloque_parrafo 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("bloque_parrafos",104, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bloque_parrafos ::= bloque_parrafo 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("bloque_parrafos",104, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lista_parrafos ::= 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("lista_parrafos",103, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lista_parrafos ::= bloque_parrafos 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("lista_parrafos",103, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bloque_inicial ::= bloque_sentences 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("bloque_inicial",106, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bloque_procedure ::= bloque_inicial lista_parrafos 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("bloque_procedure",3, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // list_parms ::= list_parms SYM 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = l.add(s);      
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("list_parms",117, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // list_parms ::= SYM 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("list_parms",117, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // list_parms_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("list_parms_opt",116, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // list_parms_opt ::= list_parms 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("list_parms_opt",116, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // proc_parm ::= RETURNING rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("proc_parm",120, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // proc_parm ::= USING list_parms_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("proc_parm",120, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // proc_parms ::= proc_parms proc_parm 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("proc_parms",119, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // proc_parms ::= proc_parm 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("proc_parms",119, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // proc_parms_list ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("proc_parms_list",118, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // proc_parms_list ::= proc_parms 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("proc_parms_list",118, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // resto_call ::= proc_parms_list NT$0 ENDP 
            {
              Tokens RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Tokens) ((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		Tokens p = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 code.parrafoVirtual(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("resto_call",115, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              Tokens RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens p = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
 RESULT = p; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("NT$0",301, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // proc_div_header ::= PROC_DIV resto_call 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens p = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 code.beginCode(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("proc_div_header",2, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // procedure_division ::= proc_div_header bloque_procedure 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("procedure_division",0, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // end_program ::= 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("end_program",1, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // end_program ::= END_PGM SYM ENDP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		 hasEndProgram = true; 
                                      StmtCobol stmt = new StmtCobol(s); 
                                      code.endProgram(stmt);
                                      lastStmt = stmt;
                                   
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("end_program",1, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // module ::= procedure_division end_program 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("module",102, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= cobolCode EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		StmtCobol start_val = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		RESULT = start_val;
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ZCCParser$parser.done_parsing();
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // cobolCode ::= module 
            {
              StmtCobol RESULT =null;
		 code.EndOfFile(lastStmt, hasEndProgram);
                         RESULT = null;  
                      
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("cobolCode",101, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

