
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Feb 11 11:31:41 CET 2018
//----------------------------------------------------

package com.jgg.sdp.parser.lang;

import java_cup.runtime.*;
import com.jgg.sdp.common.config.*;
import com.jgg.sdp.core.ctes.TRAP;
import com.jgg.sdp.module.base.*;
import com.jgg.sdp.module.items.*;
import com.jgg.sdp.module.factorias.*;
import com.jgg.sdp.parser.base.*;
import com.jgg.sdp.parser.code.*;
import com.jgg.sdp.parser.stmt.*;
import com.jgg.sdp.parser.symbols.*;
import com.jgg.sdp.blocks.stmt.*;
import com.jgg.sdp.common.ctes.*;
import com.jgg.sdp.rules.components.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Feb 11 11:31:41 CET 2018
  */
public class ZCCParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ZCCParser() {super();}

  /** Constructor which sets the default scanner. */
  public ZCCParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ZCCParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0244\000\002\146\003\000\002\002\004\000\002\147" +
    "\004\000\002\003\005\000\002\003\002\000\002\002\004" +
    "\000\002\004\004\000\002\u012f\002\000\002\166\005\000" +
    "\002\171\003\000\002\171\002\000\002\172\003\000\002" +
    "\172\004\000\002\173\004\000\002\173\004\000\002\167" +
    "\003\000\002\167\002\000\002\170\003\000\002\170\004" +
    "\000\002\005\004\000\002\153\003\000\002\150\003\000" +
    "\002\150\002\000\002\151\003\000\002\151\004\000\002" +
    "\152\004\000\002\154\003\000\002\154\002\000\002\155" +
    "\005\000\002\156\003\000\002\156\002\000\002\160\003" +
    "\000\002\160\004\000\002\161\003\000\002\161\003\000" +
    "\002\161\003\000\002\164\003\000\002\165\004\000\002" +
    "\165\004\000\002\162\003\000\002\162\003\000\002\162" +
    "\003\000\002\162\003\000\002\162\003\000\002\162\003" +
    "\000\002\162\003\000\002\162\003\000\002\163\003\000" +
    "\002\163\003\000\002\163\003\000\002\163\003\000\002" +
    "\163\003\000\002\163\003\000\002\163\003\000\002\326" +
    "\004\000\002\326\003\000\002\326\003\000\002\327\003" +
    "\000\002\330\003\000\002\330\003\000\002\331\003\000" +
    "\002\331\003\000\002\331\003\000\002\331\003\000\002" +
    "\331\003\000\002\331\003\000\002\331\003\000\002\322" +
    "\003\000\002\322\003\000\002\322\003\000\002\322\003" +
    "\000\002\322\003\000\002\322\003\000\002\323\004\000" +
    "\002\323\003\000\002\324\003\000\002\324\003\000\002" +
    "\325\003\000\002\325\003\000\002\325\003\000\002\325" +
    "\003\000\002\325\003\000\002\325\003\000\002\325\003" +
    "\000\002\325\003\000\002\325\003\000\002\325\003\000" +
    "\002\325\003\000\002\332\003\000\002\332\003\000\002" +
    "\332\003\000\002\332\003\000\002\332\003\000\002\333" +
    "\003\000\002\202\003\000\002\203\003\000\002\174\003" +
    "\000\002\267\003\000\002\267\003\000\002\204\003\000" +
    "\002\210\003\000\002\210\003\000\002\210\003\000\002" +
    "\206\004\000\002\205\003\000\002\207\003\000\002\157" +
    "\003\000\002\157\003\000\002\157\002\000\002\250\003" +
    "\000\002\273\005\000\002\271\003\000\002\272\003\000" +
    "\002\006\005\000\002\007\003\000\002\010\004\000\002" +
    "\011\003\000\002\011\004\000\002\011\004\000\002\011" +
    "\003\000\002\011\003\000\002\275\010\000\002\012\003" +
    "\000\002\013\003\000\002\013\002\000\002\014\003\000" +
    "\002\014\004\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\257\006\000\002\260\003\000\002\260" +
    "\002\000\002\261\004\000\002\264\003\000\002\264\004" +
    "\000\002\265\003\000\002\265\004\000\002\266\003\000" +
    "\002\266\003\000\002\262\003\000\002\262\002\000\002" +
    "\263\004\000\002\251\004\000\002\177\007\000\002\016" +
    "\004\000\002\017\003\000\002\017\004\000\002\020\003" +
    "\000\002\021\003\000\002\021\002\000\002\022\003\000" +
    "\002\022\004\000\002\023\003\000\002\201\004\000\002" +
    "\024\006\000\002\025\003\000\002\026\004\000\002\026" +
    "\004\000\002\027\003\000\002\027\002\000\002\030\003" +
    "\000\002\030\004\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\211\004\000\002\212\003\000\002" +
    "\213\003\000\002\317\004\000\002\320\003\000\002\214" +
    "\003\000\002\214\003\000\002\215\004\000\002\216\003" +
    "\000\002\321\004\000\002\321\002\000\002\240\006\000" +
    "\002\241\003\000\002\241\004\000\002\242\003\000\002" +
    "\242\002\000\002\243\004\000\002\314\004\000\002\315" +
    "\003\000\002\032\004\000\002\033\003\000\002\034\004" +
    "\000\002\u0130\002\000\002\035\005\000\002\035\002\000" +
    "\002\036\003\000\002\036\004\000\002\037\006\000\002" +
    "\040\003\000\002\254\005\000\002\255\003\000\002\255" +
    "\004\000\002\256\003\000\002\256\003\000\002\256\003" +
    "\000\002\256\003\000\002\256\003\000\002\256\003\000" +
    "\002\256\003\000\002\256\003\000\002\256\003\000\002" +
    "\256\003\000\002\256\003\000\002\256\003\000\002\245" +
    "\007\000\002\246\003\000\002\247\004\000\002\041\004" +
    "\000\002\042\005\000\002\043\003\000\002\043\002\000" +
    "\002\044\003\000\002\044\004\000\002\045\003\000\002" +
    "\045\003\000\002\253\004\000\002\335\003\000\002\335" +
    "\004\000\002\336\004\000\002\337\003\000\002\337\003" +
    "\000\002\337\003\000\002\337\003\000\002\334\003\000" +
    "\002\334\004\000\002\217\004\000\002\220\003\000\002" +
    "\221\004\000\002\221\003\000\002\231\003\000\002\222" +
    "\003\000\002\222\002\000\002\224\003\000\002\224\002" +
    "\000\002\225\003\000\002\225\003\000\002\225\004\000" +
    "\002\226\003\000\002\226\003\000\002\223\003\000\002" +
    "\223\004\000\002\227\003\000\002\227\003\000\002\227" +
    "\003\000\002\227\003\000\002\227\003\000\002\227\003" +
    "\000\002\230\003\000\002\230\003\000\002\234\004\000" +
    "\002\233\004\000\002\235\010\000\002\236\010\000\002" +
    "\232\004\000\002\232\004\000\002\046\005\000\002\047" +
    "\003\000\002\047\002\000\002\050\003\000\002\050\004" +
    "\000\002\051\003\000\002\051\003\000\002\052\004\000" +
    "\002\053\004\000\002\054\005\000\002\055\003\000\002" +
    "\056\004\000\002\057\003\000\002\057\002\000\002\060" +
    "\003\000\002\060\004\000\002\061\003\000\002\062\004" +
    "\000\002\276\004\000\002\277\003\000\002\300\003\000" +
    "\002\300\004\000\002\301\004\000\002\302\003\000\002" +
    "\303\003\000\002\303\003\000\002\304\004\000\002\304" +
    "\004\000\002\306\004\000\002\307\004\000\002\307\004" +
    "\000\002\305\003\000\002\305\003\000\002\305\003\000" +
    "\002\305\003\000\002\305\003\000\002\u0131\002\000\002" +
    "\063\006\000\002\064\003\000\002\064\004\000\002\065" +
    "\003\000\002\065\003\000\002\065\003\000\002\065\003" +
    "\000\002\065\003\000\002\066\005\000\002\067\003\000" +
    "\002\070\004\000\002\071\004\000\002\072\004\000\002" +
    "\072\004\000\002\073\005\000\002\074\005\000\002\074" +
    "\002\000\002\075\005\000\002\076\003\000\002\077\003" +
    "\000\002\077\004\000\002\100\004\000\002\101\005\000" +
    "\002\102\003\000\002\102\003\000\002\103\005\000\002" +
    "\104\005\000\002\104\002\000\002\105\004\000\002\106" +
    "\004\000\002\107\003\000\002\107\004\000\002\110\004" +
    "\000\002\110\003\000\002\110\003\000\002\175\004\000" +
    "\002\111\006\000\002\112\003\000\002\112\002\000\002" +
    "\116\006\000\002\117\003\000\002\117\004\000\002\120" +
    "\003\000\002\120\003\000\002\113\004\000\002\114\003" +
    "\000\002\114\004\000\002\115\004\000\002\121\003\000" +
    "\002\121\002\000\002\122\003\000\002\122\004\000\002" +
    "\123\005\000\002\123\005\000\002\124\003\000\002\124" +
    "\002\000\002\125\003\000\002\125\004\000\002\126\004" +
    "\000\002\126\005\000\002\126\003\000\002\252\005\000" +
    "\002\244\005\000\002\127\003\000\002\127\002\000\002" +
    "\130\003\000\002\130\004\000\002\131\003\000\002\131" +
    "\003\000\002\131\003\000\002\131\003\000\002\132\004" +
    "\000\002\133\004\000\002\134\003\000\002\135\003\000" +
    "\002\237\005\000\002\200\004\000\002\274\004\000\002" +
    "\274\004\000\002\176\004\000\002\341\003\000\002\341" +
    "\004\000\002\340\004\000\002\311\004\000\002\312\004" +
    "\000\002\313\003\000\002\u0118\003\000\002\u0118\002\000" +
    "\002\u0119\003\000\002\u0119\004\000\002\u011a\003\000\002" +
    "\u011a\003\000\002\u011a\003\000\002\u011b\003\000\002\u011c" +
    "\003\000\002\u011d\004\000\002\u011f\003\000\002\310\003" +
    "\000\002\u011e\004\000\002\u0120\003\000\002\136\003\000" +
    "\002\136\003\000\002\137\003\000\002\137\003\000\002" +
    "\270\003\000\002\316\003\000\002\342\003\000\002\140" +
    "\003\000\002\140\002\000\002\141\003\000\002\141\004" +
    "\000\002\142\003\000\002\142\003\000\002\142\003\000" +
    "\002\143\003\000\002\143\002\000\002\144\003\000\002" +
    "\144\004\000\002\145\003\000\002\145\003\000\002\145" +
    "\003\000\002\145\003\000\002\145\003\000\002\145\003" +
    "\000\002\145\003\000\002\343\003\000\002\344\003\000" +
    "\002\344\005\000\002\345\004\000\002\346\004\000\002" +
    "\346\002\000\002\347\003\000\002\347\002\000\002\350" +
    "\003\000\002\350\005\000\002\351\003\000\002\360\003" +
    "\000\002\360\005\000\002\360\003\000\002\360\003\000" +
    "\002\360\003\000\002\360\003\000\002\361\004\000\002" +
    "\362\003\000\002\362\003\000\002\363\005\000\002\363" +
    "\002\000\002\352\003\000\002\352\005\000\002\353\003" +
    "\000\002\354\005\000\002\354\004\000\002\354\003\000" +
    "\002\364\003\000\002\364\005\000\002\364\004\000\002" +
    "\365\003\000\002\365\005\000\002\365\004\000\002\375" +
    "\003\000\002\375\004\000\002\367\004\000\002\367\003" +
    "\000\002\370\003\000\002\370\003\000\002\370\005\000" +
    "\002\373\003\000\002\373\005\000\002\374\003\000\002" +
    "\356\003\000\002\356\002\000\002\357\003\000\002\357" +
    "\003\000\002\357\003\000\002\357\003\000\002\357\003" +
    "\000\002\357\003\000\002\372\003\000\002\372\005\000" +
    "\002\371\004\000\002\371\003\000\002\371\003\000\002" +
    "\366\003\000\002\366\003\000\002\366\003\000\002\366" +
    "\003\000\002\366\003\000\002\366\003\000\002\366\003" +
    "\000\002\355\003\000\002\355\003\000\002\355\003\000" +
    "\002\u0123\003\000\002\u0123\002\000\002\u0122\003\000\002" +
    "\u0122\004\000\002\u0121\003\000\002\u0121\003\000\002\u0121" +
    "\003\000\002\u0121\003\000\002\u0121\003\000\002\u0121\005" +
    "\000\002\u0105\003\000\002\u0105\003\000\002\u0105\003\000" +
    "\002\u0105\003\000\002\u0105\003\000\002\u0105\003\000\002" +
    "\u0105\003\000\002\u0105\003\000\002\u0105\003\000\002\u0105" +
    "\003\000\002\377\005\000\002\377\005\000\002\u0100\005" +
    "\000\002\u0101\003\000\002\u0101\002\000\002\u0102\003\000" +
    "\002\u0102\005\000\002\u0103\003\000\002\u0103\003\000\002" +
    "\376\003\000\002\376\003\000\002\376\003\000\002\376" +
    "\003\000\002\376\003\000\002\u0108\003\000\002\u0109\003" +
    "\000\002\u0109\005\000\002\u010a\003\000\002\u010a\005\000" +
    "\002\u0104\003\000\002\u0104\003\000\002\u0104\003\000\002" +
    "\u010b\004\000\002\u010c\004\000\002\u010d\003\000\002\u010e" +
    "\003\000\002\u0110\003\000\002\u0110\002\000\002\u0111\003" +
    "\000\002\u0111\004\000\002\u0112\005\000\002\u0113\003\000" +
    "\002\u0113\005\000\002\u0114\003\000\002\u0115\003\000\002" +
    "\u0115\002\000\002\u0116\003\000\002\u0116\004\000\002\u0117" +
    "\004\000\002\u0117\004\000\002\u0106\003\000\002\u0107\003" +
    "\000\002\u0107\003\000\002\u0107\003\000\002\u0107\003\000" +
    "\002\u0107\003\000\002\u0107\003\000\002\u0107\003\000\002" +
    "\u0124\003\000\002\u0124\002\000\002\u0125\003\000\002\u0125" +
    "\002\000\002\u0126\003\000\002\u0126\002\000\002\u0127\003" +
    "\000\002\u0127\002\000\002\u0128\003\000\002\u0128\002\000" +
    "\002\u0129\003\000\002\u0129\002\000\002\u012b\003\000\002" +
    "\u012b\002\000\002\u012a\003\000\002\u012a\002\000\002\u012c" +
    "\003\000\002\u012c\002\000\002\u012d\003\000\002\u012d\002" +
    "\000\002\u012e\003\000\002\u012e\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02df\000\004\004\006\001\002\000\004\015\u02df\001" +
    "\ufffd\000\002\001\001\000\006\u0102\u02d0\u0145\u02d3\001\ufff7" +
    "\000\004\002\u02cf\001\002\000\146\007\176\010\103\013" +
    "\045\014\030\016\141\032\063\033\146\035\110\063\011" +
    "\075\211\076\121\103\021\114\062\117\154\141\104\146" +
    "\054\150\101\155\113\167\173\171\175\174\147\215\132" +
    "\224\155\232\032\236\026\241\013\266\164\274\044\276" +
    "\074\302\033\317\206\334\122\354\025\355\161\366\160" +
    "\377\027\u0100\111\u0105\125\u010a\157\u0114\150\u0119\205\u0124" +
    "\153\u0126\055\u0127\200\u0128\163\u0140\133\u0149\071\u014c\100" +
    "\u015d\204\u015e\066\001\uffe6\000\004\156\u02ce\001\002\000" +
    "\010\041\u0210\121\u0213\u0107\u0214\001\ufe80\000\004\247\u0106" +
    "\001\ufdc4\000\002\001\uffc5\000\002\001\uffd6\000\002\001" +
    "\uffb6\000\002\001\uffab\000\002\001\uffd1\000\004\005\u02b9" +
    "\001\002\000\002\001\uffc7\000\002\001\uffe2\000\004\041" +
    "\u019d\001\ufdd2\000\004\005\u02ab\001\002\000\026\005\217" +
    "\006\245\012\235\207\234\220\230\253\243\264\251\u0121" +
    "\250\u0158\246\u0160\247\001\002\000\004\u013b\u029a\001\002" +
    "\000\002\001\uff98\000\002\001\uffcc\000\002\001\uff47\000" +
    "\002\001\uff94\000\002\001\uffd0\000\002\001\uffaf\000\002" +
    "\001\uffa6\000\002\001\uffd8\000\050\005\217\006\245\012" +
    "\235\043\u01d0\200\u01d2\207\234\220\230\253\243\264\251" +
    "\301\u01c5\304\u01c3\305\u01c9\307\u01c2\341\u01c8\u0121\250\u013d" +
    "\u01c7\u0158\246\u0159\u01cf\u0160\247\001\002\000\026\005\217" +
    "\006\245\012\235\207\234\220\230\253\243\264\251\u0121" +
    "\250\u0158\246\u0160\247\001\002\000\002\001\uffac\000\002" +
    "\001\uffdf\000\002\001\uff2e\000\002\001\uff99\000\002\001" +
    "\uffa7\000\002\001\uffed\000\020\005\217\040\u026c\u0131\u0263" +
    "\u0135\u0267\u0137\u0260\u0141\u026d\u0148\u0270\001\uff14\000\002\001" +
    "\ufffc\000\002\001\uffb1\000\004\005\217\001\002\000\026" +
    "\005\217\006\245\012\235\207\234\220\230\253\243\264" +
    "\251\u0121\250\u0158\246\u0160\247\001\002\000\040\005\u0127" +
    "\006\u012c\012\u0123\043\u011c\046\u0126\131\u012a\154\u0129\202" +
    "\u011b\246\u012e\277\u0125\301\u0122\305\u0132\307\u0130\341\u011d" +
    "\u0159\u0133\001\ufe16\000\002\001\uffba\000\002\001\uffc1\000" +
    "\002\001\uffa4\000\002\001\uff9c\000\004\005\217\001\002" +
    "\000\004\u0139\u01e5\001\ufdc6\000\002\001\uffcf\000\002\001" +
    "\uff9d\000\002\001\uff91\000\002\001\uffc6\000\002\001\uffae" +
    "\000\002\001\uff57\000\002\001\uffb9\000\002\001\uffcd\000" +
    "\026\005\217\006\245\012\235\207\234\220\230\253\243" +
    "\264\251\u0121\250\u0158\246\u0160\247\001\002\000\002\001" +
    "\uffa9\000\052\005\217\006\245\012\235\043\u01d0\200\u01d2" +
    "\207\234\220\230\253\243\264\251\301\u01c5\304\u01c3\305" +
    "\u01c9\307\u01c2\324\u022b\341\u01c8\u0121\250\u013d\u01c7\u0158\246" +
    "\u0159\u01cf\u0160\247\001\002\000\002\001\uffb4\000\004\005" +
    "\u0228\001\002\000\002\001\uff65\000\002\001\uffbc\000\002" +
    "\001\ufe6d\000\004\005\u0227\001\002\000\002\001\uff9e\000" +
    "\002\001\uffda\000\002\001\uffca\000\002\001\uff87\000\004" +
    "\005\u021c\001\002\000\146\007\176\010\103\013\045\014" +
    "\030\016\141\032\063\033\146\035\110\063\011\075\211" +
    "\076\121\103\021\114\062\117\154\141\104\146\054\150" +
    "\101\155\113\167\173\171\175\174\147\215\132\224\155" +
    "\232\032\236\026\241\013\266\164\274\044\276\074\302" +
    "\033\317\206\334\122\354\025\355\161\366\160\377\027" +
    "\u0100\111\u0105\125\u010a\157\u0114\150\u0119\205\u0124\153\u0126" +
    "\055\u0127\200\u0128\163\u0140\133\u0149\071\u014c\100\u015d\204" +
    "\u015e\066\001\uffe7\000\002\001\ufe6e\000\010\041\u0210\121" +
    "\u0213\u0107\u0214\001\ufe80\000\026\005\217\006\245\012\235" +
    "\207\234\220\230\253\243\264\251\u0121\250\u0158\246\u0160" +
    "\247\001\002\000\050\005\217\006\245\012\235\043\u01d0" +
    "\200\u01d2\207\234\220\230\253\243\264\251\301\u01c5\304" +
    "\u01c3\305\u01c9\307\u01c2\341\u01c8\u0121\250\u013d\u01c7\u0158\246" +
    "\u0159\u01cf\u0160\247\001\002\000\002\001\uffd7\000\002\001" +
    "\uffbf\000\026\005\217\006\245\012\235\207\234\220\230" +
    "\253\243\264\251\u0121\250\u0158\246\u0160\247\001\002\000" +
    "\002\001\uff19\000\002\001\uffb7\000\040\005\u0127\006\u012c" +
    "\012\u0123\043\u011c\046\u0126\131\u012a\154\u0129\202\u011b\246" +
    "\u012e\277\u0125\301\u0122\305\u0132\307\u0130\341\u011d\u0159\u0133" +
    "\001\ufe16\000\004\005\u01ae\001\002\000\004\011\u01a8\001" +
    "\uffeb\000\002\001\uffb3\000\002\001\uffad\000\002\001\uffe0" +
    "\000\002\001\uffa2\000\026\005\217\006\245\012\235\207" +
    "\234\220\230\253\243\264\251\u0121\250\u0158\246\u0160\247" +
    "\001\002\000\002\001\uffbb\000\002\001\uffd5\000\002\001" +
    "\uffaa\000\002\001\uffc9\000\002\001\uffa8\000\040\005\u0127" +
    "\006\u012c\012\u0123\043\u011c\046\u0126\131\u012a\154\u0129\202" +
    "\u011b\246\u012e\277\u0125\301\u0122\305\u0132\307\u0130\341\u011d" +
    "\u0159\u0133\001\ufe16\000\004\005\217\001\002\000\040\005" +
    "\u0127\006\u012c\012\u0123\043\u011c\046\u0126\131\u012a\154\u0129" +
    "\202\u011b\246\u012e\277\u0125\301\u0122\305\u0132\307\u0130\341" +
    "\u011d\u0159\u0133\001\ufe16\000\002\001\uffb2\000\002\001\uffbd" +
    "\000\002\001\uff8f\000\006\347\u0168\u010b\u0166\001\uff95\000" +
    "\002\001\ufee9\000\002\001\uffc4\000\004\005\217\001\002" +
    "\000\004\005\u0139\001\002\000\002\001\uffa3\000\002\001" +
    "\uff49\000\002\001\uffc0\000\002\001\ufef2\000\004\005\u0119" +
    "\001\002\000\004\u013b\u0118\001\002\000\002\001\uffdd\000" +
    "\026\005\217\006\245\012\235\207\234\220\230\253\243" +
    "\264\251\u0121\250\u0158\246\u0160\247\001\002\000\002\001" +
    "\uffa1\000\002\001\uffa5\000\002\001\uffd2\000\002\001\uff9b" +
    "\000\002\001\uffb0\000\002\001\uffde\000\002\001\uffd3\000" +
    "\002\001\uff5a\000\002\001\uffc2\000\002\001\ufe82\000\002" +
    "\001\ufe6f\000\002\001\uffd9\000\002\001\ufec5\000\002\001" +
    "\uffc3\000\002\001\uffc8\000\002\001\uffd4\000\002\001\uff92" +
    "\000\002\001\ufed8\000\012\175\346\221\341\233\343\325" +
    "\342\001\002\000\002\001\uffb5\000\002\001\uffce\000\006" +
    "\005\217\012\213\001\002\000\002\001\uffbe\000\002\001" +
    "\uff9f\000\006\225\332\313\335\001\ufde0\000\002\001\uffa0" +
    "\000\004\u0145\313\001\uff7d\000\002\001\ufdea\000\004\u0159" +
    "\221\001\ufde8\000\030\005\217\006\245\012\235\207\234" +
    "\220\230\253\243\264\251\u0121\250\u0158\246\u0159\252\u0160" +
    "\247\001\002\000\002\001\ufdec\000\004\u0159\221\001\ufde9" +
    "\000\002\001\ufde7\000\002\001\ufde6\000\006\111\306\u015a" +
    "\307\001\002\000\002\001\ufde4\000\002\001\ufdd5\000\002" +
    "\001\ufdee\000\002\001\ufe59\000\002\001\ufddb\000\004\u015c" +
    "\273\001\002\000\002\001\ufdda\000\002\001\ufdef\000\014" +
    "\017\264\020\265\021\267\022\271\023\266\001\ufe5a\000" +
    "\004\024\261\001\ufe55\000\002\001\ufe52\000\002\001\ufe50" +
    "\000\004\313\256\001\002\000\002\001\ufdf0\000\002\001" +
    "\ufdd9\000\002\001\ufdd6\000\002\001\ufdd8\000\002\001\ufdd7" +
    "\000\002\001\ufdd4\000\030\005\217\006\245\012\235\207" +
    "\234\220\230\253\243\264\251\u0121\250\u0158\246\u0159\252" +
    "\u0160\247\001\002\000\002\001\ufde2\000\004\u015a\255\001" +
    "\002\000\002\001\ufe51\000\026\005\217\006\245\012\235" +
    "\207\234\220\230\253\243\264\251\u0121\250\u0158\246\u0160" +
    "\247\001\002\000\002\001\ufe02\000\002\001\ufe57\000\026" +
    "\005\217\006\245\012\235\207\234\220\230\253\243\264" +
    "\251\u0121\250\u0158\246\u0160\247\001\ufe53\000\002\001\ufe56" +
    "\000\002\001\ufe54\000\002\001\ufdf6\000\002\001\ufdf8\000" +
    "\002\001\ufdfa\000\002\001\ufdf7\000\030\005\217\006\245" +
    "\012\235\207\234\220\230\253\243\264\251\u0121\250\u0158" +
    "\246\u0159\252\u0160\247\001\002\000\002\001\ufdf9\000\002" +
    "\001\ufe58\000\004\u0159\274\001\002\000\030\005\217\006" +
    "\245\012\235\207\234\220\230\253\243\264\251\u0121\250" +
    "\u0158\246\u0159\252\u0160\247\001\ufdff\000\002\001\ufe03\000" +
    "\002\001\ufdfe\000\004\u015a\305\001\002\000\002\001\ufdfb" +
    "\000\004\111\303\001\ufe00\000\002\001\ufdfc\000\030\005" +
    "\217\006\245\012\235\207\234\220\230\253\243\264\251" +
    "\u0121\250\u0158\246\u0159\252\u0160\247\001\002\000\002\001" +
    "\ufdfd\000\002\001\ufe01\000\030\005\217\006\245\012\235" +
    "\207\234\220\230\253\243\264\251\u0121\250\u0158\246\u0159" +
    "\252\u0160\247\001\002\000\002\001\ufde5\000\002\001\ufde3" +
    "\000\002\001\uff7e\000\004\u0102\324\001\uff74\000\030\005" +
    "\217\006\245\012\235\074\316\207\234\220\230\253\243" +
    "\264\251\u0121\250\u0158\246\u0160\247\001\002\000\002\001" +
    "\uff7b\000\030\005\217\006\245\012\235\074\316\207\234" +
    "\220\230\253\243\264\251\u0121\250\u0158\246\u0160\247\001" +
    "\uff7c\000\006\363\322\u0146\321\001\002\000\002\001\uff79" +
    "\000\002\001\uff78\000\002\001\uff77\000\002\001\uff76\000" +
    "\002\001\uff7a\000\004\005\217\001\002\000\002\001\uff75" +
    "\000\002\001\uff7f\000\002\001\uff73\000\002\001\ufdf5\000" +
    "\006\225\332\313\335\001\ufde1\000\004\005\217\001\002" +
    "\000\002\001\ufded\000\002\001\ufddf\000\004\005\217\001" +
    "\002\000\002\001\ufddc\000\002\001\ufddd\000\002\001\ufdde" +
    "\000\002\001\uff1e\000\002\001\uff1f\000\002\001\uff20\000" +
    "\012\175\346\221\341\233\343\325\342\001\uff24\000\004" +
    "\005\351\001\002\000\002\001\uff1d\000\002\001\uff23\000" +
    "\004\005\352\001\uff21\000\002\001\uff1c\000\002\001\uff1b" +
    "\000\002\001\uff22\000\004\005\355\001\002\000\020\061" +
    "\372\145\363\152\371\212\365\233\364\325\360\u0145\366" +
    "\001\002\000\002\001\ufed2\000\004\247\u0106\001\ufdc4\000" +
    "\004\005\u0105\001\002\000\002\001\ufed1\000\002\001\ufed4" +
    "\000\002\001\ufe70\000\004\005\u0104\001\002\000\026\005" +
    "\217\006\245\012\235\207\234\220\230\253\243\264\251" +
    "\u0121\250\u0158\246\u0160\247\001\002\000\026\005\217\006" +
    "\245\012\235\207\234\220\230\253\243\264\251\u0121\250" +
    "\u0158\246\u0160\247\001\002\000\002\001\ufed3\000\002\001" +
    "\ufed0\000\002\001\ufece\000\002\001\ufe71\000\002\001\ufed6" +
    "\000\020\061\372\145\363\152\371\212\365\233\364\325" +
    "\360\u0145\366\001\ufed7\000\002\001\ufed5\000\030\005\ufdce" +
    "\006\ufdce\012\ufdce\111\u0100\207\ufdce\220\ufdce\253\ufdce\264" +
    "\ufdce\u0121\ufdce\u0158\ufdce\u0160\ufdce\001\ufecd\000\002\001\ufdf2" +
    "\000\002\001\ufdcf\000\026\005\217\006\245\012\235\207" +
    "\234\220\230\253\243\264\251\u0121\250\u0158\246\u0160\247" +
    "\001\002\000\002\001\ufdf1\000\030\005\ufdce\006\ufdce\012" +
    "\ufdce\111\u0100\207\ufdce\220\ufdce\253\ufdce\264\ufdce\u0121\ufdce" +
    "\u0158\ufdce\u0160\ufdce\001\ufecc\000\002\001\ufecb\000\002\001" +
    "\ufeca\000\002\001\ufdc5\000\026\005\217\006\245\012\235" +
    "\207\234\220\230\253\243\264\251\u0121\250\u0158\246\u0160" +
    "\247\001\002\000\030\005\ufdce\006\ufdce\012\ufdce\111\u0100" +
    "\207\ufdce\220\ufdce\253\ufdce\264\ufdce\u0121\ufdce\u0158\ufdce\u0160" +
    "\ufdce\001\ufecf\000\002\001\ufebb\000\012\111\u0100\206\u0110" +
    "\212\u010e\u015b\u010d\001\ufdce\000\002\001\ufeb9\000\002\001" +
    "\ufeb5\000\002\001\ufe74\000\004\005\217\001\002\000\002" +
    "\001\ufeb6\000\026\005\217\006\245\012\235\207\234\220" +
    "\230\253\243\264\251\u0121\250\u0158\246\u0160\247\001\002" +
    "\000\010\206\u0110\212\u010e\u015b\u010d\001\ufeba\000\002\001" +
    "\ufeb8\000\030\005\ufdce\006\ufdce\012\ufdce\111\u0100\207\ufdce" +
    "\220\ufdce\253\ufdce\264\ufdce\u0121\ufdce\u0158\ufdce\u0160\ufdce\001" +
    "\ufeb7\000\002\001\ufdf4\000\006\005\ufdce\111\u0100\001\ufe78" +
    "\000\004\005\217\001\002\000\002\001\ufdf3\000\002\001" +
    "\uffdc\000\054\005\u0127\006\u012c\012\u0123\040\u012d\043\u011c" +
    "\046\u0126\131\u012a\154\u0129\202\u011b\246\u012e\257\u012f\263" +
    "\u011e\277\u0125\301\u0122\303\u0131\305\u0132\307\u0130\332\u0128" +
    "\341\u011d\u014a\u0124\u0159\u0133\001\ufe64\000\002\001\ufe8c\000" +
    "\002\001\ufe0f\000\002\001\ufe0b\000\002\001\ufe0d\000\002" +
    "\001\ufe5f\000\002\001\ufe63\000\002\001\ufe61\000\002\001" +
    "\ufe10\000\002\001\ufe0c\000\002\001\ufe12\000\002\001\ufe60" +
    "\000\002\001\ufe05\000\002\001\ufe0a\000\002\001\ufe13\000" +
    "\002\001\ufe5c\000\002\001\ufe06\000\002\001\ufe07\000\054" +
    "\005\u0127\006\u012c\012\u0123\040\u012d\043\u011c\046\u0126\131" +
    "\u012a\154\u0129\202\u011b\246\u012e\257\u012f\263\u011e\277\u0125" +
    "\301\u0122\303\u0131\305\u0132\307\u0130\332\u0128\341\u011d\u014a" +
    "\u0124\u0159\u0133\001\ufe65\000\002\001\ufe11\000\002\001\ufe5b" +
    "\000\002\001\ufe08\000\002\001\ufe5d\000\002\001\ufe09\000" +
    "\002\001\ufe5e\000\002\001\ufe04\000\040\005\u0127\006\u012c" +
    "\012\u0123\043\u011c\046\u0126\131\u012a\154\u0129\202\u011b\246" +
    "\u012e\277\u0125\301\u0122\305\u0132\307\u0130\341\u011d\u0159\u0133" +
    "\001\002\000\002\001\ufe15\000\042\005\u0127\006\u012c\012" +
    "\u0123\043\u011c\046\u0126\131\u012a\154\u0129\202\u011b\246\u012e" +
    "\277\u0125\301\u0122\305\u0132\307\u0130\341\u011d\u0159\u0133\u015a" +
    "\u0137\001\002\000\002\001\ufe14\000\002\001\ufe0e\000\002" +
    "\001\ufe62\000\004\247\u013a\001\ufec7\000\016\025\u0142\027" +
    "\u013f\031\u013c\165\u0141\216\u013e\304\u013d\001\002\000\002" +
    "\001\ufec9\000\002\001\ufe4c\000\006\030\u014c\254\u014e\001" +
    "\002\000\004\u0132\u0146\001\ufdc0\000\002\001\ufe4b\000\002" +
    "\001\ufe4f\000\002\001\ufe4d\000\002\001\ufe4a\000\026\005" +
    "\217\006\245\012\235\207\234\220\230\253\243\264\251" +
    "\u0121\250\u0158\246\u0160\247\001\002\000\002\001\ufec8\000" +
    "\004\321\u0148\001\ufe45\000\002\001\ufdc1\000\002\001\ufe4e" +
    "\000\004\165\u0149\001\002\000\004\u0139\u014a\001\ufdbe\000" +
    "\002\001\ufdbf\000\002\001\ufe46\000\002\001\ufe47\000\002" +
    "\001\ufe49\000\002\001\ufe48\000\004\005\217\001\ufeea\000" +
    "\002\001\ufee8\000\006\005\ufdce\111\u0100\001\ufee5\000\012" +
    "\074\u015a\151\u0158\u0139\u0155\u0142\u0156\001\002\000\002\001" +
    "\ufee3\000\026\005\217\006\245\012\235\207\234\220\230" +
    "\253\243\264\251\u0121\250\u0158\246\u0160\247\001\002\000" +
    "\036\005\217\006\245\012\235\200\u0160\207\234\220\230" +
    "\253\243\264\251\314\u015c\316\u015d\u0121\250\u013d\u015e\u0158" +
    "\246\u0160\247\001\002\000\004\074\u0162\001\002\000\002" +
    "\001\ufee6\000\004\074\u0161\001\002\000\002\001\ufee4\000" +
    "\036\005\217\006\245\012\235\200\u0160\207\234\220\230" +
    "\253\243\264\251\314\u015c\316\u015d\u0121\250\u013d\u015e\u0158" +
    "\246\u0160\247\001\002\000\002\001\ufee1\000\002\001\ufed9" +
    "\000\002\001\ufeda\000\002\001\ufedb\000\002\001\ufedd\000" +
    "\002\001\ufedc\000\002\001\ufede\000\002\001\ufedf\000\002" +
    "\001\ufee2\000\002\001\ufee0\000\002\001\ufee7\000\002\001" +
    "\uff96\000\002\001\uff9a\000\002\001\uff97\000\002\001\uffcb" +
    "\000\040\005\u0127\006\u012c\012\u0123\043\u011c\046\u0126\131" +
    "\u012a\154\u0129\202\u011b\246\u012e\277\u0125\301\u0122\305\u0132" +
    "\307\u0130\341\u011d\u0159\u0133\001\ufe17\000\002\001\uff48\000" +
    "\010\005\ufdce\111\u0100\373\u016e\001\uff43\000\002\001\uff46" +
    "\000\002\001\uff45\000\026\043\u011c\046\u0126\131\u012a\154" +
    "\u0129\246\u012e\277\u0125\301\u0122\305\u0132\307\u0130\341\u011d" +
    "\001\002\000\002\001\uff42\000\026\043\u011c\046\u0126\131" +
    "\u012a\154\u0129\246\u012e\277\u0125\301\u0122\305\u0132\307\u0130" +
    "\341\u011d\001\uff44\000\004\125\u0174\001\ufdcc\000\004\074" +
    "\u0175\001\002\000\002\001\ufdcd\000\026\005\217\006\245" +
    "\012\235\207\234\220\230\253\243\264\251\u0121\250\u0158" +
    "\246\u0160\247\001\002\000\002\001\uff3f\000\002\001\uff40" +
    "\000\002\001\uff41\000\002\001\ufe89\000\004\142\u017d\001" +
    "\ufeb1\000\002\001\ufeb4\000\002\001\ufeb2\000\004\074\u019c" +
    "\001\ufdd0\000\004\240\u0180\001\002\000\010\326\u0193\337" +
    "\u0195\u012f\u0190\001\ufea0\000\004\005\217\001\002\000\006" +
    "\123\u0188\143\u0185\001\ufea6\000\002\001\ufeaa\000\004\005" +
    "\217\001\ufeab\000\002\001\ufea9\000\004\225\u018b\001\ufdc8" +
    "\000\002\001\ufea8\000\006\123\u0188\143\u0185\001\ufea7\000" +
    "\004\225\u018b\001\ufdc8\000\002\001\ufea5\000\004\005\217" +
    "\001\002\000\002\001\ufdc9\000\002\001\ufea2\000\002\001" +
    "\ufea4\000\004\005\217\001\002\000\002\001\ufea3\000\004" +
    "\225\u018b\001\ufdc8\000\002\001\ufe9b\000\002\001\ufeb3\000" +
    "\002\001\ufe76\000\010\326\u0193\337\u0195\u012f\u0190\001\ufea1" +
    "\000\004\005\217\001\002\000\002\001\ufe9f\000\002\001" +
    "\ufe9d\000\002\001\ufe9e\000\004\005\217\001\002\000\002" +
    "\001\ufe9c\000\004\041\u019d\001\ufdd2\000\002\001\ufdd1\000" +
    "\002\001\ufdd3\000\030\005\217\006\245\012\235\207\234" +
    "\220\230\253\243\264\251\321\u019f\u0121\250\u0158\246\u0160" +
    "\247\001\002\000\002\001\ufeac\000\002\001\ufeaf\000\030" +
    "\005\217\006\245\012\235\207\234\220\230\253\243\264" +
    "\251\321\u019f\u0121\250\u0158\246\u0160\247\001\ufeb0\000\002" +
    "\001\ufead\000\002\001\ufeae\000\002\001\uffea\000\002\001" +
    "\uffee\000\146\007\176\010\103\013\045\014\030\016\141" +
    "\032\063\033\146\035\110\063\011\075\211\076\121\103" +
    "\021\114\062\117\154\141\104\146\054\150\101\155\113" +
    "\167\173\171\175\174\147\215\132\224\155\232\032\236" +
    "\026\241\013\266\164\274\044\276\074\302\033\317\206" +
    "\334\122\354\025\355\161\366\160\377\027\u0100\111\u0105" +
    "\125\u010a\157\u0114\150\u0119\205\u0124\153\u0126\055\u0127\200" +
    "\u0128\163\u0140\133\u0149\071\u014c\100\u015d\204\u015e\066\001" +
    "\uffe6\000\004\011\u01a8\001\uffec\000\004\u010b\u01aa\001\uffe3" +
    "\000\004\007\u01ab\001\002\000\002\001\uffe4\000\002\001" +
    "\uffe5\000\002\001\uffe9\000\002\001\uffe8\000\012\040\u01ba" +
    "\066\u01b4\164\u01af\206\u01b8\001\ufe97\000\002\001\ufe8d\000" +
    "\002\001\ufe94\000\002\001\ufe91\000\026\005\217\006\245" +
    "\012\235\207\234\220\230\253\243\264\251\u0121\250\u0158" +
    "\246\u0160\247\001\002\000\002\001\ufe92\000\002\001\ufe73" +
    "\000\002\001\ufe96\000\002\001\ufe99\000\012\040\u01ba\066" +
    "\u01b4\164\u01af\206\u01b8\001\ufe98\000\026\005\217\006\245" +
    "\012\235\207\234\220\230\253\243\264\251\u0121\250\u0158" +
    "\246\u0160\247\001\002\000\002\001\ufe93\000\026\005\ufe72" +
    "\006\ufe72\012\ufe72\207\ufe72\220\ufe72\253\ufe72\264\ufe72\u0121" +
    "\ufe72\u0158\ufe72\u0160\ufe72\001\ufe8e\000\002\001\ufe90\000\002" +
    "\001\ufe95\000\002\001\ufe8f\000\002\001\uffb8\000\002\001" +
    "\uff72\000\010\050\u01e9\053\u01e8\321\u01ea\001\uff59\000\002" +
    "\001\ufe3e\000\002\001\ufe1c\000\046\005\217\006\245\012" +
    "\235\043\u01d0\200\u01d2\207\234\220\230\253\243\264\251" +
    "\301\u01c5\305\u01c9\307\u01c2\341\u01c8\u0121\250\u013d\u01c7\u0158" +
    "\246\u0159\u01cf\u0160\247\001\002\000\014\017\264\020\265" +
    "\021\267\022\271\023\266\001\ufe34\000\002\001\ufe1e\000" +
    "\002\001\ufe2f\000\002\001\ufe21\000\002\001\ufe1f\000\002" +
    "\001\ufe1d\000\002\001\uff5b\000\002\001\ufe33\000\002\001" +
    "\ufe44\000\002\001\ufe31\000\002\001\ufe35\000\050\005\217" +
    "\006\245\012\235\043\u01d0\200\u01d2\207\234\220\230\253" +
    "\243\264\251\301\u01c5\304\u01c3\305\u01c9\307\u01c2\341\u01c8" +
    "\u0121\250\u013d\u01c7\u0158\246\u0159\u01cf\u0160\247\001\002\000" +
    "\002\001\ufe1b\000\042\025\u01d3\026\u01dd\027\u01dc\030\u01db" +
    "\031\u01d4\043\u01d0\165\u01d5\200\u01d2\216\u01da\254\u01df\301" +
    "\u01c5\304\u01d8\305\u01c9\307\u01c2\341\u01c8\u013d\u01c7\001\ufe42" +
    "\000\002\001\ufe20\000\002\001\ufe2a\000\002\001\ufe2c\000" +
    "\004\u0139\u01e5\001\ufdc6\000\046\005\217\006\245\012\235" +
    "\043\u01d0\200\u01d2\207\234\220\230\253\243\264\251\301" +
    "\u01c5\305\u01c9\307\u01c2\341\u01c8\u0121\250\u013d\u01c7\u0158\246" +
    "\u0159\u01cf\u0160\247\001\002\000\002\001\ufe38\000\040\025" +
    "\u01d3\026\u01dd\027\u01dc\030\u01db\031\u01d4\043\u01d0\165\u01d5" +
    "\200\u01d2\216\u01da\254\u01df\301\u01c5\305\u01c9\307\u01c2\341" +
    "\u01c8\u013d\u01c7\001\002\000\002\001\ufe26\000\002\001\ufe23" +
    "\000\002\001\ufe29\000\002\001\ufe2b\000\002\001\ufe28\000" +
    "\002\001\ufe3c\000\002\001\ufe22\000\004\321\u01e1\001\ufe27" +
    "\000\010\165\u01d5\216\u01da\254\u01df\001\002\000\002\001" +
    "\ufe25\000\002\001\ufe3d\000\002\001\ufe37\000\002\001\ufdc7" +
    "\000\002\001\ufe24\000\012\050\u01e9\053\u01e8\321\u01ea\u015a" +
    "\u01eb\001\002\000\002\001\ufe1a\000\002\001\ufe18\000\002" +
    "\001\ufe19\000\002\001\ufe32\000\070\005\217\006\245\012" +
    "\235\025\u01d3\026\u01dd\027\u01dc\030\u01db\031\u01d4\043\u01d0" +
    "\165\u01d5\200\u01d2\207\234\216\u01da\220\230\253\243\254" +
    "\u01df\264\251\301\u01c5\304\u01ed\305\u01c9\307\u01c2\341\u01c8" +
    "\u0121\250\u013d\u01c7\u0158\246\u0159\u01cf\u0160\247\001\002\000" +
    "\022\025\u01d3\026\u01dd\027\u01dc\030\u01db\031\u01d4\165\u01d5" +
    "\216\u01da\254\u01df\001\ufe2d\000\046\005\217\006\245\012" +
    "\235\043\u01d0\200\u01d2\207\234\220\230\253\243\264\251" +
    "\301\u01c5\305\u01c9\307\u01c2\341\u01c8\u0121\250\u013d\u01c7\u0158" +
    "\246\u0159\u01cf\u0160\247\001\002\000\002\001\ufe43\000\002" +
    "\001\ufe3b\000\042\025\u01d3\026\u01dd\027\u01dc\030\u01db\031" +
    "\u01d4\043\u01d0\165\u01d5\200\u01d2\216\u01da\254\u01df\301\u01c5" +
    "\304\u01f2\305\u01c9\307\u01c2\341\u01c8\u013d\u01c7\001\ufe3f\000" +
    "\040\025\u01d3\026\u01dd\027\u01dc\030\u01db\031\u01d4\043\u01d0" +
    "\165\u01d5\200\u01d2\216\u01da\254\u01df\301\u01c5\305\u01c9\307" +
    "\u01c2\341\u01c8\u013d\u01c7\001\002\000\002\001\ufe39\000\002" +
    "\001\ufe3a\000\002\001\ufe40\000\046\005\217\006\245\012" +
    "\235\043\u01d0\200\u01d2\207\234\220\230\253\243\264\251" +
    "\301\u01c5\305\u01c9\307\u01c2\341\u01c8\u0121\250\u013d\u01c7\u0158" +
    "\246\u0159\u01cf\u0160\247\001\002\000\002\001\ufe2e\000\002" +
    "\001\ufe41\000\026\005\217\006\245\012\235\207\234\220" +
    "\230\253\243\264\251\u0121\250\u0158\246\u0160\247\001\002" +
    "\000\002\001\ufe30\000\002\001\ufe36\000\002\001\ufec4\000" +
    "\006\111\u0100\142\u0208\001\ufdce\000\030\005\217\006\245" +
    "\012\235\207\234\220\230\240\u0201\253\243\264\251\u0121" +
    "\250\u0158\246\u0160\247\001\002\000\002\001\ufec3\000\002" +
    "\001\ufec6\000\004\005\217\001\002\000\006\337\ufdc2\u014a" +
    "\u0205\001\ufebc\000\004\337\u0206\001\002\000\002\001\ufebe" +
    "\000\002\001\ufdc3\000\004\005\217\001\002\000\002\001" +
    "\ufebd\000\004\074\u019c\001\ufdd0\000\002\001\ufec2\000\030" +
    "\005\217\006\245\012\235\207\234\220\230\253\243\264" +
    "\251\u0118\u020d\u0121\250\u0158\246\u0160\247\001\002\000\002" +
    "\001\ufec1\000\002\001\ufec0\000\002\001\ufebf\000\002\001" +
    "\ufe7b\000\002\001\ufe7f\000\002\001\ufe7a\000\002\001\ufe7c" +
    "\000\030\005\217\006\245\012\235\207\234\220\230\253" +
    "\243\264\251\u0121\250\u0158\246\u0159\252\u0160\247\001\002" +
    "\000\002\001\ufe79\000\002\001\ufe77\000\002\001\ufe7d\000" +
    "\010\041\u0210\121\u0213\u0107\u0214\001\ufe81\000\002\001\ufe7e" +
    "\000\004\u0139\u0219\001\002\000\004\005\217\001\002\000" +
    "\006\005\ufdce\111\u0100\001\uff2f\000\002\001\uffe1\000\006" +
    "\240\u0222\247\u021d\001\ufefa\000\026\005\217\006\245\012" +
    "\235\207\234\220\230\253\243\264\251\u0121\250\u0158\246" +
    "\u0160\247\001\002\000\006\240\u0222\247\u021d\001\ufefb\000" +
    "\002\001\uff93\000\002\001\ufef9\000\002\001\ufef6\000\004" +
    "\005\217\001\002\000\002\001\ufef7\000\002\001\ufef5\000" +
    "\002\001\ufef8\000\002\001\ufef4\000\002\001\ufe8b\000\012" +
    "\040\u01ba\066\u01b4\164\u01af\206\u01b8\001\ufe97\000\002\001" +
    "\ufe9a\000\012\050\u01e9\053\u01e8\321\u01ea\u0135\u022f\001\uff51" +
    "\000\002\001\uff53\000\002\001\uff55\000\002\001\uff56\000" +
    "\002\001\uff58\000\050\005\217\006\245\012\235\043\u01d0" +
    "\200\u01d2\207\234\220\230\253\243\264\251\301\u01c5\304" +
    "\u01c3\305\u01c9\307\u01c2\341\u01c8\u0121\250\u013d\u01c7\u0158\246" +
    "\u0159\u01cf\u0160\247\001\002\000\002\001\uff54\000\010\050" +
    "\u01e9\053\u01e8\321\u01ea\001\uff52\000\004\074\u023b\001\002" +
    "\000\002\001\uff2d\000\006\212\u010e\u015b\u010d\001\uff29\000" +
    "\002\001\uff28\000\006\212\u010e\u015b\u010d\001\uff2a\000\002" +
    "\001\uff2c\000\002\001\uff25\000\002\001\uff26\000\002\001" +
    "\uff27\000\026\005\217\006\245\012\235\207\234\220\230" +
    "\253\243\264\251\u0121\250\u0158\246\u0160\247\001\002\000" +
    "\002\001\uff2b\000\004\005\u023f\001\002\000\006\005\u0243" +
    "\144\u0242\001\uff4c\000\002\001\uff4f\000\002\001\uff4d\000" +
    "\002\001\uff50\000\026\005\217\006\245\012\235\207\234" +
    "\220\230\253\243\264\251\u0121\250\u0158\246\u0160\247\001" +
    "\002\000\002\001\uff4e\000\002\001\uff4b\000\010\041\u0210" +
    "\121\u0213\u0107\u0214\001\ufe80\000\004\031\u0247\001\002\000" +
    "\030\005\217\006\245\012\235\207\234\220\230\253\243" +
    "\264\251\u0121\250\u0158\246\u0159\252\u0160\247\001\002\000" +
    "\032\005\217\006\245\012\235\207\234\220\230\253\243" +
    "\264\251\u0121\250\u0158\246\u0159\252\u015b\u010d\u0160\247\001" +
    "\uff6b\000\002\001\uff6d\000\002\001\uff6f\000\002\001\uff71" +
    "\000\004\u015b\u010d\001\uff6c\000\002\001\uff68\000\002\001" +
    "\uff6a\000\002\001\uff6e\000\002\001\uff69\000\002\001\uff70" +
    "\000\002\001\ufe8a\000\030\005\ufdce\006\ufdce\012\ufdce\111" +
    "\u0100\207\ufdce\220\ufdce\253\ufdce\264\ufdce\u0121\ufdce\u0158\ufdce" +
    "\u0160\ufdce\001\uff67\000\004\206\u0256\001\002\000\002\001" +
    "\uff90\000\014\005\u025b\126\u025a\127\u025c\130\u0258\u0136\u0259" +
    "\001\002\000\002\001\uff8e\000\002\001\uff8a\000\002\001" +
    "\uff89\000\004\005\u025e\001\ufdca\000\002\001\uff8d\000\004" +
    "\005\u025e\001\ufdca\000\002\001\uff8b\000\002\001\ufdcb\000" +
    "\002\001\uff8c\000\002\001\uff0a\000\002\001\uff0c\000\022" +
    "\005\217\006\u0286\040\u026c\u0131\u0263\u0135\u0267\u0137\u0260\u0141" +
    "\u026d\u0148\u0270\001\uff12\000\006\040\u0282\066\u0281\001\002" +
    "\000\002\001\uff1a\000\002\001\uff05\000\002\001\uff17\000" +
    "\004\005\217\001\002\000\042\005\217\006\245\012\235" +
    "\040\u026c\207\234\220\230\253\243\264\251\u0121\250\u0131" +
    "\u0263\u0135\u0267\u0137\u0260\u0141\u026d\u0148\u0270\u0158\246\u0160\247" +
    "\001\uff15\000\002\001\uff08\000\002\001\uff16\000\002\001" +
    "\uff07\000\026\005\217\006\245\012\235\207\234\220\230" +
    "\253\243\264\251\u0121\250\u0158\246\u0160\247\001\002\000" +
    "\050\005\217\006\245\012\235\043\u01d0\200\u01d2\207\234" +
    "\220\230\253\243\264\251\301\u01c5\304\u01c3\305\u01c9\307" +
    "\u01c2\341\u01c8\u0121\250\u013d\u01c7\u0158\246\u0159\u01cf\u0160\247" +
    "\001\002\000\002\001\uff06\000\002\001\uff09\000\026\005" +
    "\217\006\245\012\235\207\234\220\230\253\243\264\251" +
    "\u0121\250\u0158\246\u0160\247\001\002\000\004\206\u0273\001" +
    "\002\000\002\001\ufdeb\000\026\005\217\006\245\012\235" +
    "\207\234\220\230\253\243\264\251\u0121\250\u0158\246\u0160" +
    "\247\001\002\000\004\074\u0275\001\002\000\026\005\217" +
    "\006\245\012\235\207\234\220\230\253\243\264\251\u0121" +
    "\250\u0158\246\u0160\247\001\002\000\002\001\uff00\000\010" +
    "\050\u01e9\053\u01e8\321\u01ea\001\uff01\000\004\206\u0279\001" +
    "\002\000\026\005\217\006\245\012\235\207\234\220\230" +
    "\253\243\264\251\u0121\250\u0158\246\u0160\247\001\002\000" +
    "\004\074\u027b\001\002\000\026\005\217\006\245\012\235" +
    "\207\234\220\230\253\243\264\251\u0121\250\u0158\246\u0160" +
    "\247\001\002\000\002\001\ufeff\000\002\001\uff04\000\002" +
    "\001\uff03\000\002\001\uff0b\000\002\001\uff02\000\002\001" +
    "\ufefe\000\002\001\ufefd\000\002\001\uff11\000\042\005\217" +
    "\006\245\012\235\040\u026c\207\234\220\230\253\243\264" +
    "\251\u0121\250\u0131\u0263\u0135\u0267\u0137\u0260\u0141\u026d\u0148\u0270" +
    "\u0158\246\u0160\247\001\uff13\000\002\001\uff10\000\002\001" +
    "\uff0d\000\002\001\uff0e\000\002\001\uff18\000\002\001\uff0f" +
    "\000\006\074\u028d\240\u028c\001\002\000\010\212\u010e\370" +
    "\u0290\u0107\u0214\001\uff61\000\004\005\217\001\002\000\026" +
    "\005\217\006\245\012\235\207\234\220\230\253\243\264" +
    "\251\u0121\250\u0158\246\u0160\247\001\002\000\030\005\ufdce" +
    "\006\ufdce\012\ufdce\111\u0100\207\ufdce\220\ufdce\253\ufdce\264" +
    "\ufdce\u0121\ufdce\u0158\ufdce\u0160\ufdce\001\uff63\000\006\005\ufdce" +
    "\111\u0100\001\uff64\000\004\005\217\001\002\000\002\001" +
    "\uff5d\000\010\212\u010e\370\u0290\u0107\u0214\001\uff62\000\002" +
    "\001\uff60\000\002\001\uff66\000\002\001\uff5e\000\002\001" +
    "\uff5c\000\002\001\uff5f\000\002\001\ufe75\000\010\050\u01e9" +
    "\053\u01e8\321\u01ea\001\uff4a\000\002\001\uffdb\000\054\005" +
    "\217\006\245\012\235\040\u02a4\041\u029e\066\u02a0\074\u02a1" +
    "\100\u029d\120\u029c\203\u02a7\207\234\220\230\251\u029f\253" +
    "\243\264\251\373\u02a6\u0121\250\u012f\u02a9\u0139\u02a8\u0158\246" +
    "\u0160\247\001\002\000\002\001\uff31\000\002\001\uff35\000" +
    "\002\001\uff3b\000\002\001\uff37\000\002\001\uff39\000\002" +
    "\001\uff3a\000\054\005\217\006\245\012\235\040\u02a4\041" +
    "\u029e\066\u02a0\074\u02a1\100\u029d\120\u029c\203\u02a7\207\234" +
    "\220\230\251\u029f\253\243\264\251\373\u02a6\u0121\250\u012f" +
    "\u02a9\u0139\u02a8\u0158\246\u0160\247\001\uff3e\000\002\001\uff30" +
    "\000\002\001\uff38\000\002\001\uff3d\000\002\001\uff32\000" +
    "\002\001\uff36\000\002\001\uff34\000\002\001\uff33\000\002" +
    "\001\uff3c\000\006\240\u0222\247\u021d\001\ufefa\000\002\001" +
    "\ufefc\000\026\005\217\006\245\012\235\207\234\220\230" +
    "\253\243\264\251\u0121\250\u0158\246\u0160\247\001\002\000" +
    "\002\001\ufef3\000\004\u0148\u02b4\001\ufeef\000\004\u0148\u02b4" +
    "\001\ufef0\000\002\001\ufef1\000\002\001\ufeee\000\002\001" +
    "\ufeec\000\026\005\217\006\245\012\235\207\234\220\230" +
    "\253\243\264\251\u0121\250\u0158\246\u0160\247\001\002\000" +
    "\002\001\ufeeb\000\002\001\ufeed\000\002\001\ufe87\000\004" +
    "\005\u02b9\001\ufe88\000\010\205\u02ba\303\u02be\u014a\u02bb\001" +
    "\ufe6b\000\002\001\ufe66\000\002\001\ufe68\000\002\001\ufe6a" +
    "\000\002\001\ufe85\000\002\001\ufe67\000\010\205\u02ba\303" +
    "\u02be\u014a\u02bb\001\ufe6c\000\002\001\ufe69\000\002\001\ufe86" +
    "\000\002\001\ufe83\000\026\005\217\006\245\012\235\207" +
    "\234\220\230\253\243\264\251\u0121\250\u0158\246\u0160\247" +
    "\001\002\000\006\111\u0100\u0139\u02c5\001\ufdce\000\004\005" +
    "\217\001\002\000\014\005\ufdce\111\u0100\121\u0213\212\u010e" +
    "\u0107\u0214\001\uff85\000\002\001\uff84\000\002\001\uff81\000" +
    "\002\001\uff80\000\002\001\uff82\000\002\001\uff88\000\010" +
    "\121\u0213\212\u010e\u0107\u0214\001\uff86\000\002\001\uff83\000" +
    "\002\001\ufe84\000\002\001\000\000\026\005\217\006\245" +
    "\012\235\207\234\220\230\253\243\264\251\u0121\250\u0158" +
    "\246\u0160\247\001\002\000\002\001\ufffb\000\002\001\ufff6" +
    "\000\004\005\u02db\001\ufff1\000\002\001\ufffa\000\006\u0102" +
    "\u02d0\u0145\u02d3\001\ufff8\000\002\001\ufff5\000\004\007\u02d8" +
    "\001\002\000\002\001\ufff9\000\002\001\ufff4\000\004\005" +
    "\u02dc\001\ufff2\000\002\001\ufff0\000\002\001\uffef\000\002" +
    "\001\ufff3\000\002\001\uffff\000\004\005\u02e0\001\002\000" +
    "\004\007\u02e1\001\002\000\002\001\ufffe" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02df\000\012\002\003\004\007\146\006\147\004\001" +
    "\001\000\004\003\u02dd\001\001\000\002\001\001\000\012" +
    "\166\u02d0\171\u02d3\172\u02d4\173\u02d1\001\001\000\002\001" +
    "\001\000\242\005\050\006\076\007\052\012\011\024\035" +
    "\025\040\032\055\033\141\046\167\054\117\055\023\063" +
    "\135\073\206\075\144\076\114\105\164\153\125\154\046" +
    "\160\111\161\022\162\130\163\042\164\170\165\161\174" +
    "\015\175\133\176\051\177\137\200\041\201\126\202\155" +
    "\203\066\204\106\205\060\206\064\207\166\210\104\211" +
    "\173\212\115\217\013\220\047\237\034\240\056\244\016" +
    "\245\211\246\113\247\074\250\201\251\057\252\127\253" +
    "\143\254\101\257\150\270\165\271\202\272\171\273\067" +
    "\274\021\275\045\276\071\277\151\311\207\312\072\313" +
    "\030\314\200\315\037\316\063\317\033\320\075\322\036" +
    "\323\014\324\123\325\122\326\105\327\142\330\136\331" +
    "\176\332\116\333\134\342\017\001\001\000\002\001\001" +
    "\000\016\u0118\u02c2\u0119\u0215\u011a\u020e\u011b\u0214\u011c\u0210\u011f" +
    "\u020d\001\001\000\004\u012a\u02c1\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\340\u02b6\341\u02b7\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\u0124\u02ac\001\001\000" +
    "\002\001\001\000\020\377\230\u0104\u029a\u0106\235\u0107\232" +
    "\u010b\243\u010c\213\u010e\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\351\u01c5\352\u0298\353\u01cb" +
    "\364\u01d0\366\u01ca\367\u01c0\370\u01cd\373\u01c3\374\u01cc\377" +
    "\230\u0104\241\u0106\235\u0107\232\u010b\243\u010c\213\u010e\217" +
    "\001\001\000\020\377\230\u0104\u0289\u0106\235\u0107\232\u010b" +
    "\243\u010c\213\u010e\217\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\221\u0263\222\u0265\223\u0267" +
    "\227\u0260\231\u0261\232\u0264\233\u026e\234\u0268\235\u026a\236" +
    "\u026d\u010b\u0269\u010c\213\u010e\217\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\u0108\u0253\u010b\327\u010c\213\u010e" +
    "\217\001\001\000\022\377\230\u0104\376\u0106\235\u0107\232" +
    "\u010a\u0252\u010b\243\u010c\213\u010e\217\001\001\000\012\u0105" +
    "\u0120\u0121\u0133\u0122\u0169\u0123\u0251\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\016\u0245\u0108\u0244\u010b\327\u010c\213\u010e\217\001\001" +
    "\000\004\u012b\u023c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\041\u0232\042\u0233\377\230\u0104\u0231\u0106\235\u0107\232" +
    "\u010b\243\u010c\213\u010e\217\001\001\000\002\001\001\000" +
    "\050\214\u022d\215\u022c\216\u022b\351\u01c5\352\u0229\353\u01cb" +
    "\364\u01d0\366\u01ca\367\u01c0\370\u01cd\373\u01c3\374\u01cc\377" +
    "\230\u0104\241\u0106\235\u0107\232\u010b\243\u010c\213\u010e\217" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\232\006\076\007\052" +
    "\012\011\024\035\025\040\032\055\033\141\046\167\054" +
    "\117\055\023\063\135\073\206\075\144\076\114\105\164" +
    "\161\u021a\162\130\163\042\164\170\165\161\174\015\175" +
    "\133\176\051\177\137\200\041\201\126\202\155\203\066" +
    "\204\106\205\060\206\064\207\166\210\104\211\173\212" +
    "\115\217\013\220\047\237\034\240\056\244\016\245\211" +
    "\246\113\247\074\250\201\251\057\252\127\253\143\254" +
    "\101\257\150\270\165\271\202\272\171\273\067\274\021" +
    "\275\045\276\071\277\151\311\207\312\072\313\030\314" +
    "\200\315\037\316\063\317\033\320\075\322\036\323\014" +
    "\324\123\325\122\326\105\327\142\330\136\331\176\332" +
    "\116\333\134\342\017\001\001\000\002\001\001\000\016" +
    "\u0118\u0211\u0119\u0215\u011a\u020e\u011b\u0214\u011c\u0210\u011f\u020d\001" +
    "\001\000\026\077\u01fd\100\u01fb\377\230\u0104\376\u0106\235" +
    "\u0107\232\u010a\u01fc\u010b\243\u010c\213\u010e\217\001\001\000" +
    "\044\213\u01c9\351\u01c5\352\u01bf\353\u01cb\364\u01d0\366\u01ca" +
    "\367\u01c0\370\u01cd\373\u01c3\374\u01cc\377\230\u0104\241\u0106" +
    "\235\u0107\232\u010b\243\u010c\213\u010e\217\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\377\230\u0104\u01be\u0106" +
    "\235\u0107\232\u010b\243\u010c\213\u010e\217\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\u0105\u0120\u0121\u0133\u0122" +
    "\u0169\u0123\u01bd\001\001\000\002\001\001\000\012\150\u01a4" +
    "\151\u01a6\152\u01a3\155\u01a5\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\111\u017a\377\230\u0104\u0179\u0106\235\u0107\232\u010b\243\u010c" +
    "\213\u010e\217\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\u0105\u0120\u0121\u0133\u0122\u0169\u0123\u0178\001\001\000\016" +
    "\034\u016a\u0108\u0113\u0109\u016b\u010b\327\u010c\213\u010e\217\001" +
    "\001\000\012\u0105\u0120\u0121\u0133\u0122\u0169\u0123\u0168\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\157\u0166\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\300\u014e\301\u014f\302\u0151\u0108\u0113\u0109\u0150\u010b" +
    "\327\u010c\213\u010e\217\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\106\u0108\377\230\u0104\376\u0106\235\u0107\232\u010a" +
    "\u0109\u010b\243\u010c\213\u010e\217\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\u0131\353\001\001\000\010\335\343\336\346\337\344" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\267" +
    "\215\u010b\214\u010c\213\u010e\217\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\u0115\332\u0116\330\u0117\333\001" +
    "\001\000\002\001\001\000\006\260\311\261\310\001\001" +
    "\000\002\001\001\000\010\u0110\221\u0111\222\u0112\223\001" +
    "\001\000\036\343\237\344\236\345\252\350\231\351\240" +
    "\377\230\u0104\241\u0106\235\u0107\232\u010b\243\u010c\213\u010e" +
    "\217\u0113\225\u0114\226\001\001\000\002\001\001\000\004" +
    "\u0112\224\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\376\267" +
    "\001\001\000\004\346\257\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\343\237\344\236\345\253" +
    "\350\231\351\240\377\230\u0104\241\u0106\235\u0107\232\u010b" +
    "\243\u010c\213\u010e\217\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\377\230\u0104\256\u0106" +
    "\235\u0107\232\u010b\243\u010c\213\u010e\217\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\347\261\351\262\377" +
    "\230\u0104\241\u0106\235\u0107\232\u010b\243\u010c\213\u010e\217" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\350\271\351\240\377\230\u0104\241\u0106\235\u0107" +
    "\232\u010b\243\u010c\213\u010e\217\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\u0100\274\001\001\000\042\343" +
    "\237\344\236\345\301\350\231\351\240\377\230\u0101\276" +
    "\u0102\300\u0103\275\u0104\241\u0106\235\u0107\232\u010b\243\u010c" +
    "\213\u010e\217\u010f\277\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\343\237\344\236\345\301" +
    "\350\231\351\240\377\230\u0103\303\u0104\241\u0106\235\u0107" +
    "\232\u010b\243\u010c\213\u010e\217\u010f\277\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\343\237\344\236\345" +
    "\252\350\231\351\240\377\230\u0104\241\u0106\235\u0107\232" +
    "\u010b\243\u010c\213\u010e\217\u0114\307\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\262\325" +
    "\263\324\001\001\000\024\264\314\265\313\377\230\u0104" +
    "\316\u0106\235\u0107\232\u010b\243\u010c\213\u010e\217\001\001" +
    "\000\002\001\001\000\022\265\322\377\230\u0104\316\u0106" +
    "\235\u0107\232\u010b\243\u010c\213\u010e\217\001\001\000\004" +
    "\266\317\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\u0108\326\u010b\327\u010c\213\u010e\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\u0117\337\001\001\000\006\u010c\336\u010e\217\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\u010c\335" +
    "\u010e\217\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\336\352\337\344\001\001\000\004\334" +
    "\347\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\064\373\065\372\066\361" +
    "\067\366\070\355\071\360\072\367\137\356\001\001\000" +
    "\002\001\001\000\004\u012a\u0106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\377\230\u0104\376\u0106\235\u0107\232" +
    "\u010a\u0102\u010b\243\u010c\213\u010e\217\001\001\000\022\377" +
    "\230\u0104\376\u0106\235\u0107\232\u010a\375\u010b\243\u010c\213" +
    "\u010e\217\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\065\374\066\361\067\366\070\355\071\360\072\367\137" +
    "\356\001\001\000\002\001\001\000\004\u0126\u0100\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\377\230\u0104" +
    "\u0101\u0106\235\u0107\232\u010b\243\u010c\213\u010e\217\001\001" +
    "\000\002\001\001\000\004\u0126\u0100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\377\230" +
    "\u0104\376\u0106\235\u0107\232\u010a\u0107\u010b\243\u010c\213\u010e" +
    "\217\001\001\000\004\u0126\u0100\001\001\000\002\001\001" +
    "\000\014\107\u0110\110\u010a\u011d\u010e\u0120\u010b\u0126\u0100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\u0108\u0113\u0109\u0114\u010b\327\u010c\213\u010e\217\001" +
    "\001\000\002\001\001\000\022\377\230\u0104\376\u0106\235" +
    "\u0107\232\u010a\u0112\u010b\243\u010c\213\u010e\217\001\001\000" +
    "\010\110\u0111\u011d\u010e\u0120\u010b\001\001\000\002\001\001" +
    "\000\004\u0126\u0100\001\001\000\002\001\001\000\004\u0126" +
    "\u0115\001\001\000\012\u0108\u0116\u010b\327\u010c\213\u010e\217" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\143" +
    "\u0119\144\u012a\145\u011e\u0105\u0120\u0121\u011f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\145\u0137\u0105\u0120\u0121\u011f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\u0105\u0120\u0121\u0133\u0122\u0134\001\001\000\002\001" +
    "\001\000\006\u0105\u0120\u0121\u0135\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\074\u013a\001" +
    "\001\000\006\360\u0142\361\u013f\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\362\u014c\001\001\000\004\u012d" +
    "\u0144\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\377\230\u0104\u0143\u0106" +
    "\235\u0107\232\u010b\243\u010c\213\u010e\217\001\001\000\002" +
    "\001\001\000\004\363\u0146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\u012e\u014a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\301\u0164\302\u0151" +
    "\u0108\u0113\u0109\u0150\u010b\327\u010c\213\u010e\217\001\001\000" +
    "\002\001\001\000\004\u0126\u0115\001\001\000\012\303\u0156" +
    "\304\u0158\306\u0152\307\u0153\001\001\000\002\001\001\000" +
    "\020\377\230\u0104\u0163\u0106\235\u0107\232\u010b\243\u010c\213" +
    "\u010e\217\001\001\000\022\305\u0162\377\230\u0104\u015e\u0106" +
    "\235\u0107\232\u010b\243\u010c\213\u010e\217\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\305\u015a\377\230\u0104\u015e\u0106\235\u0107\232" +
    "\u010b\243\u010c\213\u010e\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\u0105\u0120\u0121\u0135\001\001\000\002" +
    "\001\001\000\006\035\u016c\u0126\u0115\001\001\000\002\001" +
    "\001\000\004\u0130\u016e\001\001\000\010\036\u0170\037\u016f" +
    "\u0105\u0171\001\001\000\002\001\001\000\006\037\u0177\u0105" +
    "\u0171\001\001\000\004\u0127\u0172\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\040\u0176\377\230\u0104\u0175\u0106" +
    "\235\u0107\232\u010b\243\u010c\213\u010e\217\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\112\u017d\116\u017b\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\u0125\u019a\001\001\000\004\113" +
    "\u017e\001\001\000\012\124\u0191\125\u0193\126\u0195\310\u0190" +
    "\001\001\000\016\114\u0182\115\u0181\u0108\u0180\u010b\327\u010c" +
    "\213\u010e\217\001\001\000\010\121\u0185\122\u0186\123\u0188" +
    "\001\001\000\002\001\001\000\014\115\u0183\u0108\u0180\u010b" +
    "\327\u010c\213\u010e\217\001\001\000\002\001\001\000\004" +
    "\u0129\u018d\001\001\000\002\001\001\000\004\123\u018c\001" +
    "\001\000\004\u0129\u0189\001\001\000\002\001\001\000\012" +
    "\u0108\u018b\u010b\327\u010c\213\u010e\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\u0108\u018e" +
    "\u010b\327\u010c\213\u010e\217\001\001\000\002\001\001\000" +
    "\004\u0129\u0198\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\126\u0197\310\u0190\001\001\000" +
    "\012\u0108\u0196\u010b\327\u010c\213\u010e\217\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\u0108" +
    "\u0199\u010b\327\u010c\213\u010e\217\001\001\000\002\001\001" +
    "\000\004\u0124\u019d\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\117\u01a0\120\u019f\377\230\u0104\u01a1\u0106\235" +
    "\u0107\232\u010b\243\u010c\213\u010e\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\120\u01a2\377\230\u0104\u01a1" +
    "\u0106\235\u0107\232\u010b\243\u010c\213\u010e\217\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\236\006\076\007\052\012\011\024\035\025" +
    "\040\032\055\033\141\046\167\054\117\055\023\063\135" +
    "\073\206\075\144\076\114\105\164\154\u01ac\160\111\161" +
    "\022\162\130\163\042\164\170\165\161\174\015\175\133" +
    "\176\051\177\137\200\041\201\126\202\155\203\066\204" +
    "\106\205\060\206\064\207\166\210\104\211\173\212\115" +
    "\217\013\220\047\237\034\240\056\244\016\245\211\246" +
    "\113\247\074\250\201\251\057\252\127\253\143\254\101" +
    "\257\150\270\165\271\202\272\171\273\067\274\021\275" +
    "\045\276\071\277\151\311\207\312\072\313\030\314\200" +
    "\315\037\316\063\317\033\320\075\322\036\323\014\324" +
    "\123\325\122\326\105\327\142\330\136\331\176\332\116" +
    "\333\134\342\017\001\001\000\006\152\u01ab\155\u01a5\001" +
    "\001\000\004\156\u01a8\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\127\u01b5\130\u01b6\131\u01b4\132\u01af\133\u01b8" +
    "\134\u01b2\135\u01b0\136\u01b1\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\377\230\u0104\u01bc" +
    "\u0106\235\u0107\232\u010b\243\u010c\213\u010e\217\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\131\u01bb\132\u01af\133\u01b8\134\u01b2\135" +
    "\u01b0\136\u01b1\001\001\000\020\377\230\u0104\u01ba\u0106\235" +
    "\u0107\232\u010b\243\u010c\213\u010e\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\355\u01eb\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\351\u01c5\366\u01ca\370\u01fa\373\u01c3\374\u01cc\377" +
    "\230\u0104\241\u0106\235\u0107\232\u010b\243\u010c\213\u010e\217" +
    "\001\001\000\004\376\u01f8\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\351\u01c5" +
    "\352\u01e6\353\u01cb\364\u01d0\366\u01ca\367\u01c0\370\u01cd\373" +
    "\u01c3\374\u01cc\377\230\u0104\241\u0106\235\u0107\232\u010b\243" +
    "\u010c\213\u010e\217\001\001\000\002\001\001\000\014\357" +
    "\u01d5\366\u01d6\371\u01d8\372\u01df\375\u01dd\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\u012b" +
    "\u01e5\001\001\000\032\351\u01c5\366\u01ca\370\u01e3\373\u01c3" +
    "\374\u01cc\377\230\u0104\241\u0106\235\u0107\232\u010b\243\u010c" +
    "\213\u010e\217\001\001\000\002\001\001\000\014\357\u01d5" +
    "\366\u01d6\371\u01d8\372\u01df\375\u01e2\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\371\u01e1\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\355\u01eb\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\351\u01c5\354\u01ee\357\u01ed\365\u01f0\366\u01ca\370\u01ef" +
    "\371\u01d8\372\u01df\373\u01c3\374\u01cc\377\230\u0104\241\u0106" +
    "\235\u0107\232\u010b\243\u010c\213\u010e\217\001\001\000\012" +
    "\356\u01f5\357\u01f6\371\u01d8\372\u01df\001\001\000\032\351" +
    "\u01c5\366\u01ca\370\u01f4\373\u01c3\374\u01cc\377\230\u0104\241" +
    "\u0106\235\u0107\232\u010b\243\u010c\213\u010e\217\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\357\u01d5\366\u01d6" +
    "\371\u01d8\372\u01df\375\u01f2\001\001\000\014\357\u01d5\366" +
    "\u01d6\371\u01d8\372\u01df\375\u01f3\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\351\u01c5\366" +
    "\u01ca\370\u01f7\373\u01c3\374\u01cc\377\230\u0104\241\u0106\235" +
    "\u0107\232\u010b\243\u010c\213\u010e\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\351\u01c5\374\u01f9\377\230" +
    "\u0104\241\u0106\235\u0107\232\u010b\243\u010c\213\u010e\217\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\101\u0208\u0126\u0100\001\001\000\026\100\u01fe\103" +
    "\u01ff\377\230\u0104\376\u0106\235\u0107\232\u010a\u01fc\u010b\243" +
    "\u010c\213\u010e\217\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\u0108\u0201\u010b\327\u010c\213\u010e\217\001\001" +
    "\000\006\104\u0203\u012c\u0202\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\u0108\u0206\u010b\327" +
    "\u010c\213\u010e\217\001\001\000\002\001\001\000\004\u0125" +
    "\u0209\001\001\000\002\001\001\000\022\102\u020a\377\230" +
    "\u0104\u020b\u0106\235\u0107\232\u010b\243\u010c\213\u010e\217\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\343\u0217\344\236\350\231\351\240" +
    "\377\230\u0104\241\u0106\235\u0107\232\u010b\243\u010c\213\u010e" +
    "\217\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\u011a\u0216\u011b\u0214\u011c\u0210\u011f\u020d\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\u0108\u0113" +
    "\u0109\u0219\u010b\327\u010c\213\u010e\217\001\001\000\004\u0126" +
    "\u0115\001\001\000\002\001\001\000\014\047\u021e\050\u021d" +
    "\051\u021f\052\u0222\053\u0220\001\001\000\020\377\230\u0104" +
    "\u0225\u0106\235\u0107\232\u010b\243\u010c\213\u010e\217\001\001" +
    "\000\010\051\u0224\052\u0222\053\u0220\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\u0108\u0223" +
    "\u010b\327\u010c\213\u010e\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\127\u0228\130\u01b6\131\u01b4\132\u01af\133" +
    "\u01b8\134\u01b2\135\u01b0\136\u01b1\001\001\000\002\001\001" +
    "\000\006\321\u022f\355\u01eb\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\351\u01c5\352\u0230\353\u01cb\364\u01d0\366\u01ca\367\u01c0\370" +
    "\u01cd\373\u01c3\374\u01cc\377\230\u0104\241\u0106\235\u0107\232" +
    "\u010b\243\u010c\213\u010e\217\001\001\000\002\001\001\000" +
    "\004\355\u01eb\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\043\u0236\044\u0235\045\u0234\u011d\u0238\u0120\u0237\001" +
    "\001\000\002\001\001\000\010\045\u0239\u011d\u0238\u0120\u0237" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\377\230\u0104\u023b\u0106\235" +
    "\u0107\232\u010b\243\u010c\213\u010e\217\001\001\000\002\001" +
    "\001\000\004\241\u023d\001\001\000\006\242\u0240\243\u023f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\377\230\u0104\u0243\u0106\235\u0107\232\u010b\243" +
    "\u010c\213\u010e\217\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\u0118\u0250\u0119\u0215\u011a\u020e\u011b\u0214\u011c\u0210" +
    "\u011f\u020d\001\001\000\002\001\001\000\034\017\u0247\020" +
    "\u0249\343\u0248\344\236\350\231\351\240\377\230\u0104\241" +
    "\u0106\235\u0107\232\u010b\243\u010c\213\u010e\217\001\001\000" +
    "\042\020\u024e\021\u024a\022\u024b\023\u024d\343\u0248\344\236" +
    "\350\231\351\240\377\230\u0104\241\u0106\235\u0107\232\u010b" +
    "\243\u010c\213\u010e\217\u0120\u024c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\023\u024f\u0120" +
    "\u024c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\u0126\u0100\001\001\000\004\010\u0254\001\001" +
    "\000\002\001\001\000\004\011\u0256\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\u0128\u025e" +
    "\001\001\000\002\001\001\000\004\u0128\u025c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\224\u0287\225\u0283\226" +
    "\u0284\227\u0282\232\u0264\233\u026e\234\u0268\235\u026a\236\u026d" +
    "\u010b\u0286\u010c\213\u010e\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\u010e\u027f\001\001\000\040\227\u027c\230\u027e\232\u0264\233" +
    "\u026e\234\u0268\235\u026a\236\u026d\377\230\u0104\u0271\u0106\235" +
    "\u0107\232\u010b\243\u010c\213\u010d\u027d\u010e\217\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\377\230\u0104\u0271\u0106\235\u0107\232\u010b\243\u010c\213\u010d" +
    "\u0277\u010e\217\001\001\000\042\351\u01c5\352\u0276\353\u01cb" +
    "\364\u01d0\366\u01ca\367\u01c0\370\u01cd\373\u01c3\374\u01cc\377" +
    "\230\u0104\241\u0106\235\u0107\232\u010b\243\u010c\213\u010e\217" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\377" +
    "\230\u0104\u0271\u0106\235\u0107\232\u010b\243\u010c\213\u010d\u0270" +
    "\u010e\217\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\377\230\u0104\u0271\u0106\235\u0107\232\u010b\243\u010c\213" +
    "\u010d\u0273\u010e\217\001\001\000\002\001\001\000\022\377" +
    "\230\u0104\u0271\u0106\235\u0107\232\u010b\243\u010c\213\u010d\u0275" +
    "\u010e\217\001\001\000\002\001\001\000\004\355\u01eb\001" +
    "\001\000\002\001\001\000\022\377\230\u0104\u0271\u0106\235" +
    "\u0107\232\u010b\243\u010c\213\u010d\u0279\u010e\217\001\001\000" +
    "\002\001\001\000\022\377\230\u0104\u0271\u0106\235\u0107\232" +
    "\u010b\243\u010c\213\u010d\u027b\u010e\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\227\u027c\230\u0288\232\u0264\233\u026e" +
    "\234\u0268\235\u026a\236\u026d\377\230\u0104\u0271\u0106\235\u0107" +
    "\232\u010b\243\u010c\213\u010d\u027d\u010e\217\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\u028a\001\001\000\016" +
    "\027\u0293\030\u0291\031\u0292\u011d\u0294\u011e\u0295\u011f\u0290\001" +
    "\001\000\014\u0108\u0113\u0109\u028e\u010b\327\u010c\213\u010e\217" +
    "\001\001\000\022\377\230\u0104\376\u0106\235\u0107\232\u010a" +
    "\u028d\u010b\243\u010c\213\u010e\217\001\001\000\004\u0126\u0100" +
    "\001\001\000\004\u0126\u0115\001\001\000\012\u0108\u0297\u010b" +
    "\327\u010c\213\u010e\217\001\001\000\002\001\001\000\012" +
    "\031\u0296\u011d\u0294\u011e\u0295\u011f\u0290\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\355\u01eb\001" +
    "\001\000\002\001\001\000\024\255\u02a1\256\u02a4\377\230" +
    "\u0104\u02a2\u0106\235\u0107\232\u010b\243\u010c\213\u010e\217\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\256\u02a9\377\230\u0104\u02a2\u0106\235\u0107\232\u010b\243" +
    "\u010c\213\u010e\217\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\047\u02ab\050\u021d\051\u021f\052\u0222\053\u0220\001\001" +
    "\000\002\001\001\000\022\056\u02ad\377\230\u0104\u02ae\u0106" +
    "\235\u0107\232\u010b\243\u010c\213\u010e\217\001\001\000\002" +
    "\001\001\000\012\057\u02b0\060\u02af\061\u02b1\062\u02b2\001" +
    "\001\000\006\061\u02b5\062\u02b2\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\377\230\u0104" +
    "\u02b4\u0106\235\u0107\232\u010b\243\u010c\213\u010e\217\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\340\u02c0\001\001\000\010\140\u02bc\141\u02be\142\u02bb" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\142\u02bf" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\377\230\u0104\376\u0106\235\u0107\232\u010a\u02c3" +
    "\u010b\243\u010c\213\u010e\217\001\001\000\004\u0126\u0100\001" +
    "\001\000\014\u0108\u0113\u0109\u02c5\u010b\327\u010c\213\u010e\217" +
    "\001\001\000\020\013\u02ca\014\u02cb\015\u02c6\u011c\u02c8\u011d" +
    "\u02c9\u011f\u02c7\u0126\u0115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\015\u02cc\u011c\u02c8\u011d\u02c9\u011f\u02c7\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\377\230\u0104\u02dc\u0106\235\u0107\232\u010b\243\u010c\213" +
    "\u010e\217\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\167\u02d8\170\u02d9\001\001\000\004\u012f\u02d6\001\001" +
    "\000\004\173\u02d5\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ZCCParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ZCCParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ZCCParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 action_obj.initActionClass();    
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 if (scanner == null) return getScanner().next_token();
             return scanner.tokenCobolCode(); 
          
    }


   GenericScanner scanner = null;
   Module        module   = ModulesFactory.getDefaultModule();
   Configuration cfg      = ConfigurationBase.getInstance();
   ParserInfo    info     = ParserInfo.getInstance();
             
   public void syntax_error(SDPSymbol token) throws ParseException {
          info.syntax_error(token);
   }

   public void unrecovered_syntax_error(SDPSymbol token) throws ParseException {
      info.unrecovered_syntax_error(token);
   }
   
   public void setScanner(GenericScanner scanner) {
       this.scanner = scanner;
   }
   

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ZCCParser$actions {



   RulesCode   rules    = new RulesCode();
   Module      module   = null;
   Persistence fichero  = null;
   ZCCCode     code     = null;
   ParserInfo  info     = ParserInfo.getInstance();
      
   Variable  currVar       = null;
   StmtCobol lastStmt      = null;  // Ultima instruccion
   StmtCobol currStmt      = null;  // Instruccion en proceso
   Option    currOption    = null;  // Option en proceso
   boolean   hasEndProgram = false; // Hay STOPRUN o GOBACK?
    
   boolean master     = false;  // El fichero es el maestro?   
   int     numFillers = 0;
   
   public void initActionClass() {
      module = info.getModule();
      code = new ZCCCode(module);
   }

   public String getSymbolName(Symbol s)    { return (String) s.value; }
   public int    getSymbolLine(Symbol s)    { return (int)    s.left;  }
   
   public void debug(String txt) { 
      System.err.println(txt); 
   }
   public void print(String txt) { 
      System.out.println(txt); 
   }


  private final ZCCParser parser;

  /** Constructor */
  CUP$ZCCParser$actions(ZCCParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ZCCParser$do_action(
    int                        CUP$ZCCParser$act_num,
    java_cup.runtime.lr_parser CUP$ZCCParser$parser,
    java.util.Stack            CUP$ZCCParser$stack,
    int                        CUP$ZCCParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ZCCParser$result;

      /* select the action based on the action number */
      switch (CUP$ZCCParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 579: // optword_to ::= 
            {
              SDPSymbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("optword_to",300, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 578: // optword_to ::= TO 
            {
              SDPSymbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("optword_to",300, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 577: // optword_than ::= 
            {
              SDPSymbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("optword_than",299, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 576: // optword_than ::= THAN 
            {
              SDPSymbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("optword_than",299, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 575: // opt_with ::= 
            {
              SDPSymbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("opt_with",298, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 574: // opt_with ::= WITH 
            {
              SDPSymbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("opt_with",298, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 573: // opt_key ::= 
            {
              SDPSymbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("opt_key",296, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 572: // opt_key ::= KEY 
            {
              SDPSymbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("opt_key",296, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 571: // opt_to ::= 
            {
              SDPSymbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("opt_to",297, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 570: // opt_to ::= TO 
            {
              SDPSymbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("opt_to",297, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 569: // opt_in ::= 
            {
              SDPSymbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("opt_in",295, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 568: // opt_in ::= IN 
            {
              SDPSymbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("opt_in",295, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 567: // opt_date_fmt ::= 
            {
              SDPSymbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("opt_date_fmt",294, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 566: // opt_date_fmt ::= SYM 
            {
              SDPSymbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("opt_date_fmt",294, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 565: // opt_data ::= 
            {
              SDPSymbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("opt_data",293, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 564: // opt_data ::= DATA 
            {
              SDPSymbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("opt_data",293, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 563: // opt_comma ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = null; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("opt_comma",292, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 562: // opt_comma ::= COMMA 
            {
              SDPSymbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s;    
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("opt_comma",292, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 561: // opt_by ::= 
            {
              SDPSymbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("opt_by",291, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 560: // opt_by ::= BY 
            {
              SDPSymbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("opt_by",291, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 559: // opt_all ::= 
            {
              SDPSymbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("opt_all",290, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 558: // opt_all ::= ALL 
            {
              SDPSymbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("opt_all",290, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 557: // constante ::= LOWVAL 
            {
              SDPSymbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol f = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new SDPSymbol(f); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("constante",261, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 556: // constante ::= HIGHVAL 
            {
              SDPSymbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol f = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new SDPSymbol(f); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("constante",261, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 555: // constante ::= ZERO 
            {
              SDPSymbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol f = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new SDPSymbol(f); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("constante",261, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 554: // constante ::= SPACES 
            {
              SDPSymbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol f = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new SDPSymbol(f); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("constante",261, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 553: // constante ::= DFHCICS 
            {
              SDPSymbol RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol d = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new SDPSymbol(d); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("constante",261, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 552: // constante ::= NUMERO 
            {
              SDPSymbol RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol n = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new SDPSymbol(n); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("constante",261, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 551: // constante ::= LITERAL 
            {
              SDPSymbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new SDPSymbol(l); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("constante",261, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 550: // constantes ::= constante 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("constantes",260, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 549: // padre ::= OF var_base 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("padre",277, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 548: // padre ::= IN var_base 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("padre",277, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 547: // padres ::= padres padre 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w2 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w.setParent(w2);; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("padres",276, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 546: // padres ::= padre 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w;                
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("padres",276, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 545: // padres_opt ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = null;     
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("padres_opt",275, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 544: // padres_opt ::= padres 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w;        
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("padres_opt",275, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 543: // indice_item ::= expr_colon 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w;        
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("indice_item",274, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 542: // indice_lst ::= indice_lst COMMA indice_item 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w2 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w.setComma().add(w2); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("indice_lst",273, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 541: // indice_lst ::= indice_item 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w;               
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("indice_lst",273, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 540: // indice ::= LPAR indice_lst RPAR 
            {
              SDPSymbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol i = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = code.add(s,i,l);  
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("indice",272, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 539: // indices ::= indices indice 
            {
              SDPSymbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol t = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = code.add(t,l); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("indices",271, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 538: // indices ::= indice 
            {
              SDPSymbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = l;             
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("indices",271, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 537: // indices_opt ::= 
            {
              SDPSymbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("indices_opt",270, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 536: // indices_opt ::= indices 
            {
              SDPSymbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = l;        
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("indices_opt",270, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 535: // id ::= SYM 
            {
              SDPSymbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol i = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new SDPSymbol(i); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("id",268, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 534: // var_int ::= rvalue 
            {
              SDPSymbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = l; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("var_int",267, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 533: // var_base ::= id indices_opt 
            {
              SDPSymbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol i = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol r = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = code.add(i,r); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("var_base",266, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 532: // variable ::= var_base padres_opt 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol p = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w.setParent(p);    
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("variable",265, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 531: // rvalue ::= function 
            {
              SDPSymbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol f = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new SDPSymbol(f);    
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("rvalue",258, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 530: // rvalue ::= constantes 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("rvalue",258, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 529: // rvalue ::= variable 
            {
              SDPSymbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol i = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = i;  code.setVarRead(i); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("rvalue",258, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 528: // rvalue_list ::= rvalue_list opt_comma rvalue 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w2 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w.setComma(c).add(w2);   
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("rvalue_list",264, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 527: // rvalue_list ::= rvalue 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("rvalue_list",264, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 526: // lvalue_list ::= lvalue_list opt_comma lvalue 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w2 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w.setComma(c).add(w2);   
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("lvalue_list",263, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 525: // lvalue_list ::= lvalue 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("lvalue_list",263, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 524: // lvalue ::= variable 
            {
              SDPSymbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol i = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = i; code.setVarWrite(i); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("lvalue",262, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 523: // operator_arit ::= OP_POW 
            {
              SDPSymbol RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("operator_arit",252, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 522: // operator_arit ::= OP_DIV 
            {
              SDPSymbol RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("operator_arit",252, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 521: // operator_arit ::= OP_MUL 
            {
              SDPSymbol RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("operator_arit",252, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 520: // operator_arit ::= OP_SUB 
            {
              SDPSymbol RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("operator_arit",252, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 519: // operator_arit ::= OP_ADD 
            {
              SDPSymbol RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("operator_arit",252, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 518: // function_parm ::= literal 
            {
              SDPSymbol RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("function_parm",257, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 517: // function_parm ::= expr_colon 
            {
              SDPSymbol RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("function_parm",257, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 516: // function_parms_lst ::= function_parms_lst COMMA function_parm 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w2 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w.setComma().add(w2);  
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("function_parms_lst",256, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 515: // function_parms_lst ::= function_parm 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("function_parms_lst",256, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 514: // function_parms_lst_opt ::= 
            {
              SDPSymbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("function_parms_lst_opt",255, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 513: // function_parms_lst_opt ::= function_parms_lst 
            {
              SDPSymbol RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("function_parms_lst_opt",255, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 512: // function_parms ::= LPAR function_parms_lst_opt RPAR 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = w; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("function_parms",254, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 511: // function ::= LENGTH OF rvalue 
            {
              SDPSymbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol r = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = l.add(s.add(r)); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("function",253, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 510: // function ::= FUNCTION INTRINSIC function_parms 
            {
              SDPSymbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		SDPSymbol f = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol i = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol p = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = f.add(i.add(p.setFunction())); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("function",253, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 509: // figurative ::= NULL 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("figurative",259, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 508: // figurative ::= NATIONAL 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("figurative",259, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 507: // figurative ::= EGCS 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("figurative",259, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 506: // figurative ::= DBCS 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("figurative",259, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 505: // figurative ::= KANJI 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("figurative",259, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 504: // figurative ::= NUMERIC 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("figurative",259, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 503: // figurative ::= ALPHANUMERIC 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("figurative",259, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 502: // figurative ::= ALPHABETIC 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("figurative",259, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 501: // figurative ::= NEGATIVE 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("figurative",259, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 500: // figurative ::= POSITIVE 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("figurative",259, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 499: // token ::= LPAR tokens RPAR 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = w.setFunction();  
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("token",287, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 498: // token ::= FILLER 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("token",287, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 497: // token ::= figurative 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("token",287, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 496: // token ::= NUMERO 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("token",287, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 495: // token ::= LITERAL 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("token",287, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 494: // token ::= SYM 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("token",287, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 493: // tokens ::= tokens token 
            {
              SDPSymbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol t = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w2 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = t.add(w2);  
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("tokens",288, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 492: // tokens ::= token 
            {
              SDPSymbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol t = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = t;          
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("tokens",288, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 491: // optTokens ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = null; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("optTokens",289, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 490: // optTokens ::= tokens 
            {
              SDPSymbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol t = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = t;    
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("optTokens",289, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // logical_and_or ::= ALSO 
            {
              SDPSymbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol a = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = a; code.incComplexity(); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_and_or",235, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // logical_and_or ::= OR 
            {
              SDPSymbol RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = o; code.incComplexity(); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_and_or",235, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // logical_and_or ::= AND 
            {
              SDPSymbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol a = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = a; code.incComplexity(); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_and_or",235, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // logical_class ::= ALPHABETIC 
            {
              SDPSymbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = l; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_class",244, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // logical_class ::= NUMERIC 
            {
              SDPSymbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = l; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_class",244, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // logical_class ::= NULL 
            {
              SDPSymbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = l; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_class",244, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // logical_class ::= NEGATIVE 
            {
              SDPSymbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = l; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_class",244, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // logical_class ::= POSITIVE 
            {
              SDPSymbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = l; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_class",244, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // logical_class ::= FALSE 
            {
              SDPSymbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = l; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_class",244, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // logical_class ::= TRUE 
            {
              SDPSymbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = l; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_class",244, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // logical_figurative ::= LESS 
            {
              SDPSymbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new SDPSymbol(l); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_figurative",247, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // logical_figurative ::= GREATER 
            {
              SDPSymbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new SDPSymbol(l); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_figurative",247, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // logical_figurative ::= EQUAL opt_to 
            {
              SDPSymbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = code.add(l,o);    
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_figurative",247, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // logical_rel ::= logical_rel OR logical_figurative 
            {
              SDPSymbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol r = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = code.add(l,o,r); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_rel",248, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // logical_rel ::= logical_figurative 
            {
              SDPSymbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = l; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_rel",248, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // logical_op ::= logical_rel 
            {
              SDPSymbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = l; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_op",237, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // logical_op ::= REL_LE 
            {
              SDPSymbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = l; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_op",237, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // logical_op ::= REL_LT 
            {
              SDPSymbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = l; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_op",237, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // logical_op ::= REL_GE 
            {
              SDPSymbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = l; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_op",237, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // logical_op ::= REL_GT 
            {
              SDPSymbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = l; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_op",237, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // logical_op ::= REL_EQ 
            {
              SDPSymbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = l; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_op",237, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // logical_op_opt ::= 
            {
              SDPSymbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_op_opt",236, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // logical_op_opt ::= logical_op 
            {
              SDPSymbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = l; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_op_opt",236, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // logical_operand ::= expr_primary 
            {
              SDPSymbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = l; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_operand",250, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // logical_expr ::= logical_expr operator_arit logical_operand 
            {
              SDPSymbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol r = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = l.add(o.add(r)); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_expr",249, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // logical_expr ::= logical_operand 
            {
              SDPSymbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = l; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_expr",249, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // logical_unary ::= LPAR logical_condition RPAR 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = w.setFunction(); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_unary",246, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // logical_unary ::= logical_class 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_unary",246, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // logical_unary ::= logical_expr 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_unary",246, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // logical_unary_not ::= logical_unary 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_unary_not",245, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // logical_unary_not ::= NOT logical_unary 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_unary_not",245, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // logical_relation ::= logical_op logical_unary 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w2 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w.add(w2); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_relation",251, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // logical_relation ::= logical_class 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w;         
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_relation",251, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // logical_yes ::= logical_yes logical_relation 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w2 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w.add(w2);         
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_yes",243, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // logical_yes ::= logical_yes NOT logical_relation 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol w1 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w2 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w.add(w1.add(w2)); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_yes",243, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // logical_yes ::= logical_unary 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w;                 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_yes",243, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // logical_not ::= logical_not logical_relation 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w2 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w.add(w2);         
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_not",242, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // logical_not ::= logical_not NOT logical_relation 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol w1 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w2 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w.add(w1.add(w2)); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_not",242, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // logical_not ::= logical_unary_not 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w;                 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_not",242, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // logical_next ::= logical_yes 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w;                 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_next",234, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // logical_next ::= logical_op logical_unary 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w2 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w.add(w2);         
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_next",234, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // logical_next ::= NOT logical_op_opt logical_unary 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol w1 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w2 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w.add(w1.add(w2)); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_next",234, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // logical_begin ::= logical_not 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w;                 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_begin",233, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // logical_condition ::= logical_condition logical_and_or logical_next 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol w1 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w2 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w.add(w1.add(w2)); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_condition",232, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // logical_condition ::= logical_begin 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = w;                 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_condition",232, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // logical_oper_or_opt ::= 
            {
              SDPSymbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_oper_or_opt",241, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // logical_oper_or_opt ::= OR EQUAL optword_to 
            {
              SDPSymbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_oper_or_opt",241, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // logical_oper_not_value ::= REL_LT 
            {
              SDPSymbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_oper_not_value",240, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // logical_oper_not_value ::= LESS 
            {
              SDPSymbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_oper_not_value",240, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // logical_oper_not ::= NOT logical_oper_not_value 
            {
              SDPSymbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_oper_not",239, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // logical_oper ::= REL_GE 
            {
              SDPSymbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_oper",238, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // logical_oper ::= REL_GT 
            {
              SDPSymbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_oper",238, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // logical_oper ::= REL_EQ 
            {
              SDPSymbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_oper",238, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // logical_oper ::= EQUAL 
            {
              SDPSymbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_oper",238, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // logical_oper ::= GREATER optword_than logical_oper_or_opt 
            {
              SDPSymbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_oper",238, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // logical_oper ::= logical_oper_not 
            {
              SDPSymbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("logical_oper",238, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // expr_primary ::= rvalue 
            {
              SDPSymbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol e = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("expr_primary",231, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // expr_operand ::= LPAR expr_colon RPAR 
            {
              SDPSymbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol e = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = e; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("expr_operand",230, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // expr_operand ::= expr_primary 
            {
              SDPSymbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol e = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("expr_operand",230, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // expr_colon_value ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = null; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("expr_colon_value",229, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // expr_colon_value ::= expr_primary 
            {
              SDPSymbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol e = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = e;    
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("expr_colon_value",229, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // expr_colon_opt ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = null; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("expr_colon_opt",228, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // expr_colon_opt ::= OP_COLON expr_colon_value 
            {
              SDPSymbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol e = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = e;    
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("expr_colon_opt",228, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // expr_colon ::= expression expr_colon_opt 
            {
              SDPSymbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol e = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = e; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("expr_colon",227, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // expression_arit ::= expression_arit operator_arit expr_operand 
            {
              SDPSymbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		SDPSymbol e = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		 RESULT = e; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("expression_arit",226, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // expression_arit ::= expr_operand 
            {
              SDPSymbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol e = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("expression_arit",226, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // expression ::= expression_arit 
            {
              SDPSymbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol e = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = e; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("expression",225, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // eatWriteItem ::= AFTER 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("eatWriteItem",99, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // eatWriteItem ::= PAGE 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("eatWriteItem",99, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // eatWriteItem ::= LINE 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("eatWriteItem",99, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // eatWriteItem ::= NO 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("eatWriteItem",99, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // eatWriteItem ::= LOCK 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("eatWriteItem",99, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // eatWriteItem ::= WITH 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("eatWriteItem",99, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // eatWriteItem ::= token 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("eatWriteItem",99, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // eatWriteLst ::= eatWriteLst eatWriteItem 
            {
              Tokens RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Tokens x = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens i = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = x.add(i);      
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("eatWriteLst",98, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // eatWriteLst ::= eatWriteItem 
            {
              Tokens RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens e = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Tokens(e); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("eatWriteLst",98, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // eatWrite ::= 
            {
              Tokens RESULT =null;
		 RESULT = new Tokens(); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("eatWrite",97, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // eatWrite ::= eatWriteLst 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = l;            
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("eatWrite",97, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // eatCloseItem ::= FOR 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("eatCloseItem",96, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // eatCloseItem ::= NO 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("eatCloseItem",96, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // eatCloseItem ::= WITH 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("eatCloseItem",96, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // eatCloseLst ::= eatCloseLst eatCloseItem 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens i = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = l.add(i);      
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("eatCloseLst",95, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // eatCloseLst ::= eatCloseItem 
            {
              Tokens RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens i = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Tokens(i); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("eatCloseLst",95, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // eatClose ::= 
            {
              Tokens RESULT =null;
		 RESULT = new Tokens(); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("eatClose",94, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // eatClose ::= eatCloseLst 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = l;            
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("eatClose",94, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // stmtEndVerb ::= ENDVERB 
            {
              SDPSymbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s;                
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtEndVerb",224, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // stmtElse ::= ELSE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtElse",204, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // stmtEndP ::= ENDP 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new StmtCobol(s); RESULT.setEndPoint(true); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtEndP",182, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // option_order ::= DESCENDING 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("option_order",93, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // option_order ::= ASCENDING 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("option_order",93, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // option_position ::= AFTER 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("option_position",92, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // option_position ::= BEFORE 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("option_position",92, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // option_size_error ::= SIZE_ERROR 
            {
              Option RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol i = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 code.setImperative(); 
                                   RESULT = new Option(i); 
                                
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("option_size_error",286, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // option_remainder ::= REMAINDER lvalue 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = new Option(o); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("option_remainder",284, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // optionOverflow ::= OVERFLOW 
            {
              StmtCobol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol i = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 code.setImperative(); 
                                   RESULT = new StmtCobol(i); 
                                
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("optionOverflow",198, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // option_rounded ::= ROUNDED 
            {
              Option RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol r = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 currStmt.addOption(new Option(r)); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("option_rounded",285, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // option_giving ::= GIVING lvalue_list 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = new Option(o); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("option_giving",283, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // option_corr ::= CORR 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Option(o); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("option_corr",282, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // option_all ::= ALL 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Option(o); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("option_all",281, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // rvalue_option ::= option_rounded 
            {
              Option RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("rvalue_option",280, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // rvalue_option ::= option_corr 
            {
              Option RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("rvalue_option",280, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // rvalue_option ::= option_all 
            {
              Option RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("rvalue_option",280, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // rvalue_options ::= rvalue_options rvalue_option 
            {
              Option RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("rvalue_options",279, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // rvalue_options ::= rvalue_option 
            {
              Option RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("rvalue_options",279, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // rvalue_options_opt ::= 
            {
              Option RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("rvalue_options_opt",278, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // rvalue_options_opt ::= rvalue_options 
            {
              Option RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("rvalue_options_opt",278, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // stmtException ::= EXCEPTION 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtException",201, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // stmtInvalid ::= INVALID opt_key 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 StmtCobol stmt = new StmtCobol(s);
                                              RESULT = code.setAtEnd(stmt); 
                                           
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtInvalid",200, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // stmtAtEnd ::= AT END 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol v = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s);
                             RESULT = code.setAtEnd(stmt); 
                          
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtAtEnd",199, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // closeFile ::= SYM eatClose 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens e = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 Tokens t = new Tokens(s);
                                         RESULT = t.add(e); 
                                      
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("closeFile",222, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // closeLstFiles ::= closeLstFiles closeFile 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens c = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = l.add(c);  
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("closeLstFiles",223, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // closeLstFiles ::= closeFile 
            {
              Tokens RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens c = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = c;         
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("closeLstFiles",223, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // stmtClose ::= CLOSE closeLstFiles 
            {
              StmtCobol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = code.fileAction(TRAP.ACC_CLOSE, c, l); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtClose",124, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // stmtStop ::= STOPRUN optTokens 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = new StmtCobol(s, code.getNumStatements()); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtStop",186, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // stmtStop ::= STOP optTokens 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = new StmtCobol(s, code.getNumStatements()); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtStop",186, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // stmtDelete ::= DELETE SYM 
            {
              StmtCobol RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol d = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol i = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = code.fileAccess(TRAP.ACC_DELETE, d, i); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtDelete",126, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // stmtRelease ::= RELEASE SYM eatWrite 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol i = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens e = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s);
                     RESULT = stmt.addLValue(i);
                  
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtRelease",157, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // stmtWrite_eop ::= EOP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 code.setImperative(); 
                                   RESULT = new StmtCobol(s); 
                                
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtWrite_eop",91, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // stmtWrite_after ::= AFTER 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtWrite_after",90, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // stmtWrite_position ::= option_position rvalue 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtWrite_position",89, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // stmtWrite_from ::= FROM rvalue 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtWrite_from",88, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // stmtWrite_option ::= stmtWrite_eop 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtWrite_option",87, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // stmtWrite_option ::= stmtWrite_after 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtWrite_option",87, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // stmtWrite_option ::= stmtWrite_position 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtWrite_option",87, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // stmtWrite_option ::= stmtWrite_from 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtWrite_option",87, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // stmtWrite_options ::= stmtWrite_options stmtWrite_option 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtWrite_options",86, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // stmtWrite_options ::= stmtWrite_option 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtWrite_options",86, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // stmtWrite_detail ::= 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtWrite_detail",85, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // stmtWrite_detail ::= stmtWrite_options 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtWrite_detail",85, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // stmtRewrite ::= REWRITE SYM stmtWrite_detail 
            {
              StmtCobol RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		SDPSymbol r = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol i = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = code.fileAccess(TRAP.ACC_UPDATE, r, i); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtRewrite",162, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // stmtWrite ::= WRITE SYM stmtWrite_detail 
            {
              StmtCobol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol i = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = code.fileAccess(TRAP.ACC_INSERT, w, i); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtWrite",168, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // stmtUnstring_option ::= optionOverflow 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_option",84, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // stmtUnstring_option ::= TALLYING opt_in lvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_option",84, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // stmtUnstring_option ::= POINTER lvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_option",84, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // stmtUnstring_options ::= stmtUnstring_options stmtUnstring_option 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_options",83, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // stmtUnstring_options ::= stmtUnstring_option 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_options",83, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // stmtUnstring_options_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_options_opt",82, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // stmtUnstring_options_opt ::= stmtUnstring_options 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_options_opt",82, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // stmtUnstring_delimiter ::= COUNT opt_in lvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiter",81, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // stmtUnstring_delimiter ::= DELIMITER opt_in lvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiter",81, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // stmtUnstring_delimiters ::= stmtUnstring_delimiters stmtUnstring_delimiter 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiters",80, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // stmtUnstring_delimiters ::= stmtUnstring_delimiter 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiters",80, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // stmtUnstring_delimiters_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiters_opt",79, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // stmtUnstring_delimiters_opt ::= stmtUnstring_delimiters 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiters_opt",79, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // stmtUnstring_target ::= lvalue stmtUnstring_delimiters_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_target",75, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // stmtUnstring_targets ::= stmtUnstring_targets stmtUnstring_target 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_targets",74, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // stmtUnstring_targets ::= stmtUnstring_target 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_targets",74, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // stmtUnstring_to ::= INTO stmtUnstring_targets 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_to",73, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // stmtUnstring_delimited_token ::= OR 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimited_token",78, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // stmtUnstring_delimited_token ::= rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimited_token",78, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // stmtUnstring_delimiteds ::= stmtUnstring_delimiteds stmtUnstring_delimited_token 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiteds",77, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // stmtUnstring_delimiteds ::= stmtUnstring_delimited_token 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiteds",77, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // stmtUnstring_delimited ::= DELIMITED opt_by opt_all stmtUnstring_delimiteds 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimited",76, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // stmtUnstring_delimited_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimited_opt",72, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // stmtUnstring_delimited_opt ::= stmtUnstring_delimited 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimited_opt",72, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // stmtUnstring_detail ::= rvalue stmtUnstring_delimited_opt stmtUnstring_to stmtUnstring_options_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring_detail",71, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // stmtUnstring ::= UNSTRING stmtUnstring_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = new StmtCobol(s, code.getNumStatements()); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtUnstring",123, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // stmtSubtract_option ::= option_size_error 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSubtract_option",70, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // stmtSubtract_option ::= option_giving 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSubtract_option",70, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // stmtSubtract_option ::= FROM rvalue_list 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSubtract_option",70, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // stmtSubtract_options ::= stmtSubtract_options stmtSubtract_option 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSubtract_options",69, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // stmtSubtract_options ::= stmtSubtract_option 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSubtract_options",69, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // stmtSubtract_detail ::= rvalue_list stmtSubtract_options 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSubtract_detail",68, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // stmtSubtract ::= SUBTRACT stmtSubtract_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = new StmtCobol(s, code.getNumStatements()); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSubtract",67, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // string_pointer_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("string_pointer_opt",66, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // string_pointer_opt ::= opt_with POINTER lvalue 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("string_pointer_opt",66, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // string_into ::= INTO lvalue string_pointer_opt 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("string_into",65, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // string_delimited_token ::= SIZE 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("string_delimited_token",64, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // string_delimited_token ::= rvalue 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("string_delimited_token",64, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // string_delimited ::= DELIMITED opt_by string_delimited_token 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("string_delimited",63, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // string_from_item ::= rvalue_list string_delimited 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("string_from_item",62, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // string_from ::= string_from string_from_item 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("string_from",61, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // string_from ::= string_from_item 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("string_from",61, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // string_verb ::= STRING 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new StmtCobol(s, currStmt); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("string_verb",60, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // stmtString ::= string_verb string_from string_into 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtString",59, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // stmtStart_key ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtStart_key",58, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // stmtStart_key ::= KEY logical_oper rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtStart_key",58, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // stmtStart ::= START SYM stmtStart_key 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		 RESULT = new StmtCobol(s, code.getNumStatements()); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtStart",57, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // stmtSort_procedure ::= OUTPUT SYM 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSort_procedure",56, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // stmtSort_procedure ::= INPUT SYM 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSort_procedure",56, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // stmtSort_giving ::= GIVING rvalue_list 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSort_giving",55, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // stmtSort_using ::= USING rvalue_list 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSort_using",54, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // stmtSort_duplicates ::= DUPLICATES 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSort_duplicates",53, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // stmtSort_order ::= option_order opt_key rvalue_list 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSort_order",52, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // stmtSort_option ::= stmtSort_procedure 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSort_option",51, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // stmtSort_option ::= stmtSort_giving 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSort_option",51, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // stmtSort_option ::= stmtSort_using 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSort_option",51, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // stmtSort_option ::= stmtSort_duplicates 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSort_option",51, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // stmtSort_option ::= stmtSort_order 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSort_option",51, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // stmtSort_detail ::= stmtSort_detail stmtSort_option 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSort_detail",50, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // stmtSort_detail ::= stmtSort_option 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSort_detail",50, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // stmtSort ::= SORT NT$2 SYM stmtSort_detail 
            {
              StmtCobol RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (StmtCobol) ((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-3)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-3)).value;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSort",49, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // NT$2 ::= 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
 RESULT = new StmtCobol(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("NT$2",303, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // set_value ::= OFF 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("set_value",195, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // set_value ::= ON 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("set_value",195, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // set_value ::= TRUE 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("set_value",195, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // set_value ::= FALSE 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("set_value",195, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // set_value ::= rvalue 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("set_value",195, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // set_index_inc ::= DOWN BY 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("set_index_inc",197, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // set_index_inc ::= UP BY 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("set_index_inc",197, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // set_index ::= set_index_inc rvalue 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("set_index",196, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // set_variable ::= BY set_value 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("set_variable",194, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // set_variable ::= TO set_value 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("set_variable",194, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // set_rvalue ::= set_index 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("set_rvalue",193, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // set_rvalue ::= set_variable 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("set_rvalue",193, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // set_lvalue ::= lvalue_list 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("set_lvalue",192, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // set_item ::= set_lvalue set_rvalue 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("set_item",191, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // set_list ::= set_list set_item 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("set_list",190, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // set_list ::= set_item 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("set_list",190, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // set_verb ::= SET 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new StmtCobol(s, currStmt); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("set_verb",189, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // stmtSet ::= set_verb set_list 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSet",188, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // search_varying ::= VARYING rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("search_varying",48, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // search_opt ::= search_varying 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("search_opt",47, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // search_option ::= search_option search_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("search_option",46, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // search_option ::= search_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("search_option",46, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // search_options ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("search_options",45, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // search_options ::= search_option 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("search_options",45, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // search_detail ::= rvalue search_options 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("search_detail",44, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // search_verb ::= SEARCH 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = currStmt = new StmtCobol(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("search_verb",43, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // stmtSearch ::= search_verb opt_all search_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		 RESULT = code.processSearch(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSearch",42, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // stmtRead_key ::= KEY rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtRead_key",41, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // stmtRead_into ::= INTO lvalue 
            {
              Tokens RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol i = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol d = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 Tokens t = new Tokens(i); RESULT = t.add(d); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtRead_into",40, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // stmtRead_option ::= stmtRead_key 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtRead_option",39, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // stmtRead_option ::= stmtRead_into 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtRead_option",39, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // stmtRead_options ::= stmtRead_options stmtRead_option 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtRead_options",38, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // stmtRead_options ::= stmtRead_option 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtRead_options",38, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // stmtRead_detail ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtRead_detail",37, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // stmtRead_detail ::= stmtRead_options 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtRead_detail",37, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // stmtRead ::= READ SYM stmtRead_detail 
            {
              StmtCobol RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		SDPSymbol r = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol i = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens s = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 StmtCobol stmt = code.fileAccess(TRAP.ACC_READ, r, i);
                     RESULT = stmt; 
                  
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtRead",36, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // perform_test ::= TEST AFTER 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = new Option(o);    
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_test",152, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // perform_test ::= TEST BEFORE 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = new Option(o);    
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_test",152, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // perform_after ::= AFTER var_int FROM var_int BY var_int 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-5)).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-5)).value;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_after",156, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-5)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // perform_varying ::= VARYING var_int FROM var_int BY var_int 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-5)).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-5)).value;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_varying",155, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-5)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // perform_until ::= UNTIL logical_condition 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol t = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Option(o); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_until",153, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // perform_thru ::= THRU id 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol i = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Option(o, i); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_thru",154, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // perform_option_second ::= var_int 
            {
              Option RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol v = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Option(v); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_option_second",150, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // perform_option_second ::= perform_option_first 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = o;                
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_option_second",150, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // perform_option_first ::= perform_test 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_option_first",149, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // perform_option_first ::= perform_after 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_option_first",149, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // perform_option_first ::= perform_varying 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_option_first",149, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // perform_option_first ::= perform_thru 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_option_first",149, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // perform_option_first ::= perform_until 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_option_first",149, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // perform_option_first ::= TIMES 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 currStmt.replaceOption(new Option(o)); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_option_first",149, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // perform_options ::= perform_options perform_option_second 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 currStmt.addOption(o); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_options",145, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // perform_options ::= perform_option_first 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 currStmt.addOption(o); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_options",145, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // perform_option_times ::= NUMERO 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Option(o); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_option_times",148, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // perform_option_times ::= variable 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Option(o); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_option_times",148, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // perform_options_label ::= perform_options_label perform_option_second 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 currStmt.addOption(o); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_options_label",147, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // perform_options_label ::= perform_option_times 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 currStmt.addOption(o); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_options_label",147, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // perform_options_label ::= perform_option_first 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 currStmt.addOption(o); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_options_label",147, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // perform_options_label_opt ::= 
            {
              Option RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_options_label_opt",146, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // perform_options_label_opt ::= perform_options_label 
            {
              Option RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_options_label_opt",146, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // perform_options_opt ::= 
            {
              Option RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_options_opt",144, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // perform_options_opt ::= perform_options 
            {
              Option RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_options_opt",144, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // perform_label ::= variable 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol v = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 currStmt.addOption(new Option(v)); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_label",151, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // perform_from ::= perform_options_opt 
            {
              Option RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_from",143, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // perform_from ::= perform_label perform_options_label_opt 
            {
              Option RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_from",143, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // perform_verb ::= PERFORM 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 currStmt = new StmtCobol(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("perform_verb",142, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // stmtPerform ::= perform_verb perform_from 
            {
              StmtCobol RESULT =null;
		 RESULT = code.processPerform(currStmt, lastStmt); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtPerform",141, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // stmtOpen_files ::= stmtOpen_files SYM 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = l.add(s);      
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtOpen_files",218, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // stmtOpen_files ::= SYM 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtOpen_files",218, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // stmtOpen_mode ::= EXTEND 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s);
                               stmt.setId(Persistence.EXTEND);
                               RESULT = stmt;
                            
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtOpen_mode",221, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // stmtOpen_mode ::= IO 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s);
                               stmt.setId(Persistence.IO);
                               RESULT = stmt;
                            
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtOpen_mode",221, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // stmtOpen_mode ::= OUTPUT 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s);
                               stmt.setId(Persistence.OUTPUT);
                               RESULT = stmt;
                            
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtOpen_mode",221, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // stmtOpen_mode ::= INPUT 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s);
                               stmt.setId(Persistence.INPUT);
                               RESULT = stmt; 
                            
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtOpen_mode",221, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // stmtOpen_group ::= stmtOpen_mode stmtOpen_files 
            {
              Tokens RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		StmtCobol o = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 Persistence f;
                 /*JGG
                    for (Symbol s : l.getTokens()) {
                        f = module.getFile(getSymbolName(s));
                        f.setAccess(o.getId());
                    }
                    */
                    RESULT = l;
                 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtOpen_group",220, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // stmtOpen_list ::= stmtOpen_list stmtOpen_group 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens s = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = l.add(s);  
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtOpen_list",219, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // stmtOpen_list ::= stmtOpen_group 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens s = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s;         
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtOpen_list",219, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // stmtOpen ::= OPEN stmtOpen_list 
            {
              StmtCobol RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = code.fileAction(TRAP.ACC_OPEN, o, l); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtOpen",169, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // multiply_option ::= option_size_error 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("multiply_option",35, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // multiply_option ::= option_giving 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("multiply_option",35, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // multiply_options ::= multiply_options multiply_option 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("multiply_options",34, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // multiply_options ::= multiply_option 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("multiply_options",34, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // multiply_options_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("multiply_options_opt",33, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // multiply_options_opt ::= multiply_options 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("multiply_options_opt",33, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // stmtMultiply_by ::= rvalue BY rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtMultiply_by",32, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // stmtMultiply_detail ::= stmtMultiply_by multiply_options_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtMultiply_detail",31, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // stmtMultiply ::= MULTIPLY stmtMultiply_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = new StmtCobol(s, code.getNumStatements()); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtMultiply",165, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // move_verb ::= MOVE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new StmtCobol(s, currStmt); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("move_verb",164, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // stmtMove ::= move_verb rvalue_options_opt expression TO lvalue_list 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-4)).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		SDPSymbol r = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 code.checkCall(l, r);
                      s.addRValue(r);
                      s.addLValue(l);
                      RESULT = s; 
                   
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtMove",163, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-4)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // stmtInspect_token ::= rvalue 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",172, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // stmtInspect_token ::= CONVERTING 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",172, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // stmtInspect_token ::= REPLACING 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",172, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // stmtInspect_token ::= TALLYING 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",172, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // stmtInspect_token ::= TO 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",172, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // stmtInspect_token ::= CHARACTER 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",172, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // stmtInspect_token ::= FIRST 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",172, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // stmtInspect_token ::= LEADING 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",172, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // stmtInspect_token ::= AFTER 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",172, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // stmtInspect_token ::= BEFORE 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",172, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // stmtInspect_token ::= BY 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",172, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // stmtInspect_token ::= ALL 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",172, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // stmtInspect_detail ::= stmtInspect_detail stmtInspect_token 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtInspect_detail",171, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // stmtInspect_detail ::= stmtInspect_token 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtInspect_detail",171, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // stmtInspect ::= INSPECT rvalue stmtInspect_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtInspect",170, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // initialize_rep_val ::= rvalue 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol v = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 currOption.addSymbol(v); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("initialize_rep_val",30, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // initialize_rep ::= figurative opt_data BY initialize_rep_val 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("initialize_rep",29, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // initialize_rep_lst ::= initialize_rep_lst initialize_rep 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("initialize_rep_lst",28, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // initialize_rep_lst ::= initialize_rep 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("initialize_rep_lst",28, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // initialize_rep_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("initialize_rep_opt",27, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // initialize_rep_opt ::= REPLACING NT$1 initialize_rep_lst 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		SDPSymbol r = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		 currStmt.addOption(currOption); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("initialize_rep_opt",27, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // NT$1 ::= 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol r = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
 currOption = new Option(r); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("NT$1",302, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // initialize_detail ::= lvalue_list initialize_rep_opt 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("initialize_detail",26, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // initialize_verb ::= INITIALIZE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new StmtCobol(s, currStmt); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("initialize_verb",25, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // stmtInitialize ::= initialize_verb initialize_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = s;  
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtInitialize",24, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // if_verb ::= IF 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new StmtCobol(s, currStmt); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("if_verb",203, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // stmtIf ::= if_verb logical_condition 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		  RESULT = code.processIf(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtIf",202, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // stmtGoto_depending ::= DEPENDING rvalue 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtGoto_depending",161, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // stmtGoto_depending_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtGoto_depending_opt",160, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // stmtGoto_depending_opt ::= stmtGoto_depending 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtGoto_depending_opt",160, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // stmtGoto_procs ::= stmtGoto_procs SYM 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtGoto_procs",159, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // stmtGoto_procs ::= SYM 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtGoto_procs",159, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // stmtGoTo ::= GOTO opt_to stmtGoto_procs stmtGoto_depending_opt 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-3)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-3)).value;
		 RESULT = new StmtCobol(s, code.getNumStatements()); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtGoTo",158, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // when_thru ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("when_thru",207, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // when_thru ::= THRU logical_condition 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("when_thru",207, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // when_other ::= OTHER 
            {
              SDPSymbol RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("when_other",140, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // when_item ::= logical_condition when_thru 
            {
              StmtCobol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol t = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("when_item",139, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // when_condition ::= when_other 
            {
              StmtCobol RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 currStmt.addOption(new Option(o)); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("when_condition",138, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // when_condition ::= when_item 
            {
              StmtCobol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("when_condition",138, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // when_verb ::= WHEN 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new StmtCobol(s, currStmt); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("when_verb",206, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // stmtWhen ::= when_verb when_condition 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtWhen",205, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // evaluate_object ::= logical_condition 
            {
              StmtCobol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("evaluate_object",137, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // evaluate_verb ::= EVALUATE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new StmtCobol(s, currStmt);  
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("evaluate_verb",136, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // stmtEvaluate ::= evaluate_verb evaluate_object 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = code.processEvaluate(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtEvaluate",135, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // divide_option ::= option_remainder 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 currStmt.addOption(o); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("divide_option",23, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // divide_option ::= option_rounded 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 currStmt.addOption(o); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("divide_option",23, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // divide_option ::= option_giving 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 currStmt.addOption(o); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("divide_option",23, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // divide_options ::= divide_options divide_option 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("divide_options",22, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // divide_options ::= divide_option 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("divide_options",22, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // divide_options_opt ::= 
            {
              Option RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("divide_options_opt",21, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // divide_options_opt ::= divide_options 
            {
              Option RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("divide_options_opt",21, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // divide_mode ::= BY rvalue_list 
            {
              SDPSymbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("divide_mode",20, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // divide_mode ::= INTO lvalue_list 
            {
              SDPSymbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("divide_mode",20, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // divide_verb ::= DIVIDE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new StmtCobol(s, currStmt); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("divide_verb",19, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // stmtDivide ::= divide_verb rvalue divide_mode divide_options_opt 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-3)).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-3)).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtDivide",18, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // stmtDisplay ::= DISPLAY rvalue_list 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = new StmtCobol(s, code.getNumStatements()); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtDisplay",127, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // compute_option ::= option_size_error 
            {
              SDPSymbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("compute_option",17, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // compute_options ::= compute_options compute_option 
            {
              SDPSymbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("compute_options",16, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // compute_options ::= compute_option 
            {
              SDPSymbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("compute_options",16, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // compute_options_opt ::= 
            {
              SDPSymbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("compute_options_opt",15, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // compute_options_opt ::= compute_options 
            {
              SDPSymbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("compute_options_opt",15, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // compute_rvalue ::= expression 
            {
              SDPSymbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("compute_rvalue",14, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // compute_rvalues ::= compute_rvalues compute_rvalue 
            {
              SDPSymbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("compute_rvalues",13, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // compute_rvalues ::= compute_rvalue 
            {
              SDPSymbol RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("compute_rvalues",13, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // compute_lvalue ::= lvalue rvalue_options_opt 
            {
              SDPSymbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol i = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("compute_lvalue",12, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // stmtCompute ::= COMPUTE compute_lvalue REL_EQ compute_rvalues compute_options_opt 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-4)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-4)).value;
		 StmtCobol stmt = new StmtCobol(s, code.getNumStatements());
//                      stmt.addSymbol(i);
                      RESULT = stmt; 
                   
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtCompute",125, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-4)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // stmtCancel ::= CANCEL rvalue 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = new StmtCobol(s, code.getNumStatements()); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtCancel",167, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // stmtCall_returning ::= RETURNING lvalue 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtCall_returning",177, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // stmtCall_returning_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtCall_returning_opt",176, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // stmtCall_returning_opt ::= stmtCall_returning 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtCall_returning_opt",176, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // stmtCall_parm_type ::= REFERENCE 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtCall_parm_type",180, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // stmtCall_parm_type ::= VALUE 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtCall_parm_type",180, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // stmtCall_parm ::= BY stmtCall_parm_type 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtCall_parm",179, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // stmtCall_parm ::= rvalue 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtCall_parm",179, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // stmtCall_parm_list ::= stmtCall_parm_list stmtCall_parm 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtCall_parm_list",178, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // stmtCall_parm_list ::= stmtCall_parm 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtCall_parm_list",178, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // stmtCall_using ::= USING stmtCall_parm_list 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtCall_using",175, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // stmtCall_using_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtCall_using_opt",174, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // stmtCall_using_opt ::= stmtCall_using 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtCall_using_opt",174, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // stmtCall ::= CALL moduloCall stmtCall_using_opt stmtCall_returning_opt 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-3)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		SDPSymbol i = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		 RESULT = code.processCall(s, i); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtCall",173, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // add_option ::= option_corr 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("add_option",11, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // add_option ::= option_rounded 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("add_option",11, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // add_option ::= option_giving 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("add_option",11, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // add_options ::= add_options add_option 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("add_options",10, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // add_options ::= add_option 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("add_options",10, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // add_options_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("add_options_opt",9, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // add_options_opt ::= add_options 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("add_options_opt",9, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // add_verb ::= ADD 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 currStmt = new StmtCobol(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("add_verb",8, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // stmtAdd ::= add_verb rvalue_options_opt rvalue_list TO lvalue_list add_options_opt 
            {
              StmtCobol RESULT =null;
		 RESULT = currStmt; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtAdd",187, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-5)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // accept_data ::= TIME 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("accept_data",7, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // accept_data ::= DAY_OF_WEEK 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("accept_data",7, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // accept_data ::= DAY opt_date_fmt 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("accept_data",7, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // accept_data ::= DATE opt_date_fmt 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("accept_data",7, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // accept_data ::= SYM 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("accept_data",7, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // accept_from ::= FROM accept_data 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("accept_from",6, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // accept_verb ::= ACCEPT 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new StmtCobol(s, currStmt); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("accept_verb",5, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // stmtAccept ::= accept_verb lvalue accept_from 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtAccept",4, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // stmtSQL ::= SQLCODE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getNumStatements()); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtSQL",184, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // stmtCics ::= CICSCODE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getNumStatements()); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtCics",183, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // stmtReturn ::= RETURN SYM stmtRead_detail 
            {
              StmtCobol RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		SDPSymbol r = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol i = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens j = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 StmtCobol stmt = code.fileAccess(TRAP.ACC_READ, r, i);
                     RESULT = stmt; // .addTokens(j); 
                  
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtReturn",185, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // stmtNext ::= NEXT 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getNumStatements()); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtNext",166, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // exitType ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = code.makeSymbol(ZCCSym.PARRAFO, -1, -1, ""); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("exitType",109, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // exitType ::= SECTION 
            {
              SDPSymbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("exitType",109, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // exitType ::= PROGRAM 
            {
              SDPSymbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("exitType",109, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // stmtExitPgm ::= EXIT_PGM 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s, code.getNumStatements());
                               RESULT = stmt.addRValue(s); 
                            
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtExitPgm",133, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // stmtExitP ::= EXIT_PERFORM 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s, code.getNumStatements());
                           RESULT = stmt.addRValue(code.makeSymbol(ZCCSym.PERFORM, -1, -1, "PERFORM")); 
                        
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtExitP",131, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // stmtExitG ::= EXIT exitType 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol t = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s, code.getNumStatements());
                                       RESULT = stmt.addRValue(t); 
                                    
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtExitG",132, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // exitTypes ::= stmtExitPgm 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("exitTypes",134, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // exitTypes ::= stmtExitP 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("exitTypes",134, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // exitTypes ::= stmtExitG 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("exitTypes",134, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // stmtExit ::= exitTypes 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtExit",130, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // moduloCall ::= LITERAL 
            {
              SDPSymbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = l; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("moduloCall",181, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // moduloCall ::= variable 
            {
              SDPSymbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol i = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("moduloCall",181, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // stmtMerge ::= MERGE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getNumStatements()); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtMerge",122, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // stmtGoback ::= GOBACK 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getNumStatements()); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtGoback",129, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // stmtContinue ::= CONTINUE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getNumStatements()); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtContinue",128, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // stmtLang ::= stmtCancel 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtLang",217, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // stmtArit ::= stmtSubtract 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtArit",216, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // stmtArit ::= stmtDivide 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtArit",216, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // stmtArit ::= stmtAdd 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtArit",216, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // stmtArit ::= stmtCompute 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtArit",216, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // stmtArit ::= stmtMultiply 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtArit",216, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // stmtIO2 ::= stmtSort 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtIO2",211, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // stmtIO2 ::= stmtRewrite 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtIO2",211, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // stmtIO2 ::= stmtDelete 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtIO2",211, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // stmtIO2 ::= stmtWrite 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtIO2",211, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // stmtIO2 ::= stmtReturn 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtIO2",211, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // stmtIO2 ::= stmtRelease 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtIO2",211, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // stmtIO2 ::= stmtRead 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtIO2",211, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // stmtIO2 ::= stmtClose 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtIO2",211, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // stmtIO2 ::= stmtOpen 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtIO2",211, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // stmtIO2 ::= stmtDisplay 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtIO2",211, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // stmtIO2 ::= stmtAccept 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtIO2",211, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // stmtIO1 ::= stmtStart 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtIO1",210, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // stmtIO1 ::= stmtMerge 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtIO1",210, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // stmtIO ::= stmtIO2 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtIO",209, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // stmtIO ::= stmtIO1 optTokens 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol t = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtIO",209, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // stmtDatos ::= stmtSet 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtDatos",208, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // stmtDatos ::= stmtInitialize 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtDatos",208, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // stmtDatos ::= stmtUnstring 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtDatos",208, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // stmtDatos ::= stmtInspect 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtDatos",208, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // stmtDatos ::= stmtString 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtDatos",208, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // stmtDatos ::= stmtMove 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtDatos",208, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // stmtFlujo ::= stmtSearch 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtFlujo",215, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // stmtFlujo ::= stmtContinue 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtFlujo",215, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // stmtFlujo ::= stmtGoTo 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtFlujo",215, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // stmtFlujo ::= stmtEvaluate 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtFlujo",215, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // stmtFlujo ::= stmtIf 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtFlujo",215, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // stmtFlujo ::= stmtCall 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtFlujo",215, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // stmtFlujo ::= stmtPerform 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtFlujo",215, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // stmtControl2 ::= stmtGoback 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		  hasEndProgram = true;
                                      code.trapEndModule();
                                      RESULT = s; 
                                   
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtControl2",214, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // stmtControl2 ::= stmtStop 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 hasEndProgram = true;
                                       RESULT = s; 
                                       code.trapEndModule(); 
                                   
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtControl2",214, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // stmtControl1 ::= stmtNext 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtControl1",213, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // stmtControl ::= stmtControl2 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 hasEndProgram = true; RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtControl",212, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // stmtControl ::= stmtExit 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT =  code.processExit(s);    
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtControl",212, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // stmtControl ::= stmtControl1 optTokens 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol t = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s;          
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmtControl",212, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // noverbos ::= stmtException 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s;                         
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("noverbos",113, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // noverbos ::= stmtInvalid 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s;                         
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("noverbos",113, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // noverbos ::= stmtAtEnd 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s;                         
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("noverbos",113, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // noverbos ::= stmtElse 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = code.processElse(s);       
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("noverbos",113, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // noverbos ::= stmtWhen 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = code.processWhen(s);       
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("noverbos",113, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // noverbos ::= stmtEndVerb 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = code.endVerb(s);           
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("noverbos",113, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // noverbos ::= stmtEndP 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = code.checkFlujo( s, lastStmt);
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("noverbos",113, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // verbos ::= stmtSQL 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 s.setGroup(CDG.STMT_SQL);     RESULT = s; module.incStmtSql();     
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("verbos",112, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // verbos ::= stmtCics 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 s.setGroup(CDG.STMT_CICS);    RESULT = s; module.incStmtCics();    
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("verbos",112, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // verbos ::= stmtLang 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 s.setGroup(CDG.STMT_LANG);    RESULT = s; module.incStmtLang();    
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("verbos",112, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // verbos ::= stmtIO 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 s.setGroup(CDG.STMT_IO);      RESULT = s; module.incStmtIO();      
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("verbos",112, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // verbos ::= stmtArit 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 s.setGroup(CDG.STMT_ARIT);    RESULT = s; module.incStmtArit();    
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("verbos",112, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // verbos ::= stmtDatos 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 s.setGroup(CDG.STMT_DATA);    RESULT = s; module.incStmtDatos();   
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("verbos",112, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // verbos ::= stmtFlujo 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 s.setGroup(CDG.STMT_FLOW);    RESULT = s; module.incStmtFlujo();   
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("verbos",112, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // verbos ::= stmtControl 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 s.setGroup(CDG.STMT_CONTROL); RESULT = s; module.incStmtControl(); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("verbos",112, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // dir_trace ::= RESET TRACE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = new StmtCobol(s, code.getNumStatements()); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("dir_trace",115, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // dir_trace ::= READY TRACE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 RESULT = new StmtCobol(s, code.getNumStatements()); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("dir_trace",115, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // directives ::= dir_trace 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("directives",114, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= directives 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; rules.checkCobolDirective(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmt",111, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= noverbos 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmt",111, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= verbos 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = s; code.incStmt(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("stmt",111, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lista_stmt ::= lista_stmt stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 lastStmt = code.processStatement(s, lastStmt); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("lista_stmt",110, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lista_stmt ::= stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 lastStmt = code.processStatement(s, lastStmt); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("lista_stmt",110, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parr_section ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("parr_section",108, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parr_section ::= SECTION 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = true;  
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("parr_section",108, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parrafo_name ::= PARRAFO parr_section ENDP 
            {
              SDPSymbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		SDPSymbol p = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		 // if (b == true) code.notSupportedSection(p); 
                    RESULT = code.processParagraph(p, lastStmt); 
                 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("parrafo_name",107, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bloque_sentences ::= 
            {
              Integer RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("bloque_sentences",106, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bloque_sentences ::= lista_stmt 
            {
              Integer RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("bloque_sentences",106, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bloque_parrafo ::= parrafo_name bloque_sentences 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("bloque_parrafo",104, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bloque_parrafos ::= bloque_parrafos bloque_parrafo 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("bloque_parrafos",103, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bloque_parrafos ::= bloque_parrafo 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("bloque_parrafos",103, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lista_parrafos ::= 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("lista_parrafos",102, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lista_parrafos ::= bloque_parrafos 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("lista_parrafos",102, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bloque_inicial ::= bloque_sentences 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("bloque_inicial",105, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bloque_procedure ::= bloque_inicial lista_parrafos 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("bloque_procedure",3, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // list_parms ::= list_parms SYM 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = l.add(s);      
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("list_parms",118, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // list_parms ::= SYM 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("list_parms",118, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // list_parms_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("list_parms_opt",117, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // list_parms_opt ::= list_parms 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("list_parms_opt",117, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // proc_parm ::= RETURNING rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("proc_parm",121, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // proc_parm ::= USING list_parms_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("proc_parm",121, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // proc_parms ::= proc_parms proc_parm 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("proc_parms",120, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // proc_parms ::= proc_parm 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("proc_parms",120, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // proc_parms_list ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("proc_parms_list",119, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // proc_parms_list ::= proc_parms 
            {
              Tokens RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("proc_parms_list",119, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // resto_call ::= proc_parms_list NT$0 ENDP 
            {
              Tokens RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Tokens) ((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		Tokens p = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 code.parrafoVirtual(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("resto_call",116, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              Tokens RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens p = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
 RESULT = p; 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("NT$0",301, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // proc_div_header ::= PROC_DIV resto_call 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()).right;
		Tokens p = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.peek()).value;
		 code.beginCode(s); 
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("proc_div_header",2, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // procedure_division ::= proc_div_header bloque_procedure 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("procedure_division",0, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // end_program ::= 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("end_program",1, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // end_program ::= END_PGM SYM ENDP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)).value;
		 hasEndProgram = true; 
                                      StmtCobol stmt = new StmtCobol(s); 
                                      code.endProgram(stmt);
                                      lastStmt = stmt;
                                   
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("end_program",1, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // module ::= procedure_division end_program 
            {
              Object RESULT =null;

              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("module",101, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= cobolCode EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).right;
		StmtCobol start_val = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)).value;
		RESULT = start_val;
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.elementAt(CUP$ZCCParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ZCCParser$parser.done_parsing();
          return CUP$ZCCParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // cobolCode ::= module 
            {
              StmtCobol RESULT =null;
		 code.EndOfFile(lastStmt, hasEndProgram);
                         RESULT = null;  
                      
              CUP$ZCCParser$result = parser.getSymbolFactory().newSymbol("cobolCode",100, ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCParser$stack.peek()), RESULT);
            }
          return CUP$ZCCParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

