
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Feb 12 17:28:31 CET 2018
//----------------------------------------------------

package com.jgg.sdp.parser.lang;

import java_cup.runtime.*;
import com.jgg.sdp.common.ctes.*;
import com.jgg.sdp.common.config.*;
import com.jgg.sdp.module.base.*;
import com.jgg.sdp.module.items.*;
import com.jgg.sdp.module.factorias.*;
import com.jgg.sdp.parser.base.*;
import com.jgg.sdp.parser.code.*;
import com.jgg.sdp.parser.stmt.*;
import com.jgg.sdp.blocks.stmt.*;
import com.jgg.sdp.parser.symbols.*;
import com.jgg.sdp.rules.components.RulesData;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Feb 12 17:28:31 CET 2018
  */
public class ZCDParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ZCDParser() {super();}

  /** Constructor which sets the default scanner. */
  public ZCDParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ZCDParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0171\000\002\053\003\000\002\002\004\000\002\304" +
    "\002\000\002\054\006\000\002\004\005\000\002\005\004" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\016\003\000\002" +
    "\017\003\000\002\020\003\000\002\021\003\000\002\022" +
    "\003\000\002\023\007\000\002\024\003\000\002\025\003" +
    "\000\002\026\003\000\002\026\002\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\006\003\000\002" +
    "\006\002\000\002\007\003\000\002\007\004\000\002\010" +
    "\003\000\002\011\005\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\013\003\000\002\013\002\000\002\014\003\000\002" +
    "\014\002\000\002\030\003\000\002\030\002\000\002\031" +
    "\003\000\002\031\004\000\002\032\003\000\002\032\003" +
    "\000\002\002\004\000\002\002\002\000\002\033\004\000" +
    "\002\035\004\000\002\126\003\000\002\126\002\000\002" +
    "\165\003\000\002\165\002\000\002\127\004\000\002\130" +
    "\004\000\002\131\003\000\002\131\002\000\002\132\003" +
    "\000\002\132\004\000\002\133\003\000\002\133\003\000" +
    "\002\133\003\000\002\133\003\000\002\134\005\000\002" +
    "\135\005\000\002\136\005\000\002\137\005\000\002\153" +
    "\006\000\002\153\002\000\002\154\006\000\002\155\006" +
    "\000\002\157\003\000\002\157\003\000\002\157\003\000" +
    "\002\156\003\000\002\156\002\000\002\160\003\000\002" +
    "\160\004\000\002\161\006\000\002\161\005\000\002\140" +
    "\003\000\002\140\002\000\002\141\003\000\002\141\004" +
    "\000\002\142\003\000\002\142\003\000\002\142\003\000" +
    "\002\142\003\000\002\142\003\000\002\142\003\000\002" +
    "\142\003\000\002\143\006\000\002\144\006\000\002\145" +
    "\006\000\002\146\006\000\002\147\007\000\002\150\005" +
    "\000\002\151\006\000\002\260\003\000\002\260\003\000" +
    "\002\260\002\000\002\261\003\000\002\261\002\000\002" +
    "\245\003\000\002\245\004\000\002\246\006\000\002\152" +
    "\003\000\002\152\003\000\002\152\003\000\002\152\003" +
    "\000\002\301\004\000\002\301\002\000\002\265\006\000" +
    "\002\265\002\000\002\162\003\000\002\162\002\000\002" +
    "\163\003\000\002\163\004\000\002\164\006\000\002\167" +
    "\004\000\002\167\002\000\002\305\002\000\002\170\005" +
    "\000\002\171\003\000\002\171\002\000\002\172\004\000" +
    "\002\173\004\000\002\177\003\000\002\177\002\000\002" +
    "\174\003\000\002\174\004\000\002\176\003\000\002\176" +
    "\003\000\002\175\005\000\002\200\004\000\002\201\003" +
    "\000\002\201\004\000\002\202\003\000\002\202\003\000" +
    "\002\202\003\000\002\202\003\000\002\202\003\000\002" +
    "\202\003\000\002\202\003\000\002\202\003\000\002\204" +
    "\004\000\002\212\003\000\002\212\003\000\002\212\003" +
    "\000\002\205\004\000\002\206\004\000\002\213\003\000" +
    "\002\213\003\000\002\213\003\000\002\214\004\000\002" +
    "\215\003\000\002\215\003\000\002\215\003\000\002\207" +
    "\004\000\002\210\004\000\002\211\004\000\002\003\004" +
    "\000\002\003\002\000\002\034\004\000\002\036\006\000" +
    "\002\037\004\000\002\037\002\000\002\306\002\000\002" +
    "\040\005\000\002\041\003\000\002\041\002\000\002\217" +
    "\003\000\002\217\004\000\002\216\004\000\002\243\006" +
    "\000\002\244\003\000\002\244\003\000\002\222\003\000" +
    "\002\223\003\000\002\223\004\000\002\224\003\000\002" +
    "\224\003\000\002\224\003\000\002\224\003\000\002\224" +
    "\003\000\002\224\003\000\002\224\003\000\002\225\005" +
    "\000\002\226\003\000\002\226\004\000\002\234\004\000" +
    "\002\235\003\000\002\235\003\000\002\235\003\000\002" +
    "\221\004\000\002\236\005\000\002\237\003\000\002\237" +
    "\002\000\002\227\004\000\002\230\003\000\002\230\003" +
    "\000\002\231\004\000\002\233\004\000\002\233\002\000" +
    "\002\232\003\000\002\232\003\000\002\220\003\000\002" +
    "\220\002\000\002\241\004\000\002\240\003\000\002\240" +
    "\003\000\002\242\004\000\002\042\004\000\002\042\002" +
    "\000\002\307\002\000\002\043\005\000\002\044\003\000" +
    "\002\044\002\000\002\045\004\000\002\045\002\000\002" +
    "\310\002\000\002\046\005\000\002\047\003\000\002\047" +
    "\002\000\002\050\004\000\002\050\002\000\002\311\002" +
    "\000\002\051\005\000\002\052\003\000\002\052\002\000" +
    "\002\074\003\000\002\074\004\000\002\075\003\000\002" +
    "\075\003\000\002\075\003\000\002\075\003\000\002\075" +
    "\003\000\002\075\003\000\002\076\005\000\002\077\005" +
    "\000\002\100\005\000\002\101\005\000\002\102\004\000" +
    "\002\103\004\000\002\104\004\000\002\105\004\000\002" +
    "\071\003\000\002\071\003\000\002\071\003\000\002\071" +
    "\003\000\002\072\003\000\002\072\002\000\002\107\003" +
    "\000\002\107\002\000\002\106\003\000\002\106\004\000" +
    "\002\111\003\000\002\111\003\000\002\111\003\000\002" +
    "\111\003\000\002\111\003\000\002\111\003\000\002\111" +
    "\003\000\002\111\003\000\002\111\003\000\002\112\004" +
    "\000\002\113\005\000\002\114\004\000\002\114\002\000" +
    "\002\057\006\000\002\060\003\000\002\061\004\000\002" +
    "\061\002\000\002\062\003\000\002\062\003\000\002\063" +
    "\004\000\002\063\002\000\002\070\004\000\002\064\004" +
    "\000\002\065\003\000\002\065\004\000\002\066\003\000" +
    "\002\066\003\000\002\066\003\000\002\110\004\000\002" +
    "\067\003\000\002\067\003\000\002\067\003\000\002\067" +
    "\003\000\002\067\003\000\002\067\003\000\002\067\003" +
    "\000\002\067\004\000\002\067\003\000\002\125\003\000" +
    "\002\125\003\000\002\125\003\000\002\125\003\000\002" +
    "\125\003\000\002\125\003\000\002\115\004\000\002\116" +
    "\003\000\002\116\004\000\002\117\003\000\002\117\003" +
    "\000\002\117\003\000\002\117\003\000\002\117\003\000" +
    "\002\117\003\000\002\117\003\000\002\117\003\000\002" +
    "\117\003\000\002\117\003\000\002\121\005\000\002\122" +
    "\003\000\002\122\003\000\002\123\003\000\002\123\002" +
    "\000\002\124\004\000\002\120\003\000\002\120\002\000" +
    "\002\056\004\000\002\073\003\000\002\073\003\000\002" +
    "\073\004\000\002\073\003\000\002\073\004\000\002\255" +
    "\003\000\002\055\003\000\002\055\002\000\002\256\003" +
    "\000\002\256\003\000\002\256\003\000\002\256\003\000" +
    "\002\256\003\000\002\256\003\000\002\257\003\000\002" +
    "\257\003\000\002\257\003\000\002\257\003\000\002\257" +
    "\003\000\002\247\005\000\002\252\004\000\002\253\003" +
    "\000\002\253\004\000\002\254\004\000\002\250\003\000" +
    "\002\250\002\000\002\251\004\000\002\262\003\000\002" +
    "\262\003\000\002\266\003\000\002\266\002\000\002\270" +
    "\003\000\002\270\002\000\002\273\003\000\002\273\002" +
    "\000\002\275\003\000\002\275\002\000\002\277\003\000" +
    "\002\277\002\000\002\302\003\000\002\302\002\000\002" +
    "\267\004\000\002\271\003\000\002\274\003\000\002\276" +
    "\003\000\002\300\003\000\002\303\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01a4\000\004\004\010\001\002\000\002\001\uffff\000" +
    "\002\001\001\000\004\002\064\001\002\000\014\033\024" +
    "\034\025\035\015\036\021\037\026\001\002\000\004\174" +
    "\011\001\002\000\002\001\ufffc\000\004\174\043\001\uffdd" +
    "\000\014\044\031\045\034\046\033\047\027\050\037\001" +
    "\uffe8\000\002\001\ufffa\000\002\001\ufff4\000\002\001\ufff6" +
    "\000\002\001\ufff7\000\002\001\ufffb\000\002\001\ufff3\000" +
    "\002\001\ufff9\000\002\001\ufff8\000\002\001\ufff0\000\002" +
    "\001\ufff5\000\002\001\ufff2\000\002\001\uffe2\000\002\001" +
    "\ufffd\000\002\001\uffe3\000\002\001\uffe5\000\002\001\uffdf" +
    "\000\002\001\uffe0\000\004\174\043\001\uffdd\000\014\044" +
    "\031\045\034\046\033\047\027\050\037\001\uffe9\000\002" +
    "\001\uffe1\000\002\001\uffe7\000\002\001\uffe6\000\004\010" +
    "\045\001\uffd9\000\002\001\uffde\000\006\010\050\174\051" +
    "\001\uffda\000\002\001\uffd8\000\002\001\uffe4\000\002\001" +
    "\uffd7\000\002\001\uffd6\000\002\001\uffd5\000\004\011\053" +
    "\001\002\000\002\001\uffef\000\010\040\061\041\056\042" +
    "\055\001\uffed\000\002\001\uffea\000\002\001\uffeb\000\002" +
    "\001\uffee\000\004\174\063\001\uffdb\000\002\001\uffec\000" +
    "\002\001\ufff1\000\002\001\uffdc\000\002\001\000\000\004" +
    "\005\067\001\uffd3\000\004\026\u0126\001\uffcf\000\004\174" +
    "\u0122\001\002\000\004\006\072\001\uff5f\000\004\021\100" +
    "\001\uff5b\000\004\174\074\001\002\000\002\001\ufffe\000" +
    "\002\001\uff5e\000\004\022\u010e\001\uff2c\000\002\001\uff60" +
    "\000\006\100\106\115\110\001\uff57\000\002\001\uff5a\000" +
    "\004\174\102\001\002\000\002\001\uff59\000\016\013\211" +
    "\014\175\015\207\016\201\202\204\203\171\001\uff32\000" +
    "\002\001\uff5c\000\002\001\uff56\000\002\001\uff52\000\006" +
    "\100\106\115\110\001\uff58\000\002\001\uff51\000\004\007" +
    "\112\001\002\000\020\073\113\075\120\103\123\104\114" +
    "\110\117\112\122\146\127\001\002\000\004\012\165\001" +
    "\002\000\006\012\143\155\150\001\002\000\002\001\uff4a" +
    "\000\002\001\uff4f\000\010\007\160\137\161\153\162\001" +
    "\002\000\006\111\142\112\140\001\002\000\002\001\uff4c" +
    "\000\010\012\143\146\127\155\150\001\002\000\006\111" +
    "\142\112\140\001\002\000\002\001\uff47\000\004\174\137" +
    "\001\002\000\002\001\uff48\000\004\007\135\001\002\000" +
    "\002\001\uff4d\000\002\001\uff4b\000\002\001\uff49\000\020" +
    "\073\113\075\120\103\123\104\114\110\117\112\122\146" +
    "\127\001\uff50\000\002\001\uff4e\000\002\001\ufeba\000\002" +
    "\001\uff2e\000\002\001\uff53\000\002\001\uff35\000\002\001" +
    "\uff3f\000\002\001\uff34\000\002\001\uff30\000\002\001\uff3b" +
    "\000\004\201\151\001\uff36\000\002\001\uff39\000\002\001" +
    "\uff3a\000\002\001\uff2f\000\006\012\143\155\150\001\002" +
    "\000\002\001\uff38\000\002\001\uff37\000\004\007\155\001" +
    "\002\000\002\001\uff45\000\004\007\157\001\uff46\000\002" +
    "\001\uff44\000\002\001\uff42\000\002\001\uff40\000\002\001" +
    "\uff41\000\002\001\uff43\000\002\001\uff31\000\004\111\167" +
    "\001\uff3c\000\002\001\uff3e\000\002\001\uff3d\000\002\001" +
    "\uff55\000\002\001\uff14\000\002\001\uff54\000\002\001\uff17" +
    "\000\004\144\u0105\001\002\000\004\007\u0104\001\002\000" +
    "\002\001\uff1b\000\004\141\375\001\002\000\056\101\244" +
    "\102\263\125\224\126\234\127\225\130\261\131\260\132" +
    "\257\133\255\134\254\135\253\140\247\141\243\142\231" +
    "\143\236\144\226\145\222\147\232\150\251\161\262\164" +
    "\237\173\252\001\uff04\000\004\007\371\001\002\000\002" +
    "\001\uff18\000\056\101\244\102\263\125\224\126\234\127" +
    "\225\130\261\131\260\132\257\133\255\134\254\135\253" +
    "\140\247\141\243\142\231\143\236\144\226\145\222\147" +
    "\232\150\251\161\262\164\237\173\252\001\uff04\000\002" +
    "\001\uff15\000\002\001\uff19\000\002\001\uff16\000\004\007" +
    "\221\001\002\000\016\013\211\014\175\015\207\016\201" +
    "\202\204\203\171\001\uff33\000\012\007\212\137\213\151" +
    "\215\152\217\001\uff06\000\002\001\uff0b\000\002\001\uff07" +
    "\000\002\001\uff08\000\002\001\uff0a\000\002\001\uff0f\000" +
    "\002\001\uff09\000\002\001\uff1a\000\002\001\uff0d\000\006" +
    "\012\357\155\361\001\002\000\002\001\uff00\000\002\001" +
    "\ufee0\000\002\001\ufede\000\036\012\342\013\350\017\336" +
    "\020\333\136\345\151\331\155\334\156\330\163\341\165" +
    "\340\166\332\167\343\170\346\171\335\001\002\000\056" +
    "\101\244\102\263\125\224\126\234\127\225\130\261\131" +
    "\260\132\257\133\255\134\254\135\253\140\247\141\243" +
    "\142\231\143\236\144\226\145\222\147\232\150\251\161" +
    "\262\164\237\173\252\001\uff05\000\002\001\ufefe\000\002" +
    "\001\ufee2\000\010\007\135\137\270\152\273\001\002\000" +
    "\002\001\uff01\000\004\157\325\001\002\000\002\001\ufeff" +
    "\000\026\012\313\151\305\152\316\153\306\154\307\155" +
    "\310\156\303\157\312\160\315\177\311\001\002\000\036" +
    "\102\263\125\224\126\234\127\225\130\261\131\260\132" +
    "\257\133\255\134\254\135\253\142\231\150\251\161\262" +
    "\173\252\001\002\000\002\001\ufefa\000\002\001\ufefc\000" +
    "\002\001\ufefd\000\012\007\212\137\213\151\215\152\217" +
    "\001\uff06\000\010\007\135\137\270\152\273\001\002\000" +
    "\002\001\ufefb\000\002\001\ufedc\000\012\007\212\137\213" +
    "\151\215\152\217\001\uff06\000\004\174\266\001\ufeb8\000" +
    "\002\001\ufee4\000\002\001\ufee1\000\002\001\ufed6\000\002" +
    "\001\ufed7\000\002\001\ufed8\000\002\001\ufef9\000\002\001" +
    "\ufed9\000\002\001\ufeda\000\002\001\ufedb\000\002\001\ufedf" +
    "\000\002\001\ufee3\000\002\001\uff03\000\002\001\uff13\000" +
    "\002\001\ufeb9\000\002\001\ufef8\000\002\001\ufee6\000\002" +
    "\001\ufeea\000\002\001\ufee8\000\002\001\ufee7\000\010\007" +
    "\135\137\270\152\273\001\ufeeb\000\002\001\ufee9\000\004" +
    "\175\277\001\ufef5\000\012\007\212\137\213\151\215\152" +
    "\217\001\uff06\000\002\001\ufef7\000\002\001\ufef6\000\002" +
    "\001\ufee5\000\002\001\ufecf\000\026\012\313\151\305\152" +
    "\316\153\306\154\307\155\310\156\303\157\312\160\315" +
    "\177\311\001\ufed5\000\002\001\ufed2\000\002\001\ufece\000" +
    "\002\001\ufecd\000\002\001\ufed0\000\006\012\320\155\322" +
    "\001\002\000\002\001\ufecb\000\002\001\ufeca\000\002\001" +
    "\ufed4\000\002\001\ufecc\000\002\001\ufed1\000\002\001\ufec9" +
    "\000\002\001\ufec7\000\004\200\323\001\002\000\002\001" +
    "\ufec6\000\002\001\ufec8\000\002\001\ufed3\000\002\001\ufedd" +
    "\000\010\007\135\137\270\152\273\001\ufeec\000\002\001" +
    "\uff02\000\004\153\352\001\ufec4\000\036\012\342\013\350" +
    "\017\336\020\333\136\345\151\331\155\334\156\330\163" +
    "\341\165\340\166\332\167\343\170\346\171\335\001\002" +
    "\000\002\001\ufeb5\000\002\001\ufeb0\000\002\001\ufebc\000" +
    "\002\001\ufeb2\000\002\001\ufead\000\002\001\ufec0\000\002" +
    "\001\ufeb6\000\002\001\ufeb7\000\002\001\ufeaf\000\002\001" +
    "\ufeb4\000\002\001\ufebf\000\002\001\ufebe\000\002\001\ufeb3" +
    "\000\002\001\ufeb1\000\002\001\ufeae\000\002\001\ufebb\000" +
    "\004\177\311\001\ufec1\000\002\001\ufec5\000\002\001\ufebd" +
    "\000\002\001\ufec2\000\002\001\ufec3\000\002\001\ufef0\000" +
    "\004\201\364\001\ufef1\000\002\001\ufeef\000\002\001\ufef3" +
    "\000\004\146\367\001\ufeed\000\006\012\357\155\361\001" +
    "\002\000\002\001\ufef2\000\002\001\ufef4\000\004\007\135" +
    "\001\002\000\002\001\ufeee\000\002\001\uff0c\000\004\174" +
    "\373\001\002\000\002\001\uff11\000\004\174\u0103\001\002" +
    "\000\004\007\376\001\002\000\004\175\377\001\ufea6\000" +
    "\026\012\342\013\350\017\336\020\333\163\341\165\340" +
    "\166\332\167\343\170\346\171\335\001\002\000\002\001" +
    "\ufeac\000\002\001\ufea7\000\002\001\ufea5\000\002\001\uff12" +
    "\000\002\001\uff0e\000\026\012\342\013\350\017\336\020" +
    "\333\163\341\165\340\166\332\167\343\170\346\171\335" +
    "\001\002\000\004\174\u0107\001\002\000\002\001\uff10\000" +
    "\002\001\ufeaa\000\004\175\377\001\ufea6\000\026\012\342" +
    "\013\350\017\336\020\333\163\341\165\340\166\332\167" +
    "\343\170\346\171\335\001\ufeab\000\002\001\ufea9\000\002" +
    "\001\ufea8\000\004\023\u0114\001\uff26\000\002\001\uff2b\000" +
    "\016\013\211\014\175\015\207\016\201\202\204\203\171" +
    "\001\uff28\000\002\001\uff2d\000\016\013\211\014\175\015" +
    "\207\016\201\202\204\203\171\001\uff29\000\004\174\u0113" +
    "\001\002\000\002\001\uff2a\000\002\001\uff25\000\004\024" +
    "\u011b\001\uff20\000\016\013\211\014\175\015\207\016\201" +
    "\202\204\203\171\001\uff22\000\002\001\uff27\000\016\013" +
    "\211\014\175\015\207\016\201\202\204\203\171\001\uff23" +
    "\000\002\001\uff5d\000\016\013\211\014\175\015\207\016" +
    "\201\202\204\203\171\001\uff1c\000\002\001\uff1f\000\004" +
    "\174\u011d\001\002\000\002\001\uff1e\000\002\001\uff21\000" +
    "\016\013\211\014\175\015\207\016\201\202\204\203\171" +
    "\001\uff1d\000\004\174\u0121\001\002\000\002\001\uff24\000" +
    "\002\001\uffd2\000\012\030\u0131\031\u0130\032\u0132\114\u012c" +
    "\001\uffc9\000\002\001\uffcd\000\002\001\uffd4\000\004\174" +
    "\u0128\001\002\000\002\001\uffd0\000\002\001\uffcb\000\002" +
    "\001\uffce\000\002\001\uffd1\000\002\001\uffc4\000\004\174" +
    "\u019e\001\002\000\002\001\uffcc\000\002\001\uffc8\000\002" +
    "\001\uffc6\000\004\174\u0195\001\002\000\004\174\u0152\001" +
    "\002\000\004\174\u0137\001\002\000\002\001\uffc5\000\012" +
    "\030\u0131\031\u0130\032\u0132\114\u012c\001\uffca\000\002\001" +
    "\uffc3\000\002\001\uffc7\000\004\007\u0138\001\002\000\004" +
    "\051\u013b\001\002\000\002\001\uffc1\000\004\056\u0145\001" +
    "\uffb6\000\004\122\u013e\001\ufe9b\000\002\001\ufe9c\000\004" +
    "\007\u013f\001\002\000\002\001\ufe93\000\010\052\u0143\053" +
    "\u0140\054\u0142\001\002\000\002\001\uffb9\000\002\001\uffbb" +
    "\000\002\001\uffb8\000\002\001\uffba\000\002\001\uffb5\000" +
    "\004\061\u0150\001\ufe9f\000\004\174\u014d\001\002\000\002" +
    "\001\002\000\004\056\u0145\001\uffb7\000\002\001\uffb4\000" +
    "\004\055\u014b\001\002\000\004\007\u014c\001\002\000\002" +
    "\001\uffb3\000\002\001\uffbc\000\002\001\ufea0\000\004\012" +
    "\u0151\001\002\000\002\001\ufe95\000\002\001\uffb2\000\020" +
    "\007\u015e\062\u015a\064\u015b\070\u015d\074\u0160\124\u0161\172" +
    "\u0163\001\uffb0\000\002\001\uffc0\000\002\001\uffa8\000\002" +
    "\001\uffa7\000\002\001\uffac\000\002\001\uffaa\000\002\001" +
    "\uffa9\000\002\001\uffab\000\004\061\u0150\001\ufe9f\000\004" +
    "\007\u0190\001\002\000\020\007\u015e\062\u015a\064\u015b\070" +
    "\u015d\074\u0160\124\u0161\172\u0163\001\uffb1\000\004\007\u0188" +
    "\001\002\000\010\061\u0150\065\u0179\066\u017a\001\uff9d\000" +
    "\002\001\uffaf\000\004\123\u016e\001\ufe9d\000\002\001\002" +
    "\000\002\001\uffad\000\004\007\u0164\001\002\000\004\061" +
    "\u0150\001\ufe9f\000\004\007\u0166\001\002\000\002\001\uffa3" +
    "\000\004\007\u0168\001\002\000\004\060\u0169\001\uff92\000" +
    "\004\007\u016b\001\002\000\002\001\uffa4\000\002\001\uff93" +
    "\000\002\001\ufe9e\000\004\061\u0150\001\ufe9f\000\002\001" +
    "\ufe94\000\004\007\u0170\001\002\000\006\143\ufe97\176\u0172" +
    "\001\uff90\000\004\143\u0175\001\002\000\002\001\ufe91\000" +
    "\002\001\ufe98\000\002\001\uffa2\000\004\162\u0176\001\002" +
    "\000\004\007\u0177\001\002\000\002\001\uff91\000\002\001" +
    "\uff9e\000\002\001\ufea4\000\002\001\ufea3\000\002\001\uff9f" +
    "\000\004\007\u017d\001\002\000\006\065\u0179\066\u017a\001" +
    "\uff9b\000\004\120\u0183\001\ufe99\000\002\001\uff9a\000\002" +
    "\001\uffa6\000\006\065\u0179\066\u017a\001\uff9c\000\002\001" +
    "\uff99\000\002\001\ufe92\000\002\001\ufe9a\000\004\061\u0150" +
    "\001\ufe9f\000\004\007\u0187\001\002\000\002\001\uff98\000" +
    "\004\061\u0150\001\ufe9f\000\012\020\u018a\077\u018d\106\u018b" +
    "\121\u018e\001\002\000\002\001\uff94\000\002\001\uff96\000" +
    "\002\001\uffa5\000\002\001\uff95\000\002\001\uff97\000\002" +
    "\001\uffae\000\004\061\u0150\001\ufe9f\000\004\007\u0192\001" +
    "\002\000\002\001\uffa0\000\004\063\u0194\001\002\000\002" +
    "\001\uffa1\000\004\007\u0196\001\uffbd\000\004\176\u0172\001" +
    "\ufe97\000\002\001\uffc2\000\004\043\u0199\001\ufea1\000\004" +
    "\057\u019d\001\002\000\004\174\u019c\001\002\000\002\001" +
    "\ufea2\000\002\001\uffbe\000\002\001\ufe96\000\004\172\u01a1" +
    "\001\uff8e\000\002\001\uff8d\000\004\172\u01a1\001\uff8f\000" +
    "\004\007\u01a3\001\002\000\002\001\uffbf\000\004\061\u0150" +
    "\001\ufe9f\000\004\007\u01a5\001\002\000\002\001\uff8b\000" +
    "\002\001\uff8c" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01a4\000\012\004\003\005\006\053\005\054\004\001" +
    "\001\000\004\304\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\015\012\016\017\017\013\020\021\021" +
    "\022\022\016\023\015\024\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\051\001\001\000\014\006" +
    "\027\007\035\010\037\011\031\012\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\041\001\001\000\010\010\040\011\031" +
    "\012\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\030\045\031\043\001\001\000\002" +
    "\001\001\000\004\032\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\053\001\001\000\002\001\001\000" +
    "\006\026\057\027\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\067\033\065\001\001\000\012\035" +
    "\u0124\126\u0123\127\u0126\130\u0122\001\001\000\002\001\001" +
    "\000\006\003\072\034\070\001\001\000\010\036\075\037" +
    "\074\040\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\042\u010c\043\u010e\001\001\000" +
    "\002\001\001\000\014\041\103\216\104\217\106\243\102" +
    "\244\110\001\001\000\004\306\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\074\207\075\175\076\204" +
    "\077\201\100\172\101\205\102\202\103\176\104\177\105" +
    "\173\220\171\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\216\167\243\102\244\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\221\130" +
    "\222\124\223\132\224\115\225\127\227\131\234\120\236" +
    "\114\241\125\242\123\001\001\000\002\001\001\000\004" +
    "\240\163\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\235\162\001\001\000\004\232\153\001\001\000\002" +
    "\001\001\000\012\230\143\231\146\240\144\242\145\001" +
    "\001\000\004\232\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\255\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\221\130\224\133\225\127\227\131\234\120\236\114\241" +
    "\125\242\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\233\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\240\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\226\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\237\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\252\u0105\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\247\373\001\001\000\034\056\240\057\227\064\241" +
    "\067\237\070\244\106\226\107\371\110\255\111\263\112" +
    "\232\113\222\115\234\125\245\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\056\240\057\227\064\241\067" +
    "\237\070\244\106\226\107\247\110\255\111\263\112\232" +
    "\113\222\115\234\125\245\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\075\217\076\204\077\201\100\172\101\205\102\202\103" +
    "\176\104\177\105\173\001\001\000\006\071\215\072\213" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\060\357\062" +
    "\361\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\073\336\256\346\257\343\001\001\000" +
    "\030\056\240\057\227\064\241\067\237\070\244\110\255" +
    "\111\326\112\232\113\222\115\234\125\245\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\065\325\066\270" +
    "\255\271\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\116\303\117\313\121\316\001\001" +
    "\000\006\067\301\125\245\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\071\275\072\213" +
    "\001\001\000\010\065\273\066\270\255\271\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\071\266\072\213" +
    "\001\001\000\004\055\264\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\066\274\255\271\001" +
    "\001\000\002\001\001\000\004\114\277\001\001\000\006" +
    "\071\300\072\213\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\117\323" +
    "\121\316\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\122\320\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\066\274" +
    "\255\271\001\001\000\002\001\001\000\006\123\353\124" +
    "\352\001\001\000\010\073\350\256\346\257\343\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\120\355\121\354\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\061\362\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\063\365\001\001\000\004\062\364\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\255\367" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\250\377\251\u0100\001\001\000\006\256\346\257" +
    "\u0101\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\253" +
    "\u0109\254\u0107\256\346\257\u0108\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\250\u010b\251" +
    "\u0100\001\001\000\010\254\u010a\256\346\257\u0108\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\045\u0114\046" +
    "\u0115\001\001\000\004\307\u0111\001\001\000\030\044\u010f" +
    "\074\u0110\075\175\076\204\077\201\100\172\101\205\102" +
    "\202\103\176\104\177\105\173\001\001\000\002\001\001" +
    "\000\024\075\217\076\204\077\201\100\172\101\205\102" +
    "\202\103\176\104\177\105\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\310\u011f\001\001\000\006\050" +
    "\u0118\051\u0119\001\001\000\030\047\u0116\074\u0117\075\175" +
    "\076\204\077\201\100\172\101\205\102\202\103\176\104" +
    "\177\105\173\001\001\000\002\001\001\000\024\075\217" +
    "\076\204\077\201\100\172\101\205\102\202\103\176\104" +
    "\177\105\173\001\001\000\002\001\001\000\030\052\u011d" +
    "\074\u011e\075\175\076\204\077\201\100\172\101\205\102" +
    "\202\103\176\104\177\105\173\001\001\000\004\311\u011b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\075\217\076\204\077\201\100\172\101\205" +
    "\102\202\103\176\104\177\105\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\131\u012c" +
    "\132\u0133\133\u012d\134\u012e\135\u0132\136\u012a\137\u0134\001" +
    "\001\000\006\165\u0129\166\u0128\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\133\u0135\134\u012e\135\u0132\136" +
    "\u012a\137\u0134\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\154\u0138\001\001\000\004\155\u0139\001\001\000" +
    "\002\001\001\000\012\156\u0145\160\u0147\161\u0143\272\u0146" +
    "\001\001\000\006\275\u013c\276\u013b\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\157\u0140" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\270\u014e" +
    "\271\u014d\001\001\000\002\001\001\000\004\264\u0149\001" +
    "\001\000\006\161\u0148\272\u0146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\140\u0152\141\u015b\142" +
    "\u015e\143\u0161\144\u0155\145\u0158\146\u0156\147\u0157\150\u0153" +
    "\151\u0154\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\270\u0192\271\u014d\001" +
    "\001\000\002\001\001\000\022\142\u018e\143\u0161\144\u0155" +
    "\145\u0158\146\u0156\147\u0157\150\u0153\151\u0154\001\001\000" +
    "\002\001\001\000\010\260\u017b\262\u0177\271\u017a\001\001" +
    "\000\002\001\001\000\006\273\u016c\274\u016b\001\001\000" +
    "\004\263\u0166\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\270\u0164\271\u014d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\301\u0169\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\270\u016e\271\u014d\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\265\u0173\302\u0170\303" +
    "\u0172\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\245\u0180\246\u017e\261\u017f\262\u017d\001\001\000\006" +
    "\277\u0184\300\u0183\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\246\u0181\262\u017d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\270\u0185\271" +
    "\u014d\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\270\u0188\271\u014d\001\001\000\004\152\u018b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\270" +
    "\u0190\271\u014d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\153\u0196\001" +
    "\001\000\006\302\u0197\303\u0172\001\001\000\002\001\001" +
    "\000\006\266\u0199\267\u019a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\162\u01a1\163\u019f\164\u019e\001\001\000" +
    "\002\001\001\000\004\164\u01a5\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\270\u01a3\271\u014d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ZCDParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ZCDParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ZCDParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 action_obj.initActionClass();    
    }


   GenericScanner scanner = null;
   Module module     = ModulesFactory.getDefaultModule();
//   Summary summary   = module.getSummary();
   Configuration cfg = ConfigurationBase.getInstance();
   ParserInfo    info     = ParserInfo.getInstance();
             
   public void syntax_error(SDPSymbol token) throws ParseException {
          info.syntax_error(token);
   }

   public void unrecovered_syntax_error(SDPSymbol token) throws ParseException {
      info.unrecovered_syntax_error(token);
   }
   

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ZCDParser$actions {


   Module          module   = null;
//   Summary         summary  = null;
   Persistence     fichero  = null;
   ZCDCode         code     = null;
   BlockCode       currBlock = null; 
   RulesData       rules     = new RulesData();

   SDPSymbolFactory sf = new SDPSymbolFactory();
 
   ParserInfo      info     = ParserInfo.getInstance();
      
   Variable  currVar  = null;
   StmtGral  currStmt = null;  // Instruccion en proceso
   
   boolean   hasEndProgram = false; // Hay STOPRUN o GOBACK?
    
   boolean master     = false;  // El fichero es el maestro?   
   int     numFillers = 0;
          
   public void initActionClass() {
      module  = info.getModule();
      code = new ZCDCode(module);
   }

   public String getSymbolName(SDPSymbol s)    { return (String) s.value; }
   public int    getSymbolLine(SDPSymbol s)    { return (int)    s.line;  }
   
   public void debug(String txt) { System.err.println(txt); }
   public void print(String txt) { 
      System.out.println(txt); 
   }

   void notSupportedException(int idMsg) {
        throw new NotSupportedException(idMsg);
   }


  private final ZCDParser parser;

  /** Constructor */
  CUP$ZCDParser$actions(ZCDParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ZCDParser$do_action(
    int                        CUP$ZCDParser$act_num,
    java_cup.runtime.lr_parser CUP$ZCDParser$parser,
    java.util.Stack            CUP$ZCDParser$stack,
    int                        CUP$ZCDParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ZCDParser$result;

      /* select the action based on the action number */
      switch (CUP$ZCDParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // wwith ::= WITH 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;         
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("wwith",193, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // status ::= STATUS 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;         
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("status",190, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // size ::= SIZE 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;         
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("size",188, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // sign ::= SIGN 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;         
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("sign",186, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // is ::= IS 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;         
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("is",183, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // debugging ::= DEBUGGING MODE 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w2 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w.add(w2); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("debugging",181, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // opt_with ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = null; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_with",192, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // opt_with ::= wwith 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;    
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_with",192, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // opt_status ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = null; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_status",189, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // opt_status ::= status 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;    
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_status",189, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // opt_size ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = null; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_size",187, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // opt_size ::= size 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;    
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_size",187, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // opt_sign ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = null; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_sign",185, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // opt_sign ::= sign 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;    
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_sign",185, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // opt_is ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = null; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_is",182, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // opt_is ::= is 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;    
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_is",182, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // opt_debugging ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = null; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_debugging",180, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // opt_debugging ::= debugging 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;    
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_debugging",180, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // on_off ::= OFF 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;    
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("on_off",176, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // on_off ::= ON 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;    
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("on_off",176, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // clause_thru ::= THRU constant 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("clause_thru",167, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // clause_thru_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("clause_thru_opt",166, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // clause_thru_opt ::= clause_thru 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("clause_thru_opt",166, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // clause_value_item ::= constant clause_thru_opt 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("clause_value_item",170, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // clause_value_list ::= clause_value_list clause_value_item 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("clause_value_list",169, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // clause_value_list ::= clause_value_item 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("clause_value_list",169, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // clause_value ::= VALUE clause_value_list 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("clause_value",168, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // clause_renames ::= RENAMES ID clause_thru_opt 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("clause_renames",165, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // constant ::= HEX_VAL 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("constant",173, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // constant ::= LEVELXX 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("constant",173, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // constant ::= NUMERO 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("constant",173, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // constant ::= LITERAL 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("constant",173, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // constant ::= figurative 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("constant",173, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // figurative ::= NULL 
            {
              SDPSymbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol f = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("figurative",172, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // figurative ::= QUOTE 
            {
              SDPSymbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol f = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("figurative",172, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // figurative ::= LOWVAL 
            {
              SDPSymbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol f = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("figurative",172, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // figurative ::= HIGHVAL 
            {
              SDPSymbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol f = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("figurative",172, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // figurative ::= ZERO 
            {
              SDPSymbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol f = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("figurative",172, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // figurative ::= SPACES 
            {
              SDPSymbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol f = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("figurative",172, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // endp_opt ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = null; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("endp_opt",43, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // endp_opt ::= ENDP 
            {
              SDPSymbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol e = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = e;    
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("endp_opt",43, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // rvalue ::= ID 
            {
              SDPSymbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol i = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("rvalue",171, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // init_val ::= PIC_ALPHANUM init_val 
            {
              SDPSymbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol v = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = v; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("init_val",57, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // init_val ::= PIC_NUM 
            {
              SDPSymbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("init_val",57, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // init_val ::= PIC_FMT pic_dec_opt 
            {
              SDPSymbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("init_val",57, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // init_val ::= DFHCICS 
            {
              SDPSymbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("init_val",57, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // init_val ::= constant 
            {
              SDPSymbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("init_val",57, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // var_value ::= VALUE init_val 
            {
              SDPSymbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol v = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currVar.setInitValue((String) v.value); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_value",44, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // pic_size_opt ::= 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_size_opt",78, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // pic_size_opt ::= pic_size 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_size_opt",78, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // pic_dec ::= PIC_DEC pic_size_opt 
            {
              SDPSymbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol p = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		 RESULT = p; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_dec",82, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // pic_dec_opt ::= 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_dec_opt",81, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // pic_dec_opt ::= pic_dec 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_dec_opt",81, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // pic_len ::= PIC_NUM 
            {
              SDPSymbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol p = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = p; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_len",80, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // pic_len ::= NUMERO 
            {
              SDPSymbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_len",80, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // pic_size ::= LPAR pic_len RPAR 
            {
              SDPSymbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		 code.addSize(currVar, s.setFunction()); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_size",79, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // pic_type ::= pic_size 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_type",77, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // pic_type ::= NUMERO 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_type",77, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // pic_type ::= PIC_LEN 
            {
              SDPSymbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol p = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 code.calculateSizeLen(currVar, p); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_type",77, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // pic_type ::= PIC_V 
            {
              SDPSymbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol p = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 code.calculateSize(currVar, p); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_type",77, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // pic_type ::= PIC_DEC_EMPTY 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_type",77, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // pic_type ::= PIC_DEC 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_type",77, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // pic_type ::= PIC_FMT 
            {
              SDPSymbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol p = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 code.calculateSizeFormat(currVar, p); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_type",77, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // pic_type ::= PIC_NUM 
            {
              SDPSymbol RESULT =null;
		 code.addSize(currVar, 1); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_type",77, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // pic_type ::= PIC_ALPHA 
            {
              SDPSymbol RESULT =null;
		 code.addSize(currVar, 1); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_type",77, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // pic_type ::= PIC_ALPHANUM 
            {
              SDPSymbol RESULT =null;
		 code.addSize(currVar, 1); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_type",77, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // pic_types ::= pic_types pic_type 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_types",76, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // pic_types ::= pic_type 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_types",76, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // var_picture ::= PICTURE pic_types 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_picture",75, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // compn ::= COMP6 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("compn",83, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // compn ::= COMP5 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("compn",83, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // compn ::= COMP4 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("compn",83, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // compn ::= COMP3 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("compn",83, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // compn ::= COMP2 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("compn",83, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // compn ::= COMP1 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("compn",83, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // var_type ::= compn 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_type",53, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // var_type ::= BLOB PIC_LEN 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_type",53, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // var_type ::= BLOB_LOCATOR 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_type",53, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // var_type ::= ROWID 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_type",53, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // var_type ::= BINARY 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_type",53, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // var_type ::= DISPLAY 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_type",53, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // var_type ::= PACKED 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_type",53, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // var_type ::= INDEX 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_type",53, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // var_type ::= POINTER 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_type",53, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // var_usage ::= USAGE var_type 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 code.setVarType(currVar,c); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_usage",70, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // var_index ::= FILLER 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_index",52, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // var_index ::= PIC_ALPHA 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_index",52, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // var_index ::= rvalue 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_index",52, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // var_indexes ::= var_indexes var_index 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_indexes",51, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // var_indexes ::= var_index 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_indexes",51, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // var_indexed ::= INDEXED var_indexes 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_indexed",50, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // var_order ::= ORDER var_indexes 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_order",54, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // var_occurs_depending ::= 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_occurs_depending",49, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // var_occurs_depending ::= DEPENDING rvalue 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_occurs_depending",49, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // var_occurs_bound ::= PIC_NUM 
            {
              SDPSymbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol p = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = p; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_occurs_bound",48, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // var_occurs_bound ::= NUMERO 
            {
              SDPSymbol RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol n = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = n; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_occurs_bound",48, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // var_occurs_to ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = new SDPSymbol(0, 0, 0, "0"); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_occurs_to",47, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // var_occurs_to ::= TO var_occurs_bound 
            {
              SDPSymbol RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol n = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = n; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_occurs_to",47, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // var_occurs_from ::= var_occurs_bound 
            {
              SDPSymbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol v = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = v; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_occurs_from",46, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // var_occurs ::= OCCURS var_occurs_from var_occurs_to var_occurs_depending 
            {
              SDPSymbol RESULT =null;
		int fromleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int fromright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol from = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int toleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol to = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		 
                        code.setBounds(currVar, from, to);
                     
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_occurs",45, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // var_renames_opt ::= 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_renames_opt",74, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // var_renames_opt ::= THRU var_name 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_renames_opt",74, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // var_renames ::= RENAMES var_name var_renames_opt 
            {
              SDPSymbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol i = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_renames",73, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // var_redefines ::= REDEFINES var_name 
            {
              SDPSymbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol i = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 module.setRedefines(currVar, (String)i.value); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_redefines",72, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // var_attr ::= var_usage 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_attr",71, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // var_attr ::= var_type 
            {
              SDPSymbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol v = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 code.setVarType(currVar,v); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_attr",71, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // var_attr ::= var_order 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_attr",71, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // var_attr ::= var_value 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_attr",71, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // var_attr ::= var_indexed 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_attr",71, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // var_attr ::= var_occurs 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_attr",71, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // var_attr ::= var_picture 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_attr",71, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // var_attr ::= var_renames 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_attr",71, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // var_attr ::= var_redefines 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_attr",71, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // var_data ::= var_data var_attr 
            {
              Var RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_data",68, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // var_data ::= var_attr 
            {
              Var RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_data",68, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // var_data_def ::= 
            {
              Var RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_data_def",69, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // var_data_def ::= var_data 
            {
              Var RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_data_def",69, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // var_filler ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = new SDPSymbol(ZCDSym.FILLER,0,0, " "); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_filler",56, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // var_filler ::= FILLER 
            {
              SDPSymbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol f = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_filler",56, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // var_name ::= var_filler 
            {
              SDPSymbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s.setValue("F_" + ++numFillers);  
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_name",55, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // var_name ::= PIC_ALPHA 
            {
              SDPSymbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_name",55, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // var_name ::= PIC_ALPHANUM 
            {
              SDPSymbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_name",55, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // var_name ::= ID 
            {
              SDPSymbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_name",55, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // var_88_head ::= LEVEL88 ID 
            {
              Variable RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol v = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currVar = code.createVar(l,v);  RESULT = currVar; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_88_head",67, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // var_77_head ::= LEVEL77 ID 
            {
              Variable RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol v = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currVar = code.createVar(l,v);  RESULT = currVar; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_77_head",66, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // var_66_head ::= LEVEL66 ID 
            {
              Variable RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol v = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currVar = code.createVar(l,v);  RESULT = currVar; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_66_head",65, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // var_xx_head ::= LEVELXX var_name 
            {
              Variable RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol v = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currVar = code.createVar(l,v);  RESULT = currVar; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_xx_head",64, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // var_88 ::= var_88_head clause_value ENDP 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		 RESULT = v; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_88",63, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // var_77 ::= var_77_head var_data_def ENDP 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		 RESULT = v; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_77",62, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // var_66 ::= var_66_head clause_renames ENDP 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		 RESULT = v; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_66",61, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // var_xx ::= var_xx_head var_data_def endp_opt 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		 RESULT = v; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_xx",60, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // variable ::= ENDSQL 
            {
              Variable RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("variable",59, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // variable ::= SQLDATA 
            {
              Variable RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("variable",59, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // variable ::= var_88 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = module.addVariable(v); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("variable",59, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // variable ::= var_77 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = module.addVariable(v); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("variable",59, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // variable ::= var_66 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = module.addVariable(v); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("variable",59, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // variable ::= var_xx 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = module.addVariable(v); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("variable",59, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // variables ::= variables variable 
            {
              Variable RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("variables",58, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // variables ::= variable 
            {
              Variable RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("variables",58, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // linkage_data ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("linkage_data",40, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // linkage_data ::= variables 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("linkage_data",40, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // sect_linkage_header ::= LINKAGE_SECTION NT$5 ENDP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("sect_linkage_header",39, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // NT$5 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
 code.setSection(CDG.SECT_LINK, s.line); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("NT$5",199, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // section_linkage ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("section_linkage",38, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // section_linkage ::= sect_linkage_header linkage_data 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("section_linkage",38, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // local_data ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("local_data",37, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // local_data ::= variables 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("local_data",37, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // sect_local_header ::= LOCAL_SECTION NT$4 ENDP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("sect_local_header",36, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // NT$4 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
 code.setSection(CDG.SECT_LOCAL, s.line); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("NT$4",198, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // section_local ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("section_local",35, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // section_local ::= sect_local_header local_data 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("section_local",35, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // working_data ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("working_data",34, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // working_data ::= variables 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("working_data",34, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // sect_working_header ::= WORKING_SECTION NT$3 ENDP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("sect_working_header",33, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // NT$3 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
 code.setSection(CDG.SECT_WORK, s.line); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("NT$3",197, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // section_working ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("section_working",32, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // section_working ::= sect_working_header working_data 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("section_working",32, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // fd_attr_depending ::= DEPENDING rvalue 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_depending",160, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // fd_attr_number ::= PIC_NUM 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_number",158, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // fd_attr_number ::= NUMERO 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_number",158, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // fd_attr_linage ::= LINAGE fd_attr_number 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_linage",159, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // fd_fields ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_fields",142, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // fd_fields ::= variables 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_fields",142, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // fd_attr_records ::= RECORDS 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_records",152, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // fd_attr_records ::= RECORD 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_records",152, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // fd_attr_record_to ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_record_to",153, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // fd_attr_record_to ::= TO fd_attr_number 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_record_to",153, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // fd_attr_record_size ::= fd_attr_number fd_attr_record_to 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_record_size",151, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // fd_attr_record_detail ::= fd_attr_depending 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_record_detail",150, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // fd_attr_record_detail ::= fd_attr_record_size 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_record_detail",150, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // fd_attr_record ::= RECORD fd_attr_record_detail 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_record",149, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // fd_attr_block_records ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_block_records",157, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // fd_attr_block_records ::= RECORDS 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_block_records",157, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // fd_attr_block ::= BLOCK NUMERO fd_attr_block_records 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_block",156, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // fd_attr_label ::= LABEL fd_attr_records 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_label",143, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // fd_attr_mode_type ::= FILLER 
            {
              SDPSymbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol i = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_mode_type",155, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // fd_attr_mode_type ::= PIC_DEC 
            {
              SDPSymbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol i = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_mode_type",155, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // fd_attr_mode_type ::= ID 
            {
              SDPSymbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol i = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_mode_type",155, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // fd_attr_mode ::= RECORDING fd_attr_mode_type 
            {
              Option RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol i = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol a = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = new Option(i, a); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_mode",154, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // fd_attr_name ::= fd_attr_name ID 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol i = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w.add(i);  
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_name",148, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // fd_attr_name ::= ID 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;         
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_name",148, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // fd_attr_names ::= DATA fd_attr_records fd_attr_name 
            {
              Option RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol d = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol f = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = new Option(d, f); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_names",147, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // fd_attr ::= fd_attr_depending 
            {
              Option RESULT =null;
		 RESULT = new Option(); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr",146, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // fd_attr ::= fd_attr_linage 
            {
              Option RESULT =null;
		 RESULT = new Option(); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr",146, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // fd_attr ::= fd_attr_record 
            {
              Option RESULT =null;
		 RESULT = new Option(); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr",146, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // fd_attr ::= fd_attr_block 
            {
              Option RESULT =null;
		 RESULT = new Option(); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr",146, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // fd_attr ::= fd_attr_label 
            {
              Option RESULT =null;
		 RESULT = new Option(); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr",146, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // fd_attr ::= fd_attr_mode 
            {
              Option RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option f = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr",146, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // fd_attr ::= fd_attr_names 
            {
              Option RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option f = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr",146, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // fd_attrs ::= fd_attrs fd_attr 
            {
              Option RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Option t = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option f = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attrs",145, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // fd_attrs ::= fd_attr 
            {
              Option RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option f = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attrs",145, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // fd_attrs_opt ::= fd_attrs 
            {
              Option RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option f = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f;                
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attrs_opt",144, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // fd_desc ::= SD 
            {
              SDPSymbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol i = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_desc",162, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // fd_desc ::= FD 
            {
              SDPSymbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol i = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_desc",162, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // fd_def ::= fd_desc ID fd_attrs_opt ENDP 
            {
              Variable RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Option a = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_def",161, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // fd ::= fd_def fd_fields 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Variable d = (Variable)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd",140, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // fd_list ::= fd_list fd 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_list",141, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // fd_list ::= fd 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_list",141, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // file_data ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_data",31, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // file_data ::= fd_list 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_data",31, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // sect_file_header ::= FILE_SECTION NT$2 ENDP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("sect_file_header",30, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // NT$2 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
 code.setSection(CDG.SECT_FILE, s.line); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("NT$2",196, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // section_file ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("section_file",29, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // section_file ::= sect_file_header file_data 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("section_file",29, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // bloque_data ::= section_file section_working section_local section_linkage 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("bloque_data",28, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // data_div_header ::= DIV_DATA ENDP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol p = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currBlock = new BlockCode(s, p); 
                                          code.setDivision(CDG.SECT_DATA, s.line); 
                                       
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("data_div_header",26, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // data_division ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("data_division",1, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // data_division ::= data_div_header bloque_data 
            {
              Object RESULT =null;
		 /* rules.checkDivision(currBlock); */ 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("data_division",1, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // file_attr_alt ::= ALTERNATE ID 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_alt",135, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // file_attr_key ::= RECORD ID 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_key",134, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // file_attr_rel ::= RELATIVE ID 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_rel",133, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // file_attr_acc_mode ::= RANDOM 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_acc_mode",139, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // file_attr_acc_mode ::= DYNAMIC 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_acc_mode",139, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // file_attr_acc_mode ::= SEQUENTIAL 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_acc_mode",139, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // file_attr_access ::= ACCESS file_attr_acc_mode 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_access",138, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // file_attr_org_type ::= INDEXED 
            {
              Object RESULT =null;
		 fichero.setType(Persistence.INDEXED); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_org_type",137, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // file_attr_org_type ::= RELATIVE 
            {
              Object RESULT =null;
		 fichero.setType(Persistence.RELATIVE); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_org_type",137, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // file_attr_org_type ::= SEQUENTIAL 
            {
              Object RESULT =null;
		 fichero.setType(Persistence.SEQUENTIAL); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_org_type",137, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // file_attr_org ::= ORGANIZATION file_attr_org_type 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_org",132, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // file_attr_fs ::= STATUS ID 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_fs",131, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // file_attr_assign_dd ::= DISPLAY 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 fichero.setPhysicalName("DISPLAY");        
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_assign_dd",136, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // file_attr_assign_dd ::= ID 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 fichero.setPhysicalName(getSymbolName(s)); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_assign_dd",136, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // file_attr_assign_dd ::= LITERAL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 fichero.setPhysicalName(getSymbolName(s)); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_assign_dd",136, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // file_attr_assign ::= ASSIGN file_attr_assign_dd 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_assign",130, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // file_attr_item ::= file_attr_alt 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_item",128, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // file_attr_item ::= file_attr_rel 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_item",128, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // file_attr_item ::= file_attr_key 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_item",128, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // file_attr_item ::= file_attr_org 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_item",128, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // file_attr_item ::= file_attr_common 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_item",128, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // file_attr_item ::= file_attr_access 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_item",128, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // file_attr_item ::= file_attr_fs 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_item",128, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // file_attr_item ::= file_attr_assign 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_item",128, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // file_attrs ::= file_attrs file_attr_item 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attrs",127, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // file_attrs ::= file_attr_item 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attrs",127, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // file_select ::= SELECT ID 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 fichero = new Persistence(getSymbolName(s), master);
                               module.addFile(fichero);
                               master = false; 
                               module.setFile();
                            
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_select",126, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // select_file ::= file_select file_attrs ENDP 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("select_file",123, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // select_file_mark ::= select_file 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("select_file_mark",124, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // select_file_mark ::= SDPMASTER 
            {
              Object RESULT =null;
		 master = true; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("select_file_mark",124, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // select_files ::= select_files select_file_mark 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("select_files",122, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // select_files ::= select_file_mark 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("select_files",122, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // select_file_list ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("select_file_list",125, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // select_file_list ::= select_files 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("select_file_list",125, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // file_control_header ::= FILE_CONTROL ENDP 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_control_header",121, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // file_control_decl ::= file_control_header select_file_list 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_control_decl",120, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // sect_io_bloques ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("sect_io_bloques",119, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // sect_io_bloques ::= file_control_decl 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("sect_io_bloques",119, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // sect_io_header ::= IO_SECTION NT$1 ENDP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("sect_io_header",118, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$1 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
 code.setSection(CDG.SECT_IO, s.line); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("NT$1",195, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // section_io ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("section_io",117, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // section_io ::= sect_io_header sect_io_bloques 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("section_io",117, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // conf_sect_repo_item ::= CLASS ID opt_is ID 
            {
              Option RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol w1 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w2 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = sf.option(w, w1.add(w2)); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_repo_item",114, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // conf_sect_repo ::= conf_sect_repo conf_sect_repo_item 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int o1left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o1 = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o.add(o1); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_repo",113, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // conf_sect_repo ::= conf_sect_repo_item 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o;         
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_repo",113, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // opt_conf_sect_repo ::= 
            {
              Option RESULT =null;
		 RESULT = null; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_conf_sect_repo",112, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // opt_conf_sect_repo ::= conf_sect_repo 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o;    
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_conf_sect_repo",112, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // opt_currency_picture ::= 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_currency_picture",179, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // opt_currency_picture ::= opt_with PICTURE SYMBOL ID 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_currency_picture",179, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // opt_symbolic_in ::= 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_symbolic_in",191, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // opt_symbolic_in ::= IN ID 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_symbolic_in",191, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // alphabet_name ::= LITERAL 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("alphabet_name",104, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // alphabet_name ::= EBCDIC 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("alphabet_name",104, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // alphabet_name ::= NATIVE 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("alphabet_name",104, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // alphabet_name ::= STANDARD 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("alphabet_name",104, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // clause_on_off_item ::= on_off opt_status opt_is ID 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("clause_on_off_item",164, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // clause_on_off ::= clause_on_off clause_on_off_item 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("clause_on_off",163, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // clause_on_off ::= clause_on_off_item 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("clause_on_off",163, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // opt_on_off ::= 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_on_off",175, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // opt_on_off ::= clause_on_off 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_on_off",175, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // opt_is_on_off ::= 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_is_on_off",174, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // opt_is_on_off ::= on_off 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_is_on_off",174, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // opt_is_on_off ::= is 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_is_on_off",174, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // special_names_xml ::= XMLSCHEMA ID opt_is ID 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w1 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = sf.option(o, w.add(w1));      
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("special_names_xml",103, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // special_names_decimal ::= DECIMALPOINT opt_is COMMA 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = sf.option(o, w);              
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("special_names_decimal",102, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // special_names_currency ::= CURRENCY opt_sign opt_is ID opt_currency_picture 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-4)).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-4)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w1 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = sf.option(o, w.add(w1));      
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("special_names_currency",101, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-4)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // special_names_class ::= CLASS ID opt_is ID 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w1 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = sf.option(o, w.add(w1));      
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("special_names_class",100, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // special_names_symbolic ::= SYMBOLIC opt_characters ID opt_symbolic_in 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w1 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = sf.option(o, w.add(w1));      
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("special_names_symbolic",99, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // special_names_alphabet ::= ALPHABET ID opt_is alphabet_name 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w1 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = sf.option(o, w.add(w1));      
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("special_names_alphabet",98, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // special_names_id ::= ID opt_is_on_off ID opt_on_off 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol w1 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w2 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = sf.option(o, w.add(w1,w2));   
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("special_names_id",97, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // conf_sect_names_item ::= special_names_xml 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_names_item",96, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // conf_sect_names_item ::= special_names_decimal 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_names_item",96, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // conf_sect_names_item ::= special_names_currency 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_names_item",96, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // conf_sect_names_item ::= special_names_class 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_names_item",96, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // conf_sect_names_item ::= special_names_symbolic 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_names_item",96, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // conf_sect_names_item ::= special_names_alphabet 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_names_item",96, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // conf_sect_names_item ::= special_names_id 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_names_item",96, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // conf_sect_names ::= conf_sect_names conf_sect_names_item 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int o1left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o1 = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o.add(o1); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_names",95, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // conf_sect_names ::= conf_sect_names_item 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_names",95, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // opt_conf_sect_names ::= 
            {
              Option RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_conf_sect_names",94, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // opt_conf_sect_names ::= conf_sect_names 
            {
              Option RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option w = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_conf_sect_names",94, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // conf_sect_entry_item ::= SEGMENT opt_is NUMERO 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w1 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w.add(w1); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_entry_item",111, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // conf_sect_entry_item ::= opt_program opt_collating SEQUENCE ID 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w1 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w.add(w1); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_entry_item",111, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // conf_sect_entry ::= conf_sect_entry conf_sect_entry_item 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w1 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w.add(w1); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_entry",110, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // conf_sect_entry ::= conf_sect_entry_item 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;         
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_entry",110, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // opt_conf_sect_entry ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = null; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_conf_sect_entry",108, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // opt_conf_sect_entry ::= conf_sect_entry 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;   
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_conf_sect_entry",108, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // conf_sect_mem_type ::= MODULES 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_mem_type",109, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // conf_sect_mem_type ::= CHARACTERS 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_mem_type",109, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // conf_sect_mem_type ::= WORDS 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_mem_type",109, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // opt_conf_sect_mem ::= MEMORY opt_size ID conf_sect_mem_type 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol w1 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol w2 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int w3left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int w3right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w3 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w.add(w1, w2, w3); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_conf_sect_mem",107, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // opt_conf_sect_obj ::= ID opt_conf_sect_mem opt_conf_sect_entry ENDP 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol w1 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol w2 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		 RESULT = w.add(w1, w2); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_conf_sect_obj",106, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // opt_conf_sect_src ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = null;              
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_conf_sect_src",105, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // opt_conf_sect_src ::= ID opt_with opt_debugging ENDP 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol w1 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol w2 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int w3left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int w3right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w3 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w.add(w1, w2, w3); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_conf_sect_src",105, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // configuration_repo ::= REPOSITORY ENDP opt_conf_sect_repo 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option w = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = sf.option(o, w); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("configuration_repo",93, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // configuration_names ::= SPECIAL_NAMES ENDP opt_conf_sect_names 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option w = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = sf.option(o, w); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("configuration_names",92, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // configuration_object ::= OBJECT_COMPUTER ENDP opt_conf_sect_obj 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = sf.option(o, w); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("configuration_object",91, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // configuration_source ::= SOURCE_COMPUTER ENDP opt_conf_sect_src 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = sf.option(o, w); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("configuration_source",90, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // configuration_item ::= configuration_repo 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("configuration_item",89, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // configuration_item ::= configuration_names 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("configuration_item",89, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // configuration_item ::= configuration_object 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("configuration_item",89, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // configuration_item ::= configuration_source 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("configuration_item",89, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // configuration_data ::= configuration_data configuration_item 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currStmt.addOption(o); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("configuration_data",88, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // configuration_data ::= configuration_item 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currStmt.addOption(o); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("configuration_data",88, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // opt_configuration_data ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_configuration_data",87, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // opt_configuration_data ::= configuration_data 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_configuration_data",87, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // conf_sect_header ::= CONF_SECTION ENDP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		 currStmt = new StmtGral(s);
                                            code.setSection(CDG.SECT_CONF, s.line); 
                                         
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_header",86, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // configuration_section ::= conf_sect_header opt_configuration_data 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("configuration_section",85, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // opt_io_section ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_io_section",115, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // opt_io_section ::= io_section 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_io_section",115, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // opt_configuration_section ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_configuration_section",84, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // opt_configuration_section ::= configuration_section 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_configuration_section",84, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // env_div_sections ::= opt_configuration_section opt_io_section 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("env_div_sections",27, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // env_div_header ::= DIV_ENV ENDP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol p = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currStmt = new StmtGral(s); 
                                              currBlock = new BlockCode(s, p); 
                                              code.setDivision(CDG.SECT_ENV, s.line); 
                                           
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("env_div_header",25, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // environment_division ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("environment_division",0, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // environment_division ::= env_div_header env_div_sections 
            {
              Object RESULT =null;
		 /* rules.checkDivision(currBlock); */ 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("environment_division",0, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // comment_entry_line ::= ENDP 
            {
              SDPSymbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol p = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = code.removePoint(p); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("comment_entry_line",24, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comment_entry_line ::= IDTOKEN 
            {
              SDPSymbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = code.removePoint(s); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("comment_entry_line",24, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comment_entry ::= comment_entry comment_entry_line 
            {
              SDPSymbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol a = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = a.add(l);         
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("comment_entry",23, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // comment_entry ::= IDTOKEN 
            {
              SDPSymbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = code.removePoint(l); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("comment_entry",23, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comment_entry_opt ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = null; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("comment_entry_opt",22, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comment_entry_opt ::= comment_entry 
            {
              SDPSymbol RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o;    
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("comment_entry_opt",22, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // pgmid_endp ::= 
            {
              Object RESULT =null;
		 RESULT = null;  
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pgmid_endp",10, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // pgmid_endp ::= ENDP 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;     
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pgmid_endp",10, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ident_endp ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = null;  
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_endp",9, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ident_endp ::= ENDP 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;     
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_endp",9, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ident_opt_word ::= DATEC 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_opt_word",8, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ident_opt_word ::= DATEW 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_opt_word",8, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ident_opt_word ::= SECURITY 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_opt_word",8, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ident_opt_word ::= INSTALLATION 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_opt_word",8, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ident_opt_word ::= AUTHOR 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_opt_word",8, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ident_opt ::= ident_opt_word ident_endp comment_entry_opt 
            {
              Option RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol p = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = new Option(w, o); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_opt",7, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ident_option ::= ident_opt 
            {
              Option RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option s = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_option",6, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ident_options ::= ident_options ident_option 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option s = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currStmt.addOption(s); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_options",5, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ident_options ::= ident_option 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option s = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currStmt.addOption(s); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_options",5, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ident_options_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_options_opt",4, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ident_options_opt ::= ident_options 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_options_opt",4, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // programId_type ::= INITIAL 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("programId_type",21, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // programId_type ::= COMMON 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("programId_type",21, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // programId_type ::= RECURSIVE 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("programId_type",21, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // programId_type_opt ::= 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("programId_type_opt",20, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // programId_type_opt ::= programId_type 
            {
              SDPSymbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol t = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 rules.checkProgramType(t); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("programId_type_opt",20, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // programId_name ::= PGMNAME 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("programId_name",19, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // programId_verb ::= PGMID 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("programId_verb",18, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // programId ::= programId_verb ident_endp programId_name programId_type_opt pgmid_endp 
            {
              Option RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-4)).right;
		SDPSymbol v = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).right;
		SDPSymbol p = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol n = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currStmt.addOption(new Option(v, n)); 
                 rules.checkIdentificationVerbEndP(v,p);
                 rules.checkProgramIDEndP(n,i);  
              
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("programId",17, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-4)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ident_type_method ::= METHODID 
            {
              Object RESULT =null;
		 notSupportedException(MSG.SUPPORT_METHOD);  
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_type_method",16, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ident_type_object ::= OBJECTID 
            {
              Object RESULT =null;
		 notSupportedException(MSG.SUPPORT_OBJECT);  
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_type_object",15, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ident_type_factory ::= FACTORYID 
            {
              Object RESULT =null;
		 notSupportedException(MSG.SUPPORT_FACTORY); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_type_factory",14, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ident_type_class ::= CLASSID 
            {
              Object RESULT =null;
		 notSupportedException(MSG.SUPPORT_CLASS);   
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_type_class",13, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ident_type_program ::= programId 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_type_program",12, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ident_type ::= ident_type_method 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_type",11, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ident_type ::= ident_type_object 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_type",11, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ident_type ::= ident_type_factory 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_type",11, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ident_type ::= ident_type_class 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_type",11, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ident_type ::= ident_type_program 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_type",11, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ident_header ::= DIV_ID ENDP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol p = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currStmt = new StmtGral(s); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_header",3, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // identification_division ::= ident_header ident_type ident_options_opt 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("identification_division",2, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // module ::= identification_division NT$0 environment_division data_division 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("module",42, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
 rules.checkIdentification(currStmt); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("NT$0",194, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= cobolData EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		StmtCobol start_val = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		RESULT = start_val;
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ZCDParser$parser.done_parsing();
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // cobolData ::= module 
            {
              StmtCobol RESULT =null;
		 RESULT = null; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("cobolData",41, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

