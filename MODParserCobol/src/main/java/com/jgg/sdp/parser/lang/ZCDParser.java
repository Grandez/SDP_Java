
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Feb 16 15:13:00 CET 2018
//----------------------------------------------------

package com.jgg.sdp.parser.lang;

import java_cup.runtime.*;
import com.jgg.sdp.common.ctes.*;
import com.jgg.sdp.common.config.*;
import com.jgg.sdp.module.base.*;
import com.jgg.sdp.module.items.*;
import com.jgg.sdp.module.factorias.*;
import com.jgg.sdp.parser.base.*;
import com.jgg.sdp.parser.code.*;
import com.jgg.sdp.parser.stmt.*;
import com.jgg.sdp.blocks.stmt.*;
import com.jgg.sdp.parser.symbols.*;
import com.jgg.sdp.rules.components.RulesData;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Feb 16 15:13:00 CET 2018
  */
public class ZCDParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ZCDParser() {super();}

  /** Constructor which sets the default scanner. */
  public ZCDParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ZCDParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0192\000\002\120\003\000\002\002\004\000\002\121" +
    "\005\000\002\004\005\000\002\005\004\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\016\003\000\002\017\003\000\002" +
    "\020\003\000\002\021\003\000\002\022\003\000\002\023" +
    "\007\000\002\024\003\000\002\025\003\000\002\026\003" +
    "\000\002\026\002\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\006\003\000\002\006\002\000\002" +
    "\007\003\000\002\007\004\000\002\010\003\000\002\011" +
    "\005\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\013\003\000" +
    "\002\013\002\000\002\014\003\000\002\014\002\000\002" +
    "\030\003\000\002\030\002\000\002\031\003\000\002\031" +
    "\004\000\002\032\003\000\002\032\003\000\002\002\004" +
    "\000\002\002\002\000\002\033\004\000\002\035\004\000" +
    "\002\036\003\000\002\036\002\000\002\075\003\000\002" +
    "\075\002\000\002\037\004\000\002\040\004\000\002\041" +
    "\003\000\002\041\002\000\002\042\003\000\002\042\004" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\044\005\000\002\045\005\000\002" +
    "\046\005\000\002\047\005\000\002\063\006\000\002\063" +
    "\002\000\002\064\006\000\002\064\002\000\002\065\006" +
    "\000\002\065\002\000\002\067\003\000\002\067\003\000" +
    "\002\067\003\000\002\066\003\000\002\066\002\000\002" +
    "\070\003\000\002\070\004\000\002\071\006\000\002\071" +
    "\005\000\002\050\003\000\002\050\002\000\002\051\004" +
    "\000\002\051\005\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\003\000\002\052\003\000\002" +
    "\052\003\000\002\052\003\000\002\053\006\000\002\054" +
    "\006\000\002\055\006\000\002\056\006\000\002\057\007" +
    "\000\002\060\005\000\002\061\006\000\002\267\003\000" +
    "\002\267\003\000\002\267\002\000\002\270\003\000\002" +
    "\270\002\000\002\253\003\000\002\253\004\000\002\254" +
    "\006\000\002\062\003\000\002\062\003\000\002\062\003" +
    "\000\002\062\003\000\002\320\004\000\002\320\002\000" +
    "\002\275\006\000\002\275\002\000\002\072\003\000\002" +
    "\072\002\000\002\073\003\000\002\073\004\000\002\074" +
    "\006\000\002\076\004\000\002\077\004\000\002\100\003" +
    "\000\002\100\002\000\002\101\004\000\002\102\004\000" +
    "\002\176\003\000\002\176\002\000\002\173\003\000\002" +
    "\173\004\000\002\175\003\000\002\175\003\000\002\174" +
    "\006\000\002\177\005\000\002\201\006\000\002\207\004" +
    "\000\002\210\003\000\002\210\003\000\002\210\003\000" +
    "\002\203\005\000\002\203\002\000\002\202\003\000\002" +
    "\202\003\000\002\202\003\000\002\202\004\000\002\202" +
    "\002\000\002\204\003\000\002\204\002\000\002\205\003" +
    "\000\002\205\004\000\002\206\003\000\002\206\003\000" +
    "\002\206\003\000\002\206\003\000\002\206\003\000\002" +
    "\206\003\000\002\206\003\000\002\212\005\000\002\213" +
    "\003\000\002\213\003\000\002\215\005\000\002\216\003" +
    "\000\002\216\003\000\002\221\006\000\002\222\003\000" +
    "\002\222\003\000\002\222\003\000\002\223\006\000\002" +
    "\223\002\000\002\214\004\000\002\211\005\000\002\211" +
    "\004\000\002\220\010\000\002\217\004\000\002\003\004" +
    "\000\002\003\002\000\002\034\004\000\002\103\006\000" +
    "\002\104\004\000\002\104\002\000\002\323\002\000\002" +
    "\105\005\000\002\106\003\000\002\106\002\000\002\225" +
    "\003\000\002\225\004\000\002\224\004\000\002\251\006" +
    "\000\002\252\003\000\002\252\003\000\002\230\003\000" +
    "\002\231\003\000\002\231\004\000\002\232\003\000\002" +
    "\232\003\000\002\232\003\000\002\232\003\000\002\232" +
    "\003\000\002\232\003\000\002\232\003\000\002\233\005" +
    "\000\002\234\003\000\002\234\004\000\002\242\004\000" +
    "\002\243\003\000\002\243\003\000\002\243\003\000\002" +
    "\227\004\000\002\244\005\000\002\245\003\000\002\245" +
    "\002\000\002\235\004\000\002\236\003\000\002\236\003" +
    "\000\002\237\004\000\002\241\004\000\002\241\002\000" +
    "\002\240\003\000\002\240\003\000\002\226\003\000\002" +
    "\226\002\000\002\247\004\000\002\246\003\000\002\246" +
    "\003\000\002\250\004\000\002\107\004\000\002\107\002" +
    "\000\002\324\002\000\002\110\005\000\002\111\003\000" +
    "\002\111\002\000\002\112\004\000\002\112\002\000\002" +
    "\325\002\000\002\113\005\000\002\114\003\000\002\114" +
    "\002\000\002\115\004\000\002\115\002\000\002\326\002" +
    "\000\002\116\005\000\002\117\003\000\002\117\002\000" +
    "\002\141\003\000\002\141\004\000\002\142\003\000\002" +
    "\142\003\000\002\142\003\000\002\142\003\000\002\142" +
    "\003\000\002\142\003\000\002\143\005\000\002\144\005" +
    "\000\002\145\005\000\002\146\005\000\002\147\004\000" +
    "\002\150\004\000\002\151\004\000\002\152\004\000\002" +
    "\136\003\000\002\136\003\000\002\136\003\000\002\136" +
    "\003\000\002\137\003\000\002\137\002\000\002\154\003" +
    "\000\002\154\002\000\002\153\003\000\002\153\004\000" +
    "\002\156\003\000\002\156\003\000\002\156\003\000\002" +
    "\156\003\000\002\156\003\000\002\156\003\000\002\156" +
    "\003\000\002\156\003\000\002\156\003\000\002\157\004" +
    "\000\002\160\005\000\002\161\004\000\002\161\002\000" +
    "\002\124\006\000\002\125\003\000\002\126\004\000\002" +
    "\126\002\000\002\127\003\000\002\127\003\000\002\130" +
    "\004\000\002\130\002\000\002\135\004\000\002\131\004" +
    "\000\002\132\003\000\002\132\004\000\002\133\003\000" +
    "\002\133\003\000\002\133\003\000\002\155\004\000\002" +
    "\134\003\000\002\134\003\000\002\134\003\000\002\134" +
    "\003\000\002\134\003\000\002\134\003\000\002\134\003" +
    "\000\002\134\004\000\002\134\003\000\002\172\003\000" +
    "\002\172\003\000\002\172\003\000\002\172\003\000\002" +
    "\172\003\000\002\172\003\000\002\162\004\000\002\163" +
    "\003\000\002\163\004\000\002\164\003\000\002\164\003" +
    "\000\002\164\003\000\002\164\003\000\002\164\003\000" +
    "\002\164\003\000\002\164\003\000\002\164\003\000\002" +
    "\164\003\000\002\164\003\000\002\166\005\000\002\167" +
    "\003\000\002\167\003\000\002\170\003\000\002\170\002" +
    "\000\002\171\004\000\002\165\003\000\002\165\002\000" +
    "\002\123\004\000\002\140\003\000\002\140\003\000\002" +
    "\140\004\000\002\140\003\000\002\140\004\000\002\264" +
    "\003\000\002\122\003\000\002\122\002\000\002\265\003" +
    "\000\002\265\003\000\002\265\003\000\002\265\003\000" +
    "\002\265\003\000\002\265\003\000\002\266\003\000\002" +
    "\266\003\000\002\266\003\000\002\266\003\000\002\266" +
    "\003\000\002\255\005\000\002\260\004\000\002\261\003" +
    "\000\002\261\004\000\002\262\004\000\002\256\003\000" +
    "\002\256\002\000\002\257\004\000\002\263\003\000\002" +
    "\263\003\000\002\271\003\000\002\271\003\000\002\272" +
    "\003\000\002\272\002\000\002\273\003\000\002\273\002" +
    "\000\002\276\003\000\002\276\002\000\002\300\004\000" +
    "\002\300\002\000\002\301\003\000\002\301\002\000\002" +
    "\302\003\000\002\302\002\000\002\304\003\000\002\304" +
    "\002\000\002\305\003\000\002\305\002\000\002\307\003" +
    "\000\002\307\002\000\002\306\003\000\002\306\002\000" +
    "\002\311\003\000\002\311\002\000\002\312\003\000\002" +
    "\312\002\000\002\314\003\000\002\314\002\000\002\316" +
    "\003\000\002\316\002\000\002\321\003\000\002\321\002" +
    "\000\002\277\004\000\002\303\003\000\002\313\003\000" +
    "\002\315\003\000\002\317\003\000\002\322\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0205\000\004\004\010\001\002\000\004\005\066\001" +
    "\uffd4\000\002\001\001\000\014\033\024\034\026\035\016" +
    "\036\021\037\027\001\002\000\004\002\012\001\002\000" +
    "\004\207\011\001\002\000\002\001\ufffd\000\002\001\000" +
    "\000\014\044\044\045\050\046\047\047\043\050\053\001" +
    "\uffe9\000\004\207\031\001\uffde\000\002\001\ufffb\000\002" +
    "\001\ufff5\000\002\001\ufff7\000\002\001\ufff8\000\002\001" +
    "\ufff4\000\002\001\ufffc\000\002\001\ufffa\000\002\001\ufff1" +
    "\000\002\001\ufff9\000\002\001\ufff6\000\002\001\ufff3\000" +
    "\004\011\032\001\002\000\002\001\uffdf\000\002\001\ufff0" +
    "\000\010\040\040\041\035\042\034\001\uffee\000\002\001" +
    "\uffeb\000\002\001\uffec\000\002\001\uffef\000\004\207\042" +
    "\001\uffdc\000\002\001\uffed\000\002\001\ufff2\000\002\001" +
    "\uffdd\000\002\001\uffe3\000\002\001\uffe4\000\002\001\ufffe" +
    "\000\002\001\uffe6\000\002\001\uffe0\000\002\001\uffe1\000" +
    "\014\044\044\045\050\046\047\047\043\050\053\001\uffea" +
    "\000\004\207\031\001\uffde\000\002\001\uffe2\000\002\001" +
    "\uffe8\000\004\010\057\001\uffda\000\006\010\061\207\063" +
    "\001\uffdb\000\002\001\uffd9\000\002\001\uffe5\000\002\001" +
    "\uffd7\000\002\001\uffd8\000\002\001\uffd6\000\002\001\uffe7" +
    "\000\004\026\u0124\001\uffd0\000\004\207\u0121\001\002\000" +
    "\004\006\071\001\uff52\000\004\021\077\001\uff4e\000\004" +
    "\207\073\001\002\000\002\001\uffff\000\002\001\uff51\000" +
    "\004\022\u010d\001\uff1f\000\002\001\uff53\000\006\103\105" +
    "\127\107\001\uff4a\000\002\001\uff4d\000\004\207\101\001" +
    "\002\000\002\001\uff4c\000\016\013\210\014\174\015\206" +
    "\016\201\215\203\216\170\001\uff25\000\002\001\uff4f\000" +
    "\002\001\uff49\000\002\001\uff45\000\006\103\105\127\107" +
    "\001\uff4b\000\002\001\uff44\000\004\007\111\001\002\000" +
    "\020\073\112\075\115\110\122\111\113\121\116\123\121" +
    "\161\126\001\002\000\004\012\164\001\002\000\006\012" +
    "\142\170\147\001\002\000\002\001\uff3d\000\006\122\141" +
    "\123\137\001\002\000\010\007\153\152\154\166\155\001" +
    "\002\000\002\001\uff42\000\002\001\uff3f\000\010\012\142" +
    "\161\126\170\147\001\002\000\006\122\141\123\137\001" +
    "\002\000\004\207\136\001\002\000\002\001\uff3a\000\002" +
    "\001\uff3b\000\004\007\134\001\002\000\002\001\uff40\000" +
    "\002\001\uff3e\000\002\001\uff3c\000\020\073\112\075\115" +
    "\110\122\111\113\121\116\123\121\161\126\001\uff43\000" +
    "\002\001\uff41\000\002\001\ufead\000\002\001\uff21\000\002" +
    "\001\uff46\000\002\001\uff28\000\002\001\uff32\000\002\001" +
    "\uff27\000\002\001\uff23\000\002\001\uff2e\000\004\214\150" +
    "\001\uff29\000\002\001\uff2c\000\002\001\uff2d\000\002\001" +
    "\uff22\000\006\012\142\170\147\001\002\000\002\001\uff2b" +
    "\000\002\001\uff2a\000\002\001\uff35\000\002\001\uff33\000" +
    "\002\001\uff34\000\002\001\uff36\000\004\007\160\001\002" +
    "\000\002\001\uff38\000\004\007\162\001\uff39\000\002\001" +
    "\uff37\000\002\001\uff24\000\004\122\166\001\uff2f\000\002" +
    "\001\uff31\000\002\001\uff30\000\002\001\uff48\000\002\001" +
    "\uff07\000\002\001\uff47\000\002\001\uff0a\000\004\157\u0104" +
    "\001\002\000\004\007\u0103\001\002\000\002\001\uff0e\000" +
    "\004\154\374\001\002\000\056\105\243\106\262\140\223" +
    "\141\233\142\224\143\261\144\257\145\256\146\254\147" +
    "\253\150\251\153\246\154\242\155\230\156\235\157\225" +
    "\160\221\162\231\163\250\174\260\177\236\206\252\001" +
    "\ufef7\000\002\001\uff0b\000\004\007\370\001\002\000\056" +
    "\105\243\106\262\140\223\141\233\142\224\143\261\144" +
    "\257\145\256\146\254\147\253\150\251\153\246\154\242" +
    "\155\230\156\235\157\225\160\221\162\231\163\250\174" +
    "\260\177\236\206\252\001\ufef7\000\002\001\uff08\000\002" +
    "\001\uff0c\000\002\001\uff09\000\004\007\220\001\002\000" +
    "\016\013\210\014\174\015\206\016\201\215\203\216\170" +
    "\001\uff26\000\012\007\211\152\212\164\214\165\216\001" +
    "\ufef9\000\002\001\ufefe\000\002\001\ufefa\000\002\001\ufefb" +
    "\000\002\001\ufefd\000\002\001\uff02\000\002\001\ufefc\000" +
    "\002\001\uff0d\000\002\001\uff00\000\006\012\356\170\360" +
    "\001\002\000\002\001\ufef3\000\002\001\ufed3\000\002\001" +
    "\ufed1\000\036\012\337\013\347\017\336\020\332\151\344" +
    "\164\330\170\333\171\327\176\340\200\341\201\331\202" +
    "\342\203\345\204\334\001\002\000\056\105\243\106\262" +
    "\140\223\141\233\142\224\143\261\144\257\145\256\146" +
    "\254\147\253\150\251\153\246\154\242\155\230\156\235" +
    "\157\225\160\221\162\231\163\250\174\260\177\236\206" +
    "\252\001\ufef8\000\002\001\ufef1\000\002\001\ufed5\000\010" +
    "\007\134\152\267\165\272\001\002\000\002\001\ufef4\000" +
    "\004\172\324\001\002\000\002\001\ufef2\000\026\012\312" +
    "\164\305\165\316\166\304\167\306\170\307\171\302\172" +
    "\311\173\314\212\310\001\002\000\036\106\262\140\223" +
    "\141\233\142\224\143\261\144\257\145\256\146\254\147" +
    "\253\150\251\155\230\163\250\174\260\206\252\001\002" +
    "\000\002\001\ufeed\000\002\001\ufeef\000\002\001\ufef0\000" +
    "\012\007\211\152\212\164\214\165\216\001\ufef9\000\010" +
    "\007\134\152\267\165\272\001\002\000\002\001\ufeee\000" +
    "\002\001\ufecf\000\012\007\211\152\212\164\214\165\216" +
    "\001\ufef9\000\004\207\265\001\ufeab\000\002\001\ufed7\000" +
    "\002\001\ufec9\000\002\001\ufed4\000\002\001\ufeca\000\002" +
    "\001\ufecb\000\002\001\ufeec\000\002\001\ufecc\000\002\001" +
    "\ufecd\000\002\001\ufed2\000\002\001\ufece\000\002\001\ufed6" +
    "\000\002\001\ufef6\000\002\001\uff06\000\002\001\ufeac\000" +
    "\002\001\ufeeb\000\002\001\ufed9\000\002\001\ufedd\000\002" +
    "\001\ufedb\000\002\001\ufeda\000\010\007\134\152\267\165" +
    "\272\001\ufede\000\002\001\ufedc\000\004\210\276\001\ufee8" +
    "\000\012\007\211\152\212\164\214\165\216\001\ufef9\000" +
    "\002\001\ufeea\000\002\001\ufee9\000\002\001\ufed8\000\002" +
    "\001\ufec2\000\026\012\312\164\305\165\316\166\304\167" +
    "\306\170\307\171\302\172\311\173\314\212\310\001\ufec8" +
    "\000\002\001\ufec1\000\002\001\ufec5\000\002\001\ufec0\000" +
    "\002\001\ufec3\000\006\012\317\170\321\001\002\000\002" +
    "\001\ufebe\000\002\001\ufebd\000\002\001\ufec7\000\002\001" +
    "\ufebf\000\002\001\ufebc\000\002\001\ufec4\000\002\001\ufeba" +
    "\000\004\213\322\001\002\000\002\001\ufeb9\000\002\001" +
    "\ufebb\000\002\001\ufec6\000\002\001\ufed0\000\010\007\134" +
    "\152\267\165\272\001\ufedf\000\002\001\ufef5\000\004\166" +
    "\351\001\ufeb7\000\036\012\337\013\347\017\336\020\332" +
    "\151\344\164\330\170\333\171\327\176\340\200\341\201" +
    "\331\202\342\203\345\204\334\001\002\000\002\001\ufea8" +
    "\000\002\001\ufea3\000\002\001\ufeaf\000\002\001\ufea5\000" +
    "\002\001\ufeb3\000\002\001\ufea0\000\002\001\ufea2\000\002" +
    "\001\ufeaa\000\002\001\ufea9\000\002\001\ufea7\000\002\001" +
    "\ufeb2\000\002\001\ufeb1\000\002\001\ufea6\000\002\001\ufea4" +
    "\000\002\001\ufea1\000\002\001\ufeae\000\004\212\310\001" +
    "\ufeb4\000\002\001\ufeb8\000\002\001\ufeb0\000\002\001\ufeb5" +
    "\000\002\001\ufeb6\000\002\001\ufee3\000\004\214\362\001" +
    "\ufee4\000\002\001\ufee2\000\002\001\ufee6\000\006\012\356" +
    "\170\360\001\002\000\004\161\365\001\ufee0\000\002\001" +
    "\ufee7\000\004\007\134\001\002\000\002\001\ufee1\000\002" +
    "\001\ufee5\000\002\001\ufeff\000\004\207\372\001\002\000" +
    "\002\001\uff04\000\004\207\u0102\001\002\000\004\007\375" +
    "\001\002\000\004\210\376\001\ufe99\000\026\012\337\013" +
    "\347\017\336\020\332\176\340\200\341\201\331\202\342" +
    "\203\345\204\334\001\002\000\002\001\ufe9f\000\002\001" +
    "\ufe9a\000\002\001\ufe98\000\002\001\uff05\000\002\001\uff01" +
    "\000\026\012\337\013\347\017\336\020\332\176\340\200" +
    "\341\201\331\202\342\203\345\204\334\001\002\000\004" +
    "\207\u0106\001\002\000\002\001\uff03\000\002\001\ufe9d\000" +
    "\004\210\376\001\ufe99\000\026\012\337\013\347\017\336" +
    "\020\332\176\340\200\341\201\331\202\342\203\345\204" +
    "\334\001\ufe9e\000\002\001\ufe9c\000\002\001\ufe9b\000\004" +
    "\023\u0113\001\uff19\000\002\001\uff1e\000\016\013\210\014" +
    "\174\015\206\016\201\215\203\216\170\001\uff1b\000\002" +
    "\001\uff20\000\016\013\210\014\174\015\206\016\201\215" +
    "\203\216\170\001\uff1c\000\004\207\u0112\001\002\000\002" +
    "\001\uff1d\000\002\001\uff18\000\004\024\u011a\001\uff13\000" +
    "\016\013\210\014\174\015\206\016\201\215\203\216\170" +
    "\001\uff15\000\002\001\uff1a\000\016\013\210\014\174\015" +
    "\206\016\201\215\203\216\170\001\uff16\000\002\001\uff50" +
    "\000\016\013\210\014\174\015\206\016\201\215\203\216" +
    "\170\001\uff0f\000\002\001\uff12\000\004\207\u011c\001\002" +
    "\000\002\001\uff11\000\002\001\uff14\000\016\013\210\014" +
    "\174\015\206\016\201\215\203\216\170\001\uff10\000\004" +
    "\207\u0120\001\002\000\002\001\uff17\000\002\001\uffd3\000" +
    "\012\030\u0193\031\u0192\032\u0194\125\u018e\001\uffca\000\002" +
    "\001\uffd5\000\004\207\u018c\001\002\000\002\001\uffd1\000" +
    "\004\027\u0129\001\uffce\000\002\001\uffcf\000\004\025\u012e" +
    "\001\uff86\000\004\207\u012b\001\002\000\002\001\uffd2\000" +
    "\002\001\uff88\000\002\001\uff89\000\006\131\u0136\217\u0133" +
    "\001\uff82\000\004\207\u0130\001\002\000\002\001\uff87\000" +
    "\002\001\uff84\000\002\001\uff85\000\002\001\uff81\000\002" +
    "\001\uff7f\000\002\001\uff7e\000\004\072\u013e\001\002\000" +
    "\004\113\u0139\001\ufe82\000\006\131\u0136\217\u0133\001\uff83" +
    "\000\002\001\uff80\000\002\001\ufe83\000\004\007\u013b\001" +
    "\002\000\002\001\uff7c\000\004\126\u0180\001\uff75\000\020" +
    "\066\u0147\071\u0149\104\u0146\115\u0144\116\u014d\123\u014c\132" +
    "\u0145\001\uff6e\000\010\007\u0140\020\u013f\206\u0142\001\002" +
    "\000\002\001\uff79\000\002\001\uff78\000\002\001\uff7a\000" +
    "\002\001\uff77\000\002\001\uff65\000\004\053\u017a\001\ufe90" +
    "\000\004\007\u0179\001\002\000\004\132\u0177\001\002\000" +
    "\004\057\u016d\001\ufe84\000\002\001\uff6d\000\004\123\u015f" +
    "\001\ufe7e\000\002\001\uff69\000\002\001\uff68\000\006\007" +
    "\u015a\077\u015b\001\002\000\006\007\u0157\020\u0158\001\002" +
    "\000\002\001\uff6a\000\002\001\uff67\000\002\001\uff6b\000" +
    "\004\207\u0156\001\002\000\020\066\u0147\071\u0149\104\u0146" +
    "\115\u0144\116\u014d\123\u014c\132\u0145\001\002\000\002\001" +
    "\uff66\000\002\001\uff6f\000\002\001\uff6c\000\002\001\uff7d" +
    "\000\002\001\ufe96\000\002\001\ufe97\000\002\001\uff58\000" +
    "\002\001\uff54\000\006\007\u015c\134\u015d\001\002\000\002" +
    "\001\uff5f\000\002\001\uff60\000\002\001\uff61\000\002\001" +
    "\ufe7f\000\004\107\u0161\001\ufe86\000\002\001\ufe87\000\004" +
    "\061\u0165\001\ufe88\000\002\001\ufe89\000\006\007\u0157\020" +
    "\u0158\001\002\000\002\001\ufe74\000\006\207\ufe8c\211\u0168" +
    "\001\ufe76\000\004\100\u016b\001\002\000\002\001\ufe70\000" +
    "\002\001\uff55\000\002\001\ufe77\000\002\001\ufe8d\000\010" +
    "\101\u016e\120\u016f\130\u0170\001\002\000\002\001\ufe85\000" +
    "\002\001\uff5c\000\002\001\uff5b\000\002\001\uff5d\000\004" +
    "\124\u0173\001\uff59\000\002\001\uff5e\000\004\107\u0161\001" +
    "\ufe86\000\004\061\u0165\001\ufe88\000\006\007\u0157\020\u0158" +
    "\001\002\000\002\001\uff5a\000\004\007\u0178\001\002\000" +
    "\002\001\uff57\000\002\001\uff56\000\002\001\ufe91\000\006" +
    "\007\u017c\020\u017d\001\002\000\002\001\uff63\000\002\001" +
    "\uff62\000\002\001\uff64\000\004\114\u0184\001\ufe80\000\004" +
    "\012\u0181\001\002\000\004\067\u0182\001\ufe92\000\002\001" +
    "\ufe93\000\002\001\uff76\000\002\001\ufe81\000\012\105\u0186" +
    "\112\u0188\124\u0187\130\u018a\001\uff70\000\002\001\uff73\000" +
    "\002\001\uff72\000\004\130\u018b\001\002\000\002\001\uff7b" +
    "\000\002\001\uff74\000\002\001\uff71\000\002\001\uffcc\000" +
    "\002\001\uffc5\000\004\207\u01ff\001\002\000\002\001\uffcd" +
    "\000\002\001\uffc9\000\002\001\uffc7\000\004\207\u01f6\001" +
    "\002\000\004\207\u01b2\001\002\000\004\207\u0199\001\002" +
    "\000\002\001\uffc6\000\002\001\uffc4\000\012\030\u0193\031" +
    "\u0192\032\u0194\125\u018e\001\uffcb\000\002\001\uffc8\000\004" +
    "\007\u019a\001\uffbc\000\004\051\u019d\001\uffba\000\002\001" +
    "\uffc2\000\004\056\u01a7\001\uffb5\000\004\135\u01a0\001\ufe7a" +
    "\000\002\001\ufe7b\000\004\007\u01a1\001\002\000\002\001" +
    "\ufe72\000\010\052\u01a4\053\u01a2\054\u01a5\001\002\000\002" +
    "\001\uffb8\000\002\001\uffbb\000\002\001\uffb9\000\002\001" +
    "\uffb7\000\002\001\uffb4\000\004\061\u0165\001\ufe88\000\002" +
    "\001\002\000\004\207\u01ac\001\002\000\004\056\u01a7\001" +
    "\uffb6\000\002\001\uffb3\000\002\001\uffbd\000\004\055\u01ae" +
    "\001\002\000\004\007\u01af\001\002\000\002\001\uffb2\000" +
    "\004\012\u01b1\001\002\000\002\001\uffb1\000\020\007\u01be" +
    "\063\u01bb\070\u01bd\074\u01c0\076\u01bc\137\u01c1\205\u01c3\001" +
    "\uffaf\000\002\001\uffc1\000\002\001\uffa6\000\002\001\uffab" +
    "\000\002\001\uffa7\000\002\001\uffa9\000\002\001\uffa8\000" +
    "\002\001\uffaa\000\020\007\u01be\063\u01bb\070\u01bd\074\u01c0" +
    "\076\u01bc\137\u01c1\205\u01c3\001\uffb0\000\004\007\u01f1\001" +
    "\002\000\004\061\u0165\001\ufe88\000\004\007\u01e8\001\002" +
    "\000\010\061\u0165\064\u01d9\065\u01db\001\uff9c\000\004\207" +
    "\u01d7\001\ufe8a\000\004\136\u01ce\001\ufe7c\000\004\053\u017a" +
    "\001\ufe90\000\002\001\uffac\000\004\007\u01c4\001\002\000" +
    "\004\061\u0165\001\ufe88\000\004\007\u01c6\001\002\000\002" +
    "\001\uffa2\000\004\007\u01c8\001\002\000\004\060\u01c9\001" +
    "\uff91\000\004\007\u01cb\001\002\000\002\001\uffa3\000\002" +
    "\001\uff92\000\002\001\ufe7d\000\004\061\u0165\001\ufe88\000" +
    "\002\001\ufe73\000\004\007\u01d0\001\002\000\006\156\ufe76" +
    "\211\u0168\001\uff8f\000\004\156\u01d3\001\002\000\002\001" +
    "\uffa1\000\004\175\u01d4\001\002\000\004\007\u01d5\001\002" +
    "\000\002\001\uff90\000\002\001\uffae\000\002\001\ufe8b\000" +
    "\002\001\uff9d\000\002\001\ufe95\000\002\001\uff9e\000\002" +
    "\001\ufe94\000\004\007\u01dd\001\002\000\006\064\u01d9\065" +
    "\u01db\001\uff9a\000\004\132\u01e3\001\ufe78\000\002\001\uff99" +
    "\000\002\001\uffa5\000\006\064\u01d9\065\u01db\001\uff9b\000" +
    "\002\001\uff98\000\002\001\ufe71\000\002\001\ufe79\000\004" +
    "\061\u0165\001\ufe88\000\004\007\u01e7\001\002\000\002\001" +
    "\uff97\000\004\061\u0165\001\ufe88\000\012\020\u01ea\102\u01ed" +
    "\117\u01eb\133\u01ee\001\002\000\002\001\uff93\000\002\001" +
    "\uff95\000\002\001\uffa4\000\002\001\uff94\000\002\001\uff96" +
    "\000\004\062\u01f0\001\002\000\002\001\uffa0\000\004\061" +
    "\u0165\001\ufe88\000\004\007\u01f3\001\002\000\002\001\uff9f" +
    "\000\004\207\u01d7\001\ufe8a\000\002\001\uffad\000\004\007" +
    "\u01f7\001\uffbe\000\004\211\u0168\001\ufe76\000\002\001\uffc3" +
    "\000\004\043\u01fa\001\ufe8e\000\004\057\u01fe\001\002\000" +
    "\004\207\u01fd\001\002\000\002\001\ufe8f\000\002\001\uffbf" +
    "\000\002\001\ufe75\000\004\205\u0202\001\uff8d\000\002\001" +
    "\uff8c\000\004\205\u0202\001\uff8e\000\004\007\u0204\001\002" +
    "\000\002\001\uffc0\000\004\061\u0165\001\ufe88\000\004\007" +
    "\u0206\001\002\000\002\001\uff8a\000\002\001\uff8b" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0205\000\012\004\003\005\005\120\006\121\004\001" +
    "\001\000\006\002\066\033\064\001\001\000\002\001\001" +
    "\000\022\015\012\016\021\017\014\020\022\021\024\022" +
    "\017\023\016\024\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\006" +
    "\044\007\050\010\053\011\045\012\051\001\001\000\004" +
    "\013\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\036\027\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\063\011\045" +
    "\012\051\001\001\000\004\013\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\030\057\031\055\001\001" +
    "\000\004\032\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\035\u0122\036\u0125\037\u0124\040" +
    "\u0121\001\001\000\002\001\001\000\006\003\071\034\067" +
    "\001\001\000\010\103\074\104\073\105\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\107\u010b\110\u010d\001\001\000\002\001\001\000\014\106" +
    "\102\224\103\225\105\251\101\252\107\001\001\000\004" +
    "\323\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\141\206\142\174\143\203\144\177\145\171\146\204" +
    "\147\201\150\175\151\176\152\172\226\170\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\224\166\251\101\252\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\227\127\230\122\231\131\232\116" +
    "\233\126\235\130\242\117\244\113\247\124\250\123\001" +
    "\001\000\002\001\001\000\004\246\162\001\001\000\002" +
    "\001\001\000\004\240\156\001\001\000\004\243\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\236\142" +
    "\237\145\246\143\250\144\001\001\000\004\240\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\264\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\227\127\232\132\233\126" +
    "\235\130\242\117\244\113\247\124\250\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\241\150" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\246\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\234\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\245\164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\260\u0104\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\255\372\001\001\000" +
    "\034\123\237\124\226\131\240\134\236\135\243\153\225" +
    "\154\370\155\254\156\262\157\231\160\221\162\233\172" +
    "\244\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\123\237\124\226\131\240\134\236\135\243\153\225\154" +
    "\246\155\254\156\262\157\231\160\221\162\233\172\244" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\142\216\143\203\144\177" +
    "\145\171\146\204\147\201\150\175\151\176\152\172\001" +
    "\001\000\006\136\214\137\212\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\125\356\127\360\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\140\334" +
    "\265\345\266\342\001\001\000\030\123\237\124\226\131" +
    "\240\134\236\135\243\155\254\156\325\157\231\160\221" +
    "\162\233\172\244\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\132\324\133\267\264\270\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\163" +
    "\302\164\312\166\314\001\001\000\006\134\300\172\244" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\136\274\137\212\001\001\000\010\132\272" +
    "\133\267\264\270\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\136\265\137\212\001\001\000\004\122\263" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\133\273\264\270\001\001\000\002\001\001\000" +
    "\004\161\276\001\001\000\006\136\277\137\212\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\164\322\166\314\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\167\317\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\133\273\264\270\001\001\000\002" +
    "\001\001\000\006\170\352\171\351\001\001\000\010\140" +
    "\347\265\345\266\342\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\165\354\166\353\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\126\362\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\127\366" +
    "\001\001\000\004\130\363\001\001\000\002\001\001\000" +
    "\004\264\365\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\256\376\257\377" +
    "\001\001\000\006\265\345\266\u0100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\261\u0108\262\u0106\265\345\266" +
    "\u0107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\256\u010a\257\377\001\001\000\010\262" +
    "\u0109\265\345\266\u0107\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\112\u0113\113\u0114\001\001\000\004\324" +
    "\u0110\001\001\000\030\111\u010e\141\u010f\142\174\143\203" +
    "\144\177\145\171\146\204\147\201\150\175\151\176\152" +
    "\172\001\001\000\002\001\001\000\024\142\216\143\203" +
    "\144\177\145\171\146\204\147\201\150\175\151\176\152" +
    "\172\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\325\u011e\001\001\000\006\115\u0117\116\u0118\001\001\000" +
    "\030\114\u0115\141\u0116\142\174\143\203\144\177\145\171" +
    "\146\204\147\201\150\175\151\176\152\172\001\001\000" +
    "\002\001\001\000\024\142\216\143\203\144\177\145\171" +
    "\146\204\147\201\150\175\151\176\152\172\001\001\000" +
    "\002\001\001\000\030\117\u011c\141\u011d\142\174\143\203" +
    "\144\177\145\171\146\204\147\201\150\175\151\176\152" +
    "\172\001\001\000\004\326\u011a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\142\216\143" +
    "\203\144\177\145\171\146\204\147\201\150\175\151\176" +
    "\152\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\041\u018e\042\u0196\043\u018f\044\u0190" +
    "\045\u0194\046\u018c\047\u0195\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\075\u0129\076\u0126" +
    "\077\u0127\001\001\000\002\001\001\000\010\100\u012b\101" +
    "\u012e\102\u012c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\173\u0136\174" +
    "\u0133\175\u0131\176\u0130\177\u0134\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\201\u013c\207\u013b\001\001\000\004\307\u0139\001\001\000" +
    "\010\174\u0133\175\u0137\177\u0134\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\203\u017e\001\001\000\030\200\u0151\204\u0150\205\u0153" +
    "\206\u0147\211\u014e\212\u0149\214\u014a\215\u014d\217\u0142\220" +
    "\u0152\221\u014f\001\001\000\004\210\u0140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\273\u017a\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\305\u016b\001\001\000" +
    "\002\001\001\000\004\311\u015f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\263\u0158\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\206\u0154\211\u014e\212\u0149\214" +
    "\u014a\215\u014d\217\u0142\220\u0152\221\u014f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\216\u015d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\304\u0161\001\001\000\002\001\001\000\006\302" +
    "\u0163\303\u0162\001\001\000\002\001\001\000\004\263\u0165" +
    "\001\001\000\002\001\001\000\010\300\u0168\321\u0166\322" +
    "\u0169\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\222" +
    "\u0170\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\223\u0171\001\001\000" +
    "\002\001\001\000\004\304\u0173\001\001\000\006\302\u0174" +
    "\303\u0162\001\001\000\004\263\u0175\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\213\u017d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\306\u0184" +
    "\001\001\000\002\001\001\000\004\272\u0182\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\202\u0188\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\043\u0197\044\u0190" +
    "\045\u0194\046\u018c\047\u0195\001\001\000\002\001\001\000" +
    "\004\064\u019a\001\001\000\004\065\u019b\001\001\000\002" +
    "\001\001\000\012\066\u01a8\070\u01a9\071\u01a5\310\u01a7\001" +
    "\001\000\006\314\u019e\315\u019d\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\067\u01a2\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\302\u01af\303" +
    "\u0162\001\001\000\004\274\u01ac\001\001\000\002\001\001" +
    "\000\006\071\u01aa\310\u01a7\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\050" +
    "\u01b2\051\u01b9\052\u01be\053\u01c1\054\u01b4\055\u01b8\056\u01b6" +
    "\057\u01b7\060\u01b5\061\u01b3\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\052" +
    "\u01f3\053\u01c1\054\u01b4\055\u01b8\056\u01b6\057\u01b7\060\u01b5" +
    "\061\u01b3\001\001\000\002\001\001\000\006\302\u01ee\303" +
    "\u0162\001\001\000\002\001\001\000\010\267\u01db\271\u01d7" +
    "\303\u01d9\001\001\000\004\301\u01d5\001\001\000\006\312" +
    "\u01cc\313\u01cb\001\001\000\004\273\u01c6\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\302\u01c4\303\u0162\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\320\u01c9\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\302\u01ce" +
    "\303\u0162\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\275\u01d1\321\u01d0\322\u0169\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\253\u01e0\254\u01de\270\u01df" +
    "\271\u01dd\001\001\000\006\316\u01e4\317\u01e3\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\254\u01e1\271\u01dd" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\302\u01e5\303\u0162\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\302\u01e8\303\u0162\001\001\000" +
    "\004\062\u01eb\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\302\u01f1\303\u0162" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\301" +
    "\u01f4\001\001\000\002\001\001\000\004\063\u01f7\001\001" +
    "\000\006\321\u01f8\322\u0169\001\001\000\002\001\001\000" +
    "\006\276\u01fa\277\u01fb\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\072\u0202\073\u0200\074\u01ff\001\001\000\002" +
    "\001\001\000\004\074\u0206\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\302\u0204\303\u0162\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ZCDParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ZCDParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ZCDParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 action_obj.initActionClass();    
    }


   GenericScanner scanner = null;
   Module module     = ModulesFactory.getDefaultModule();
//   Summary summary   = module.getSummary();
   Configuration cfg = ConfigurationBase.getInstance();
   ParserInfo    info     = ParserInfo.getInstance();
             
   public void syntax_error(SDPSymbol token) throws ParseException {
          info.syntax_error(token);
   }

   public void unrecovered_syntax_error(SDPSymbol token) throws ParseException {
      info.unrecovered_syntax_error(token);
   }
   

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ZCDParser$actions {


   Module          module   = null;
//   Summary         summary  = null;
   Persistence     fichero  = null;
   ZCDCode         code     = null;
   BlockCode       currBlock = null; 
   RulesData       rules     = new RulesData();

   SDPSymbolFactory sf = new SDPSymbolFactory();
 
   ParserInfo      info     = ParserInfo.getInstance();
      
   Variable  currVar    = null;
   StmtGral  currStmt   = null;  // Instruccion en proceso
   Option    currOption = null;  // Opcion en proceso

   boolean   hasEndProgram = false; // Hay STOPRUN o GOBACK?
    
   boolean master     = false;  // El fichero es el maestro?   
   int     numFillers = 0;
          
   public void initActionClass() {
      module  = info.getModule();
      code = new ZCDCode(module);
   }

   public String getSymbolName(SDPSymbol s)    { return (String) s.value; }
   public int    getSymbolLine(SDPSymbol s)    { return (int)    s.line;  }
   
   public void debug(String txt) { System.err.println(txt); }
   public void print(String txt) { 
      System.out.println(txt); 
   }

   void notSupportedException(int idMsg) {
        throw new NotSupportedException(idMsg);
   }


  private final ZCDParser parser;

  /** Constructor */
  CUP$ZCDParser$actions(ZCDParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ZCDParser$do_action(
    int                        CUP$ZCDParser$act_num,
    java_cup.runtime.lr_parser CUP$ZCDParser$parser,
    java.util.Stack            CUP$ZCDParser$stack,
    int                        CUP$ZCDParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ZCDParser$result;

      /* select the action based on the action number */
      switch (CUP$ZCDParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // wwith ::= WITH 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;         
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("wwith",208, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // status ::= STATUS 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;         
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("status",205, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // size ::= SIZE 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;         
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("size",203, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // sign ::= SIGN 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;         
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("sign",201, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // is ::= IS 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;         
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("is",193, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // debugging ::= DEBUGGING MODE 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w2 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w.add(w2); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("debugging",189, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // opt_with ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = null; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_with",207, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // opt_with ::= wwith 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;    
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_with",207, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // opt_status ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = null; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_status",204, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // opt_status ::= status 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;    
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_status",204, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // opt_size ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = null; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_size",202, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // opt_size ::= size 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;    
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_size",202, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // opt_sign ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = null; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_sign",200, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // opt_sign ::= sign 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;    
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_sign",200, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // opt_record ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = null; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_record",199, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // opt_record ::= RECORD 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;    
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_record",199, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // opt_organization ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = null; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_organization",196, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // opt_organization ::= ORGANIZATION 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;    
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_organization",196, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // opt_optional ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = null; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_optional",197, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // opt_optional ::= OPTIONAL 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;    
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_optional",197, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // opt_mode ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = null; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_mode",195, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // opt_mode ::= MODE 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;    
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_mode",195, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // opt_key ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = null; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_key",194, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // opt_key ::= KEY 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;    
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_key",194, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // opt_is ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = null; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_is",192, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // opt_is ::= is 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;    
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_is",192, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // opt_endp ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = null; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_endp",191, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // opt_endp ::= ENDP 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;    
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_endp",191, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // opt_duplicates ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = null;           
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_duplicates",190, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // opt_duplicates ::= opt_with DUPLICATES 
            {
              SDPSymbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol p = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w.setPrefix(p); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_duplicates",190, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // opt_debugging ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = null; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_debugging",188, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // opt_debugging ::= debugging 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;    
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_debugging",188, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // opt_character ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = null; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_character",185, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // opt_character ::= CHARACTERS 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;    
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_character",185, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // opt_areas ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = null; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_areas",184, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // opt_areas ::= AREAS 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;    
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_areas",184, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // on_off ::= OFF 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;    
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("on_off",183, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // on_off ::= ON 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;    
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("on_off",183, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // data_name ::= ID 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("data_name",177, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // data_name ::= LITERAL 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("data_name",177, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // clause_thru ::= THRU constant 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("clause_thru",173, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // clause_thru_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("clause_thru_opt",172, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // clause_thru_opt ::= clause_thru 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("clause_thru_opt",172, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // clause_value_item ::= constant clause_thru_opt 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("clause_value_item",176, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // clause_value_list ::= clause_value_list clause_value_item 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("clause_value_list",175, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // clause_value_list ::= clause_value_item 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("clause_value_list",175, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // clause_value ::= VALUE clause_value_list 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("clause_value",174, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // clause_renames ::= RENAMES ID clause_thru_opt 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("clause_renames",171, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // constant ::= HEX_VAL 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("constant",180, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // constant ::= LEVELXX 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("constant",180, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // constant ::= NUMERO 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("constant",180, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // constant ::= LITERAL 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("constant",180, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // constant ::= figurative 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("constant",180, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // figurative ::= NULL 
            {
              SDPSymbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol f = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("figurative",179, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // figurative ::= QUOTE 
            {
              SDPSymbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol f = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("figurative",179, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // figurative ::= LOWVAL 
            {
              SDPSymbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol f = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("figurative",179, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // figurative ::= HIGHVAL 
            {
              SDPSymbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol f = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("figurative",179, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // figurative ::= ZERO 
            {
              SDPSymbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol f = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("figurative",179, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // figurative ::= SPACES 
            {
              SDPSymbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol f = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("figurative",179, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // endp_opt ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = null; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("endp_opt",80, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // endp_opt ::= ENDP 
            {
              SDPSymbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol e = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = e;    
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("endp_opt",80, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // rvalue ::= ID 
            {
              SDPSymbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol i = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("rvalue",178, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // init_val ::= PIC_ALPHANUM init_val 
            {
              SDPSymbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol v = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = v; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("init_val",94, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // init_val ::= PIC_NUM 
            {
              SDPSymbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("init_val",94, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // init_val ::= PIC_FMT pic_dec_opt 
            {
              SDPSymbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("init_val",94, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // init_val ::= DFHCICS 
            {
              SDPSymbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("init_val",94, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // init_val ::= constant 
            {
              SDPSymbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("init_val",94, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // var_value ::= VALUE init_val 
            {
              SDPSymbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol v = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currVar.setInitValue((String) v.value); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_value",81, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // pic_size_opt ::= 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_size_opt",115, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // pic_size_opt ::= pic_size 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_size_opt",115, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // pic_dec ::= PIC_DEC pic_size_opt 
            {
              SDPSymbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol p = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		 RESULT = p; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_dec",119, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // pic_dec_opt ::= 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_dec_opt",118, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // pic_dec_opt ::= pic_dec 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_dec_opt",118, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // pic_len ::= PIC_NUM 
            {
              SDPSymbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol p = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = p; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_len",117, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // pic_len ::= NUMERO 
            {
              SDPSymbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_len",117, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // pic_size ::= LPAR pic_len RPAR 
            {
              SDPSymbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		 code.addSize(currVar, s.setFunction()); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_size",116, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // pic_type ::= pic_size 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_type",114, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // pic_type ::= NUMERO 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_type",114, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // pic_type ::= PIC_LEN 
            {
              SDPSymbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol p = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 code.calculateSizeLen(currVar, p); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_type",114, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // pic_type ::= PIC_V 
            {
              SDPSymbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol p = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 code.calculateSize(currVar, p); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_type",114, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // pic_type ::= PIC_DEC_EMPTY 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_type",114, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // pic_type ::= PIC_DEC 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_type",114, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // pic_type ::= PIC_FMT 
            {
              SDPSymbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol p = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 code.calculateSizeFormat(currVar, p); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_type",114, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // pic_type ::= PIC_NUM 
            {
              SDPSymbol RESULT =null;
		 code.addSize(currVar, 1); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_type",114, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // pic_type ::= PIC_ALPHA 
            {
              SDPSymbol RESULT =null;
		 code.addSize(currVar, 1); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_type",114, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // pic_type ::= PIC_ALPHANUM 
            {
              SDPSymbol RESULT =null;
		 code.addSize(currVar, 1); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_type",114, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // pic_types ::= pic_types pic_type 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_types",113, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // pic_types ::= pic_type 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_types",113, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // var_picture ::= PICTURE pic_types 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_picture",112, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // compn ::= COMP6 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("compn",120, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // compn ::= COMP5 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("compn",120, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // compn ::= COMP4 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("compn",120, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // compn ::= COMP3 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("compn",120, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // compn ::= COMP2 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("compn",120, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // compn ::= COMP1 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("compn",120, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // var_type ::= compn 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_type",90, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // var_type ::= BLOB PIC_LEN 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_type",90, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // var_type ::= BLOB_LOCATOR 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_type",90, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // var_type ::= ROWID 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_type",90, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // var_type ::= BINARY 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_type",90, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // var_type ::= DISPLAY 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_type",90, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // var_type ::= PACKED 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_type",90, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // var_type ::= INDEX 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_type",90, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // var_type ::= POINTER 
            {
              SDPSymbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_type",90, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // var_usage ::= USAGE var_type 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol c = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 code.setVarType(currVar,c); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_usage",107, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // var_index ::= FILLER 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_index",89, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // var_index ::= PIC_ALPHA 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_index",89, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // var_index ::= rvalue 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_index",89, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // var_indexes ::= var_indexes var_index 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_indexes",88, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // var_indexes ::= var_index 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_indexes",88, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // var_indexed ::= INDEXED var_indexes 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_indexed",87, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // var_order ::= ORDER var_indexes 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_order",91, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // var_occurs_depending ::= 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_occurs_depending",86, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // var_occurs_depending ::= DEPENDING rvalue 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_occurs_depending",86, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // var_occurs_bound ::= PIC_NUM 
            {
              SDPSymbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol p = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = p; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_occurs_bound",85, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // var_occurs_bound ::= NUMERO 
            {
              SDPSymbol RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol n = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = n; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_occurs_bound",85, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // var_occurs_to ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = new SDPSymbol(0, 0, 0, "0"); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_occurs_to",84, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // var_occurs_to ::= TO var_occurs_bound 
            {
              SDPSymbol RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol n = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = n; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_occurs_to",84, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // var_occurs_from ::= var_occurs_bound 
            {
              SDPSymbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol v = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = v; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_occurs_from",83, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // var_occurs ::= OCCURS var_occurs_from var_occurs_to var_occurs_depending 
            {
              SDPSymbol RESULT =null;
		int fromleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int fromright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol from = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int toleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol to = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		 
                        code.setBounds(currVar, from, to);
                     
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_occurs",82, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // var_renames_opt ::= 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_renames_opt",111, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // var_renames_opt ::= THRU var_name 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_renames_opt",111, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // var_renames ::= RENAMES var_name var_renames_opt 
            {
              SDPSymbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol i = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_renames",110, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // var_redefines ::= REDEFINES var_name 
            {
              SDPSymbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol i = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 module.setRedefines(currVar, (String)i.value); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_redefines",109, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // var_attr ::= var_usage 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_attr",108, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // var_attr ::= var_type 
            {
              SDPSymbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol v = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 code.setVarType(currVar,v); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_attr",108, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // var_attr ::= var_order 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_attr",108, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // var_attr ::= var_value 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_attr",108, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // var_attr ::= var_indexed 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_attr",108, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // var_attr ::= var_occurs 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_attr",108, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // var_attr ::= var_picture 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_attr",108, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // var_attr ::= var_renames 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_attr",108, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // var_attr ::= var_redefines 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_attr",108, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // var_data ::= var_data var_attr 
            {
              Var RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_data",105, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // var_data ::= var_attr 
            {
              Var RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_data",105, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // var_data_def ::= 
            {
              Var RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_data_def",106, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // var_data_def ::= var_data 
            {
              Var RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_data_def",106, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // var_filler ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = new SDPSymbol(ZCDSym.FILLER,0,0, " "); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_filler",93, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // var_filler ::= FILLER 
            {
              SDPSymbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol f = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_filler",93, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // var_name ::= var_filler 
            {
              SDPSymbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s.setValue("F_" + ++numFillers);  
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_name",92, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // var_name ::= PIC_ALPHA 
            {
              SDPSymbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_name",92, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // var_name ::= PIC_ALPHANUM 
            {
              SDPSymbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_name",92, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // var_name ::= ID 
            {
              SDPSymbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_name",92, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // var_88_head ::= LEVEL88 ID 
            {
              Variable RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol v = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currVar = code.createVar(l,v);  RESULT = currVar; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_88_head",104, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // var_77_head ::= LEVEL77 ID 
            {
              Variable RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol v = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currVar = code.createVar(l,v);  RESULT = currVar; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_77_head",103, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // var_66_head ::= LEVEL66 ID 
            {
              Variable RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol v = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currVar = code.createVar(l,v);  RESULT = currVar; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_66_head",102, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // var_xx_head ::= LEVELXX var_name 
            {
              Variable RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol v = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currVar = code.createVar(l,v);  RESULT = currVar; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_xx_head",101, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // var_88 ::= var_88_head clause_value ENDP 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		 RESULT = v; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_88",100, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // var_77 ::= var_77_head var_data_def ENDP 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		 RESULT = v; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_77",99, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // var_66 ::= var_66_head clause_renames ENDP 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		 RESULT = v; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_66",98, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // var_xx ::= var_xx_head var_data_def endp_opt 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		 RESULT = v; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_xx",97, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // variable ::= ENDSQL 
            {
              Variable RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("variable",96, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // variable ::= SQLDATA 
            {
              Variable RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("variable",96, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // variable ::= var_88 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = module.addVariable(v); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("variable",96, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // variable ::= var_77 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = module.addVariable(v); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("variable",96, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // variable ::= var_66 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = module.addVariable(v); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("variable",96, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // variable ::= var_xx 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = module.addVariable(v); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("variable",96, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // variables ::= variables variable 
            {
              Variable RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("variables",95, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // variables ::= variable 
            {
              Variable RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("variables",95, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // linkage_data ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("linkage_data",77, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // linkage_data ::= variables 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("linkage_data",77, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // sect_linkage_header ::= LINKAGE_SECTION NT$3 ENDP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("sect_linkage_header",76, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // NT$3 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
 code.setSection(CDG.SECT_LINK, s.line); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("NT$3",212, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // section_linkage ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("section_linkage",75, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // section_linkage ::= sect_linkage_header linkage_data 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("section_linkage",75, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // local_data ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("local_data",74, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // local_data ::= variables 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("local_data",74, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // sect_local_header ::= LOCAL_SECTION NT$2 ENDP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("sect_local_header",73, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // NT$2 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
 code.setSection(CDG.SECT_LOCAL, s.line); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("NT$2",211, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // section_local ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("section_local",72, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // section_local ::= sect_local_header local_data 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("section_local",72, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // working_data ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("working_data",71, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // working_data ::= variables 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("working_data",71, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // sect_working_header ::= WORKING_SECTION NT$1 ENDP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("sect_working_header",70, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // NT$1 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
 code.setSection(CDG.SECT_WORK, s.line); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("NT$1",210, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // section_working ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("section_working",69, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // section_working ::= sect_working_header working_data 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("section_working",69, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // fd_attr_depending ::= DEPENDING rvalue 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_depending",166, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // fd_attr_number ::= PIC_NUM 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_number",164, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // fd_attr_number ::= NUMERO 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_number",164, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // fd_attr_linage ::= LINAGE fd_attr_number 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_linage",165, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // fd_fields ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_fields",148, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // fd_fields ::= variables 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_fields",148, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // fd_attr_records ::= RECORDS 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_records",158, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // fd_attr_records ::= RECORD 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_records",158, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // fd_attr_record_to ::= 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_record_to",159, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // fd_attr_record_to ::= TO fd_attr_number 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_record_to",159, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // fd_attr_record_size ::= fd_attr_number fd_attr_record_to 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_record_size",157, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // fd_attr_record_detail ::= fd_attr_depending 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_record_detail",156, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // fd_attr_record_detail ::= fd_attr_record_size 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_record_detail",156, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // fd_attr_record ::= RECORD fd_attr_record_detail 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_record",155, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // fd_attr_block_records ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_block_records",163, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // fd_attr_block_records ::= RECORDS 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_block_records",163, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // fd_attr_block ::= BLOCK NUMERO fd_attr_block_records 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_block",162, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // fd_attr_label ::= LABEL fd_attr_records 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_label",149, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // fd_attr_mode_type ::= FILLER 
            {
              SDPSymbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol i = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_mode_type",161, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // fd_attr_mode_type ::= PIC_DEC 
            {
              SDPSymbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol i = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_mode_type",161, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // fd_attr_mode_type ::= ID 
            {
              SDPSymbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol i = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_mode_type",161, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // fd_attr_mode ::= RECORDING fd_attr_mode_type 
            {
              Option RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol i = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol a = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = new Option(i, a); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_mode",160, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // fd_attr_name ::= fd_attr_name ID 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol i = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w.add(i);  
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_name",154, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // fd_attr_name ::= ID 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;         
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_name",154, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // fd_attr_names ::= DATA fd_attr_records fd_attr_name 
            {
              Option RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol d = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol f = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = new Option(d, f); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_names",153, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // fd_attr ::= fd_attr_depending 
            {
              Option RESULT =null;
		 RESULT = new Option(); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr",152, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // fd_attr ::= fd_attr_linage 
            {
              Option RESULT =null;
		 RESULT = new Option(); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr",152, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // fd_attr ::= fd_attr_record 
            {
              Option RESULT =null;
		 RESULT = new Option(); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr",152, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // fd_attr ::= fd_attr_block 
            {
              Option RESULT =null;
		 RESULT = new Option(); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr",152, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // fd_attr ::= fd_attr_label 
            {
              Option RESULT =null;
		 RESULT = new Option(); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr",152, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // fd_attr ::= fd_attr_mode 
            {
              Option RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option f = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr",152, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // fd_attr ::= fd_attr_names 
            {
              Option RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option f = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr",152, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // fd_attrs ::= fd_attrs fd_attr 
            {
              Option RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Option t = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option f = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attrs",151, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // fd_attrs ::= fd_attr 
            {
              Option RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option f = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attrs",151, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // fd_attrs_opt ::= fd_attrs 
            {
              Option RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option f = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f;                
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attrs_opt",150, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // fd_desc ::= SD 
            {
              SDPSymbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol i = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_desc",168, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // fd_desc ::= FD 
            {
              SDPSymbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol i = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_desc",168, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // fd_def ::= fd_desc ID fd_attrs_opt ENDP 
            {
              Variable RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Option a = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_def",167, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // fd ::= fd_def fd_fields 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Variable d = (Variable)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd",146, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // fd_list ::= fd_list fd 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_list",147, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // fd_list ::= fd 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_list",147, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // file_data ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_data",68, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // file_data ::= fd_list 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_data",68, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // sect_file_header ::= FILE_SECTION NT$0 ENDP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("sect_file_header",67, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // NT$0 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
 code.setSection(CDG.SECT_FILE, s.line); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("NT$0",209, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // section_file ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("section_file",66, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // section_file ::= sect_file_header file_data 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("section_file",66, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // bloque_data ::= section_file section_working section_local section_linkage 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("bloque_data",65, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // data_div_header ::= DIV_DATA ENDP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol p = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currStmt = new StmtGral(s); 
                                          currBlock = new BlockCode(s, p); 
                                          code.setDivision(CDG.SECT_DATA, s.line); 
                                       
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("data_div_header",26, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // data_division ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("data_division",1, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // data_division ::= data_div_header bloque_data 
            {
              Object RESULT =null;
		 rules.checkDivision(currStmt); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("data_division",1, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // file_attr_key ::= RECORD ID 
            {
              Option RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol p = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = sf.option(p, w); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_key",141, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // file_attr_alternate ::= ALTERNATE opt_record opt_key opt_is data_name opt_duplicates 
            {
              Option RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-5)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-5)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-4)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-4)).right;
		SDPSymbol w1 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-4)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).right;
		SDPSymbol w2 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).value;
		int w3left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int w3right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol w3 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int w4left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int w4right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol w4 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int w5left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int w5right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w5 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = sf.option(w.add(w1,w2,w3,w4,w5)); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_alternate",142, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-5)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // file_attr_fs ::= STATUS ID 
            {
              Option RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w1 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = sf.option(w.add(w1));              
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_fs",135, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // file_attr_fs ::= FILE STATUS ID 
            {
              Option RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol p = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w1 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = sf.option(w.setPrefix(p).add(w1)); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_fs",135, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // file_attr_password ::= PASSWORD data_name 
            {
              Option RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w1 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = sf.option(w.add(w1)); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_password",138, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // file_attr_access_rel ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = null;          
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_access_rel",145, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // file_attr_access_rel ::= RELATIVE opt_key opt_is data_name 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol w1 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w2 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w.add(w1, w2); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_access_rel",145, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // file_attr_access_type ::= RANDOM 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w; fichero.setType(Persistence.ACC_RANDOM);     
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_access_type",144, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // file_attr_access_type ::= DYNAMIC 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w; fichero.setType(Persistence.ACC_DYNAMIC);    
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_access_type",144, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // file_attr_access_type ::= SEQUENTIAL 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w; fichero.setType(Persistence.ACC_SEQUENTIAL); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_access_type",144, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // file_attr_access ::= ACCESS opt_mode file_attr_access_type file_attr_access_rel 
            {
              Option RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol w1 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol w2 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int w3left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int w3right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w3 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = sf.option(w.add(w1,w2,w3)); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_access",143, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // file_attr_record_type ::= ID 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_record_type",140, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // file_attr_record_type ::= STANDARD1 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_record_type",140, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // file_attr_record ::= RECORD DELIMITER file_attr_record_type 
            {
              Option RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol w1 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w2 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = sf.option(w.setSuffix(w1).add(w2)); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_record",139, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // file_attr_padding_type ::= LITERAL 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_padding_type",137, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // file_attr_padding_type ::= ID 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_padding_type",137, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // file_attr_padding ::= PADDING opt_character file_attr_padding_type 
            {
              Option RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol w1 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w2 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = sf.option(w.add(w1,w2)); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_padding",136, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // file_attr_item ::= file_attr_key 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_item",132, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // file_attr_item ::= file_attr_alternate 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_item",132, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // file_attr_item ::= file_attr_fs 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_item",132, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // file_attr_item ::= file_attr_password 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_item",132, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // file_attr_item ::= file_attr_padding 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_item",132, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // file_attr_item ::= file_attr_record 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_item",132, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // file_attr_item ::= file_attr_access 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_item",132, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // file_attr_rest ::= file_attrs file_attr_item 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 fichero.addOption(o); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_rest",131, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // file_attr_rest ::= file_attr_item 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 fichero.addOption(o); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_rest",131, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // file_attr_rest_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_rest_opt",130, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // file_attr_rest_opt ::= file_attr_rest 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_rest_opt",130, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // file_attr_type ::= 
            {
              Object RESULT =null;
		 fichero.setType(Persistence.SEQUENTIAL); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_type",128, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // file_attr_type ::= LINE SEQUENTIAL 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w1 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 fichero.setType(Persistence.LINE);       
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_type",128, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // file_attr_type ::= RELATIVE 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 fichero.setType(Persistence.RELATIVE);   
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_type",128, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // file_attr_type ::= INDEXED 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 fichero.setType(Persistence.INDEXED);    
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_type",128, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // file_attr_type ::= SEQUENTIAL 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 fichero.setType(Persistence.SEQUENTIAL); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_type",128, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // file_attr_reserve ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_reserve",129, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // file_attr_reserve ::= RESERVE NUMERO opt_areas 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_reserve",129, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // file_attr_assign_dd ::= DISPLAY 
            {
              Option RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 fichero.setPhysicalName(s.value);  
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_assign_dd",134, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // file_attr_assign_dd ::= ID 
            {
              Option RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 fichero.setPhysicalName(s.value); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_assign_dd",134, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // file_attr_assign_dd ::= LITERAL 
            {
              Option RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 fichero.setPhysicalName(s.value); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_assign_dd",134, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // file_attr_assign ::= ASSIGN file_attr_assign_dd 
            {
              Option RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_assign",133, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // file_attr_first ::= file_attr_assign file_attr_reserve opt_organization file_attr_type 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_first",127, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // file_select ::= SELECT opt_optional ID 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 fichero = new Persistence(s.setPrefix(w).value, master);
                                              module.addFile(fichero);
                                           
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_select",125, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // select_file ::= file_select file_attr_first file_attr_rest_opt ENDP 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("select_file",122, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // select_file_mark ::= select_file 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("select_file_mark",123, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // select_file_mark ::= SDPMASTER 
            {
              Object RESULT =null;
		 master = true; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("select_file_mark",123, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // select_files ::= select_files select_file_mark 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("select_files",121, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // select_files ::= select_file_mark 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("select_files",121, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // select_file_list ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("select_file_list",124, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // select_file_list ::= select_files 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("select_file_list",124, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // file_control_header ::= FILE_CONTROL ENDP 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_control_header",64, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // file_control_decl ::= file_control_header select_file_list 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_control_decl",63, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // io_sect_bloques ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("io_sect_bloques",62, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // io_sect_bloques ::= file_control_decl 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("io_sect_bloques",62, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // io_sect_header ::= IO_SECTION ENDP 
            {
              Option RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currOption = sf.option(s, w);
                                          code.setSection(CDG.SECT_IO, s.line);
                                          RESULT = currOption;  
                                       
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("io_sect_header",61, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // io_section ::= io_sect_header io_sect_bloques 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		 currStmt.addOption(o);    
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("io_section",60, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // conf_sect_repo_item ::= CLASS ID opt_is ID 
            {
              Option RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol w1 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w2 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = sf.option(w, w1.add(w2)); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_repo_item",58, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // conf_sect_repo ::= conf_sect_repo conf_sect_repo_item 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int o1left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o1 = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o.add(o1); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_repo",57, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // conf_sect_repo ::= conf_sect_repo_item 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o;         
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_repo",57, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // opt_conf_sect_repo ::= 
            {
              Option RESULT =null;
		 RESULT = null; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_conf_sect_repo",56, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // opt_conf_sect_repo ::= conf_sect_repo 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o;    
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_conf_sect_repo",56, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // opt_currency_picture ::= 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_currency_picture",187, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // opt_currency_picture ::= opt_with PICTURE SYMBOL ID 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_currency_picture",187, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // opt_symbolic_in ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = null;            
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_symbolic_in",206, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // opt_symbolic_in ::= IN ID 
            {
              SDPSymbol RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol w1 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w.setPrefix(w1); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_symbolic_in",206, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // alphabet_name ::= LITERAL 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("alphabet_name",48, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // alphabet_name ::= EBCDIC 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("alphabet_name",48, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // alphabet_name ::= NATIVE 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("alphabet_name",48, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // alphabet_name ::= STANDARD 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("alphabet_name",48, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // clause_on_off_item ::= on_off opt_status opt_is ID 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("clause_on_off_item",170, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // clause_on_off ::= clause_on_off clause_on_off_item 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("clause_on_off",169, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // clause_on_off ::= clause_on_off_item 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("clause_on_off",169, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // opt_on_off ::= 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_on_off",182, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // opt_on_off ::= clause_on_off 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_on_off",182, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // opt_is_on_off ::= 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_is_on_off",181, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // opt_is_on_off ::= on_off 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_is_on_off",181, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // opt_is_on_off ::= is 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_is_on_off",181, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // special_names_xml ::= XMLSCHEMA ID opt_is ID 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w1 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = sf.option(o, w.add(w1));      
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("special_names_xml",47, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // special_names_decimal ::= DECIMALPOINT opt_is COMMA 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = sf.option(o, w);              
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("special_names_decimal",46, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // special_names_currency ::= CURRENCY opt_sign opt_is ID opt_currency_picture 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-4)).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-4)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w1 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = sf.option(o, w.add(w1));      
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("special_names_currency",45, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-4)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // special_names_class ::= CLASS ID opt_is ID 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w1 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = sf.option(o, w.add(w1));      
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("special_names_class",44, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // special_names_symbolic ::= SYMBOLIC opt_character ID opt_symbolic_in 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w1 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = sf.option(o, w.add(w1));      
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("special_names_symbolic",43, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // special_names_alphabet ::= ALPHABET ID opt_is alphabet_name 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w1 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = sf.option(o, w.add(w1));      
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("special_names_alphabet",42, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // special_names_id ::= ID opt_is_on_off ID opt_on_off 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol w1 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w2 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = sf.option(o, w.add(w1,w2));   
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("special_names_id",41, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // conf_sect_names_item ::= special_names_xml 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_names_item",40, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // conf_sect_names_item ::= special_names_decimal 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_names_item",40, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // conf_sect_names_item ::= special_names_currency 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_names_item",40, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // conf_sect_names_item ::= special_names_class 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_names_item",40, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // conf_sect_names_item ::= special_names_symbolic 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_names_item",40, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // conf_sect_names_item ::= special_names_alphabet 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_names_item",40, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // conf_sect_names_item ::= special_names_id 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_names_item",40, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // conf_sect_names ::= conf_sect_names conf_sect_names_item opt_endp 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int o1left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Option o1 = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o.add(o1.add(w)); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_names",39, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // conf_sect_names ::= conf_sect_names_item opt_endp 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o.add(w);         
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_names",39, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // opt_conf_sect_names ::= 
            {
              Option RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_conf_sect_names",38, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // opt_conf_sect_names ::= conf_sect_names 
            {
              Option RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option w = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_conf_sect_names",38, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // conf_sect_entry_item ::= SEGMENT opt_is NUMERO 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w1 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w.add(w1); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_entry_item",55, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // conf_sect_entry_item ::= opt_program opt_collating SEQUENCE ID 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w1 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w.add(w1); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_entry_item",55, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // conf_sect_entry ::= conf_sect_entry conf_sect_entry_item 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w1 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w.add(w1); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_entry",54, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // conf_sect_entry ::= conf_sect_entry_item 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;         
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_entry",54, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // opt_conf_sect_entry ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = null; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_conf_sect_entry",52, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // opt_conf_sect_entry ::= conf_sect_entry 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;   
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_conf_sect_entry",52, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // conf_sect_mem_type ::= MODULES 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_mem_type",53, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // conf_sect_mem_type ::= CHARACTERS 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_mem_type",53, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // conf_sect_mem_type ::= WORDS 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_mem_type",53, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // opt_conf_sect_mem ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = null;              
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_conf_sect_mem",51, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // opt_conf_sect_mem ::= MEMORY opt_size ID conf_sect_mem_type 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol w1 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol w2 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int w3left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int w3right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w3 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w.add(w1, w2, w3); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_conf_sect_mem",51, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // opt_conf_sect_obj ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = null;              
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_conf_sect_obj",50, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // opt_conf_sect_obj ::= ID opt_conf_sect_mem opt_conf_sect_entry ENDP 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol w1 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol w2 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int w3left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int w3right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w3 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w.add(w1, w2, w3); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_conf_sect_obj",50, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // opt_conf_sect_src ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = null;              
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_conf_sect_src",49, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // opt_conf_sect_src ::= ID opt_with opt_debugging ENDP 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).value;
		int w1left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol w1 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol w2 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int w3left = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int w3right = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w3 = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w.add(w1, w2, w3); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_conf_sect_src",49, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // configuration_repo ::= REPOSITORY ENDP opt_conf_sect_repo 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option w = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = sf.option(o, w); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("configuration_repo",37, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // configuration_names ::= SPECIAL_NAMES ENDP opt_conf_sect_names 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option w = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = sf.option(o, w); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("configuration_names",36, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // configuration_object ::= OBJECT_COMPUTER ENDP opt_conf_sect_obj 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = sf.option(o, w); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("configuration_object",35, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // configuration_source ::= SOURCE_COMPUTER ENDP opt_conf_sect_src 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = sf.option(o, w); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("configuration_source",34, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // configuration_item ::= configuration_repo 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("configuration_item",33, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // configuration_item ::= configuration_names 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("configuration_item",33, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // configuration_item ::= configuration_object 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("configuration_item",33, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // configuration_item ::= configuration_source 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("configuration_item",33, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // configuration_data ::= configuration_data configuration_item 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currOption.add(o); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("configuration_data",32, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // configuration_data ::= configuration_item 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currOption.add(o); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("configuration_data",32, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // opt_configuration_data ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_configuration_data",31, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // opt_configuration_data ::= configuration_data 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("opt_configuration_data",31, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // conf_sect_header ::= CONF_SECTION ENDP 
            {
              Option RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currOption = sf.option(s, w);
                                              code.setSection(CDG.SECT_CONF, s.line);
                                              RESULT = currOption;  
                                           
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_header",30, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // configuration_section ::= conf_sect_header opt_configuration_data 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		 RESULT = o; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("configuration_section",29, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // io_section_opt ::= 
            {
              Option RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("io_section_opt",59, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // io_section_opt ::= io_section 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("io_section_opt",59, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // configuration_section_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("configuration_section_opt",28, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // configuration_section_opt ::= configuration_section 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currStmt.addOption(o);    
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("configuration_section_opt",28, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // env_div_sections ::= configuration_section_opt io_section_opt 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("env_div_sections",27, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // env_div_header ::= DIV_ENV ENDP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol p = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currStmt = new StmtGral(s); 
                                       currBlock = new BlockCode(s, p); 
                                       code.setDivision(CDG.SECT_ENV, s.line); 
                                    
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("env_div_header",25, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // environment_division ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("environment_division",0, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // environment_division ::= env_div_header env_div_sections 
            {
              Object RESULT =null;
		 rules.checkDivision(currStmt); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("environment_division",0, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ident_entry_line ::= ENDP 
            {
              SDPSymbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol p = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = code.removePoint(p); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_entry_line",24, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ident_entry_line ::= IDTOKEN 
            {
              SDPSymbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = code.removePoint(s); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_entry_line",24, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ident_entry ::= ident_entry ident_entry_line 
            {
              SDPSymbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol a = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = a.add(l);            
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_entry",23, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ident_entry ::= IDTOKEN 
            {
              SDPSymbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol l = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = code.removePoint(l); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_entry",23, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ident_opt_entry ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = null; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_opt_entry",22, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ident_opt_entry ::= ident_entry 
            {
              SDPSymbol RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o;    
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_opt_entry",22, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // pgmid_endp ::= 
            {
              Object RESULT =null;
		 RESULT = null;  
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pgmid_endp",10, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // pgmid_endp ::= ENDP 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;     
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pgmid_endp",10, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ident_endp ::= 
            {
              SDPSymbol RESULT =null;
		 RESULT = null;  
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_endp",9, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ident_endp ::= ENDP 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w;     
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_endp",9, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ident_opt_word ::= DATEC 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_opt_word",8, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ident_opt_word ::= DATEW 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_opt_word",8, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ident_opt_word ::= SECURITY 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_opt_word",8, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ident_opt_word ::= INSTALLATION 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_opt_word",8, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ident_opt_word ::= AUTHOR 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_opt_word",8, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ident_opt ::= ident_opt_word ident_endp ident_opt_entry 
            {
              Option RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol p = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol o = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = new Option(w, o); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_opt",7, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ident_option ::= ident_opt 
            {
              Option RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option s = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_option",6, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ident_options ::= ident_options ident_option 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option s = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currStmt.addOption(s); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_options",5, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ident_options ::= ident_option 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option s = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currStmt.addOption(s); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_options",5, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ident_options_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_options_opt",4, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ident_options_opt ::= ident_options 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_options_opt",4, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // programId_type ::= INITIAL 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("programId_type",21, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // programId_type ::= COMMON 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("programId_type",21, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // programId_type ::= RECURSIVE 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("programId_type",21, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // programId_type_opt ::= 
            {
              SDPSymbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("programId_type_opt",20, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // programId_type_opt ::= programId_type 
            {
              SDPSymbol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol t = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 rules.checkProgramType(t); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("programId_type_opt",20, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // programId_name ::= PGMNAME 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("programId_name",19, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // programId_verb ::= PGMID 
            {
              SDPSymbol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol w = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = w; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("programId_verb",18, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // programId ::= programId_verb ident_endp programId_name programId_type_opt pgmid_endp 
            {
              Option RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-4)).right;
		SDPSymbol v = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).right;
		SDPSymbol p = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		SDPSymbol n = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currStmt.addOption(new Option(v, n)); 
                 rules.checkIdentificationVerbEndP(v,p);
                 rules.checkProgramIDEndP(n,i);  
              
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("programId",17, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-4)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ident_type_method ::= METHODID 
            {
              Object RESULT =null;
		 notSupportedException(MSG.SUPPORT_METHOD);  
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_type_method",16, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ident_type_object ::= OBJECTID 
            {
              Object RESULT =null;
		 notSupportedException(MSG.SUPPORT_OBJECT);  
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_type_object",15, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ident_type_factory ::= FACTORYID 
            {
              Object RESULT =null;
		 notSupportedException(MSG.SUPPORT_FACTORY); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_type_factory",14, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ident_type_class ::= CLASSID 
            {
              Object RESULT =null;
		 notSupportedException(MSG.SUPPORT_CLASS);   
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_type_class",13, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ident_type_program ::= programId 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_type_program",12, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ident_type ::= ident_type_method 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_type",11, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ident_type ::= ident_type_object 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_type",11, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ident_type ::= ident_type_factory 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_type",11, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ident_type ::= ident_type_class 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_type",11, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ident_type ::= ident_type_program 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_type",11, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ident_header ::= DIV_ID ENDP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SDPSymbol s = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SDPSymbol p = (SDPSymbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currStmt = new StmtGral(s); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_header",3, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // identification_division ::= ident_header ident_type ident_options_opt 
            {
              Object RESULT =null;
		 rules.checkDivision(currStmt); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("identification_division",2, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // module ::= identification_division environment_division data_division 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("module",79, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= cobolData EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		StmtCobol start_val = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		RESULT = start_val;
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ZCDParser$parser.done_parsing();
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // cobolData ::= module 
            {
              StmtCobol RESULT =null;
		 RESULT = null; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("cobolData",78, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

