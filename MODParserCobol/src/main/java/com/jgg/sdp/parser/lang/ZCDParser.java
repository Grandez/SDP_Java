
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Apr 17 20:13:05 CEST 2017
//----------------------------------------------------

package com.jgg.sdp.parser.lang;

import java_cup.runtime.*;
import com.jgg.sdp.module.base.*;
import com.jgg.sdp.module.items.*;
import com.jgg.sdp.module.factorias.*;
import com.jgg.sdp.core.ctes.*;
import com.jgg.sdp.core.config.*;
import com.jgg.sdp.parser.base.*;
import com.jgg.sdp.parser.base.stmt.*;
import com.jgg.sdp.parser.base.symbol.*;
import com.jgg.sdp.parser.base.*;
import com.jgg.sdp.parser.blocks.*;
import com.jgg.sdp.parser.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Apr 17 20:13:05 CEST 2017
  */
public class ZCDParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ZCDParser() {super();}

  /** Constructor which sets the default scanner. */
  public ZCDParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ZCDParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0129\000\002\051\004\000\002\002\004\000\002\052" +
    "\003\000\002\052\002\000\002\053\005\000\002\004\004" +
    "\000\002\004\002\000\002\005\004\000\002\006\003\000" +
    "\002\006\002\000\002\007\003\000\002\007\004\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\011\006\000\002\012\003\000\002\013\004\000" +
    "\002\014\003\000\002\015\003\000\002\015\002\000\002" +
    "\021\004\000\002\022\004\000\002\023\004\000\002\017" +
    "\003\000\002\017\002\000\002\016\003\000\002\016\004" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\025\004\000\002\026\003\000\002" +
    "\026\002\000\002\027\003\000\002\027\004\000\002\030" +
    "\003\000\002\030\003\000\002\002\004\000\002\002\002" +
    "\000\002\031\004\000\002\033\004\000\002\121\004\000" +
    "\002\121\002\000\002\122\004\000\002\123\003\000\002" +
    "\123\002\000\002\124\003\000\002\124\004\000\002\125" +
    "\003\000\002\125\003\000\002\125\003\000\002\126\005" +
    "\000\002\127\005\000\002\136\003\000\002\136\002\000" +
    "\002\137\004\000\002\130\005\000\002\131\003\000\002" +
    "\131\002\000\002\132\003\000\002\132\004\000\002\133" +
    "\006\000\002\133\004\000\002\133\005\000\002\134\003" +
    "\000\002\134\004\000\002\135\003\000\002\135\003\000" +
    "\002\140\004\000\002\140\002\000\002\224\002\000\002" +
    "\141\005\000\002\142\003\000\002\142\002\000\002\143" +
    "\004\000\002\144\004\000\002\150\003\000\002\150\002" +
    "\000\002\145\003\000\002\145\004\000\002\147\003\000" +
    "\002\147\003\000\002\146\005\000\002\151\004\000\002" +
    "\152\003\000\002\152\004\000\002\153\003\000\002\153" +
    "\003\000\002\153\003\000\002\153\003\000\002\153\003" +
    "\000\002\153\003\000\002\153\003\000\002\153\003\000" +
    "\002\155\004\000\002\163\003\000\002\163\003\000\002" +
    "\163\003\000\002\156\004\000\002\157\004\000\002\164" +
    "\003\000\002\164\003\000\002\164\003\000\002\165\004" +
    "\000\002\166\003\000\002\166\003\000\002\166\003\000" +
    "\002\160\004\000\002\161\004\000\002\162\004\000\002" +
    "\003\004\000\002\003\002\000\002\032\004\000\002\034" +
    "\006\000\002\035\004\000\002\035\002\000\002\225\002" +
    "\000\002\036\005\000\002\037\003\000\002\037\002\000" +
    "\002\170\003\000\002\170\004\000\002\167\004\000\002" +
    "\214\006\000\002\215\003\000\002\215\003\000\002\173" +
    "\003\000\002\173\002\000\002\174\003\000\002\174\004" +
    "\000\002\175\003\000\002\175\003\000\002\175\003\000" +
    "\002\175\003\000\002\175\003\000\002\175\003\000\002" +
    "\175\003\000\002\176\005\000\002\177\003\000\002\177" +
    "\004\000\002\205\004\000\002\206\003\000\002\206\003" +
    "\000\002\206\003\000\002\172\004\000\002\207\005\000" +
    "\002\210\003\000\002\210\002\000\002\200\004\000\002" +
    "\201\003\000\002\201\003\000\002\202\004\000\002\204" +
    "\004\000\002\204\002\000\002\203\003\000\002\203\003" +
    "\000\002\171\003\000\002\171\002\000\002\212\004\000" +
    "\002\211\003\000\002\211\003\000\002\213\004\000\002" +
    "\040\004\000\002\040\002\000\002\226\002\000\002\041" +
    "\005\000\002\042\003\000\002\042\002\000\002\043\004" +
    "\000\002\043\002\000\002\227\002\000\002\044\005\000" +
    "\002\045\003\000\002\045\002\000\002\046\004\000\002" +
    "\046\002\000\002\230\002\000\002\047\005\000\002\050" +
    "\003\000\002\050\002\000\002\076\003\000\002\076\004" +
    "\000\002\077\005\000\002\077\003\000\002\077\004\000" +
    "\002\100\004\000\002\071\003\000\002\071\003\000\002" +
    "\071\003\000\002\071\003\000\002\072\003\000\002\072" +
    "\002\000\002\055\003\000\002\102\003\000\002\102\002" +
    "\000\002\101\003\000\002\101\004\000\002\104\003\000" +
    "\002\104\003\000\002\104\003\000\002\104\003\000\002" +
    "\104\003\000\002\104\003\000\002\104\003\000\002\104" +
    "\003\000\002\104\003\000\002\105\004\000\002\106\005" +
    "\000\002\107\004\000\002\107\002\000\002\057\006\000" +
    "\002\060\003\000\002\061\004\000\002\061\002\000\002" +
    "\062\003\000\002\062\003\000\002\063\004\000\002\063" +
    "\002\000\002\070\004\000\002\064\004\000\002\065\003" +
    "\000\002\065\004\000\002\066\003\000\002\066\003\000" +
    "\002\066\003\000\002\103\004\000\002\067\003\000\002" +
    "\067\003\000\002\067\003\000\002\067\003\000\002\067" +
    "\003\000\002\067\003\000\002\067\003\000\002\067\004" +
    "\000\002\067\003\000\002\120\003\000\002\120\003\000" +
    "\002\120\003\000\002\120\003\000\002\120\003\000\002" +
    "\120\003\000\002\110\004\000\002\111\003\000\002\111" +
    "\004\000\002\112\003\000\002\112\003\000\002\112\003" +
    "\000\002\112\003\000\002\112\003\000\002\112\003\000" +
    "\002\112\003\000\002\112\003\000\002\112\003\000\002" +
    "\112\003\000\002\114\005\000\002\115\003\000\002\115" +
    "\003\000\002\116\003\000\002\116\002\000\002\117\004" +
    "\000\002\113\003\000\002\113\002\000\002\056\004\000" +
    "\002\073\003\000\002\073\004\000\002\074\003\000\002" +
    "\074\003\000\002\074\003\000\002\074\003\000\002\074" +
    "\003\000\002\074\004\000\002\074\003\000\002\074\003" +
    "\000\002\075\004\000\002\075\004\000\002\216\004\000" +
    "\002\217\003\000\002\217\002\000\002\220\003\000\002" +
    "\220\004\000\002\221\004\000\002\222\003\000\002\222" +
    "\003\000\002\223\003\000\002\223\003\000\002\223\003" +
    "\000\002\223\003\000\002\223\003\000\002\223\003\000" +
    "\002\054\003\000\002\054\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u016b\000\004\141\005\001\ufffe\000\004\004\022\001" +
    "\ufffb\000\006\013\011\014\013\001\uffdb\000\002\001\uffff" +
    "\000\004\002\010\001\002\000\002\001\000\000\002\001" +
    "\uffd8\000\006\013\011\014\013\001\uffdc\000\002\001\uffd7" +
    "\000\002\001\uffdd\000\002\001\uffda\000\002\001\uffd9\000" +
    "\004\005\067\001\uffd5\000\002\001\001\000\016\027\041" +
    "\030\031\031\035\032\026\033\036\141\005\001\ufff8\000" +
    "\004\130\023\001\002\000\002\001\ufffa\000\002\001\ufff5" +
    "\000\002\001\ufffc\000\012\007\045\010\046\013\047\130" +
    "\052\001\uffe4\000\002\001\ufff4\000\002\001\ufff0\000\002" +
    "\001\uffeb\000\002\001\uffef\000\016\027\041\030\031\031" +
    "\035\032\026\033\036\141\005\001\ufff9\000\002\001\ufff1" +
    "\000\012\007\045\010\046\013\047\130\052\001\uffe4\000" +
    "\012\007\045\010\046\013\047\130\052\001\uffe4\000\004" +
    "\130\056\001\ufed9\000\002\001\ufff3\000\002\001\uffed\000" +
    "\012\007\045\010\046\013\047\130\052\001\uffe9\000\002" +
    "\001\ufff2\000\002\001\ufff7\000\002\001\uffe1\000\002\001" +
    "\uffe0\000\002\001\uffdf\000\002\001\uffec\000\012\007\045" +
    "\010\046\013\047\130\052\001\uffea\000\002\001\uffde\000" +
    "\002\001\uffe3\000\002\001\uffe2\000\004\007\057\001\002" +
    "\000\002\001\ufeda\000\004\130\056\001\ufed9\000\002\001" +
    "\uffee\000\012\007\045\010\046\013\047\130\052\001\uffe5" +
    "\000\002\001\uffe6\000\002\001\uffe8\000\002\001\ufff6\000" +
    "\002\001\uffe7\000\004\022\u0113\001\uffd1\000\004\130\u010f" +
    "\001\002\000\004\006\072\001\uff8c\000\004\015\100\001" +
    "\uff88\000\004\130\074\001\002\000\002\001\ufffd\000\002" +
    "\001\uff8b\000\004\016\373\001\uff58\000\002\001\uff8d\000" +
    "\006\042\106\055\110\001\uff84\000\002\001\uff87\000\004" +
    "\130\102\001\002\000\002\001\uff86\000\010\011\210\137" +
    "\205\140\201\001\uff5e\000\002\001\uff89\000\002\001\uff83" +
    "\000\002\001\uff7f\000\006\042\106\055\110\001\uff85\000" +
    "\002\001\uff7e\000\004\007\112\001\002\000\020\037\113" +
    "\040\116\045\123\046\114\051\117\053\122\102\127\001" +
    "\uff7c\000\004\010\175\001\002\000\006\010\153\111\160" +
    "\001\002\000\002\001\uff76\000\006\052\152\053\150\001" +
    "\002\000\010\007\164\073\165\107\166\001\002\000\002" +
    "\001\uff7b\000\002\001\uff78\000\010\010\153\102\127\111" +
    "\160\001\002\000\006\052\152\053\150\001\002\000\002" +
    "\001\uff73\000\004\130\147\001\002\000\002\001\uff74\000" +
    "\004\007\135\001\002\000\002\001\uff79\000\002\001\uff77" +
    "\000\002\001\uff75\000\020\037\113\040\116\045\123\046" +
    "\114\051\117\053\122\102\127\001\uff7d\000\002\001\uff7a" +
    "\000\006\135\140\136\144\001\ufee6\000\002\001\uff5a\000" +
    "\006\135\140\136\144\001\ufee7\000\002\001\ufee1\000\002" +
    "\001\ufee5\000\004\007\145\001\002\000\002\001\ufee8\000" +
    "\002\001\ufee2\000\002\001\ufee3\000\002\001\ufee4\000\002" +
    "\001\uff80\000\002\001\uff61\000\002\001\uff6b\000\002\001" +
    "\uff60\000\002\001\uff5c\000\002\001\uff67\000\004\134\161" +
    "\001\uff62\000\002\001\uff65\000\002\001\uff66\000\002\001" +
    "\uff5b\000\006\010\153\111\160\001\002\000\002\001\uff64" +
    "\000\002\001\uff63\000\002\001\uff6e\000\002\001\uff6c\000" +
    "\002\001\uff6d\000\002\001\uff6f\000\004\007\171\001\002" +
    "\000\002\001\uff71\000\004\007\173\001\uff72\000\002\001" +
    "\uff70\000\002\001\uff5d\000\004\052\177\001\uff68\000\002" +
    "\001\uff6a\000\002\001\uff69\000\002\001\uff82\000\004\130" +
    "\056\001\ufed9\000\002\001\uff47\000\002\001\uff81\000\056" +
    "\043\242\044\261\061\222\062\232\063\223\064\260\065" +
    "\256\066\255\067\253\070\252\071\251\074\244\075\241" +
    "\076\226\077\234\100\225\101\220\103\230\104\247\115" +
    "\257\117\236\127\250\001\uff39\000\002\001\uff44\000\010" +
    "\011\210\137\205\140\201\001\uff5f\000\012\007\211\073" +
    "\212\105\214\106\216\001\uff3c\000\002\001\uff3b\000\002" +
    "\001\uff41\000\002\001\uff3d\000\002\001\uff3e\000\002\001" +
    "\uff40\000\002\001\uff42\000\002\001\uff3f\000\002\001\uff46" +
    "\000\006\010\357\111\361\001\002\000\002\001\uff35\000" +
    "\002\001\uff15\000\002\001\uff13\000\056\043\242\044\261" +
    "\061\222\062\232\063\223\064\260\065\256\066\255\067" +
    "\253\070\252\071\251\074\244\075\241\076\226\077\234" +
    "\100\225\101\220\103\230\104\247\115\257\117\236\127" +
    "\250\001\uff3a\000\036\010\336\012\334\013\330\072\341" +
    "\105\333\111\324\112\337\116\342\120\340\121\326\122" +
    "\345\123\332\124\344\131\331\001\002\000\002\001\uff17" +
    "\000\002\001\uff33\000\010\007\135\073\265\106\270\001" +
    "\002\000\002\001\uff36\000\004\113\322\001\002\000\002" +
    "\001\uff34\000\026\010\310\105\302\106\314\107\303\110" +
    "\304\111\305\112\300\113\307\114\312\132\306\001\002" +
    "\000\002\001\uff2f\000\036\044\261\061\222\062\232\063" +
    "\223\064\260\065\256\066\255\067\253\070\252\071\251" +
    "\076\226\104\247\115\257\127\250\001\002\000\002\001" +
    "\uff31\000\002\001\uff32\000\012\007\211\073\212\105\214" +
    "\106\216\001\uff3c\000\010\007\135\073\265\106\270\001" +
    "\002\000\002\001\uff30\000\012\007\211\073\212\105\214" +
    "\106\216\001\uff3c\000\002\001\uff11\000\004\130\263\001" +
    "\002\000\002\001\uff19\000\002\001\uff16\000\002\001\uff0b" +
    "\000\002\001\uff0c\000\002\001\uff0d\000\002\001\uff2e\000" +
    "\002\001\uff0e\000\002\001\uff0f\000\002\001\uff14\000\002" +
    "\001\uff10\000\002\001\uff18\000\002\001\uff38\000\002\001" +
    "\uff45\000\002\001\uff2d\000\002\001\uff1b\000\002\001\uff1f" +
    "\000\002\001\uff1d\000\002\001\uff1c\000\010\007\135\073" +
    "\265\106\270\001\uff20\000\002\001\uff1e\000\004\131\274" +
    "\001\uff2a\000\012\007\211\073\212\105\214\106\216\001" +
    "\uff3c\000\002\001\uff2c\000\002\001\uff2b\000\002\001\uff1a" +
    "\000\002\001\uff04\000\026\010\310\105\302\106\314\107" +
    "\303\110\304\111\305\112\300\113\307\114\312\132\306" +
    "\001\uff0a\000\002\001\uff07\000\002\001\uff03\000\002\001" +
    "\uff02\000\002\001\uff05\000\006\010\315\111\317\001\002" +
    "\000\002\001\uff00\000\002\001\ufeff\000\002\001\uff09\000" +
    "\002\001\uff01\000\002\001\ufefe\000\002\001\uff06\000\002" +
    "\001\ufefc\000\004\133\320\001\002\000\002\001\ufefb\000" +
    "\002\001\ufefd\000\002\001\uff08\000\002\001\uff12\000\010" +
    "\007\135\073\265\106\270\001\uff21\000\002\001\ufeef\000" +
    "\002\001\ufef0\000\002\001\ufede\000\002\001\ufeee\000\002" +
    "\001\ufef2\000\002\001\ufeeb\000\002\001\ufedc\000\036\010" +
    "\336\012\334\013\330\072\341\105\333\111\324\112\337" +
    "\116\342\120\340\121\326\122\345\123\332\124\344\131" +
    "\331\001\002\000\002\001\ufeec\000\036\010\336\012\334" +
    "\013\330\072\341\105\333\111\324\112\337\116\342\120" +
    "\340\121\326\122\345\123\332\124\344\131\331\001\ufef5" +
    "\000\004\107\346\001\ufef9\000\004\107\346\001\ufef9\000" +
    "\002\001\ufedf\000\002\001\ufef1\000\002\001\ufee0\000\002" +
    "\001\ufef4\000\002\001\ufedb\000\002\001\ufedd\000\004\132" +
    "\306\001\ufef6\000\002\001\ufefa\000\002\001\ufee9\000\002" +
    "\001\ufef7\000\002\001\ufef8\000\002\001\ufeea\000\002\001" +
    "\ufef3\000\002\001\ufeed\000\002\001\uff37\000\002\001\uff25" +
    "\000\004\134\363\001\uff26\000\002\001\uff24\000\002\001" +
    "\uff28\000\006\010\357\111\361\001\002\000\004\102\366" +
    "\001\uff22\000\002\001\uff29\000\004\007\135\001\002\000" +
    "\002\001\uff23\000\002\001\uff27\000\002\001\uff43\000\004" +
    "\017\u0101\001\uff52\000\002\001\uff57\000\010\011\210\137" +
    "\205\140\201\001\uff54\000\002\001\uff59\000\010\011\210" +
    "\137\205\140\201\001\uff55\000\004\130\u0100\001\002\000" +
    "\002\001\uff56\000\002\001\uff51\000\004\020\u0108\001\uff4c" +
    "\000\010\011\210\137\205\140\201\001\uff4e\000\002\001" +
    "\uff53\000\010\011\210\137\205\140\201\001\uff4f\000\002" +
    "\001\uff8a\000\010\011\210\137\205\140\201\001\uff48\000" +
    "\002\001\uff4b\000\004\130\u010a\001\002\000\002\001\uff4a" +
    "\000\002\001\uff4d\000\010\011\210\137\205\140\201\001" +
    "\uff49\000\004\130\u010e\001\002\000\002\001\uff50\000\002" +
    "\001\uffd4\000\002\001\uffd6\000\010\024\u0150\025\u014f\026" +
    "\u0151\001\uffce\000\004\023\u0117\001\uffb6\000\004\130\u0114" +
    "\001\002\000\002\001\uffd0\000\004\021\u011b\001\uffb2\000" +
    "\002\001\uffd3\000\002\001\uffb5\000\004\130\u0119\001\002" +
    "\000\002\001\uffb4\000\006\057\u0125\142\u0122\001\uffae\000" +
    "\004\130\u011e\001\002\000\002\001\uffb3\000\002\001\uffb7" +
    "\000\002\001\uffb0\000\002\001\uffb1\000\002\001\uffad\000" +
    "\002\001\uffaa\000\002\001\uffab\000\020\034\u0138\035\u012f" +
    "\036\u0132\047\u0129\053\u012c\054\u012d\060\u012a\001\002\000" +
    "\006\057\u0125\142\u0122\001\uffaf\000\004\007\u0126\001\002" +
    "\000\002\001\uffa8\000\002\001\uffac\000\002\001\uffa2\000" +
    "\010\043\u0147\054\u0148\056\u014a\001\002\000\004\007\u0146" +
    "\001\002\000\002\001\uff9e\000\004\007\u0145\001\002\000" +
    "\004\007\u0144\001\002\000\002\001\uffa4\000\004\007\u0143" +
    "\001\002\000\022\034\u0138\035\u012f\036\u0132\047\u0129\053" +
    "\u012c\054\u012d\060\u012a\130\u0141\001\002\000\002\001\uffa5" +
    "\000\010\007\u013d\013\u013e\127\u0140\001\002\000\002\001" +
    "\uffa0\000\002\001\uffa7\000\002\001\uffa3\000\002\001\uff9f" +
    "\000\002\001\uffa1\000\010\041\u013a\050\u013b\056\u013c\001" +
    "\002\000\002\001\uff94\000\002\001\uff92\000\002\001\uff91" +
    "\000\002\001\uff93\000\002\001\uff9b\000\002\001\uff9c\000" +
    "\002\001\uff9d\000\002\001\uff9a\000\002\001\uffa9\000\002" +
    "\001\uffa6\000\002\001\uff8e\000\002\001\uff90\000\002\001" +
    "\uff8f\000\002\001\uff99\000\002\001\uff95\000\002\001\uff96" +
    "\000\002\001\uff98\000\002\001\uff97\000\002\001\uffd2\000" +
    "\010\024\u0150\025\u014f\026\u0151\001\uffcf\000\002\001\uffc9" +
    "\000\002\001\uffca\000\004\130\u016b\001\002\000\004\130" +
    "\u0159\001\002\000\004\130\u0154\001\002\000\002\001\uffcd" +
    "\000\002\001\uffcb\000\004\007\u0155\001\uffc5\000\004\130" +
    "\u0158\001\002\000\002\001\uffc6\000\002\001\uffc7\000\002" +
    "\001\uffc4\000\010\007\u015a\125\u015f\126\u015d\001\uffc1\000" +
    "\004\007\u0169\001\002\000\002\001\uffc0\000\002\001\uffc3" +
    "\000\004\130\056\001\ufed9\000\010\007\u015a\125\u015f\126" +
    "\u015d\001\uffc2\000\004\007\u0160\001\002\000\006\010\u0163" +
    "\013\u0161\001\002\000\002\001\uffb9\000\002\001\uffbb\000" +
    "\002\001\uffb8\000\010\010\u0163\013\u0161\130\056\001\ufed9" +
    "\000\002\001\uffba\000\002\001\uffbe\000\002\001\uffbf\000" +
    "\002\001\uffbd\000\004\130\056\001\ufed9\000\002\001\uffbc" +
    "\000\004\007\u0155\001\uffc5\000\002\001\uffc8\000\002\001" +
    "\uffcc" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u016b\000\010\025\005\051\006\052\003\001\001\000" +
    "\010\004\016\005\020\053\017\001\001\000\010\026\013" +
    "\027\011\030\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\067\031\065\001\001" +
    "\000\002\001\001\000\032\006\024\007\032\010\043\011" +
    "\023\012\036\013\026\014\041\021\042\022\033\023\037" +
    "\024\027\025\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\016\060" +
    "\017\064\020\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\010\063" +
    "\011\023\012\036\013\026\014\041\021\042\022\033\023" +
    "\037\024\027\025\031\001\001\000\002\001\001\000\010" +
    "\016\060\017\062\020\052\001\001\000\010\016\060\017" +
    "\061\020\052\001\001\000\004\054\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\047\016\050\020" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\057\001\001\000\002\001\001\000\004" +
    "\020\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\033\u010f\121\u0111" +
    "\122\u0110\001\001\000\002\001\001\000\006\003\072\032" +
    "\070\001\001\000\010\034\075\035\074\036\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\040\371\041\373\001\001\000\002\001\001\000\014" +
    "\037\103\167\104\170\106\214\102\215\110\001\001\000" +
    "\004\225\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\055\206\076\205\077\201\100\203\171\202\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\167\177\214\102\215\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\172\130\173\124\174\132" +
    "\175\117\176\127\200\131\205\120\207\114\212\125\213" +
    "\123\001\001\000\002\001\001\000\004\211\173\001\001" +
    "\000\002\001\001\000\004\203\167\001\001\000\004\206" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\201\153\202\156\211\154\213\155\001\001\000\004\203" +
    "\150\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\216\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\172\130\175\133" +
    "\176\127\200\131\205\120\207\114\212\125\213\123\001" +
    "\001\000\002\001\001\000\012\217\142\220\136\221\140" +
    "\222\141\001\001\000\002\001\001\000\006\221\145\222" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\204\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\211\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\177\171\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\210\175\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\054\370\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\056\236\057\226\064\237\067\234\070\242" +
    "\101\223\102\245\103\253\104\261\105\230\106\220\110" +
    "\232\120\244\001\001\000\002\001\001\000\010\055\206" +
    "\077\216\100\203\001\001\000\006\071\214\072\212\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\060\357\062\361" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\056\236\057\226\064\237\067\234\070\242" +
    "\103\253\104\355\105\230\106\220\110\232\120\244\001" +
    "\001\000\012\073\334\074\342\075\324\223\326\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\065\322\066" +
    "\265\216\266\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\111\300\112\310\114\312\001" +
    "\001\000\002\001\001\000\006\067\276\120\244\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\071\272\072" +
    "\212\001\001\000\010\065\270\066\265\216\266\001\001" +
    "\000\002\001\001\000\006\071\263\072\212\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\066\271\216\266\001\001\000\002\001\001" +
    "\000\004\107\274\001\001\000\006\071\275\072\212\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\112\320\114\312\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\115\315\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\066\271\216\266\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\074\354\075\324\223\326\001\001\000\002" +
    "\001\001\000\010\074\353\075\324\223\326\001\001\000" +
    "\006\116\352\117\346\001\001\000\006\116\347\117\346" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\113\351\114\350\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\061\363\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\062\367\001\001\000" +
    "\004\063\364\001\001\000\002\001\001\000\004\216\366" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\043\u0101\044\u0102\001\001\000\004\226\376" +
    "\001\001\000\014\042\374\055\206\076\375\077\201\100" +
    "\203\001\001\000\002\001\001\000\010\055\206\077\216" +
    "\100\203\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\227\u010c\001\001\000\006\046\u0105\047\u0106\001\001" +
    "\000\014\045\u0103\055\206\076\u0104\077\201\100\203\001" +
    "\001\000\002\001\001\000\010\055\206\077\216\100\203" +
    "\001\001\000\002\001\001\000\014\050\u010a\055\206\076" +
    "\u010b\077\201\100\203\001\001\000\004\230\u0108\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\055\206\077\216\100\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\123\u014a\124\u014b\125\u0151\126\u0152\127\u014d\130\u014c" +
    "\001\001\000\006\140\u0115\141\u0114\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\142\u011c\143\u011b\144\u0119" +
    "\001\001\000\002\001\001\000\004\224\u0117\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\145\u0123\146\u0120" +
    "\147\u011f\150\u011e\151\u0122\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\152\u012f\153\u0133\154\u0127\155\u0130\156\u012d" +
    "\157\u0136\160\u0135\161\u0132\162\u012a\165\u0134\001\001\000" +
    "\010\146\u0120\147\u0126\151\u0122\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\164\u0148\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\153\u0141\154\u0127\155\u0130\156\u012d" +
    "\157\u0136\160\u0135\161\u0132\162\u012a\165\u0134\001\001\000" +
    "\002\001\001\000\004\163\u013e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\166\u0138\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\125\u016c\126\u0152" +
    "\127\u014d\130\u014c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\136\u0156\137" +
    "\u0155\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\131\u015b\132\u015d\133" +
    "\u015a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\054\u0167\001\001\000\004\133\u0166\001" +
    "\001\000\002\001\001\000\006\134\u0163\135\u0161\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\054\u0165\135\u0164\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\054" +
    "\u0169\001\001\000\002\001\001\000\006\136\u016b\137\u0155" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ZCDParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ZCDParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ZCDParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

  action_obj.initActionClass();

    }


   Module module     = ModulesFactory.getDefaultModule();
   Summary summary   = module.getSummary();
   Configuration cfg = Configuration.getInstance();
   ParserInfo      info     = ParserInfo.getInstance();
             
   public void syntax_error(Symbol token) throws ParseException {
          info.syntax_error(token);
   }

   public void unrecovered_syntax_error(Symbol token) throws ParseException {
      info.unrecovered_syntax_error(token);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ZCDParser$actions {


   Module          module   = null;
   Summary         summary  = null;
   Persistence     fichero  = null;
   ZCDCode         code     = null;
   BlockCode       currBlock = null; 
   IssuesChecker   issues    = null;

   ParserInfo      info     = ParserInfo.getInstance();
      
   Variable    currVar  = null;
   StmtCobol lastStmt = null;  // Ultima instruccion
   StmtCobol currStmt = null;  // Instruccion en proceso
   
   boolean   hasEndProgram = false; // Hay STOPRUN o GOBACK?
    
   boolean master     = false;  // El fichero es el maestro?   
   int     numFillers = 0;
          
   public void initActionClass() {
      module  = ModulesFactory.getMainModule();
      summary = module.getSummary();
      code = new ZCDCode(module);
      issues = new IssuesChecker(module);
   }

   public String getSymbolName(Symbol s)    { return (String) s.value; }
   public int    getSymbolLine(Symbol s)    { return (int)    s.left;  }
   
   public void debug(String txt) { System.err.println(txt); }
   public void print(String txt) { 
      System.out.println(txt); 
   }


  private final ZCDParser parser;

  /** Constructor */
  CUP$ZCDParser$actions(ZCDParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ZCDParser$do_action(
    int                        CUP$ZCDParser$act_num,
    java_cup.runtime.lr_parser CUP$ZCDParser$parser,
    java.util.Stack            CUP$ZCDParser$stack,
    int                        CUP$ZCDParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ZCDParser$result;

      /* select the action based on the action number */
      switch (CUP$ZCDParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // endp_opt ::= 
            {
              Symbol RESULT =null;
		 RESULT = null; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("endp_opt",42, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // endp_opt ::= ENDP 
            {
              Symbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol e = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = e;    
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("endp_opt",42, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // figurative ::= NULL 
            {
              Symbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("figurative",145, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // figurative ::= QUOTE 
            {
              Symbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("figurative",145, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // figurative ::= LOWVAL 
            {
              Symbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("figurative",145, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // figurative ::= HIGHVAL 
            {
              Symbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("figurative",145, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // figurative ::= ZERO 
            {
              Symbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("figurative",145, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // figurative ::= SPACES 
            {
              Symbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("figurative",145, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // padre_indicator ::= IN 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("padre_indicator",144, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // padre_indicator ::= OF 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("padre_indicator",144, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // padre ::= padre_indicator ID 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("padre",143, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // padres ::= padres padre 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("padres",142, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // padres ::= padre 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("padres",142, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // padres_lst ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("padres_lst",141, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // padres_lst ::= padres 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = p;    
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("padres_lst",141, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // rvalue ::= ID padres_lst 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		 RESULT = i; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("rvalue",140, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // init_val_num ::= PIC_FMT pic_dec_opt 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("init_val_num",59, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // init_val_num ::= NUMERO pic_dec_opt 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("init_val_num",59, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // init_val ::= THRU 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("init_val",58, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // init_val ::= HEX_VAL 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("init_val",58, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // init_val ::= PIC_ALPHANUM init_val 
            {
              Symbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = v; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("init_val",58, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // init_val ::= figurative 
            {
              Symbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("init_val",58, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // init_val ::= PIC_NUM 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("init_val",58, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // init_val ::= init_val_num 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("init_val",58, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // init_val ::= DFHCICS 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("init_val",58, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // init_val ::= LITERAL 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("init_val",58, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // init_val_list ::= init_val_list init_val 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currVar.setInitValue((String) i.value); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("init_val_list",57, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // init_val_list ::= init_val 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currVar.setInitValue((String) i.value); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("init_val_list",57, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // var_value ::= VALUE init_val_list 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_value",44, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // pic_size_opt ::= 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_size_opt",73, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // pic_size_opt ::= pic_size 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_size_opt",73, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // pic_dec ::= PIC_DEC pic_size_opt 
            {
              Symbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		 RESULT = p; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_dec",77, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // pic_dec_opt ::= 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_dec_opt",76, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // pic_dec_opt ::= pic_dec 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_dec_opt",76, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // pic_len ::= PIC_NUM 
            {
              Symbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = p; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_len",75, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // pic_len ::= NUMERO 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_len",75, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // pic_size ::= LPAR pic_len RPAR 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		 code.addSize(currVar, s); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_size",74, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // pic_type ::= pic_size 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_type",72, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // pic_type ::= NUMERO 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_type",72, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // pic_type ::= PIC_LEN 
            {
              Symbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 code.calculateSizeLen(currVar, p); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_type",72, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // pic_type ::= PIC_V 
            {
              Symbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 code.calculateSize(currVar, p); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_type",72, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // pic_type ::= PIC_DEC_EMPTY 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_type",72, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // pic_type ::= PIC_DEC 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_type",72, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // pic_type ::= PIC_FMT 
            {
              Symbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 code.calculateSizeFormat(currVar, p); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_type",72, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // pic_type ::= PIC_NUM 
            {
              Symbol RESULT =null;
		 code.addSize(currVar, 1); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_type",72, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // pic_type ::= PIC_ALPHA 
            {
              Symbol RESULT =null;
		 code.addSize(currVar, 1); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_type",72, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // pic_type ::= PIC_ALPHANUM 
            {
              Symbol RESULT =null;
		 code.addSize(currVar, 1); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_type",72, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // pic_types ::= pic_types pic_type 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_types",71, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // pic_types ::= pic_type 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_types",71, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // var_picture ::= PICTURE pic_types 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_picture",70, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // compn ::= COMP6 
            {
              Symbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("compn",78, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // compn ::= COMP5 
            {
              Symbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("compn",78, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // compn ::= COMP4 
            {
              Symbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("compn",78, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // compn ::= COMP3 
            {
              Symbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("compn",78, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // compn ::= COMP2 
            {
              Symbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("compn",78, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // compn ::= COMP1 
            {
              Symbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("compn",78, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // var_type ::= compn 
            {
              Symbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_type",53, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // var_type ::= BLOB PIC_LEN 
            {
              Symbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_type",53, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // var_type ::= BLOB_LOCATOR 
            {
              Symbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_type",53, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // var_type ::= ROWID 
            {
              Symbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_type",53, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // var_type ::= BINARY 
            {
              Symbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_type",53, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // var_type ::= DISPLAY 
            {
              Symbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_type",53, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // var_type ::= PACKED 
            {
              Symbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_type",53, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // var_type ::= INDEX 
            {
              Symbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_type",53, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // var_type ::= POINTER 
            {
              Symbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_type",53, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // var_usage ::= USAGE var_type 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 code.setVarType(currVar,c); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_usage",65, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // var_index ::= FILLER 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_index",52, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // var_index ::= PIC_ALPHA 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_index",52, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // var_index ::= rvalue 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_index",52, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // var_indexes ::= var_indexes var_index 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_indexes",51, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // var_indexes ::= var_index 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_indexes",51, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // var_indexed ::= INDEXED var_indexes 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_indexed",50, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // var_order ::= ORDER var_indexes 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_order",54, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // var_occurs_depending ::= 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_occurs_depending",49, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // var_occurs_depending ::= DEPENDING rvalue 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_occurs_depending",49, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // var_occurs_bound ::= PIC_NUM 
            {
              Symbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = p; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_occurs_bound",48, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // var_occurs_bound ::= NUMERO 
            {
              Symbol RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol n = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = n; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_occurs_bound",48, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // var_occurs_to ::= 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol(0, 0, 0, "0"); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_occurs_to",47, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // var_occurs_to ::= TO var_occurs_bound 
            {
              Symbol RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol n = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = n; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_occurs_to",47, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // var_occurs_from ::= var_occurs_bound 
            {
              Symbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = v; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_occurs_from",46, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // var_occurs ::= OCCURS var_occurs_from var_occurs_to var_occurs_depending 
            {
              Symbol RESULT =null;
		int fromleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int fromright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		Symbol from = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int toleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Symbol to = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		 
                        code.setBounds(currVar, from, to);
                     
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_occurs",45, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // var_renames_opt ::= 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_renames_opt",69, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // var_renames_opt ::= THRU var_name 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_renames_opt",69, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // var_renames ::= RENAMES var_name var_renames_opt 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_renames",68, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // var_redefines ::= REDEFINES var_name 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 module.setRedefines(currVar, (String)i.value); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_redefines",67, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // var_attr ::= var_usage 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_attr",66, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // var_attr ::= var_type 
            {
              Symbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 code.setVarType(currVar,v); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_attr",66, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // var_attr ::= var_order 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_attr",66, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // var_attr ::= var_value 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_attr",66, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // var_attr ::= var_indexed 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_attr",66, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // var_attr ::= var_occurs 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_attr",66, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // var_attr ::= var_picture 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_attr",66, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // var_attr ::= var_renames 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_attr",66, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // var_attr ::= var_redefines 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_attr",66, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // var_data ::= var_data var_attr 
            {
              Var RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_data",63, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // var_data ::= var_attr 
            {
              Var RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_data",63, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // var_data_def ::= 
            {
              Var RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_data_def",64, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // var_data_def ::= var_data 
            {
              Var RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_data_def",64, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // nivel ::= LEVEL 
            {
              Symbol RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol n = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = n; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("nivel",43, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // var_filler ::= 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol(ZCDSym.FILLER,0,0, " "); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_filler",56, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // var_filler ::= FILLER 
            {
              Symbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_filler",56, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // var_name ::= var_filler 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 String f = "F_" + ++numFillers;
                                 RESULT = new SymbolExt(s, f); 
                              
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_name",55, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // var_name ::= PIC_ALPHA 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_name",55, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // var_name ::= PIC_ALPHANUM 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_name",55, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // var_name ::= ID 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_name",55, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // var_def ::= nivel var_name 
            {
              Variable RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Symbol n = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currVar = code.createVar(n,s);
                                      RESULT = currVar; 
                                   
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_def",62, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // variable ::= ENDSQL endp_opt 
            {
              Variable RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("variable",61, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // variable ::= SQLDATA 
            {
              Variable RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("variable",61, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // variable ::= var_def var_data_def ENDP 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		 RESULT = module.addVariable(v); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("variable",61, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // variables ::= variables variable 
            {
              Variable RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("variables",60, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // variables ::= variable 
            {
              Variable RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("variables",60, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // linkage_data ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("linkage_data",38, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // linkage_data ::= variables 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("linkage_data",38, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // sect_linkage_header ::= LINKAGE_SECTION NT$4 ENDP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("sect_linkage_header",37, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // NT$4 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
 code.setSection(CDG.SECT_LINK, s.left); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("NT$4",150, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // section_linkage ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("section_linkage",36, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // section_linkage ::= sect_linkage_header linkage_data 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("section_linkage",36, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // local_data ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("local_data",35, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // local_data ::= variables 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("local_data",35, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // sect_local_header ::= LOCAL_SECTION NT$3 ENDP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("sect_local_header",34, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // NT$3 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
 code.setSection(CDG.SECT_LOCAL, s.left); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("NT$3",149, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // section_local ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("section_local",33, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // section_local ::= sect_local_header local_data 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("section_local",33, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // working_data ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("working_data",32, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // working_data ::= variables 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("working_data",32, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // sect_working_header ::= WORKING_SECTION NT$2 ENDP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("sect_working_header",31, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // NT$2 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
 code.setSection(CDG.SECT_WORK, s.left); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("NT$2",148, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // section_working ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("section_working",30, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // section_working ::= sect_working_header working_data 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("section_working",30, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // fd_attr_depending ::= DEPENDING rvalue 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_depending",137, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // fd_attr_number ::= PIC_NUM 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_number",135, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // fd_attr_number ::= NUMERO 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_number",135, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // fd_attr_linage ::= LINAGE fd_attr_number 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_linage",136, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // fd_fields ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_fields",119, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // fd_fields ::= variables 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_fields",119, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // fd_attr_records ::= RECORDS 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_records",129, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // fd_attr_records ::= RECORD 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_records",129, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // fd_attr_record_to ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_record_to",130, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // fd_attr_record_to ::= TO fd_attr_number 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_record_to",130, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // fd_attr_record_size ::= fd_attr_number fd_attr_record_to 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_record_size",128, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // fd_attr_record_detail ::= fd_attr_depending 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_record_detail",127, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // fd_attr_record_detail ::= fd_attr_record_size 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_record_detail",127, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // fd_attr_record ::= RECORD fd_attr_record_detail 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_record",126, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // fd_attr_block_records ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_block_records",134, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // fd_attr_block_records ::= RECORDS 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_block_records",134, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // fd_attr_block ::= BLOCK NUMERO fd_attr_block_records 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_block",133, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // fd_attr_label ::= LABEL fd_attr_records 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_label",120, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // fd_attr_mode_type ::= FILLER 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_mode_type",132, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // fd_attr_mode_type ::= PIC_DEC 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_mode_type",132, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // fd_attr_mode_type ::= ID 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_mode_type",132, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // fd_attr_mode ::= RECORDING fd_attr_mode_type 
            {
              Option RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol a = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = new Option(i.sym , (String) i.value, a); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_mode",131, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // fd_attr_name ::= fd_attr_name ID 
            {
              SymbolList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SymbolList l = (SymbolList)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = l.add(i);          
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_name",125, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // fd_attr_name ::= ID 
            {
              SymbolList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = new SymbolList(i); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_name",125, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // fd_attr_names ::= DATA fd_attr_records fd_attr_name 
            {
              Option RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SymbolList f = (SymbolList)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 Option o = new Option(d.sym, d.value);
                                                            RESULT = o.add(f); 
                                                         
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_names",124, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // fd_attr ::= fd_attr_depending 
            {
              Option RESULT =null;
		 RESULT = new Option(); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr",123, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // fd_attr ::= fd_attr_linage 
            {
              Option RESULT =null;
		 RESULT = new Option(); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr",123, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // fd_attr ::= fd_attr_record 
            {
              Option RESULT =null;
		 RESULT = new Option(); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr",123, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // fd_attr ::= fd_attr_block 
            {
              Option RESULT =null;
		 RESULT = new Option(); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr",123, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // fd_attr ::= fd_attr_label 
            {
              Option RESULT =null;
		 RESULT = new Option(); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr",123, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // fd_attr ::= fd_attr_mode 
            {
              Option RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option f = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr",123, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // fd_attr ::= fd_attr_names 
            {
              Option RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option f = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr",123, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // fd_attrs ::= fd_attrs fd_attr 
            {
              OptionList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		OptionList t = (OptionList)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option f = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = t.add(f);          
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attrs",122, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // fd_attrs ::= fd_attr 
            {
              OptionList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option f = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = new OptionList(f); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attrs",122, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // fd_attrs_opt ::= 
            {
              OptionList RESULT =null;
		 RESULT = new OptionList(); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attrs_opt",121, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // fd_attrs_opt ::= fd_attrs 
            {
              OptionList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		OptionList f = (OptionList)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f;                
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attrs_opt",121, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // fd_desc ::= SD 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_desc",139, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // fd_desc ::= FD 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_desc",139, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // fd_def ::= fd_desc ID fd_attrs_opt ENDP 
            {
              Variable RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		OptionList a = (OptionList)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		 module.setRecordName(s.value, a.getOptionValues(ZCDSym.DATA)); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_def",138, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // fd ::= fd_def fd_fields 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Variable d = (Variable)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd",117, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // fd_list ::= fd_list fd 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_list",118, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // fd_list ::= fd 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_list",118, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // file_data ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_data",29, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // file_data ::= fd_list 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_data",29, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // sect_file_header ::= FILE_SECTION NT$1 ENDP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("sect_file_header",28, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$1 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
 code.setSection(CDG.SECT_FILE, s.left); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("NT$1",147, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // section_file ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("section_file",27, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // section_file ::= sect_file_header file_data 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("section_file",27, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // bloque_data ::= section_file section_working section_local section_linkage 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("bloque_data",26, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // data_div_header ::= DIV_DATA ENDP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currBlock = new BlockCode(s, p); 
                                          code.setDivision(CDG.SECT_DATA, s.left); 
                                       
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("data_div_header",24, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // data_division ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("data_division",1, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // data_division ::= data_div_header bloque_data 
            {
              Object RESULT =null;
		 issues.checkDivision(currBlock); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("data_division",1, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // file_attr_alt ::= ALTERNATE ID 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_alt",112, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // file_attr_key ::= RECORD ID 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_key",111, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // file_attr_rel ::= RELATIVE ID 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_rel",110, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // file_attr_acc_mode ::= RANDOM 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_acc_mode",116, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // file_attr_acc_mode ::= DYNAMIC 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_acc_mode",116, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // file_attr_acc_mode ::= SEQUENTIAL 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_acc_mode",116, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // file_attr_access ::= ACCESS file_attr_acc_mode 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_access",115, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // file_attr_org_type ::= INDEXED 
            {
              Object RESULT =null;
		 fichero.setType(Persistence.INDEXED); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_org_type",114, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // file_attr_org_type ::= RELATIVE 
            {
              Object RESULT =null;
		 fichero.setType(Persistence.RELATIVE); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_org_type",114, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // file_attr_org_type ::= SEQUENTIAL 
            {
              Object RESULT =null;
		 fichero.setType(Persistence.SEQUENTIAL); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_org_type",114, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // file_attr_org ::= ORGANIZATION file_attr_org_type 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_org",109, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // file_attr_fs ::= STATUS ID 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_fs",108, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // file_attr_assign_dd ::= DISPLAY 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 fichero.setPhysicalName("DISPLAY");        
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_assign_dd",113, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // file_attr_assign_dd ::= ID 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 fichero.setPhysicalName(getSymbolName(s)); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_assign_dd",113, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // file_attr_assign_dd ::= LITERAL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 fichero.setPhysicalName(getSymbolName(s)); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_assign_dd",113, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // file_attr_assign ::= ASSIGN file_attr_assign_dd 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_assign",107, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // file_attr_item ::= file_attr_alt 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_item",105, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // file_attr_item ::= file_attr_rel 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_item",105, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // file_attr_item ::= file_attr_key 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_item",105, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // file_attr_item ::= file_attr_org 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_item",105, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // file_attr_item ::= file_attr_common 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_item",105, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // file_attr_item ::= file_attr_access 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_item",105, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // file_attr_item ::= file_attr_fs 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_item",105, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // file_attr_item ::= file_attr_assign 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_item",105, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // file_attrs ::= file_attrs file_attr_item 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attrs",104, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // file_attrs ::= file_attr_item 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attrs",104, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // file_select ::= SELECT ID 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 fichero = new Persistence(getSymbolName(s), master);
                               module.addFile(fichero);
                               master = false; 
                               module.setFile();
                            
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_select",103, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // select_file ::= file_select file_attrs ENDP 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("select_file",100, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // select_file_mark ::= select_file 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("select_file_mark",101, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // select_file_mark ::= SDPMASTER 
            {
              Object RESULT =null;
		 master = true; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("select_file_mark",101, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // select_files ::= select_files select_file_mark 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("select_files",99, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // select_files ::= select_file_mark 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("select_files",99, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // select_file_list ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("select_file_list",102, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // select_file_list ::= select_files 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("select_file_list",102, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // file_control_header ::= FILE_CONTROL ENDP 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_control_header",98, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // file_control_decl ::= file_control_header select_file_list 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_control_decl",97, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sect_io_bloques ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("sect_io_bloques",96, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sect_io_bloques ::= file_control_decl 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("sect_io_bloques",96, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sect_io_header ::= IO_SECTION NT$0 ENDP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("sect_io_header",95, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$0 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
 code.setSection(CDG.SECT_IO, s.left); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("NT$0",146, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // section_io ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("section_io",94, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // section_io ::= sect_io_header sect_io_bloques 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("section_io",94, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // special_name_item ::= NUMERO 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("special_name_item",91, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // special_name_item ::= LITERAL 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("special_name_item",91, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // special_names_items ::= special_names_items special_name_item 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("special_names_items",90, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // special_names_items ::= special_name_item 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("special_names_items",90, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // special_name ::= ID ID endp_opt 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("special_name",89, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // special_name ::= DEC_POINT endp_opt 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("special_name",89, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // special_name ::= CLASS ID special_names_items endp_opt 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("special_name",89, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // special_names_lst ::= special_names_lst special_name 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("special_names_lst",88, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // special_names_lst ::= special_name 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("special_names_lst",88, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // special_names_lst_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("special_names_lst_opt",87, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // special_names_lst_opt ::= special_names_lst 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("special_names_lst_opt",87, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // conf_sect_special ::= SPECIAL_NAMES ENDP special_names_lst_opt 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_special",86, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // computer_name ::= ID ENDP 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("computer_name",93, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // computer_name_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("computer_name_opt",92, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // computer_name_opt ::= computer_name 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("computer_name_opt",92, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // conf_sect_object ::= OBJECT_COMPUTER ENDP computer_name_opt 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_object",85, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // conf_sect_source ::= SOURCE_COMPUTER ENDP computer_name_opt 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_source",84, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // conf_sect_item ::= conf_sect_special 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_item",83, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // conf_sect_item ::= conf_sect_object 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_item",83, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // conf_sect_item ::= conf_sect_source 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_item",83, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // conf_sect_data ::= conf_sect_data conf_sect_item 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_data",82, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // conf_sect_data ::= conf_sect_item 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_data",82, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // conf_sect_data_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_data_opt",81, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // conf_sect_data_opt ::= conf_sect_data 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_data_opt",81, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // conf_sect_header ::= CONF_SECTION ENDP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		 code.setSection(CDG.SECT_CONF, s.left); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_header",80, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // configuration_section ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("configuration_section",79, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // configuration_section ::= conf_sect_header conf_sect_data_opt 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("configuration_section",79, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // bloque_env ::= configuration_section section_io 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("bloque_env",25, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // env_div_header ::= DIV_ENV ENDP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currBlock = new BlockCode(s, p); 
                                              code.setDivision(CDG.SECT_ENV, s.left); 
                                           
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("env_div_header",23, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // environment_division ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("environment_division",0, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // environment_division ::= env_div_header bloque_env 
            {
              Object RESULT =null;
		 issues.checkDivision(currBlock); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("environment_division",0, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sdpDescLinea ::= LITCONCAT 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 module.setDescription(s.value, true);  
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("sdpDescLinea",22, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sdpDescLinea ::= LITERAL 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 module.setDescription(s.value, false); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("sdpDescLinea",22, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sdpDescLineas ::= sdpDescLineas sdpDescLinea 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("sdpDescLineas",21, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sdpDescLineas ::= sdpDescLinea 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("sdpDescLineas",21, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sdpDescData ::= 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("sdpDescData",20, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sdpDescData ::= sdpDescLineas 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("sdpDescData",20, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sdpDesc ::= SDPDESC sdpDescData 
            {
              StmtCobol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("sdpDesc",19, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // nombre ::= ENDP 
            {
              Symbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = p; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("nombre",14, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // nombre ::= LITERAL 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("nombre",14, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // nombre ::= NUMERO 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("nombre",14, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // nombre ::= ID 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("nombre",14, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // open_string ::= open_string nombre 
            {
              SymbolList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SymbolList a = (SymbolList)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = a.add(s);          
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("open_string",12, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // open_string ::= nombre 
            {
              SymbolList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = new SymbolList(s); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("open_string",12, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // open_string_opt ::= 
            {
              SymbolList RESULT =null;
		 RESULT = null; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("open_string_opt",13, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // open_string_opt ::= open_string 
            {
              SymbolList RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SymbolList o = (SymbolList)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = o;    
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("open_string_opt",13, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // installation ::= INSTALLATION open_string_opt 
            {
              StmtCobol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SymbolList o = (SymbolList)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = new StmtCobol(i, o); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("installation",17, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // date_compiled ::= DATEC open_string_opt 
            {
              StmtCobol RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SymbolList o = (SymbolList)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = new StmtCobol(d, o); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("date_compiled",16, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // date_written ::= DATEW open_string_opt 
            {
              StmtCobol RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SymbolList o = (SymbolList)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = new StmtCobol(d, o); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("date_written",15, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // author_opt ::= 
            {
              SymbolList RESULT =null;
		 RESULT = null; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("author_opt",11, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // author_opt ::= open_string 
            {
              SymbolList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SymbolList s = (SymbolList)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 module.setAuthor(s.toString()); RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("author_opt",11, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // author_verb ::= AUTHOR 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("author_verb",10, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // author ::= author_verb author_opt 
            {
              StmtCobol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		StmtCobol a = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SymbolList o = (SymbolList)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = a.addRValue(o); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("author",9, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // programId_verb ::= PGMID 
            {
              StmtCobol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = new StmtCobol(p); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("programId_verb",8, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // programId ::= programId_verb endp_opt ID endp_opt 
            {
              StmtCobol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).right;
		StmtCobol p = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol e = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = p.addRValue(s); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("programId",7, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ident_sentence ::= sdpDesc 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_sentence",6, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ident_sentence ::= remarks 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_sentence",6, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ident_sentence ::= date_compiled 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_sentence",6, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ident_sentence ::= date_written 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_sentence",6, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ident_sentence ::= installation 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_sentence",6, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ident_sentence ::= author 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_sentence",6, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ident_sentence ::= programId 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_sentence",6, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ident_sentences ::= ident_sentences ident_sentence 
            {
              StmtCobol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		StmtCobol i = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currBlock.addStatement(i); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_sentences",5, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ident_sentences ::= ident_sentence 
            {
              StmtCobol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		StmtCobol i = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currBlock.addStatement(i); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_sentences",5, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ident_bloque ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_bloque",4, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ident_bloque ::= ident_sentences 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_bloque",4, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ident_div_header ::= DIV_ID ENDP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currBlock = new BlockCode(s, p); 
                                          code.setDivision(CDG.SECT_ID, s.left); 
                                       
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_div_header",3, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // identification_division ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("identification_division",2, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // identification_division ::= ident_div_header ident_bloque 
            {
              Object RESULT =null;
		 issues.checkDivision(currBlock); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("identification_division",2, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // module ::= identification_division environment_division data_division 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("module",41, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // descripcion ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("descripcion",40, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // descripcion ::= sdpDesc 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("descripcion",40, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= cobolData EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		StmtCobol start_val = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		RESULT = start_val;
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ZCDParser$parser.done_parsing();
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // cobolData ::= descripcion module 
            {
              StmtCobol RESULT =null;
		 issues.checkDivision(currBlock); 
                                     RESULT = null; 
                                  
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("cobolData",39, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

