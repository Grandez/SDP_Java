
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Nov 26 12:29:06 CET 2017
//----------------------------------------------------

package com.jgg.sdp.parser.lang;

import java_cup.runtime.*;
import com.jgg.sdp.common.ctes.*;
import com.jgg.sdp.common.config.*;
import com.jgg.sdp.module.base.*;
import com.jgg.sdp.module.items.*;
import com.jgg.sdp.module.factorias.*;
import com.jgg.sdp.parser.base.*;
import com.jgg.sdp.parser.code.*;
import com.jgg.sdp.blocks.symbols.*;
import com.jgg.sdp.blocks.stmt.*;
import com.jgg.sdp.rules.components.RulesData;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Nov 26 12:29:06 CET 2017
  */
public class ZCDParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ZCDParser() {super();}

  /** Constructor which sets the default scanner. */
  public ZCDParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ZCDParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0120\000\002\045\003\000\002\002\004\000\002\217" +
    "\002\000\002\046\006\000\002\004\004\000\002\004\002" +
    "\000\002\005\004\000\002\006\003\000\002\006\002\000" +
    "\002\007\003\000\002\007\004\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\011\006" +
    "\000\002\012\003\000\002\013\004\000\002\014\003\000" +
    "\002\020\004\000\002\021\004\000\002\022\004\000\002" +
    "\023\004\000\002\016\003\000\002\016\002\000\002\015" +
    "\003\000\002\015\004\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\002\004\000" +
    "\002\002\002\000\002\025\004\000\002\027\004\000\002" +
    "\114\004\000\002\114\002\000\002\115\004\000\002\116" +
    "\003\000\002\116\002\000\002\117\003\000\002\117\004" +
    "\000\002\120\003\000\002\120\003\000\002\120\003\000" +
    "\002\121\005\000\002\122\005\000\002\131\003\000\002" +
    "\131\002\000\002\132\004\000\002\123\005\000\002\124" +
    "\003\000\002\124\002\000\002\125\003\000\002\125\004" +
    "\000\002\126\006\000\002\126\004\000\002\126\005\000" +
    "\002\127\003\000\002\127\004\000\002\130\003\000\002" +
    "\130\003\000\002\133\004\000\002\133\002\000\002\220" +
    "\002\000\002\134\005\000\002\135\003\000\002\135\002" +
    "\000\002\136\004\000\002\137\004\000\002\143\003\000" +
    "\002\143\002\000\002\140\003\000\002\140\004\000\002" +
    "\142\003\000\002\142\003\000\002\141\005\000\002\144" +
    "\004\000\002\145\003\000\002\145\004\000\002\146\003" +
    "\000\002\146\003\000\002\146\003\000\002\146\003\000" +
    "\002\146\003\000\002\146\003\000\002\146\003\000\002" +
    "\146\003\000\002\150\004\000\002\156\003\000\002\156" +
    "\003\000\002\156\003\000\002\151\004\000\002\152\004" +
    "\000\002\157\003\000\002\157\003\000\002\157\003\000" +
    "\002\160\004\000\002\161\003\000\002\161\003\000\002" +
    "\161\003\000\002\153\004\000\002\154\004\000\002\155" +
    "\004\000\002\003\004\000\002\003\002\000\002\026\004" +
    "\000\002\030\006\000\002\031\004\000\002\031\002\000" +
    "\002\221\002\000\002\032\005\000\002\033\003\000\002" +
    "\033\002\000\002\163\003\000\002\163\004\000\002\162" +
    "\004\000\002\207\006\000\002\210\003\000\002\210\003" +
    "\000\002\166\003\000\002\166\002\000\002\167\003\000" +
    "\002\167\004\000\002\170\003\000\002\170\003\000\002" +
    "\170\003\000\002\170\003\000\002\170\003\000\002\170" +
    "\003\000\002\170\003\000\002\171\005\000\002\172\003" +
    "\000\002\172\004\000\002\200\004\000\002\201\003\000" +
    "\002\201\003\000\002\201\003\000\002\165\004\000\002" +
    "\202\005\000\002\203\003\000\002\203\002\000\002\173" +
    "\004\000\002\174\003\000\002\174\003\000\002\175\004" +
    "\000\002\177\004\000\002\177\002\000\002\176\003\000" +
    "\002\176\003\000\002\164\003\000\002\164\002\000\002" +
    "\205\004\000\002\204\003\000\002\204\003\000\002\206" +
    "\004\000\002\034\004\000\002\034\002\000\002\222\002" +
    "\000\002\035\005\000\002\036\003\000\002\036\002\000" +
    "\002\037\004\000\002\037\002\000\002\223\002\000\002" +
    "\040\005\000\002\041\003\000\002\041\002\000\002\042" +
    "\004\000\002\042\002\000\002\224\002\000\002\043\005" +
    "\000\002\044\003\000\002\044\002\000\002\071\003\000" +
    "\002\071\004\000\002\072\005\000\002\072\003\000\002" +
    "\072\003\000\002\073\004\000\002\064\003\000\002\064" +
    "\003\000\002\064\003\000\002\064\003\000\002\065\003" +
    "\000\002\065\002\000\002\050\003\000\002\075\003\000" +
    "\002\075\002\000\002\074\003\000\002\074\004\000\002" +
    "\077\003\000\002\077\003\000\002\077\003\000\002\077" +
    "\003\000\002\077\003\000\002\077\003\000\002\077\003" +
    "\000\002\077\003\000\002\077\003\000\002\100\004\000" +
    "\002\101\005\000\002\102\004\000\002\102\002\000\002" +
    "\052\006\000\002\053\003\000\002\054\004\000\002\054" +
    "\002\000\002\055\003\000\002\055\003\000\002\056\004" +
    "\000\002\056\002\000\002\063\004\000\002\057\004\000" +
    "\002\060\003\000\002\060\004\000\002\061\003\000\002" +
    "\061\003\000\002\061\003\000\002\076\004\000\002\062" +
    "\003\000\002\062\003\000\002\062\003\000\002\062\003" +
    "\000\002\062\003\000\002\062\003\000\002\062\003\000" +
    "\002\062\004\000\002\062\003\000\002\113\003\000\002" +
    "\113\003\000\002\113\003\000\002\113\003\000\002\113" +
    "\003\000\002\113\003\000\002\103\004\000\002\104\003" +
    "\000\002\104\004\000\002\105\003\000\002\105\003\000" +
    "\002\105\003\000\002\105\003\000\002\105\003\000\002" +
    "\105\003\000\002\105\003\000\002\105\003\000\002\105" +
    "\003\000\002\105\003\000\002\107\005\000\002\110\003" +
    "\000\002\110\003\000\002\111\003\000\002\111\002\000" +
    "\002\112\004\000\002\106\003\000\002\106\002\000\002" +
    "\051\004\000\002\066\003\000\002\066\004\000\002\067" +
    "\003\000\002\067\003\000\002\067\003\000\002\067\003" +
    "\000\002\067\003\000\002\067\004\000\002\067\003\000" +
    "\002\067\003\000\002\070\004\000\002\070\004\000\002" +
    "\211\004\000\002\212\003\000\002\212\002\000\002\213" +
    "\003\000\002\213\004\000\002\214\004\000\002\215\003" +
    "\000\002\215\003\000\002\216\003\000\002\216\003\000" +
    "\002\216\003\000\002\216\003\000\002\216\003\000\002" +
    "\216\003\000\002\047\003\000\002\047\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0163\000\004\004\010\001\ufffc\000\002\001\uffff\000" +
    "\002\001\001\000\016\026\030\027\017\030\024\031\021" +
    "\032\013\033\031\001\ufff9\000\004\002\012\001\002\000" +
    "\004\130\011\001\002\000\002\001\ufffb\000\002\001\000" +
    "\000\012\007\035\010\036\013\034\130\041\001\uffe6\000" +
    "\004\130\052\001\ufee2\000\002\001\ufffd\000\002\001\ufff1" +
    "\000\012\007\035\010\036\013\034\130\041\001\uffe6\000" +
    "\002\001\ufff5\000\012\007\035\010\036\013\034\130\041" +
    "\001\uffe6\000\002\001\ufff4\000\002\001\ufff6\000\012\007" +
    "\035\010\036\013\034\130\041\001\uffe6\000\002\001\ufff0" +
    "\000\016\026\030\027\017\030\024\031\021\032\013\033" +
    "\031\001\ufffa\000\002\001\ufff3\000\002\001\uffee\000\012" +
    "\007\035\010\036\013\034\130\041\001\uffe6\000\002\001" +
    "\ufff8\000\002\001\ufff2\000\002\001\uffe1\000\002\001\uffe3" +
    "\000\002\001\uffe2\000\002\001\uffe5\000\012\007\035\010" +
    "\036\013\034\130\041\001\uffe7\000\002\001\uffe0\000\002" +
    "\001\uffe8\000\002\001\uffe4\000\002\001\ufff7\000\002\001" +
    "\uffeb\000\002\001\uffea\000\002\001\uffed\000\002\001\uffec" +
    "\000\004\007\053\001\002\000\002\001\ufee3\000\004\130" +
    "\052\001\ufee2\000\002\001\uffef\000\002\001\uffe9\000\004" +
    "\005\060\001\uffde\000\004\021\u010b\001\uffda\000\004\130" +
    "\u0107\001\002\000\004\006\063\001\uff95\000\004\014\071" +
    "\001\uff91\000\004\130\065\001\002\000\002\001\ufffe\000" +
    "\002\001\uff94\000\004\015\363\001\uff61\000\002\001\uff96" +
    "\000\006\042\077\055\101\001\uff8d\000\002\001\uff90\000" +
    "\004\130\073\001\002\000\002\001\uff8f\000\010\011\200" +
    "\137\176\140\173\001\uff67\000\002\001\uff92\000\002\001" +
    "\uff8c\000\002\001\uff88\000\006\042\077\055\101\001\uff8e" +
    "\000\002\001\uff87\000\004\007\103\001\002\000\020\037" +
    "\104\040\110\045\114\046\105\051\107\053\113\102\120" +
    "\001\uff85\000\004\010\166\001\002\000\006\010\144\111" +
    "\151\001\002\000\002\001\uff7f\000\010\007\161\073\162" +
    "\107\163\001\002\000\006\052\143\053\141\001\002\000" +
    "\002\001\uff84\000\002\001\uff81\000\010\010\144\102\120" +
    "\111\151\001\002\000\006\052\143\053\141\001\002\000" +
    "\002\001\uff7c\000\004\130\140\001\002\000\002\001\uff7d" +
    "\000\004\007\126\001\002\000\002\001\uff82\000\002\001" +
    "\uff80\000\002\001\uff7e\000\020\037\104\040\110\045\114" +
    "\046\105\051\107\053\113\102\120\001\uff86\000\002\001" +
    "\uff83\000\006\135\131\136\135\001\ufeef\000\002\001\uff63" +
    "\000\006\135\131\136\135\001\ufef0\000\002\001\ufeea\000" +
    "\002\001\ufeee\000\004\007\136\001\002\000\002\001\ufef1" +
    "\000\002\001\ufeeb\000\002\001\ufeec\000\002\001\ufeed\000" +
    "\002\001\uff89\000\002\001\uff6a\000\002\001\uff74\000\002" +
    "\001\uff69\000\002\001\uff65\000\002\001\uff70\000\004\134" +
    "\152\001\uff6b\000\002\001\uff6e\000\002\001\uff6f\000\002" +
    "\001\uff64\000\006\010\144\111\151\001\002\000\002\001" +
    "\uff6d\000\002\001\uff6c\000\004\007\156\001\002\000\002" +
    "\001\uff7a\000\004\007\160\001\uff7b\000\002\001\uff79\000" +
    "\002\001\uff77\000\002\001\uff75\000\002\001\uff76\000\002" +
    "\001\uff78\000\002\001\uff66\000\004\052\170\001\uff71\000" +
    "\002\001\uff73\000\002\001\uff72\000\002\001\uff8b\000\002" +
    "\001\uff50\000\002\001\uff4c\000\002\001\uff8a\000\056\043" +
    "\233\044\252\061\213\062\223\063\214\064\251\065\247" +
    "\066\246\067\244\070\243\071\242\074\235\075\232\076" +
    "\217\077\225\100\216\101\211\103\221\104\240\115\250" +
    "\117\227\127\241\001\uff42\000\002\001\uff4d\000\012\007" +
    "\203\073\204\105\206\106\210\001\uff45\000\002\001\uff44" +
    "\000\010\011\200\137\176\140\173\001\uff68\000\002\001" +
    "\uff4f\000\002\001\uff4a\000\002\001\uff46\000\002\001\uff47" +
    "\000\002\001\uff49\000\002\001\uff4b\000\002\001\uff48\000" +
    "\006\010\350\111\352\001\002\000\002\001\uff3e\000\002" +
    "\001\uff1e\000\002\001\uff1c\000\056\043\233\044\252\061" +
    "\213\062\223\063\214\064\251\065\247\066\246\067\244" +
    "\070\243\071\242\074\235\075\232\076\217\077\225\100" +
    "\216\101\211\103\221\104\240\115\250\117\227\127\241" +
    "\001\uff43\000\036\010\327\012\325\013\321\072\332\105" +
    "\324\111\315\112\330\116\333\120\331\121\317\122\336" +
    "\123\323\124\335\131\322\001\002\000\002\001\uff20\000" +
    "\002\001\uff3c\000\010\007\126\073\256\106\261\001\002" +
    "\000\002\001\uff3f\000\004\113\313\001\002\000\002\001" +
    "\uff3d\000\026\010\301\105\274\106\304\107\273\110\275" +
    "\111\276\112\271\113\277\114\303\132\300\001\002\000" +
    "\002\001\uff38\000\036\044\252\061\213\062\223\063\214" +
    "\064\251\065\247\066\246\067\244\070\243\071\242\076" +
    "\217\104\240\115\250\127\241\001\002\000\002\001\uff3a" +
    "\000\002\001\uff3b\000\012\007\203\073\204\105\206\106" +
    "\210\001\uff45\000\010\007\126\073\256\106\261\001\002" +
    "\000\002\001\uff39\000\012\007\203\073\204\105\206\106" +
    "\210\001\uff45\000\002\001\uff1a\000\004\130\052\001\ufee2" +
    "\000\002\001\uff22\000\002\001\uff1f\000\002\001\uff14\000" +
    "\002\001\uff15\000\002\001\uff16\000\002\001\uff37\000\002" +
    "\001\uff17\000\002\001\uff18\000\002\001\uff1d\000\002\001" +
    "\uff19\000\002\001\uff21\000\002\001\uff41\000\002\001\uff4e" +
    "\000\002\001\uff36\000\002\001\uff24\000\002\001\uff28\000" +
    "\002\001\uff26\000\002\001\uff25\000\010\007\126\073\256" +
    "\106\261\001\uff29\000\002\001\uff27\000\004\131\265\001" +
    "\uff33\000\012\007\203\073\204\105\206\106\210\001\uff45" +
    "\000\002\001\uff35\000\002\001\uff34\000\002\001\uff23\000" +
    "\002\001\uff0d\000\026\010\301\105\274\106\304\107\273" +
    "\110\275\111\276\112\271\113\277\114\303\132\300\001" +
    "\uff13\000\002\001\uff0c\000\002\001\uff10\000\002\001\uff0b" +
    "\000\002\001\uff0e\000\002\001\uff09\000\006\010\306\111" +
    "\310\001\002\000\002\001\uff08\000\002\001\uff12\000\002" +
    "\001\uff0a\000\002\001\uff0f\000\002\001\uff07\000\002\001" +
    "\uff05\000\004\133\311\001\002\000\002\001\uff04\000\002" +
    "\001\uff06\000\002\001\uff11\000\002\001\uff1b\000\010\007" +
    "\126\073\256\106\261\001\uff2a\000\002\001\ufef8\000\002" +
    "\001\ufef9\000\002\001\ufee7\000\002\001\ufef7\000\002\001" +
    "\ufefb\000\002\001\ufef4\000\002\001\ufee5\000\036\010\327" +
    "\012\325\013\321\072\332\105\324\111\315\112\330\116" +
    "\333\120\331\121\317\122\336\123\323\124\335\131\322" +
    "\001\002\000\002\001\ufef5\000\036\010\327\012\325\013" +
    "\321\072\332\105\324\111\315\112\330\116\333\120\331" +
    "\121\317\122\336\123\323\124\335\131\322\001\ufefe\000" +
    "\004\107\337\001\uff02\000\004\107\337\001\uff02\000\002" +
    "\001\ufee8\000\002\001\ufefa\000\002\001\ufee9\000\002\001" +
    "\ufefd\000\002\001\ufee4\000\002\001\ufee6\000\004\132\300" +
    "\001\ufeff\000\002\001\uff03\000\002\001\ufef2\000\002\001" +
    "\uff00\000\002\001\uff01\000\002\001\ufef3\000\002\001\ufefc" +
    "\000\002\001\ufef6\000\002\001\uff40\000\002\001\uff2e\000" +
    "\004\134\354\001\uff2f\000\002\001\uff2d\000\002\001\uff31" +
    "\000\006\010\350\111\352\001\002\000\004\102\357\001" +
    "\uff2b\000\002\001\uff32\000\004\007\126\001\002\000\002" +
    "\001\uff2c\000\002\001\uff30\000\004\016\371\001\uff5b\000" +
    "\002\001\uff60\000\010\011\200\137\176\140\173\001\uff5d" +
    "\000\002\001\uff62\000\010\011\200\137\176\140\173\001" +
    "\uff5e\000\004\130\370\001\002\000\002\001\uff5f\000\002" +
    "\001\uff5a\000\004\017\u0100\001\uff55\000\010\011\200\137" +
    "\176\140\173\001\uff57\000\002\001\uff5c\000\010\011\200" +
    "\137\176\140\173\001\uff58\000\002\001\uff93\000\010\011" +
    "\200\137\176\140\173\001\uff51\000\002\001\uff54\000\004" +
    "\130\u0102\001\002\000\002\001\uff53\000\002\001\uff56\000" +
    "\010\011\200\137\176\140\173\001\uff52\000\004\130\u0106" +
    "\001\002\000\002\001\uff59\000\002\001\uffdd\000\002\001" +
    "\uffdf\000\010\023\u0148\024\u0147\025\u0149\001\uffd7\000\004" +
    "\022\u010f\001\uffbf\000\004\130\u010c\001\002\000\002\001" +
    "\uffd9\000\004\020\u0112\001\uffbb\000\002\001\uffdc\000\002" +
    "\001\uffbe\000\004\130\u0111\001\002\000\002\001\uffbd\000" +
    "\004\130\u0142\001\002\000\006\057\u011c\141\u0119\001\uffb7" +
    "\000\002\001\uffbc\000\002\001\uffc0\000\002\001\uffba\000" +
    "\002\001\uffb6\000\002\001\uffb3\000\002\001\uffb4\000\020" +
    "\034\u012f\035\u0126\036\u0129\047\u0120\053\u0123\054\u0125\060" +
    "\u0121\001\002\000\006\057\u011c\141\u0119\001\uffb8\000\004" +
    "\007\u011d\001\002\000\002\001\uffb1\000\002\001\uffb5\000" +
    "\002\001\uffab\000\010\043\u013e\054\u013f\056\u0141\001\002" +
    "\000\004\007\u013d\001\002\000\002\001\uffa7\000\004\007" +
    "\u013c\001\002\000\002\001\uffad\000\004\007\u013b\001\002" +
    "\000\004\007\u013a\001\002\000\002\001\uffae\000\022\034" +
    "\u012f\035\u0126\036\u0129\047\u0120\053\u0123\054\u0125\060\u0121" +
    "\130\u0138\001\002\000\010\007\u0135\013\u0134\127\u0137\001" +
    "\002\000\002\001\uffa9\000\002\001\uffb0\000\002\001\uffa8" +
    "\000\002\001\uffac\000\002\001\uffaa\000\010\041\u0131\050" +
    "\u0132\056\u0133\001\002\000\002\001\uff9d\000\002\001\uff9b" +
    "\000\002\001\uff9a\000\002\001\uff9c\000\002\001\uffa5\000" +
    "\002\001\uffa4\000\002\001\uffa6\000\002\001\uffa3\000\002" +
    "\001\uffb2\000\002\001\uffaf\000\002\001\uff97\000\002\001" +
    "\uff99\000\002\001\uff98\000\002\001\uffa2\000\002\001\uff9e" +
    "\000\002\001\uff9f\000\002\001\uffa1\000\002\001\uffa0\000" +
    "\002\001\uffb9\000\002\001\uffdb\000\010\023\u0148\024\u0147" +
    "\025\u0149\001\uffd8\000\002\001\uffd2\000\002\001\uffd3\000" +
    "\004\130\u0163\001\002\000\004\130\u0151\001\002\000\004" +
    "\130\u014c\001\002\000\002\001\uffd6\000\002\001\uffd4\000" +
    "\004\007\u014e\001\uffce\000\002\001\uffcf\000\004\130\u0150" +
    "\001\002\000\002\001\uffd0\000\002\001\uffcd\000\010\007" +
    "\u0152\125\u0157\126\u0155\001\uffca\000\004\007\u0161\001\002" +
    "\000\002\001\uffc9\000\002\001\uffcc\000\004\130\052\001" +
    "\ufee2\000\010\007\u0152\125\u0157\126\u0155\001\uffcb\000\004" +
    "\007\u0158\001\002\000\006\010\u015a\013\u015b\001\002\000" +
    "\002\001\uffc4\000\002\001\uffc1\000\002\001\uffc2\000\010" +
    "\010\u015a\013\u015b\130\052\001\ufee2\000\002\001\uffc3\000" +
    "\002\001\uffc7\000\002\001\uffc8\000\002\001\uffc6\000\004" +
    "\130\052\001\ufee2\000\002\001\uffc5\000\004\007\u014e\001" +
    "\uffce\000\002\001\uffd1\000\002\001\uffd5" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0163\000\012\004\003\005\005\045\006\046\004\001" +
    "\001\000\004\217\055\001\001\000\002\001\001\000\030" +
    "\006\014\007\025\010\031\011\022\012\013\013\017\020" +
    "\032\021\015\022\021\023\026\024\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\015\037\016\054\017\036\001\001\000\004" +
    "\047\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\014\046\015\037\016\047\017\036\001\001\000\002" +
    "\001\001\000\010\015\037\016\045\017\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\037\016\044" +
    "\017\036\001\001\000\002\001\001\000\024\010\043\011" +
    "\022\012\013\013\017\020\032\021\015\022\021\023\026" +
    "\024\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\015\037\016\041\017\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\047\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\060\025\056\001\001\000\010\027" +
    "\u0107\114\u0109\115\u0108\001\001\000\002\001\001\000\006" +
    "\003\063\026\061\001\001\000\010\030\066\031\065\032" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\034\361\035\363\001\001\000\002\001" +
    "\001\000\014\033\074\162\075\163\077\207\073\210\101" +
    "\001\001\000\004\221\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\050\176\071\200\072\171\073\174" +
    "\164\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\162\170\207\073\210\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\165\121\166" +
    "\115\167\123\170\110\171\120\173\122\200\111\202\105" +
    "\205\116\206\114\001\001\000\002\001\001\000\004\204" +
    "\164\001\001\000\002\001\001\000\004\201\163\001\001" +
    "\000\004\176\154\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\174\144\175\147\204\145\206\146\001\001" +
    "\000\004\176\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\211\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\165" +
    "\121\170\124\171\120\173\122\200\111\202\105\205\116" +
    "\206\114\001\001\000\002\001\001\000\012\212\133\213" +
    "\127\214\131\215\132\001\001\000\002\001\001\000\006" +
    "\214\136\215\132\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\177\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\204\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\172\156\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\203\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\051\227\052\217\057\230\062\225\063" +
    "\233\074\214\075\236\076\244\077\252\100\221\101\211" +
    "\103\223\113\235\001\001\000\002\001\001\000\006\064" +
    "\206\065\204\001\001\000\002\001\001\000\010\050\176" +
    "\072\201\073\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\053\350\055" +
    "\352\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\051\227\052\217\057\230\062\225\063" +
    "\233\076\244\077\346\100\221\101\211\103\223\113\235" +
    "\001\001\000\012\066\325\067\333\070\315\216\317\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\060\313" +
    "\061\256\211\257\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\104\271\105\301\107\304" +
    "\001\001\000\002\001\001\000\006\062\267\113\235\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\064\263" +
    "\065\204\001\001\000\010\060\261\061\256\211\257\001" +
    "\001\000\002\001\001\000\006\064\254\065\204\001\001" +
    "\000\002\001\001\000\004\047\253\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\061\262\211\257\001\001\000" +
    "\002\001\001\000\004\102\265\001\001\000\006\064\266" +
    "\065\204\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\105\311\107\304" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\110\306" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\061\262\211\257" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\067\345\070\315\216\317\001" +
    "\001\000\002\001\001\000\010\067\344\070\315\216\317" +
    "\001\001\000\006\111\343\112\337\001\001\000\006\111" +
    "\340\112\337\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\106\342\107\341\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\054\354\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\055\360" +
    "\001\001\000\004\056\355\001\001\000\002\001\001\000" +
    "\004\211\357\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\037\371\040\372\001\001\000\004\222\366\001" +
    "\001\000\014\036\364\050\176\071\365\072\171\073\174" +
    "\001\001\000\002\001\001\000\010\050\176\072\201\073" +
    "\174\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\223\u0104\001\001\000\006\042\375\043\376\001\001\000" +
    "\014\041\373\050\176\071\374\072\171\073\174\001\001" +
    "\000\002\001\001\000\010\050\176\072\201\073\174\001" +
    "\001\000\002\001\001\000\014\044\u0102\050\176\071\u0103" +
    "\072\171\073\174\001\001\000\004\224\u0100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\050\176\072\201\073\174\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\116\u0142\117\u0143\120\u0149\121\u014a\122\u0145\123\u0144\001" +
    "\001\000\006\133\u010d\134\u010c\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\135\u0114\136\u0113\137\u0112\001" +
    "\001\000\002\001\001\000\004\220\u010f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\140" +
    "\u011a\141\u0117\142\u0116\143\u0115\144\u0119\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\145\u0127" +
    "\146\u012a\147\u011e\150\u0126\151\u0123\152\u012d\153\u012b\154" +
    "\u0129\155\u0121\160\u012c\001\001\000\010\141\u0117\142\u011d" +
    "\144\u0119\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\157\u013f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\146\u0138\147\u011e\150\u0126\151\u0123\152" +
    "\u012d\153\u012b\154\u0129\155\u0121\160\u012c\001\001\000\004" +
    "\156\u0135\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\161\u012f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\120\u0164\121\u014a\122" +
    "\u0145\123\u0144\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\131\u014e\132\u014c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\124\u0153\125\u0155\126\u0152" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\047\u015f\001\001\000\004\126\u015e\001\001" +
    "\000\002\001\001\000\006\127\u015b\130\u0158\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\047\u015d\130\u015c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\047\u0161" +
    "\001\001\000\002\001\001\000\006\131\u0163\132\u014c\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ZCDParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ZCDParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ZCDParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 action_obj.initActionClass();    
    }


   GenericScanner scanner = null;
   Module module     = ModulesFactory.getDefaultModule();
   Summary summary   = module.getSummary();
   Configuration cfg = ConfigurationBase.getInstance();
   ParserInfo    info     = ParserInfo.getInstance();
             
   public void syntax_error(Symbol token) throws ParseException {
          info.syntax_error(token);
   }

   public void unrecovered_syntax_error(Symbol token) throws ParseException {
      info.unrecovered_syntax_error(token);
   }
   

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ZCDParser$actions {


   Module          module   = null;
   Summary         summary  = null;
   Persistence     fichero  = null;
   ZCDCode         code     = null;
   BlockCode       currBlock = null; 
   RulesData       rules     = new RulesData();

   ParserInfo      info     = ParserInfo.getInstance();
      
   Variable  currVar  = null;
   StmtGral  currStmt = null;  // Instruccion en proceso
   
   boolean   hasEndProgram = false; // Hay STOPRUN o GOBACK?
    
   boolean master     = false;  // El fichero es el maestro?   
   int     numFillers = 0;
          
   public void initActionClass() {
      module  = ModulesFactory.getMainModule();
      summary = module.getSummary();
      code = new ZCDCode(module);
   }

   public String getSymbolName(Symbol s)    { return (String) s.value; }
   public int    getSymbolLine(Symbol s)    { return (int)    s.left;  }
   
   public void debug(String txt) { System.err.println(txt); }
   public void print(String txt) { 
      System.out.println(txt); 
   }


  private final ZCDParser parser;

  /** Constructor */
  CUP$ZCDParser$actions(ZCDParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ZCDParser$do_action(
    int                        CUP$ZCDParser$act_num,
    java_cup.runtime.lr_parser CUP$ZCDParser$parser,
    java.util.Stack            CUP$ZCDParser$stack,
    int                        CUP$ZCDParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ZCDParser$result;

      /* select the action based on the action number */
      switch (CUP$ZCDParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // endp_opt ::= 
            {
              Symbol RESULT =null;
		 RESULT = null; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("endp_opt",37, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // endp_opt ::= ENDP 
            {
              Symbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol e = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = e;    
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("endp_opt",37, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // figurative ::= NULL 
            {
              Symbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("figurative",140, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // figurative ::= QUOTE 
            {
              Symbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("figurative",140, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // figurative ::= LOWVAL 
            {
              Symbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("figurative",140, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // figurative ::= HIGHVAL 
            {
              Symbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("figurative",140, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // figurative ::= ZERO 
            {
              Symbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("figurative",140, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // figurative ::= SPACES 
            {
              Symbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("figurative",140, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // padre_indicator ::= IN 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("padre_indicator",139, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // padre_indicator ::= OF 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("padre_indicator",139, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // padre ::= padre_indicator ID 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("padre",138, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // padres ::= padres padre 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("padres",137, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // padres ::= padre 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("padres",137, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // padres_lst ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("padres_lst",136, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // padres_lst ::= padres 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = p;    
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("padres_lst",136, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // rvalue ::= ID padres_lst 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		 RESULT = i; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("rvalue",135, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // init_val_num ::= PIC_FMT pic_dec_opt 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("init_val_num",54, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // init_val_num ::= NUMERO pic_dec_opt 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("init_val_num",54, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // init_val ::= THRU 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("init_val",53, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // init_val ::= HEX_VAL 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("init_val",53, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // init_val ::= PIC_ALPHANUM init_val 
            {
              Symbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = v; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("init_val",53, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // init_val ::= figurative 
            {
              Symbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("init_val",53, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // init_val ::= PIC_NUM 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("init_val",53, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // init_val ::= init_val_num 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("init_val",53, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // init_val ::= DFHCICS 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("init_val",53, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // init_val ::= LITERAL 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("init_val",53, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // init_val_list ::= init_val_list init_val 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currVar.setInitValue((String) i.value); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("init_val_list",52, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // init_val_list ::= init_val 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currVar.setInitValue((String) i.value); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("init_val_list",52, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // var_value ::= VALUE init_val_list 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_value",39, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // pic_size_opt ::= 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_size_opt",68, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // pic_size_opt ::= pic_size 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_size_opt",68, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // pic_dec ::= PIC_DEC pic_size_opt 
            {
              Symbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		 RESULT = p; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_dec",72, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // pic_dec_opt ::= 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_dec_opt",71, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // pic_dec_opt ::= pic_dec 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_dec_opt",71, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // pic_len ::= PIC_NUM 
            {
              Symbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = p; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_len",70, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // pic_len ::= NUMERO 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_len",70, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // pic_size ::= LPAR pic_len RPAR 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		 code.addSize(currVar, s); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_size",69, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // pic_type ::= pic_size 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_type",67, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // pic_type ::= NUMERO 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_type",67, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // pic_type ::= PIC_LEN 
            {
              Symbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 code.calculateSizeLen(currVar, p); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_type",67, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // pic_type ::= PIC_V 
            {
              Symbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 code.calculateSize(currVar, p); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_type",67, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // pic_type ::= PIC_DEC_EMPTY 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_type",67, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // pic_type ::= PIC_DEC 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_type",67, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // pic_type ::= PIC_FMT 
            {
              Symbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 code.calculateSizeFormat(currVar, p); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_type",67, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // pic_type ::= PIC_NUM 
            {
              Symbol RESULT =null;
		 code.addSize(currVar, 1); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_type",67, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // pic_type ::= PIC_ALPHA 
            {
              Symbol RESULT =null;
		 code.addSize(currVar, 1); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_type",67, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // pic_type ::= PIC_ALPHANUM 
            {
              Symbol RESULT =null;
		 code.addSize(currVar, 1); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_type",67, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // pic_types ::= pic_types pic_type 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_types",66, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // pic_types ::= pic_type 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("pic_types",66, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // var_picture ::= PICTURE pic_types 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_picture",65, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // compn ::= COMP6 
            {
              Symbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("compn",73, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // compn ::= COMP5 
            {
              Symbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("compn",73, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // compn ::= COMP4 
            {
              Symbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("compn",73, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // compn ::= COMP3 
            {
              Symbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("compn",73, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // compn ::= COMP2 
            {
              Symbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("compn",73, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // compn ::= COMP1 
            {
              Symbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("compn",73, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // var_type ::= compn 
            {
              Symbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_type",48, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // var_type ::= BLOB PIC_LEN 
            {
              Symbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_type",48, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // var_type ::= BLOB_LOCATOR 
            {
              Symbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_type",48, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // var_type ::= ROWID 
            {
              Symbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_type",48, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // var_type ::= BINARY 
            {
              Symbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_type",48, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // var_type ::= DISPLAY 
            {
              Symbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_type",48, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // var_type ::= PACKED 
            {
              Symbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_type",48, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // var_type ::= INDEX 
            {
              Symbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_type",48, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // var_type ::= POINTER 
            {
              Symbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_type",48, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // var_usage ::= USAGE var_type 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 code.setVarType(currVar,c); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_usage",60, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // var_index ::= FILLER 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_index",47, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // var_index ::= PIC_ALPHA 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_index",47, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // var_index ::= rvalue 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_index",47, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // var_indexes ::= var_indexes var_index 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_indexes",46, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // var_indexes ::= var_index 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_indexes",46, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // var_indexed ::= INDEXED var_indexes 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_indexed",45, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // var_order ::= ORDER var_indexes 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_order",49, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // var_occurs_depending ::= 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_occurs_depending",44, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // var_occurs_depending ::= DEPENDING rvalue 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_occurs_depending",44, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // var_occurs_bound ::= PIC_NUM 
            {
              Symbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = p; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_occurs_bound",43, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // var_occurs_bound ::= NUMERO 
            {
              Symbol RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol n = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = n; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_occurs_bound",43, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // var_occurs_to ::= 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol(0, 0, 0, "0"); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_occurs_to",42, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // var_occurs_to ::= TO var_occurs_bound 
            {
              Symbol RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol n = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = n; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_occurs_to",42, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // var_occurs_from ::= var_occurs_bound 
            {
              Symbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = v; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_occurs_from",41, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // var_occurs ::= OCCURS var_occurs_from var_occurs_to var_occurs_depending 
            {
              Symbol RESULT =null;
		int fromleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int fromright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		Symbol from = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int toleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Symbol to = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		 
                        code.setBounds(currVar, from, to);
                     
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_occurs",40, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // var_renames_opt ::= 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_renames_opt",64, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // var_renames_opt ::= THRU var_name 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_renames_opt",64, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // var_renames ::= RENAMES var_name var_renames_opt 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_renames",63, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // var_redefines ::= REDEFINES var_name 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 module.setRedefines(currVar, (String)i.value); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_redefines",62, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // var_attr ::= var_usage 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_attr",61, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // var_attr ::= var_type 
            {
              Symbol RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 code.setVarType(currVar,v); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_attr",61, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // var_attr ::= var_order 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_attr",61, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // var_attr ::= var_value 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_attr",61, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // var_attr ::= var_indexed 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_attr",61, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // var_attr ::= var_occurs 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_attr",61, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // var_attr ::= var_picture 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_attr",61, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // var_attr ::= var_renames 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_attr",61, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // var_attr ::= var_redefines 
            {
              Symbol RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_attr",61, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // var_data ::= var_data var_attr 
            {
              Var RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_data",58, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // var_data ::= var_attr 
            {
              Var RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_data",58, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // var_data_def ::= 
            {
              Var RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_data_def",59, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // var_data_def ::= var_data 
            {
              Var RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_data_def",59, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // nivel ::= LEVEL 
            {
              Symbol RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol n = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = n; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("nivel",38, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // var_filler ::= 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol(ZCDSym.FILLER,0,0, " "); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_filler",51, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // var_filler ::= FILLER 
            {
              Symbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_filler",51, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // var_name ::= var_filler 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 String f = "F_" + ++numFillers;
                                 RESULT = new SymbolExt(s, f); 
                              
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_name",50, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // var_name ::= PIC_ALPHA 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_name",50, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // var_name ::= PIC_ALPHANUM 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_name",50, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // var_name ::= ID 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_name",50, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // var_def ::= nivel var_name 
            {
              Variable RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Symbol n = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currVar = code.createVar(n,s);
                                      RESULT = currVar; 
                                   
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("var_def",57, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // variable ::= ENDSQL 
            {
              Variable RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("variable",56, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // variable ::= SQLDATA 
            {
              Variable RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("variable",56, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // variable ::= var_def var_data_def endp_opt 
            {
              Variable RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		 RESULT = module.addVariable(v); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("variable",56, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // variables ::= variables variable 
            {
              Variable RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("variables",55, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // variables ::= variable 
            {
              Variable RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("variables",55, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // linkage_data ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("linkage_data",34, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // linkage_data ::= variables 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("linkage_data",34, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // sect_linkage_header ::= LINKAGE_SECTION NT$5 ENDP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("sect_linkage_header",33, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // NT$5 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
 code.setSection(CDG.SECT_LINK, s.left); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("NT$5",146, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // section_linkage ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("section_linkage",32, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // section_linkage ::= sect_linkage_header linkage_data 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("section_linkage",32, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // local_data ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("local_data",31, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // local_data ::= variables 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("local_data",31, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // sect_local_header ::= LOCAL_SECTION NT$4 ENDP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("sect_local_header",30, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // NT$4 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
 code.setSection(CDG.SECT_LOCAL, s.left); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("NT$4",145, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // section_local ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("section_local",29, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // section_local ::= sect_local_header local_data 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("section_local",29, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // working_data ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("working_data",28, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // working_data ::= variables 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("working_data",28, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // sect_working_header ::= WORKING_SECTION NT$3 ENDP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("sect_working_header",27, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // NT$3 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
 code.setSection(CDG.SECT_WORK, s.left); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("NT$3",144, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // section_working ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("section_working",26, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // section_working ::= sect_working_header working_data 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("section_working",26, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // fd_attr_depending ::= DEPENDING rvalue 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_depending",132, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // fd_attr_number ::= PIC_NUM 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_number",130, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // fd_attr_number ::= NUMERO 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_number",130, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // fd_attr_linage ::= LINAGE fd_attr_number 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_linage",131, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // fd_fields ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_fields",114, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // fd_fields ::= variables 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_fields",114, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // fd_attr_records ::= RECORDS 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_records",124, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // fd_attr_records ::= RECORD 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_records",124, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // fd_attr_record_to ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_record_to",125, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // fd_attr_record_to ::= TO fd_attr_number 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_record_to",125, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // fd_attr_record_size ::= fd_attr_number fd_attr_record_to 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_record_size",123, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // fd_attr_record_detail ::= fd_attr_depending 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_record_detail",122, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // fd_attr_record_detail ::= fd_attr_record_size 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_record_detail",122, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // fd_attr_record ::= RECORD fd_attr_record_detail 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_record",121, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // fd_attr_block_records ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_block_records",129, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // fd_attr_block_records ::= RECORDS 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_block_records",129, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // fd_attr_block ::= BLOCK NUMERO fd_attr_block_records 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_block",128, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // fd_attr_label ::= LABEL fd_attr_records 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_label",115, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // fd_attr_mode_type ::= FILLER 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_mode_type",127, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // fd_attr_mode_type ::= PIC_DEC 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_mode_type",127, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // fd_attr_mode_type ::= ID 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_mode_type",127, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // fd_attr_mode ::= RECORDING fd_attr_mode_type 
            {
              Option RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol a = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = new Option(i.sym , (String) i.value, a); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_mode",126, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // fd_attr_name ::= fd_attr_name ID 
            {
              SymbolList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SymbolList l = (SymbolList)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = l.add(i);          
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_name",120, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // fd_attr_name ::= ID 
            {
              SymbolList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = new SymbolList(i); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_name",120, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // fd_attr_names ::= DATA fd_attr_records fd_attr_name 
            {
              Option RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SymbolList f = (SymbolList)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 Option o = new Option(d.sym, d.value);
                                                            RESULT = o.add(f); 
                                                         
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr_names",119, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // fd_attr ::= fd_attr_depending 
            {
              Option RESULT =null;
		 RESULT = new Option(); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr",118, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // fd_attr ::= fd_attr_linage 
            {
              Option RESULT =null;
		 RESULT = new Option(); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr",118, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // fd_attr ::= fd_attr_record 
            {
              Option RESULT =null;
		 RESULT = new Option(); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr",118, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // fd_attr ::= fd_attr_block 
            {
              Option RESULT =null;
		 RESULT = new Option(); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr",118, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // fd_attr ::= fd_attr_label 
            {
              Option RESULT =null;
		 RESULT = new Option(); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr",118, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // fd_attr ::= fd_attr_mode 
            {
              Option RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option f = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr",118, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // fd_attr ::= fd_attr_names 
            {
              Option RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option f = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attr",118, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // fd_attrs ::= fd_attrs fd_attr 
            {
              OptionList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		OptionList t = (OptionList)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option f = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = t.add(f);          
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attrs",117, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // fd_attrs ::= fd_attr 
            {
              OptionList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option f = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = new OptionList(f); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attrs",117, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // fd_attrs_opt ::= 
            {
              OptionList RESULT =null;
		 RESULT = new OptionList(); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attrs_opt",116, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // fd_attrs_opt ::= fd_attrs 
            {
              OptionList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		OptionList f = (OptionList)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = f;                
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_attrs_opt",116, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // fd_desc ::= SD 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_desc",134, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // fd_desc ::= FD 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_desc",134, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // fd_def ::= fd_desc ID fd_attrs_opt ENDP 
            {
              Variable RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		OptionList a = (OptionList)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		 module.setRecordName(s.value, a.getOptionValues(ZCDSym.DATA)); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_def",133, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // fd ::= fd_def fd_fields 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Variable d = (Variable)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd",112, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // fd_list ::= fd_list fd 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_list",113, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // fd_list ::= fd 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("fd_list",113, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // file_data ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_data",25, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // file_data ::= fd_list 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_data",25, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // sect_file_header ::= FILE_SECTION NT$2 ENDP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("sect_file_header",24, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$2 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
 code.setSection(CDG.SECT_FILE, s.left); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("NT$2",143, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // section_file ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("section_file",23, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // section_file ::= sect_file_header file_data 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("section_file",23, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // bloque_data ::= section_file section_working section_local section_linkage 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("bloque_data",22, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // data_div_header ::= DIV_DATA ENDP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currBlock = new BlockCode(s, p); 
                                          code.setDivision(CDG.SECT_DATA, s.left); 
                                       
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("data_div_header",20, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // data_division ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("data_division",1, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // data_division ::= data_div_header bloque_data 
            {
              Object RESULT =null;
		 /* rules.checkDivision(currBlock); */ 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("data_division",1, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // file_attr_alt ::= ALTERNATE ID 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_alt",107, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // file_attr_key ::= RECORD ID 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_key",106, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // file_attr_rel ::= RELATIVE ID 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_rel",105, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // file_attr_acc_mode ::= RANDOM 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_acc_mode",111, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // file_attr_acc_mode ::= DYNAMIC 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_acc_mode",111, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // file_attr_acc_mode ::= SEQUENTIAL 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_acc_mode",111, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // file_attr_access ::= ACCESS file_attr_acc_mode 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_access",110, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // file_attr_org_type ::= INDEXED 
            {
              Object RESULT =null;
		 fichero.setType(Persistence.INDEXED); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_org_type",109, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // file_attr_org_type ::= RELATIVE 
            {
              Object RESULT =null;
		 fichero.setType(Persistence.RELATIVE); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_org_type",109, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // file_attr_org_type ::= SEQUENTIAL 
            {
              Object RESULT =null;
		 fichero.setType(Persistence.SEQUENTIAL); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_org_type",109, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // file_attr_org ::= ORGANIZATION file_attr_org_type 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_org",104, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // file_attr_fs ::= STATUS ID 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_fs",103, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // file_attr_assign_dd ::= DISPLAY 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 fichero.setPhysicalName("DISPLAY");        
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_assign_dd",108, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // file_attr_assign_dd ::= ID 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 fichero.setPhysicalName(getSymbolName(s)); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_assign_dd",108, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // file_attr_assign_dd ::= LITERAL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 fichero.setPhysicalName(getSymbolName(s)); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_assign_dd",108, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // file_attr_assign ::= ASSIGN file_attr_assign_dd 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_assign",102, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // file_attr_item ::= file_attr_alt 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_item",100, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // file_attr_item ::= file_attr_rel 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_item",100, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // file_attr_item ::= file_attr_key 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_item",100, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // file_attr_item ::= file_attr_org 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_item",100, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // file_attr_item ::= file_attr_common 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_item",100, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // file_attr_item ::= file_attr_access 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_item",100, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // file_attr_item ::= file_attr_fs 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_item",100, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // file_attr_item ::= file_attr_assign 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attr_item",100, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // file_attrs ::= file_attrs file_attr_item 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attrs",99, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // file_attrs ::= file_attr_item 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_attrs",99, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // file_select ::= SELECT ID 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 fichero = new Persistence(getSymbolName(s), master);
                               module.addFile(fichero);
                               master = false; 
                               module.setFile();
                            
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_select",98, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // select_file ::= file_select file_attrs ENDP 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("select_file",95, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // select_file_mark ::= select_file 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("select_file_mark",96, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // select_file_mark ::= SDPMASTER 
            {
              Object RESULT =null;
		 master = true; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("select_file_mark",96, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // select_files ::= select_files select_file_mark 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("select_files",94, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // select_files ::= select_file_mark 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("select_files",94, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // select_file_list ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("select_file_list",97, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // select_file_list ::= select_files 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("select_file_list",97, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // file_control_header ::= FILE_CONTROL ENDP 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_control_header",93, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // file_control_decl ::= file_control_header select_file_list 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("file_control_decl",92, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sect_io_bloques ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("sect_io_bloques",91, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sect_io_bloques ::= file_control_decl 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("sect_io_bloques",91, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sect_io_header ::= IO_SECTION NT$1 ENDP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("sect_io_header",90, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$1 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
 code.setSection(CDG.SECT_IO, s.left); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("NT$1",142, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // section_io ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("section_io",89, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // section_io ::= sect_io_header sect_io_bloques 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("section_io",89, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // special_name_item ::= NUMERO 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("special_name_item",86, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // special_name_item ::= LITERAL 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("special_name_item",86, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // special_names_items ::= special_names_items special_name_item 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("special_names_items",85, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // special_names_items ::= special_name_item 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("special_names_items",85, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // special_name ::= ID ID endp_opt 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("special_name",84, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // special_name ::= DEC_POINT endp_opt 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("special_name",84, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // special_name ::= CLASS ID special_names_items endp_opt 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("special_name",84, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // special_names_lst ::= special_names_lst special_name 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("special_names_lst",83, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // special_names_lst ::= special_name 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("special_names_lst",83, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // special_names_lst_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("special_names_lst_opt",82, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // special_names_lst_opt ::= special_names_lst 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("special_names_lst_opt",82, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // conf_sect_special ::= SPECIAL_NAMES ENDP special_names_lst_opt 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_special",81, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // computer_name ::= ID ENDP 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("computer_name",88, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // computer_name_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("computer_name_opt",87, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // computer_name_opt ::= computer_name 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("computer_name_opt",87, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // conf_sect_object ::= OBJECT_COMPUTER ENDP computer_name_opt 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_object",80, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // conf_sect_source ::= SOURCE_COMPUTER ENDP computer_name_opt 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_source",79, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // conf_sect_item ::= conf_sect_special 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_item",78, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // conf_sect_item ::= conf_sect_object 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_item",78, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // conf_sect_item ::= conf_sect_source 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_item",78, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // conf_sect_data ::= conf_sect_data conf_sect_item 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_data",77, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // conf_sect_data ::= conf_sect_item 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_data",77, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // conf_sect_data_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_data_opt",76, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // conf_sect_data_opt ::= conf_sect_data 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_data_opt",76, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // conf_sect_header ::= CONF_SECTION ENDP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		 code.setSection(CDG.SECT_CONF, s.left); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("conf_sect_header",75, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // configuration_section ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("configuration_section",74, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // configuration_section ::= conf_sect_header conf_sect_data_opt 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("configuration_section",74, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // bloque_env ::= configuration_section section_io 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("bloque_env",21, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // env_div_header ::= DIV_ENV ENDP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currBlock = new BlockCode(s, p); 
                                              code.setDivision(CDG.SECT_ENV, s.left); 
                                           
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("env_div_header",19, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // environment_division ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("environment_division",0, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // environment_division ::= env_div_header bloque_env 
            {
              Object RESULT =null;
		 /* rules.checkDivision(currBlock); */ 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("environment_division",0, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // open_string_word ::= ENDP 
            {
              Symbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = p; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("open_string_word",13, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // open_string_word ::= LITERAL 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("open_string_word",13, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // open_string_word ::= NUMERO 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("open_string_word",13, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // open_string_word ::= ID 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = i; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("open_string_word",13, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // open_string ::= open_string open_string_word 
            {
              SymbolList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		SymbolList a = (SymbolList)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = a.add(s);          
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("open_string",11, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // open_string ::= open_string_word 
            {
              SymbolList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = new SymbolList(s); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("open_string",11, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // open_string_opt ::= 
            {
              SymbolExt RESULT =null;
		 RESULT = null;              
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("open_string_opt",12, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // open_string_opt ::= open_string 
            {
              SymbolExt RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SymbolList o = (SymbolList)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = new SymbolExt(o);  
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("open_string_opt",12, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // security ::= SECURITY open_string_opt 
            {
              Option RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SymbolExt o = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = new Option(i, o); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("security",17, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // installation ::= INSTALLATION open_string_opt 
            {
              Option RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SymbolExt o = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = new Option(i, o); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("installation",16, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // date_compiled ::= DATEC open_string_opt 
            {
              Option RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SymbolExt o = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 System.out.println("PARAR"); RESULT = new Option(d, o); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("date_compiled",15, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // date_written ::= DATEW open_string_opt 
            {
              Option RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SymbolExt o = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = new Option(d, o); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("date_written",14, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // author_opt ::= open_string_opt 
            {
              SymbolExt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SymbolExt s = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 // module.setAuthor(s.toString()); 
                                    RESULT = s; 
                                  
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("author_opt",10, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // author ::= AUTHOR author_opt 
            {
              Option RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Symbol a = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		SymbolExt o = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = new Option(a, o); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("author",9, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // programId_verb ::= PGMID 
            {
              Option RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = new Option(p); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("programId_verb",8, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // programId ::= programId_verb endp_opt ID endp_opt 
            {
              Option RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).right;
		Option p = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol e = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = p.addValue(s); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("programId",7, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ident_option ::= remarks 
            {
              Option RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option s = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_option",6, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ident_option ::= date_compiled 
            {
              Option RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option s = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_option",6, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ident_option ::= date_written 
            {
              Option RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option s = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_option",6, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ident_option ::= security 
            {
              Option RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option s = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_option",6, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ident_option ::= installation 
            {
              Option RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option s = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_option",6, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ident_option ::= author 
            {
              Option RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option s = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_option",6, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ident_option ::= programId 
            {
              Option RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option s = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_option",6, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ident_options ::= ident_options ident_option 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option i = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currStmt.addOption(i); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_options",5, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ident_options ::= ident_option 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Option i = (Option)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currStmt.addOption(i); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_options",5, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ident_options_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_options_opt",4, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ident_options_opt ::= ident_options 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_options_opt",4, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ident_div_header ::= DIV_ID ENDP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.peek()).value;
		 currStmt = new StmtGral(s); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("ident_div_header",3, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // identification_division ::= 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("identification_division",2, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // identification_division ::= ident_div_header ident_options_opt 
            {
              Object RESULT =null;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("identification_division",2, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // module ::= identification_division NT$0 environment_division data_division 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-2)).value;

              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("module",36, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-3)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
 rules.checkIdentification(currStmt); 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("NT$0",141, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= cobolData EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).right;
		StmtCobol start_val = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)).value;
		RESULT = start_val;
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.elementAt(CUP$ZCDParser$top-1)), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ZCDParser$parser.done_parsing();
          return CUP$ZCDParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // cobolData ::= module 
            {
              StmtCobol RESULT =null;
		 RESULT = null; 
              CUP$ZCDParser$result = parser.getSymbolFactory().newSymbol("cobolData",35, ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCDParser$stack.peek()), RESULT);
            }
          return CUP$ZCDParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

