package com.jgg.sdp.parser.lang;

import java_cup.runtime.*;

import com.jgg.sdp.parser.base.*;

import com.jgg.sdp.parser.stmt.StmtSQL;
import com.jgg.sdp.parser.symbols.*;
import com.jgg.sdp.common.ctes.*;

parser code {:
   ParserInfo    info     = ParserInfo.getInstance();
   public void syntax_error(SDPSymbol token) throws ParseException {
          info.syntax_error(token);
   }

   public void unrecovered_syntax_error(SDPSymbol token) throws ParseException {
      info.unrecovered_syntax_error(token);
   }
:}

action code {:
   SDPSymbolFactory symbolFactory = new SDPSymbolFactory();
   ParserInfo      info     = ParserInfo.getInstance();
   StmtSQL         stmt     = new StmtSQL(CDG.STMT_SQL, CDG.STMT_PCL);
   
   public void initActionClass() {
   }

   public void print(String txt) { 
      System.out.println(txt); 
   }

:}


init with {:
  action_obj.initActionClass();
:}

/****************************************************************************/
/****************************************************************************/
/*               TERMINALES                                                 */
/****************************************************************************/
/****************************************************************************/

/****************************************************************************/
/***                    PATRONES                                          ***/
/****************************************************************************/

terminal SDPSymbol ID                                    ;
terminal SDPSymbol HOSTVAR1                              ;
terminal SDPSymbol HOSTVAR2                              ;
terminal SDPSymbol IDQUALIFIED                           ;
terminal SDPSymbol PREHOST                               ;

terminal SDPSymbol LITERAL                               ;
terminal SDPSymbol NUM_ENTERO                            ;

terminal SDPSymbol COMMA                                 ;

/****************************************************************************/
/***                    SIMBOLOS                                         ***/
/****************************************************************************/

terminal SDPSymbol ABSOLUTE                              ;
terminal SDPSymbol AFTER                                 ;
terminal SDPSymbol ALLOCATE                              ;
terminal SDPSymbol ASSOCIATE                             ; 
terminal SDPSymbol AT                                    ;

terminal SDPSymbol BEFORE                                ;
terminal SDPSymbol BEGIN                                 ;

terminal SDPSymbol CALL                                  ;
terminal SDPSymbol CLOSE                                 ;

terminal SDPSymbol CONNECT                               ;
terminal SDPSymbol CONTINUE                              ;
terminal SDPSymbol CURRENT                               ;
terminal SDPSymbol CURSOR                                ;

terminal SDPSymbol DECLARE                               ;
terminal SDPSymbol DESCRIPTOR                            ;

terminal SDPSymbol END                                   ;
terminal SDPSymbol EXECUTE                               ;

terminal SDPSymbol FETCH                                 ;
terminal SDPSymbol FIRST                                 ;
terminal SDPSymbol FOR                                   ;
terminal SDPSymbol FOUND                                 ;
terminal SDPSymbol FREE                                  ;
terminal SDPSymbol FROM                                  ;

terminal SDPSymbol GOTO                                  ;

terminal SDPSymbol HOLD                                  ;

terminal SDPSymbol IMMEDIATE                             ;
terminal SDPSymbol INCLUDE                               ;
terminal SDPSymbol INSENSITIVE                           ;
terminal SDPSymbol INTO                                  ;

terminal SDPSymbol LAST                                  ;
terminal SDPSymbol LOCATOR                               ;
terminal SDPSymbol LPAR                                  ;

terminal SDPSymbol NEXT                                  ;
terminal SDPSymbol NOT                                   ;

terminal SDPSymbol OPEN                                  ;

terminal SDPSymbol PREPARE                               ;
terminal SDPSymbol PRIOR                                 ;
terminal SDPSymbol PROCEDURE                             ;

terminal SDPSymbol RELATIVE                              ;
terminal SDPSymbol RESET                                 ;
terminal SDPSymbol RESULT                                ;
terminal SDPSymbol RPAR                                  ;
terminal SDPSymbol ROWSET                                ;
terminal SDPSymbol ROWS                                  ;

terminal SDPSymbol SECTION                               ;
terminal SDPSymbol SENSITIVE                             ;
terminal SDPSymbol SET                                   ;
terminal SDPSymbol SIGNAL                                ;
terminal SDPSymbol SQLERROR                              ;
terminal SDPSymbol SQLWARNING                            ;
terminal SDPSymbol STARTING                              ;

terminal SDPSymbol TO                                    ;

terminal SDPSymbol USER                                  ;
terminal SDPSymbol USING                                 ;

terminal SDPSymbol WHENEVER                              ;

terminal SDPSymbol WITH                                  ;

non terminal Symbol  sql_stmt              ;
non terminal StmtSQL sql_pcl               ;
non terminal StmtSQL sql_allocate          ;
non terminal StmtSQL sql_locator ;
non terminal StmtSQL sql_hold_locator      ;
non terminal StmtSQL sql_free_locator      ;
non terminal StmtSQL sql_call              ;
non terminal StmtSQL sql_close             ;
non terminal StmtSQL sql_connect           ;
non terminal StmtSQL sql_declare_begin     ;
non terminal StmtSQL sql_declare_end       ;
non terminal StmtSQL sql_execute           ;
non terminal StmtSQL sql_fetch             ;
non terminal StmtSQL sql_include           ;
non terminal StmtSQL sql_open              ;
non terminal StmtSQL sql_prepare           ;
non terminal StmtSQL sql_signal            ;
non terminal StmtSQL sql_whenever          ;

non terminal         call_opt              ;

non terminal         connect_opt           ;
non terminal         connect_mode          ;
non terminal         connect_to            ;
non terminal         connect_reset         ;
non terminal         connect_auth          ;
non terminal         connect_auth_opt      ;             

non terminal         declare_section       ;

non terminal         execute_verb          ;
non terminal         execute_type          ;

non terminal         sql_fetch_verb        ;
non terminal         sql_fetch_options     ;
non terminal         sql_fetch_cursor      ;
non terminal         sql_fetch_opt_lst     ;
non terminal         sql_fetch_opt         ;
non terminal         sql_fetch_sensitive   ;
non terminal         sql_fetch_continue    ;
non terminal         sql_fetch_orientation ;
non terminal         sql_fetch_rows        ;
non terminal         sql_fetch_count_opt   ;
non terminal         sql_fetch_fields      ;
non terminal         sql_fetch_fields_lst  ;

non terminal         sql_open_using_opt    ;
non terminal         sql_open_using_type   ;
non terminal         sql_open_using_fields ;

non terminal         whenever_type         ;
non terminal         whenever_action       ;

non terminal         cursor_name           ;

non terminal         locator_variable_lst   ;

non terminal         opt_result_set          ;

non terminal         procedure_name   ;

non terminal         result_set            ;
non terminal         id_base               ;
non terminal         id_qualified          ;
non terminal         id                    ;
             
non terminal         clause_using_opt      ;
non terminal         clause_using_for_opt  ;

non terminal         opt_descriptor        ;
non terminal         descriptor_values     ;

non terminal         opt_continue          ;
non terminal         opt_from              ;
 
non terminal         choice_abs_rel        ;
 
non terminal         var_string            ;
non terminal         var_int               ;
non terminal         var_id                ;

non terminal         host_field            ;
non terminal         host_var_opt          ;
non terminal         host_var              ;
non terminal         host_var_base         ;

non terminal         host_label            ;

non terminal         eat                   ;
non terminal         eat_token             ;

non terminal         non_reserved_words    ;

/**********************************************************************/
/**********************************************************************/
/**********************************************************************/
/*                        INICIO PARSER                               */
/* Devuelve el nombre de la copy si es include                        */
/* Si no devuelve la cadena vacia                                     */
/**********************************************************************/
/**********************************************************************/
/**********************************************************************/

sql_stmt ::= sql_pcl:s {: stmt.adjust(info.getLastSymbol()); 
                          RESULT = symbolFactory.newSymbol(0, 0, 0, stmt); 
                       :}
         ;
    
sql_pcl ::= sql_allocate:s        {: RESULT = s; :}
        |   sql_locator:s         {: RESULT = s; :}
        |   sql_call:s            {: RESULT = s; :}
        |   sql_close:s           {: RESULT = s; :}
        |   sql_connect:s         {: RESULT = s; :}        
        |   sql_declare_begin:s   {: RESULT = s; :}
        |   sql_declare_end:s     {: RESULT = s; :}
        |   sql_execute:s         {: RESULT = s; :}
        |   sql_fetch:s           {: RESULT = s; :}
        |   sql_free_locator:s    {: RESULT = s; :}
        |   sql_hold_locator:s    {: RESULT = s; :}
        |   sql_include:s         {: RESULT = s; :}
        |   sql_open:s            {: RESULT = s; :}
        |   sql_prepare:s         {: RESULT = s; :}        
        |   sql_signal:s          {: RESULT = s; :}
        |   sql_whenever:s        {: RESULT = s; :}        
        ; 

/********************************************************************/
/*                 ALLOCATE                                         */
/********************************************************************/

sql_allocate ::= ALLOCATE:s {: stmt.setVerb(s); :}  cursor_name CURSOR FOR RESULT SET host_var
             ;

/********************************************************************/
/*                 ASSOCIATE                                       */
/********************************************************************/

sql_locator ::= ASSOCIATE:s {: stmt.setVerb(s); :}  opt_result_set LOCATOR LPAR locator_variable_lst RPAR WITH PROCEDURE procedure_name
                      ;

procedure_name ::= id
               |   host_var
               ;

/********************************************************************/
/*                 CALL                                             */
/********************************************************************/

sql_call ::= CALL procedure_name call_opt
         ;
         
call_opt ::= eat
         |
         ;

/********************************************************************/
/*                 CLOSE                                            */
/********************************************************************/

sql_close ::= CLOSE:v {: stmt.setVerb(v); :}  ID
          ;
                                             
/**********************************************************************/
/*                         CONNECT                                    */
/**********************************************************************/

sql_connect ::= CONNECT connect_opt
            ;
            
connect_opt ::= connect_mode
            |
            ;
            
connect_mode ::= connect_to
             |   connect_reset
             |   connect_auth
             ;
             
connect_to ::= TO var_string connect_auth_opt
           ;
           
connect_reset ::= RESET
              ;
              
connect_auth ::= USER host_var USING host_var
             ;
             
connect_auth_opt ::= connect_auth 
                 |
                 ;
                                                                                  
/********************************************************************/
/*                 DECLARE                                          */
/********************************************************************/

sql_declare_begin ::= BEGIN:s {: stmt.setVerb(s); :}  declare_section
                  ;
                  
sql_declare_end ::= END:s {: stmt.setVerb(s); :}  declare_section
                ;
                
declare_section ::= DECLARE:s {: stmt.appendVerb(s); :}  SECTION
                ;                                   

/********************************************************************/
/*                 EXECUTE                                          */
/********************************************************************/

sql_execute ::= execute_verb execute_type locator_variable_lst
            ;
 
execute_verb ::= EXECUTE:p  {: stmt.setVerb(p); :}
             ;
             
execute_type ::= ID clause_using_opt
             |   IMMEDIATE var_string
             ;

clause_using_opt ::= USING opt_descriptor descriptor_values clause_using_for_opt
                 | 
                 ;

descriptor_values ::= var_id
                  |   descriptor_values COMMA var_id
                  ;

clause_using_for_opt ::= FOR var_int ROWS
                     |
                     ;
                                                                                  

/********************************************************************/
/*                 FETCH                                            */
/********************************************************************/

sql_fetch ::= sql_fetch_verb sql_fetch_options opt_from sql_fetch_cursor sql_fetch_rows 
          ;

sql_fetch_verb ::= FETCH:i {: stmt.setVerb(i); 
//JGG                                  stmt.addRValue(new SDPSymbol(m));
                            :}
               ;

sql_fetch_options ::= sql_fetch_opt_lst
                  |
                  ;
                  
sql_fetch_opt_lst ::= sql_fetch_opt
                  |   sql_fetch_opt_lst sql_fetch_opt
                  ;
                  
sql_fetch_opt ::= sql_fetch_continue  
              |   sql_fetch_orientation
              |   sql_fetch_sensitive              
              ;
              
sql_fetch_sensitive ::= INSENSITIVE
                    |   SENSITIVE
                    ;
                    
sql_fetch_continue ::= WITH CONTINUE
                   ;
                   
sql_fetch_orientation ::= NEXT 
                      |   PRIOR 
                      |   FIRST
                      |   LAST
                      |   AFTER
                      |   BEFORE
                      |   CURRENT opt_continue
                      |   ABSOLUTE var_int
                      |   RELATIVE var_int
                      |   ROWSET STARTING AT choice_abs_rel var_int
                      ;

sql_fetch_cursor ::= id
                 ;

sql_fetch_rows ::= sql_fetch_count_opt INTO sql_fetch_fields
               ;
               
sql_fetch_fields ::= sql_fetch_fields_lst
                 |   DESCRIPTOR id
                 ;
                     
sql_fetch_fields_lst ::= host_field
                     |   sql_fetch_fields_lst COMMA host_field
                     ;

sql_fetch_count_opt ::= FOR var_int ROWS
                    |
                    ;
                    
                                  
/********************************************************************/
/*                 INCLUDE                                          */
/********************************************************************/

sql_include ::= INCLUDE:i ID:m {: stmt.setVerb(i); 
                                  stmt.addRValue(new SDPSymbol(m));
                               :}
            ;

/********************************************************************/
/*                 LOCATOR                                          */
/********************************************************************/

sql_free_locator ::= FREE:p LOCATOR:s {: stmt.setVerb(p, s); :}  locator_variable_lst
                 ;

sql_hold_locator ::= HOLD:p LOCATOR:s {: stmt.setVerb(p, s); :}  locator_variable_lst
                 ;

locator_variable_lst ::= host_var
                     |   locator_variable_lst COMMA  host_var
                     ;

/********************************************************************/
/*                 PREPARE                                          */
/********************************************************************/

sql_open ::= OPEN:v {: stmt.setVerb(v); :} id sql_open_using_opt
         ;

sql_open_using_opt ::= USING sql_open_using_type
                   |
                   ;

sql_open_using_type ::= DESCRIPTOR ID
                    |   sql_open_using_fields
                    ;
                    
sql_open_using_fields ::= host_var
                      |   sql_open_using_fields COMMA host_var
                      ;
                                                           
/********************************************************************/
/*                 PREPARE                                          */
/********************************************************************/

sql_prepare ::= PREPARE:s eat
            ;

/********************************************************************/
/*                 SIGNAL                                           */
/********************************************************************/

sql_signal ::= SIGNAL eat
           ;
           
/********************************************************************/
/*                 WHENEVER                                         */
/********************************************************************/

sql_whenever ::= WHENEVER:s {: stmt.setVerb(s); :}  whenever_type whenever_action
             ;

whenever_type ::= NOT FOUND
              |   SQLERROR
              |   SQLWARNING
              ;
              
whenever_action ::= CONTINUE
                |   GOTO host_label
                ;
                               
/**********************************************************************/
/**********************************************************************/
/**********************************************************************/
/*          CLAUSULAS                                                 */
/**********************************************************************/
/**********************************************************************/
/**********************************************************************/
                                               

/**********************************************************************/
/**********************************************************************/
/**********************************************************************/
/*             COMUNES                                                */
/**********************************************************************/
/**********************************************************************/
/**********************************************************************/

cursor_name ::= id
            ;

host_field ::= host_var host_var_opt
           ;
                 

host_var_opt ::= host_var
             |
             ;
             
host_var ::= host_var_base id_qualified
         ;
         
host_var_base ::= HOSTVAR1
              |   HOSTVAR2
              |   PREHOST ID
              ;
                          
id ::= id_base id_qualified
   ;

id_base ::= ID 
        |   non_reserved_words
        ;

id_qualified ::= IDQUALIFIED
             |
             ;


var_string ::= host_var
           |   LITERAL
           ;

var_int ::= host_var
        |   NUM_ENTERO
        ;

var_id ::= host_var
       |   ID
       ;

/**********************************************************************/
/**********************************************************************/
/**********************************************************************/
/*             PALABRAS OPCIONALES                                    */
/**********************************************************************/
/**********************************************************************/
/**********************************************************************/

opt_result_set ::= result_set
               |
               ;

result_set ::= RESULT SET
           ;

opt_descriptor ::= DESCRIPTOR
               |
               ;

opt_from ::= FROM
         |
         ;

choice_abs_rel ::= ABSOLUTE
               |   RELATIVE
               ;
                                                                                                                       
/**********************************************************************/
/**********************************************************************/
/**********************************************************************/
/*            RESTO - SE COME TODO LO QUE HALLA                       */
/*         FUNCIONES Y VERBOS NO ADMITIDOS EN PROGRAMAS               */     
/**********************************************************************/
/**********************************************************************/
/**********************************************************************/
eat ::= eat_token
    |   eat eat_token
    ;
    
eat_token ::= ID
          |   LPAR
          |   RPAR
          |   COMMA
          ;                              
          
non_reserved_words ::= CURSOR
                   ;
          