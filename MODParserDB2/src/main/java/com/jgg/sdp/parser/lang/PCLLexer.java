/* The following code was generated by JFlex 1.6.1 */

package com.jgg.sdp.parser.lang;

import java_cup.runtime.Symbol;
import com.jgg.sdp.parser.base.*;
import static com.jgg.sdp.parser.lang.PCLSym.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>P:/SDP/Java/MODParserDB2/src/main/config/PCLLexer.lex</tt>
 */
public class PCLLexer extends GenericLexer implements GenericScanner, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int QUOTE_STRING = 2;
  public static final int DQUOTE_STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\46\2\0\1\47\22\0\1\1\1\0\1\42\1\4"+
    "\3\0\1\41\1\44\1\45\1\0\1\0\1\43\1\4\1\6\1\0"+
    "\12\5\1\13\6\0\1\15\1\10\1\26\1\32\1\7\1\24\1\12"+
    "\1\33\1\30\2\3\1\21\1\34\1\31\1\20\1\36\1\40\1\25"+
    "\1\17\1\23\1\22\1\35\1\37\1\11\2\3\4\0\1\4\1\0"+
    "\1\15\1\10\1\26\1\32\1\7\1\24\1\12\1\33\1\30\2\3"+
    "\1\21\1\34\1\31\1\20\1\36\1\40\1\25\1\17\1\23\1\22"+
    "\1\35\1\37\1\11\2\3\1\0\1\0\70\0\1\14\172\0\2\27"+
    "\115\0\1\16\u021c\0\1\14\37\0\1\14\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ufc53\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\1\3\1\0\3\2\1\4\1\5"+
    "\1\2\1\0\10\2\1\0\6\2\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\3\14\1\15\4\2\1\0\1\16"+
    "\1\2\1\0\2\2\1\17\1\2\4\0\10\2\1\0"+
    "\1\2\1\20\3\2\1\0\10\2\2\0\7\2\1\0"+
    "\3\2\1\21\3\2\1\22\1\0\1\2\1\0\3\2"+
    "\1\23\5\0\1\23\6\2\1\0\3\2\2\0\4\2"+
    "\1\24\2\2\1\0\1\2\1\0\10\2\4\0\5\2"+
    "\1\25\4\2\1\0\1\2\1\0\3\2\1\0\2\2"+
    "\1\26\1\0\1\2\1\0\3\2\6\0\6\2\1\27"+
    "\2\30\1\2\1\31\1\32\1\0\1\32\3\2\1\33"+
    "\1\34\1\0\1\2\2\0\3\2\2\35\1\36\1\37"+
    "\2\2\1\0\1\2\1\0\2\2\1\0\1\40\2\0"+
    "\1\2\1\40\2\2\1\41\1\2\1\42\2\2\1\0"+
    "\1\2\2\43\2\2\2\44\1\2\1\0\1\2\1\0"+
    "\2\2\1\45\6\0\7\2\2\46\1\47\1\50\2\51"+
    "\1\52\1\0\1\52\2\2\1\0\1\2\1\0\2\2"+
    "\2\53\1\0\2\2\3\0\6\2\2\54\2\2\1\55"+
    "\1\0\1\2\1\0\2\2\3\0\1\56\2\0\3\2"+
    "\1\56\3\2\2\57\1\0\1\2\2\60\1\0\2\2"+
    "\2\61\1\2\3\0\7\2\1\62\1\0\1\2\1\0"+
    "\2\2\1\63\4\0\1\63\4\2\1\64\1\0\1\2"+
    "\1\0\1\2\1\65\1\66\1\0\1\67\1\0\1\2"+
    "\1\67\1\2\1\70\1\71\2\2\2\72\1\0\1\2"+
    "\1\73\1\0\1\74\1\75\1\0\1\2\1\74\1\75"+
    "\1\2\2\76\2\77\2\0\3\2\1\100\2\101\1\102"+
    "\1\0\1\102\1\2\1\0\1\103\1\2\1\103\1\104"+
    "\2\105\1\0\1\2\2\106";

  private static int [] zzUnpackAction() {
    int [] result = new int[402];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\310\0\360\0\u0118"+
    "\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0\0\u0208\0\u0230\0\u0258"+
    "\0\u0280\0\u02a8\0\u02d0\0\u02f8\0\u0320\0\u0348\0\u0370\0\u0398"+
    "\0\u03c0\0\u03e8\0\u0410\0\u0438\0\u0460\0\u0488\0\u01e0\0\u01e0"+
    "\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u04b0\0\u01e0\0\u04d8\0\u0500"+
    "\0\u0528\0\u0550\0\u0578\0\u05a0\0\u05c8\0\u05f0\0\u0618\0\u0640"+
    "\0\u0668\0\u0690\0\310\0\u06b8\0\u06e0\0\u0708\0\u0730\0\u0758"+
    "\0\u0780\0\u07a8\0\u07d0\0\u07f8\0\u0820\0\u0848\0\u0870\0\u0898"+
    "\0\u08c0\0\u08e8\0\310\0\u0910\0\u0938\0\u0960\0\u0988\0\u09b0"+
    "\0\u09d8\0\u0a00\0\u0a28\0\u0a50\0\u0a78\0\u0aa0\0\u0ac8\0\u0af0"+
    "\0\u0b18\0\u0b40\0\u0b68\0\u0b90\0\u0bb8\0\u0be0\0\u0c08\0\u0c30"+
    "\0\u0c58\0\u0c80\0\u0ca8\0\u0cd0\0\310\0\u0cf8\0\u0d20\0\u0d48"+
    "\0\u0d70\0\u0d98\0\u0dc0\0\u0de8\0\u0e10\0\u0e38\0\u0e60\0\u01e0"+
    "\0\u0e88\0\u0eb0\0\u0ed8\0\u0f00\0\u0f28\0\310\0\u0f50\0\u0f78"+
    "\0\u0fa0\0\u0fc8\0\u0ff0\0\u1018\0\u1040\0\u1068\0\u1090\0\u10b8"+
    "\0\u10e0\0\u1108\0\u1130\0\u1158\0\u1180\0\u11a8\0\310\0\u11d0"+
    "\0\u11f8\0\u1220\0\u1248\0\u1270\0\u1298\0\u12c0\0\u12e8\0\u1310"+
    "\0\u1338\0\u1360\0\u1388\0\u13b0\0\u13d8\0\u1400\0\u1428\0\u1450"+
    "\0\u1478\0\u14a0\0\u14c8\0\u14f0\0\u1518\0\310\0\u1540\0\u1568"+
    "\0\u1590\0\u15b8\0\u15e0\0\u1608\0\u1630\0\u1658\0\u1680\0\u16a8"+
    "\0\u16d0\0\u16f8\0\u1720\0\310\0\u1748\0\u1770\0\u1798\0\u17c0"+
    "\0\u17e8\0\u1810\0\u1838\0\u1860\0\u1888\0\u18b0\0\u18d8\0\u1900"+
    "\0\u1928\0\u1950\0\u1978\0\u19a0\0\u19c8\0\u19f0\0\310\0\u01e0"+
    "\0\310\0\u1a18\0\310\0\u01e0\0\u1a40\0\310\0\u1a68\0\u1a90"+
    "\0\u1ab8\0\310\0\310\0\u1ae0\0\u1b08\0\u1b30\0\u1b58\0\u1b80"+
    "\0\u1ba8\0\u1bd0\0\u1bf8\0\u1c20\0\310\0\310\0\u1c48\0\u1c70"+
    "\0\u1c98\0\u1cc0\0\u1ce8\0\u1d10\0\u1d38\0\u1d60\0\u01e0\0\u1d88"+
    "\0\u1db0\0\u1dd8\0\310\0\u1e00\0\u1e28\0\310\0\u1e50\0\310"+
    "\0\u1e78\0\u1ea0\0\u1ec8\0\u1ef0\0\u01e0\0\310\0\u1f18\0\u1f40"+
    "\0\u01e0\0\310\0\u1f68\0\u1f90\0\u1fb8\0\u1fe0\0\u2008\0\u2030"+
    "\0\310\0\u2058\0\u2080\0\u20a8\0\u20d0\0\u20f8\0\u2120\0\u2148"+
    "\0\u2170\0\u2198\0\u21c0\0\u21e8\0\u2210\0\u2238\0\u01e0\0\310"+
    "\0\310\0\310\0\u01e0\0\310\0\u01e0\0\u2260\0\310\0\u2288"+
    "\0\u22b0\0\u22d8\0\u2300\0\u2328\0\u2350\0\u2378\0\u01e0\0\310"+
    "\0\u23a0\0\u23c8\0\u23f0\0\u2418\0\u2440\0\u2468\0\u2490\0\u24b8"+
    "\0\u24e0\0\u2508\0\u2530\0\u2558\0\u01e0\0\310\0\u2580\0\u25a8"+
    "\0\310\0\u25d0\0\u25f8\0\u2620\0\u2648\0\u2670\0\u2698\0\u26c0"+
    "\0\u26e8\0\u01e0\0\u2710\0\u2738\0\u2760\0\u2788\0\u27b0\0\310"+
    "\0\u27d8\0\u2800\0\u2828\0\u01e0\0\310\0\u2850\0\u2878\0\u01e0"+
    "\0\310\0\u28a0\0\u28c8\0\u28f0\0\u01e0\0\310\0\u2918\0\u2940"+
    "\0\u2968\0\u2990\0\u29b8\0\u29e0\0\u2a08\0\u2a30\0\u2a58\0\u2a80"+
    "\0\u2aa8\0\310\0\u2ad0\0\u2af8\0\u2b20\0\u2b48\0\u2b70\0\u01e0"+
    "\0\u2b98\0\u2bc0\0\u2be8\0\u2c10\0\310\0\u2c38\0\u2c60\0\u2c88"+
    "\0\u2cb0\0\310\0\u2cd8\0\u2d00\0\u2d28\0\u2d50\0\310\0\310"+
    "\0\u2d78\0\u01e0\0\u2da0\0\u2dc8\0\310\0\u2df0\0\310\0\310"+
    "\0\u2e18\0\u2e40\0\u01e0\0\310\0\u2e68\0\u2e90\0\310\0\u2eb8"+
    "\0\u01e0\0\u01e0\0\u2ee0\0\u2f08\0\310\0\310\0\u2f30\0\u01e0"+
    "\0\310\0\u01e0\0\310\0\u2f58\0\u2f80\0\u2fa8\0\u2fd0\0\u2ff8"+
    "\0\310\0\u01e0\0\310\0\u01e0\0\u3020\0\310\0\u3048\0\u3070"+
    "\0\u01e0\0\u3098\0\310\0\310\0\u01e0\0\310\0\u30c0\0\u30e8"+
    "\0\u01e0\0\310";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[402];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\4\1\5\1\6\1\0\1\7\1\10\1\11"+
    "\1\12\1\6\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\2\6\1\35\1\36\1\6"+
    "\1\37\1\40\1\41\1\42\1\43\2\15\41\44\1\45"+
    "\4\44\1\46\1\15\42\44\1\47\3\44\1\46\1\15"+
    "\1\0\1\4\50\0\1\5\50\0\3\6\1\0\4\6"+
    "\2\0\1\6\1\0\10\6\1\0\11\6\12\0\2\6"+
    "\1\7\1\0\4\6\2\0\1\6\1\0\10\6\1\0"+
    "\11\6\12\0\1\50\1\0\1\50\1\0\4\50\2\0"+
    "\1\50\1\0\10\50\1\0\11\50\12\0\3\6\1\0"+
    "\2\6\1\51\1\6\2\0\1\6\1\0\10\6\1\0"+
    "\1\6\1\52\7\6\12\0\3\6\1\0\1\53\3\6"+
    "\2\0\1\6\1\0\10\6\1\0\11\6\12\0\3\6"+
    "\1\0\4\6\2\0\1\6\1\0\1\6\1\54\6\6"+
    "\1\0\11\6\10\0\1\55\1\0\1\56\1\0\1\56"+
    "\1\0\4\56\2\0\1\56\1\0\10\56\1\0\11\56"+
    "\62\0\3\6\1\0\1\6\1\57\2\6\2\0\1\6"+
    "\1\60\1\61\1\6\1\62\1\6\1\63\1\64\2\6"+
    "\1\0\11\6\16\0\1\65\13\0\1\66\3\0\2\67"+
    "\7\0\1\70\12\0\3\6\1\0\1\71\3\6\2\0"+
    "\1\6\1\0\4\6\1\72\3\6\1\67\1\73\7\6"+
    "\1\74\12\0\3\6\1\0\4\6\2\0\1\6\1\0"+
    "\10\6\1\0\6\6\1\75\2\6\12\0\3\6\1\0"+
    "\4\6\2\0\1\76\1\0\1\6\1\77\6\6\1\0"+
    "\6\6\1\100\2\6\12\0\3\6\1\0\4\6\2\0"+
    "\1\6\1\101\1\102\7\6\1\0\11\6\12\0\3\6"+
    "\1\0\4\6\2\0\1\6\1\0\1\6\1\103\6\6"+
    "\1\0\11\6\12\0\3\6\1\0\1\104\3\6\2\0"+
    "\1\6\1\0\1\6\1\105\4\6\1\106\1\6\1\107"+
    "\1\110\10\6\12\0\3\6\1\0\1\111\3\6\2\0"+
    "\1\6\1\0\1\6\1\112\6\6\1\0\6\6\1\113"+
    "\2\6\12\0\3\6\1\0\4\6\2\0\1\114\1\0"+
    "\1\6\1\115\1\116\1\117\4\6\1\0\11\6\40\0"+
    "\1\120\2\0\1\121\16\0\3\6\1\0\4\6\2\0"+
    "\1\6\1\0\10\6\1\0\1\6\1\122\2\6\1\123"+
    "\4\6\12\0\3\6\1\0\1\124\3\6\2\0\1\6"+
    "\1\0\1\6\1\125\6\6\1\0\11\6\12\0\3\6"+
    "\1\0\1\126\3\6\2\0\1\6\1\0\10\6\1\0"+
    "\11\6\12\0\3\6\1\0\4\6\2\0\1\6\1\0"+
    "\1\6\1\127\6\6\1\0\11\6\12\0\3\6\1\0"+
    "\4\6\2\0\1\6\1\0\6\6\1\130\1\6\1\0"+
    "\11\6\12\0\3\6\1\0\4\6\2\0\1\6\1\0"+
    "\10\6\1\131\1\132\2\6\1\133\5\6\50\0\1\44"+
    "\50\0\1\44\10\0\3\50\1\0\4\50\2\0\1\50"+
    "\1\0\10\50\1\0\11\50\12\0\3\6\1\0\1\134"+
    "\3\6\2\0\1\6\1\0\10\6\1\0\11\6\12\0"+
    "\3\6\1\0\4\6\2\0\1\6\1\0\10\6\1\0"+
    "\2\6\1\135\6\6\12\0\3\6\1\0\3\6\1\136"+
    "\2\0\1\6\1\0\5\6\1\137\2\6\1\0\11\6"+
    "\12\0\3\6\1\0\4\6\2\0\1\6\1\0\4\6"+
    "\1\140\3\6\1\0\11\6\10\0\1\55\1\0\1\141"+
    "\1\0\1\141\1\0\4\141\2\0\1\141\1\0\10\141"+
    "\1\0\11\141\12\0\3\56\1\0\4\56\2\0\1\56"+
    "\1\0\10\56\1\0\11\56\12\0\3\6\1\0\4\6"+
    "\2\0\1\6\1\142\1\143\7\6\1\0\11\6\25\0"+
    "\2\144\33\0\3\6\1\0\4\6\2\0\1\6\1\144"+
    "\1\145\7\6\1\0\11\6\12\0\3\6\1\0\4\6"+
    "\2\0\1\6\1\0\2\6\1\146\5\6\1\0\11\6"+
    "\12\0\3\6\1\0\4\6\2\0\1\6\1\0\4\6"+
    "\1\147\3\6\1\0\11\6\32\0\1\150\2\0\1\151"+
    "\2\0\1\152\33\0\1\153\44\0\1\154\56\0\1\155"+
    "\31\0\3\6\1\0\4\6\2\0\1\6\1\0\4\6"+
    "\1\156\2\6\1\157\1\0\1\6\1\160\7\6\12\0"+
    "\3\6\1\0\4\6\2\0\1\161\1\0\10\6\1\0"+
    "\11\6\12\0\3\6\1\0\3\6\1\162\2\0\1\6"+
    "\1\0\10\6\1\0\11\6\12\0\3\6\1\0\4\6"+
    "\2\0\1\6\1\0\2\6\1\163\5\6\1\0\11\6"+
    "\12\0\3\6\1\0\1\164\3\6\2\0\1\6\1\0"+
    "\10\6\1\0\11\6\12\0\3\6\1\0\4\6\2\0"+
    "\1\6\1\165\1\166\7\6\1\0\11\6\12\0\3\6"+
    "\1\0\4\6\2\0\1\6\1\0\7\6\1\167\1\0"+
    "\11\6\12\0\3\6\1\0\4\6\2\0\1\170\1\0"+
    "\10\6\1\0\11\6\16\0\1\171\17\0\2\172\22\0"+
    "\3\6\1\0\1\173\3\6\2\0\1\6\1\0\10\6"+
    "\1\172\1\174\10\6\12\0\3\6\1\0\4\6\2\0"+
    "\1\6\1\0\4\6\1\175\3\6\1\0\11\6\12\0"+
    "\3\6\1\0\4\6\2\0\1\6\1\0\3\6\1\176"+
    "\2\6\1\177\1\6\1\0\11\6\12\0\3\6\1\0"+
    "\1\200\3\6\2\0\1\6\1\0\1\6\1\201\6\6"+
    "\1\0\11\6\34\0\1\202\25\0\3\6\1\0\4\6"+
    "\2\0\1\6\1\0\6\6\1\203\1\6\1\0\11\6"+
    "\12\0\3\6\1\0\4\6\2\0\1\6\1\204\1\205"+
    "\1\6\1\206\5\6\1\0\11\6\12\0\3\6\1\0"+
    "\4\6\2\0\1\6\1\0\10\6\1\0\7\6\1\207"+
    "\1\6\12\0\3\6\1\0\4\6\2\0\1\210\1\0"+
    "\10\6\1\0\11\6\12\0\3\6\1\0\4\6\2\0"+
    "\1\6\1\0\2\6\1\211\5\6\1\0\11\6\12\0"+
    "\3\6\1\0\4\6\2\0\1\6\1\0\10\6\1\0"+
    "\1\6\1\212\7\6\12\0\3\6\1\0\4\6\2\0"+
    "\1\6\1\0\1\6\1\213\6\6\1\0\11\6\12\0"+
    "\3\6\1\0\4\6\2\0\1\6\1\0\6\6\1\214"+
    "\1\6\1\0\11\6\25\0\2\215\3\0\1\216\2\0"+
    "\1\217\55\0\1\220\16\0\3\6\1\0\4\6\2\0"+
    "\1\6\1\215\1\221\3\6\1\222\2\6\1\223\1\0"+
    "\11\6\12\0\3\6\1\0\4\6\2\0\1\6\1\0"+
    "\10\6\1\0\4\6\1\224\4\6\12\0\3\6\1\0"+
    "\2\6\1\225\1\6\2\0\1\6\1\0\10\6\1\0"+
    "\11\6\12\0\3\6\1\0\4\6\2\0\1\6\1\0"+
    "\4\6\1\226\3\6\1\0\11\6\12\0\3\6\1\0"+
    "\4\6\2\0\1\6\1\0\7\6\1\227\1\0\11\6"+
    "\12\0\3\6\1\0\4\6\2\0\1\6\1\0\2\6"+
    "\1\230\5\6\1\0\11\6\12\0\3\6\1\0\1\231"+
    "\3\6\2\0\1\6\1\0\1\6\1\232\6\6\1\233"+
    "\1\234\10\6\32\0\1\235\27\0\3\6\1\0\4\6"+
    "\2\0\1\6\1\0\4\6\1\236\3\6\1\0\11\6"+
    "\12\0\3\6\1\0\1\237\3\6\2\0\1\6\1\0"+
    "\10\6\1\0\11\6\12\0\3\6\1\0\4\6\2\0"+
    "\1\6\1\0\7\6\1\240\1\0\11\6\12\0\3\6"+
    "\1\0\4\6\2\0\1\6\1\0\10\6\1\241\1\242"+
    "\10\6\12\0\3\6\1\0\4\6\2\0\1\6\1\0"+
    "\1\6\1\243\6\6\1\0\11\6\12\0\3\6\1\0"+
    "\4\6\2\0\1\6\1\0\1\6\1\244\6\6\1\0"+
    "\11\6\12\0\3\141\1\0\4\141\2\0\1\141\1\0"+
    "\10\141\1\0\11\141\27\0\1\245\32\0\3\6\1\0"+
    "\4\6\2\0\1\6\1\0\1\6\1\246\6\6\1\0"+
    "\11\6\27\0\1\247\32\0\3\6\1\0\4\6\2\0"+
    "\1\6\1\0\1\6\1\250\6\6\1\0\11\6\12\0"+
    "\3\6\1\0\4\6\2\0\1\6\1\0\1\6\1\251"+
    "\6\6\1\0\11\6\12\0\3\6\1\0\1\252\3\6"+
    "\2\0\1\6\1\0\10\6\1\0\11\6\32\0\1\253"+
    "\42\0\2\254\55\0\1\255\53\0\1\256\25\0\1\257"+
    "\27\0\1\260\13\0\3\6\1\0\4\6\2\0\1\6"+
    "\1\0\4\6\1\261\3\6\1\0\11\6\12\0\3\6"+
    "\1\0\4\6\2\0\1\6\1\254\1\262\7\6\1\0"+
    "\11\6\12\0\3\6\1\0\4\6\2\0\1\6\1\0"+
    "\6\6\1\263\1\6\1\0\11\6\12\0\3\6\1\0"+
    "\4\6\2\0\1\6\1\0\10\6\1\0\1\6\1\264"+
    "\7\6\12\0\3\6\1\0\1\265\3\6\2\0\1\6"+
    "\1\0\10\6\1\0\7\6\1\266\1\6\12\0\3\6"+
    "\1\0\4\6\2\0\1\6\1\0\10\6\1\0\1\6"+
    "\1\267\7\6\32\0\1\270\27\0\3\6\1\0\4\6"+
    "\2\0\1\6\1\0\4\6\1\271\3\6\1\0\11\6"+
    "\12\0\3\6\1\0\4\6\2\0\1\272\1\0\10\6"+
    "\1\0\11\6\12\0\3\6\1\0\4\6\2\0\1\6"+
    "\1\0\6\6\1\273\1\6\1\0\11\6\34\0\1\274"+
    "\53\0\1\275\21\0\3\6\1\0\4\6\2\0\1\6"+
    "\1\0\6\6\1\276\1\6\1\0\11\6\12\0\3\6"+
    "\1\0\4\6\2\0\1\6\1\0\10\6\1\0\1\6"+
    "\1\277\7\6\12\0\3\6\1\0\4\6\2\0\1\6"+
    "\1\0\7\6\1\300\1\0\11\6\12\0\3\6\1\0"+
    "\4\6\2\0\1\6\1\0\10\6\1\0\1\6\1\301"+
    "\7\6\12\0\3\6\1\0\1\302\3\6\2\0\1\6"+
    "\1\0\10\6\1\0\11\6\12\0\3\6\1\0\4\6"+
    "\2\0\1\6\1\0\10\6\1\0\4\6\1\303\4\6"+
    "\25\0\2\304\33\0\3\6\1\0\4\6\2\0\1\6"+
    "\1\304\1\305\7\6\1\0\11\6\16\0\1\306\12\0"+
    "\1\307\30\0\3\6\1\0\1\310\3\6\2\0\1\6"+
    "\1\0\3\6\1\311\4\6\1\0\11\6\12\0\3\6"+
    "\1\0\4\6\2\0\1\312\1\0\10\6\1\0\11\6"+
    "\12\0\3\6\1\0\4\6\2\0\1\6\1\313\1\314"+
    "\7\6\1\0\11\6\12\0\3\6\1\0\4\6\2\0"+
    "\1\6\1\0\6\6\1\315\1\6\1\0\11\6\12\0"+
    "\3\6\1\0\4\6\2\0\1\6\1\0\2\6\1\316"+
    "\5\6\1\0\11\6\12\0\3\6\1\0\4\6\2\0"+
    "\1\6\1\0\4\6\1\317\3\6\1\0\1\6\1\320"+
    "\7\6\12\0\3\6\1\0\4\6\2\0\1\6\1\321"+
    "\1\322\7\6\1\0\11\6\12\0\3\6\1\0\4\6"+
    "\2\0\1\6\1\323\1\324\5\6\1\325\1\6\1\0"+
    "\11\6\16\0\1\326\60\0\1\327\50\0\1\330\35\0"+
    "\1\331\43\0\3\6\1\0\1\332\3\6\2\0\1\6"+
    "\1\0\10\6\1\0\11\6\12\0\3\6\1\0\4\6"+
    "\2\0\1\6\1\0\1\6\1\333\6\6\1\0\11\6"+
    "\12\0\3\6\1\0\4\6\2\0\1\6\1\0\2\6"+
    "\1\334\5\6\1\0\11\6\12\0\3\6\1\0\1\335"+
    "\3\6\2\0\1\6\1\0\10\6\1\0\11\6\12\0"+
    "\3\6\1\0\4\6\2\0\1\6\1\0\4\6\1\336"+
    "\3\6\1\0\11\6\12\0\3\6\1\0\4\6\2\0"+
    "\1\6\1\0\2\6\1\337\5\6\1\0\11\6\12\0"+
    "\3\6\1\0\4\6\2\0\1\6\1\0\10\6\1\0"+
    "\2\6\1\340\6\6\12\0\3\6\1\0\4\6\2\0"+
    "\1\6\1\0\10\6\1\0\6\6\1\341\2\6\12\0"+
    "\3\6\1\0\4\6\2\0\1\6\1\0\7\6\1\342"+
    "\1\0\11\6\27\0\1\343\32\0\3\6\1\0\4\6"+
    "\2\0\1\6\1\0\1\6\1\344\6\6\1\0\11\6"+
    "\42\0\1\345\17\0\3\6\1\0\4\6\2\0\1\6"+
    "\1\0\10\6\1\0\3\6\1\346\5\6\12\0\3\6"+
    "\1\0\4\6\2\0\1\6\1\0\10\6\1\0\1\6"+
    "\1\347\7\6\12\0\3\6\1\0\4\6\2\0\1\6"+
    "\1\0\3\6\1\350\4\6\1\0\11\6\40\0\1\351"+
    "\21\0\3\6\1\0\4\6\2\0\1\6\1\0\10\6"+
    "\1\0\1\6\1\352\7\6\12\0\3\6\1\0\4\6"+
    "\2\0\1\6\1\0\6\6\1\353\1\6\1\0\11\6"+
    "\30\0\1\354\31\0\3\6\1\0\4\6\2\0\1\6"+
    "\1\0\2\6\1\355\5\6\1\0\11\6\35\0\1\356"+
    "\24\0\3\6\1\0\4\6\2\0\1\6\1\0\7\6"+
    "\1\357\1\0\11\6\12\0\3\6\1\0\4\6\2\0"+
    "\1\6\1\0\7\6\1\360\1\0\11\6\12\0\3\6"+
    "\1\0\4\6\2\0\1\6\1\0\6\6\1\361\1\6"+
    "\1\0\11\6\36\0\2\362\46\0\2\363\42\0\1\364"+
    "\41\0\1\365\57\0\1\366\37\0\1\367\35\0\3\6"+
    "\1\0\4\6\2\0\1\6\1\0\10\6\1\362\1\370"+
    "\10\6\12\0\3\6\1\0\4\6\2\0\1\6\1\0"+
    "\10\6\1\363\1\371\10\6\12\0\3\6\1\0\4\6"+
    "\2\0\1\6\1\0\4\6\1\372\3\6\1\0\11\6"+
    "\12\0\3\6\1\0\4\6\2\0\1\373\1\0\10\6"+
    "\1\0\11\6\12\0\3\6\1\0\4\6\2\0\1\6"+
    "\1\0\6\6\1\374\1\6\1\0\11\6\12\0\3\6"+
    "\1\0\4\6\2\0\1\375\1\0\10\6\1\0\11\6"+
    "\12\0\3\6\1\0\4\6\2\0\1\6\1\0\4\6"+
    "\1\376\3\6\1\0\11\6\21\0\1\377\40\0\3\6"+
    "\1\0\3\6\1\u0100\2\0\1\6\1\0\10\6\1\0"+
    "\11\6\12\0\3\6\1\0\4\6\2\0\1\6\1\0"+
    "\10\6\1\0\3\6\1\u0101\5\6\12\0\3\6\1\0"+
    "\4\6\2\0\1\6\1\0\10\6\1\0\2\6\1\u0102"+
    "\6\6\32\0\1\u0103\27\0\3\6\1\0\4\6\2\0"+
    "\1\6\1\0\4\6\1\u0104\3\6\1\0\11\6\32\0"+
    "\1\u0105\45\0\1\u0106\31\0\3\6\1\0\4\6\2\0"+
    "\1\6\1\0\4\6\1\u0107\3\6\1\0\11\6\12\0"+
    "\3\6\1\0\4\6\2\0\1\6\1\0\2\6\1\u0108"+
    "\5\6\1\0\11\6\12\0\3\6\1\0\4\6\2\0"+
    "\1\6\1\0\4\6\1\u0109\3\6\1\0\11\6\16\0"+
    "\1\u010a\43\0\3\6\1\0\1\u010b\3\6\2\0\1\6"+
    "\1\0\10\6\1\0\11\6\12\0\3\6\1\0\4\6"+
    "\2\0\1\6\1\0\10\6\1\u010c\1\u010d\10\6\12\0"+
    "\3\6\1\0\1\u010e\3\6\2\0\1\6\1\0\10\6"+
    "\1\0\11\6\16\0\1\u010f\43\0\3\6\1\0\1\u0110"+
    "\3\6\2\0\1\6\1\0\10\6\1\0\11\6\27\0"+
    "\1\u0111\32\0\3\6\1\0\4\6\2\0\1\6\1\0"+
    "\1\6\1\u0112\6\6\1\0\11\6\12\0\3\6\1\0"+
    "\1\u0113\3\6\2\0\1\6\1\0\10\6\1\0\11\6"+
    "\40\0\1\u0114\40\0\1\u0115\57\0\1\u0116\20\0\3\6"+
    "\1\0\4\6\2\0\1\6\1\0\10\6\1\0\1\6"+
    "\1\u0117\7\6\12\0\3\6\1\0\4\6\2\0\1\6"+
    "\1\0\3\6\1\u0118\4\6\1\0\11\6\12\0\3\6"+
    "\1\0\4\6\2\0\1\6\1\0\10\6\1\0\2\6"+
    "\1\u0119\6\6\12\0\3\6\1\0\4\6\2\0\1\u011a"+
    "\1\0\10\6\1\0\11\6\12\0\3\6\1\0\4\6"+
    "\2\0\1\u011b\1\0\10\6\1\0\11\6\12\0\3\6"+
    "\1\0\1\u011c\3\6\2\0\1\6\1\0\10\6\1\0"+
    "\11\6\34\0\1\u011d\25\0\3\6\1\0\4\6\2\0"+
    "\1\6\1\0\6\6\1\u011e\1\6\1\0\11\6\12\0"+
    "\3\6\1\0\1\u011f\3\6\2\0\1\6\1\0\10\6"+
    "\1\0\11\6\12\0\3\6\1\0\4\6\2\0\1\6"+
    "\1\0\4\6\1\u0120\3\6\1\0\11\6\12\0\3\6"+
    "\1\0\1\u0121\3\6\2\0\1\6\1\0\10\6\1\0"+
    "\11\6\31\0\1\u0122\30\0\3\6\1\0\4\6\2\0"+
    "\1\6\1\0\3\6\1\u0123\4\6\1\0\11\6\36\0"+
    "\2\u0124\22\0\3\6\1\0\4\6\2\0\1\6\1\0"+
    "\10\6\1\u0124\1\u0125\10\6\12\0\3\6\1\0\4\6"+
    "\2\0\1\u0126\1\0\10\6\1\0\11\6\27\0\1\u0127"+
    "\52\0\1\u0128\53\0\2\u0129\40\0\1\u012a\53\0\1\u012b"+
    "\47\0\1\u012c\25\0\3\6\1\0\4\6\2\0\1\6"+
    "\1\0\1\6\1\u012d\6\6\1\0\11\6\12\0\3\6"+
    "\1\0\4\6\2\0\1\6\1\0\4\6\1\u012e\3\6"+
    "\1\0\11\6\12\0\3\6\1\0\4\6\2\0\1\6"+
    "\1\0\10\6\1\u0129\1\u012f\10\6\12\0\3\6\1\0"+
    "\4\6\2\0\1\6\1\0\2\6\1\u0130\5\6\1\0"+
    "\11\6\12\0\3\6\1\0\4\6\2\0\1\6\1\0"+
    "\6\6\1\u0131\1\6\1\0\11\6\12\0\3\6\1\0"+
    "\4\6\2\0\1\6\1\0\6\6\1\u0132\1\6\1\0"+
    "\11\6\12\0\3\6\1\0\4\6\2\0\1\6\1\0"+
    "\1\6\1\u0133\6\6\1\0\11\6\32\0\1\u0134\27\0"+
    "\3\6\1\0\4\6\2\0\1\6\1\0\4\6\1\u0135"+
    "\3\6\1\0\11\6\12\0\3\6\1\0\4\6\2\0"+
    "\1\6\1\0\10\6\1\u0136\1\u0137\10\6\32\0\1\u0138"+
    "\27\0\3\6\1\0\4\6\2\0\1\6\1\0\4\6"+
    "\1\u0139\3\6\1\0\11\6\40\0\1\u013a\21\0\3\6"+
    "\1\0\4\6\2\0\1\6\1\0\10\6\1\0\1\6"+
    "\1\u013b\7\6\12\0\3\6\1\0\4\6\2\0\1\6"+
    "\1\0\7\6\1\u013c\1\0\11\6\34\0\1\u013d\25\0"+
    "\3\6\1\0\4\6\2\0\1\6\1\0\6\6\1\u013e"+
    "\1\6\1\0\11\6\12\0\3\6\1\0\4\6\2\0"+
    "\1\6\1\0\10\6\1\0\1\6\1\u013f\7\6\25\0"+
    "\2\u0140\62\0\1\u0141\44\0\2\u0142\22\0\3\6\1\0"+
    "\4\6\2\0\1\6\1\u0140\1\u0143\7\6\1\0\11\6"+
    "\12\0\3\6\1\0\4\6\2\0\1\6\1\0\10\6"+
    "\1\0\2\6\1\u0144\6\6\12\0\3\6\1\0\4\6"+
    "\2\0\1\6\1\0\10\6\1\u0142\1\u0145\10\6\12\0"+
    "\3\6\1\0\4\6\2\0\1\6\1\0\6\6\1\u0146"+
    "\1\6\1\0\11\6\12\0\3\6\1\0\4\6\2\0"+
    "\1\6\1\0\6\6\1\u0147\1\6\1\0\11\6\12\0"+
    "\3\6\1\0\4\6\2\0\1\6\1\0\10\6\1\0"+
    "\2\6\1\u0148\6\6\12\0\3\6\1\0\4\6\2\0"+
    "\1\6\1\0\10\6\1\0\5\6\1\u0149\3\6\12\0"+
    "\3\6\1\0\1\u014a\3\6\2\0\1\6\1\0\10\6"+
    "\1\0\11\6\32\0\1\u014b\27\0\3\6\1\0\4\6"+
    "\2\0\1\6\1\0\4\6\1\u014c\3\6\1\0\11\6"+
    "\24\0\1\u014d\35\0\3\6\1\0\4\6\2\0\1\u014e"+
    "\1\0\10\6\1\0\11\6\12\0\3\6\1\0\4\6"+
    "\2\0\1\6\1\0\4\6\1\u014f\3\6\1\0\11\6"+
    "\40\0\1\u0150\45\0\2\u0151\50\0\1\u0152\36\0\1\u0153"+
    "\60\0\1\u0154\21\0\3\6\1\0\4\6\2\0\1\6"+
    "\1\0\10\6\1\0\1\6\1\u0155\7\6\12\0\3\6"+
    "\1\0\4\6\2\0\1\6\1\0\10\6\1\u0151\1\u0156"+
    "\10\6\12\0\3\6\1\0\4\6\2\0\1\6\1\0"+
    "\10\6\1\0\1\6\1\u0157\7\6\12\0\3\6\1\0"+
    "\4\6\2\0\1\6\1\0\1\6\1\u0158\6\6\1\0"+
    "\11\6\12\0\3\6\1\0\4\6\2\0\1\6\1\0"+
    "\10\6\1\0\1\6\1\u0159\7\6\12\0\3\6\1\0"+
    "\4\6\2\0\1\6\1\0\6\6\1\u015a\1\6\1\0"+
    "\11\6\44\0\1\u015b\15\0\3\6\1\0\4\6\2\0"+
    "\1\6\1\0\10\6\1\0\5\6\1\u015c\3\6\31\0"+
    "\1\u015d\30\0\3\6\1\0\4\6\2\0\1\6\1\0"+
    "\3\6\1\u015e\4\6\1\0\11\6\12\0\3\6\1\0"+
    "\4\6\2\0\1\6\1\0\4\6\1\u015f\3\6\1\0"+
    "\11\6\12\0\3\6\1\0\4\6\2\0\1\6\1\0"+
    "\4\6\1\u0160\3\6\1\0\11\6\36\0\2\u0161\26\0"+
    "\1\u0162\55\0\1\u0163\35\0\3\6\1\0\4\6\2\0"+
    "\1\6\1\0\10\6\1\u0161\1\u0164\10\6\12\0\3\6"+
    "\1\0\1\u0165\3\6\2\0\1\6\1\0\10\6\1\0"+
    "\11\6\12\0\3\6\1\0\4\6\2\0\1\u0166\1\0"+
    "\10\6\1\0\11\6\12\0\3\6\1\0\1\u0167\3\6"+
    "\2\0\1\6\1\0\10\6\1\0\11\6\12\0\3\6"+
    "\1\0\1\u0168\3\6\2\0\1\6\1\0\10\6\1\0"+
    "\11\6\12\0\3\6\1\0\4\6\2\0\1\6\1\0"+
    "\3\6\1\u0169\4\6\1\0\11\6\12\0\3\6\1\0"+
    "\1\u016a\3\6\2\0\1\6\1\0\10\6\1\0\11\6"+
    "\16\0\1\u016b\43\0\3\6\1\0\1\u016c\3\6\2\0"+
    "\1\6\1\0\10\6\1\0\11\6\32\0\1\u016d\27\0"+
    "\3\6\1\0\4\6\2\0\1\6\1\0\4\6\1\u016e"+
    "\3\6\1\0\11\6\12\0\3\6\1\0\1\u016f\3\6"+
    "\2\0\1\6\1\0\10\6\1\0\11\6\44\0\1\u0170"+
    "\24\0\1\u0171\62\0\1\u0172\51\0\2\u0173\22\0\3\6"+
    "\1\0\4\6\2\0\1\6\1\0\10\6\1\0\5\6"+
    "\1\u0174\3\6\12\0\3\6\1\0\3\6\1\u0175\2\0"+
    "\1\6\1\0\10\6\1\0\11\6\12\0\3\6\1\0"+
    "\4\6\2\0\1\6\1\0\6\6\1\u0176\1\6\1\0"+
    "\11\6\12\0\3\6\1\0\4\6\2\0\1\6\1\0"+
    "\10\6\1\u0173\1\u0177\10\6\16\0\1\u0178\43\0\3\6"+
    "\1\0\1\u0179\3\6\2\0\1\6\1\0\10\6\1\0"+
    "\11\6\16\0\1\u017a\43\0\3\6\1\0\1\u017b\3\6"+
    "\2\0\1\6\1\0\10\6\1\0\11\6\32\0\1\u017c"+
    "\47\0\1\u017d\27\0\3\6\1\0\4\6\2\0\1\6"+
    "\1\0\4\6\1\u017e\3\6\1\0\11\6\12\0\3\6"+
    "\1\0\4\6\2\0\1\6\1\0\4\6\1\u017f\3\6"+
    "\1\0\11\6\12\0\3\6\1\0\4\6\2\0\1\6"+
    "\1\0\6\6\1\u0180\1\6\1\0\11\6\12\0\3\6"+
    "\1\0\4\6\2\0\1\6\1\0\6\6\1\u0181\1\6"+
    "\1\0\11\6\16\0\1\u0182\43\0\3\6\1\0\1\u0183"+
    "\3\6\2\0\1\6\1\0\10\6\1\0\11\6\16\0"+
    "\1\u0184\71\0\1\u0185\21\0\3\6\1\0\1\u0186\3\6"+
    "\2\0\1\6\1\0\10\6\1\0\11\6\12\0\3\6"+
    "\1\0\4\6\2\0\1\6\1\0\10\6\1\0\1\6"+
    "\1\u0187\7\6\36\0\2\u0188\26\0\1\u0189\43\0\3\6"+
    "\1\0\4\6\2\0\1\6\1\0\10\6\1\u0188\1\u018a"+
    "\10\6\12\0\3\6\1\0\1\u018b\3\6\2\0\1\6"+
    "\1\0\10\6\1\0\11\6\12\0\3\6\1\0\1\u018c"+
    "\3\6\2\0\1\6\1\0\10\6\1\0\11\6\21\0"+
    "\1\u018d\40\0\3\6\1\0\3\6\1\u018e\2\0\1\6"+
    "\1\0\10\6\1\0\11\6\44\0\1\u018f\15\0\3\6"+
    "\1\0\4\6\2\0\1\6\1\0\10\6\1\0\5\6"+
    "\1\u0190\3\6\16\0\1\u0191\43\0\3\6\1\0\1\u0192"+
    "\3\6\2\0\1\6\1\0\10\6\1\0\11\6\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12560];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\4\1\1\0\4\1\1\11\1\1\1\0\10\1"+
    "\1\0\6\1\6\11\1\1\1\11\6\1\1\0\2\1"+
    "\1\0\4\1\4\0\10\1\1\0\5\1\1\0\10\1"+
    "\2\0\7\1\1\0\10\1\1\0\1\1\1\0\3\1"+
    "\1\11\5\0\7\1\1\0\3\1\2\0\7\1\1\0"+
    "\1\1\1\0\10\1\4\0\12\1\1\0\1\1\1\0"+
    "\3\1\1\0\3\1\1\0\1\1\1\0\3\1\6\0"+
    "\7\1\1\11\3\1\1\11\1\0\6\1\1\0\1\1"+
    "\2\0\11\1\1\0\1\1\1\0\2\1\1\0\1\11"+
    "\2\0\11\1\1\0\1\1\1\11\3\1\1\11\2\1"+
    "\1\0\1\1\1\0\3\1\6\0\7\1\1\11\3\1"+
    "\1\11\1\1\1\11\1\0\3\1\1\0\1\1\1\0"+
    "\2\1\1\11\1\1\1\0\2\1\3\0\6\1\1\11"+
    "\4\1\1\0\1\1\1\0\2\1\3\0\1\11\2\0"+
    "\7\1\1\11\1\1\1\0\1\1\1\11\1\1\1\0"+
    "\2\1\1\11\2\1\3\0\10\1\1\0\1\1\1\0"+
    "\2\1\1\11\4\0\6\1\1\0\1\1\1\0\3\1"+
    "\1\0\1\11\1\0\7\1\1\11\1\1\1\0\2\1"+
    "\1\0\2\11\1\0\4\1\1\11\1\1\1\11\1\1"+
    "\2\0\4\1\1\11\1\1\1\11\1\0\2\1\1\0"+
    "\1\11\3\1\1\11\1\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[402];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;
  
  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** the stack of open (nested) input streams to read from */
  private java.util.Stack<ZzFlexStreamInfo> zzStreams
    = new java.util.Stack<ZzFlexStreamInfo>();

  /**
   * inner class used to store info for nested
   * input streams
   */
  private static final class ZzFlexStreamInfo {
    java.io.Reader zzReader;
    int zzEndRead;
    int zzStartRead;
    int zzCurrentPos;
    int zzMarkedPos;
    int yyline;
    int yychar;
    int yycolumn;
    char [] zzBuffer;
    boolean zzAtBOL;
    boolean zzAtEOF;
    boolean zzEOFDone;
    int zzFinalHighSurrogate;

    /** sets all values stored in this class */
    ZzFlexStreamInfo(java.io.Reader zzReader, int zzEndRead, int zzStartRead,
                  int zzCurrentPos, int zzMarkedPos, char [] zzBuffer, 
                  boolean zzAtBOL, boolean zzAtEOF, boolean zzEOFDone,
                  int zzFinalHighSurrogate, int yyline, int yychar, int yycolumn) {
      this.zzReader      = zzReader;
      this.zzEndRead     = zzEndRead;
      this.zzStartRead   = zzStartRead;
      this.zzCurrentPos  = zzCurrentPos;
      this.zzMarkedPos   = zzMarkedPos;
      this.zzBuffer      = zzBuffer;
      this.zzAtBOL       = zzAtBOL;
      this.zzAtEOF       = zzAtEOF;
      this.zzEOFDone     = zzEOFDone;
      this.zzFinalHighSurrogate = zzFinalHighSurrogate;
      this.yyline        = yyline;
      this.yychar        = yychar;
      this.yycolumn      = yycolumn;
    }
  }

  /* user code: */
   public Symbol symbol(int code){
      return makeSymbol(code, yyline, yycolumn, yytext());
   }   


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PCLLexer(java.io.Reader in) {
     initLexer();
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 206) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {      
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Stores the current input stream on a stack, and
   * reads from a new stream. Lexical state, line,
   * char, and column counting remain untouched.
   *
   * The current input stream can be restored with
   * yypopStream (usually in an <<EOF>> action).
   *
   * @param reader the new input stream to read from
   *
   * @see #yypopStream()
   */
  public final void yypushStream(java.io.Reader reader) {
    zzStreams.push(
      new ZzFlexStreamInfo(zzReader, zzEndRead, zzStartRead, zzCurrentPos,
                        zzMarkedPos, zzBuffer, zzAtBOL, zzAtEOF, zzEOFDone,
                        zzFinalHighSurrogate, yyline, yychar, yycolumn)
    );
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzBuffer = new char[ZZ_BUFFERSIZE];
    zzReader = reader;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
  }
    

  /**
   * Closes the current input stream and continues to
   * read from the one on top of the stream stack. 
   *
   * @throws java.util.EmptyStackException
   *         if there is no further stream to read from.
   *
   * @throws java.io.IOException
   *         if there was an error in closing the stream.
   *
   * @see #yypushStream(java.io.Reader)
   */
  public final void yypopStream() throws java.io.IOException {
    zzReader.close();
    ZzFlexStreamInfo s = (ZzFlexStreamInfo) zzStreams.pop();
    zzBuffer      = s.zzBuffer;
    zzReader      = s.zzReader;
    zzEndRead     = s.zzEndRead;
    zzStartRead   = s.zzStartRead;
    zzCurrentPos  = s.zzCurrentPos;
    zzMarkedPos   = s.zzMarkedPos;
    zzAtBOL       = s.zzAtBOL;
    zzAtEOF       = s.zzAtEOF;
    zzEOFDone     = s.zzEOFDone;
    zzFinalHighSurrogate = s.zzFinalHighSurrogate;
    yyline        = s.yyline;
    yychar        = s.yychar;
    yycolumn      = s.yycolumn;
  }


  /**
   * Returns true iff there are still streams left 
   * to read from on the stream stack.
   */
  public final boolean yymoreStreams() {
    return !zzStreams.isEmpty();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   *
   * @see #yypushStream(java.io.Reader)
   * @see #yypopStream()
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      // cached fields:
      int zzCurrentPosL;
      int zzMarkedPosL = zzMarkedPos;
      int zzEndReadL = zzEndRead;
      char [] zzBufferL = zzBuffer;
      char [] zzCMapL = ZZ_CMAP;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return symbolFactory.newSymbol("EOF", EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* DO NOTHING */
            }
          case 71: break;
          case 2: 
            { return symbol(ID);
            }
          case 72: break;
          case 3: 
            { return symbol(NUM_ENTERO);
            }
          case 73: break;
          case 4: 
            { return symbol(PREHOST);
            }
          case 74: break;
          case 5: 
            { /* eat */
            }
          case 75: break;
          case 6: 
            { pushState(QUOTE_STRING);
            }
          case 76: break;
          case 7: 
            { pushState(DQUOTE_STRING);
            }
          case 77: break;
          case 8: 
            { return symbol(COMMA);
            }
          case 78: break;
          case 9: 
            { return symbol(LPAR);
            }
          case 79: break;
          case 10: 
            { return symbol(RPAR);
            }
          case 80: break;
          case 11: 
            { cadena.append(yytext());
            }
          case 81: break;
          case 12: 
            { return literal(LITERAL);
            }
          case 82: break;
          case 13: 
            { return symbol(IDQUALIFIED);
            }
          case 83: break;
          case 14: 
            { return symbol(HOSTVAR1);
            }
          case 84: break;
          case 15: 
            { return symbol(AT                 );
            }
          case 85: break;
          case 16: 
            { return symbol(TO                 );
            }
          case 86: break;
          case 17: 
            { return symbol(END                );
            }
          case 87: break;
          case 18: 
            { return symbol(HOSTVAR2);
            }
          case 88: break;
          case 19: 
            { return symbol(SET                );
            }
          case 89: break;
          case 20: 
            { return symbol(FOR                );
            }
          case 90: break;
          case 21: 
            { return symbol(NOT                );
            }
          case 91: break;
          case 22: 
            { return symbol(GOTO               );
            }
          case 92: break;
          case 23: 
            { return symbol(OPEN               );
            }
          case 93: break;
          case 24: 
            { return symbol(LAST               );
            }
          case 94: break;
          case 25: 
            { return symbol(LPAR               );
            }
          case 95: break;
          case 26: 
            { return symbol(USER               );
            }
          case 96: break;
          case 27: 
            { return symbol(FREE               );
            }
          case 97: break;
          case 28: 
            { return symbol(FROM               );
            }
          case 98: break;
          case 29: 
            { return symbol(ROWS               );
            }
          case 99: break;
          case 30: 
            { return symbol(RPAR               );
            }
          case 100: break;
          case 31: 
            { return symbol(CALL               );
            }
          case 101: break;
          case 32: 
            { return symbol(INTO               );
            }
          case 102: break;
          case 33: 
            { return symbol(NEXT               );
            }
          case 103: break;
          case 34: 
            { return symbol(HOLD               );
            }
          case 104: break;
          case 35: 
            { return symbol(WITH               );
            }
          case 105: break;
          case 36: 
            { return symbol(BEGIN              );
            }
          case 106: break;
          case 37: 
            { return symbol(AFTER              );
            }
          case 107: break;
          case 38: 
            { return symbol(USING              );
            }
          case 108: break;
          case 39: 
            { return symbol(FETCH              );
            }
          case 109: break;
          case 40: 
            { return symbol(FOUND              );
            }
          case 110: break;
          case 41: 
            { return symbol(FIRST              );
            }
          case 111: break;
          case 42: 
            { return symbol(RESET              );
            }
          case 112: break;
          case 43: 
            { return symbol(CLOSE              );
            }
          case 113: break;
          case 44: 
            { return symbol(PRIOR              );
            }
          case 114: break;
          case 45: 
            { return symbol(BEFORE             );
            }
          case 115: break;
          case 46: 
            { return symbol(SIGNAL             );
            }
          case 116: break;
          case 47: 
            { return symbol(RESULT             );
            }
          case 117: break;
          case 48: 
            { return symbol(ROWSET             );
            }
          case 118: break;
          case 49: 
            { return symbol(CURSOR             );
            }
          case 119: break;
          case 50: 
            { return symbol(EXECUTE            );
            }
          case 120: break;
          case 51: 
            { return symbol(SECTION            );
            }
          case 121: break;
          case 52: 
            { return symbol(LOCATOR            );
            }
          case 122: break;
          case 53: 
            { return symbol(CONNECT            );
            }
          case 123: break;
          case 54: 
            { return symbol(CURRENT            );
            }
          case 124: break;
          case 55: 
            { return symbol(INCLUDE            );
            }
          case 125: break;
          case 56: 
            { return symbol(DECLARE            );
            }
          case 126: break;
          case 57: 
            { return symbol(PREPARE            );
            }
          case 127: break;
          case 58: 
            { return symbol(ABSOLUTE           );
            }
          case 128: break;
          case 59: 
            { return symbol(ALLOCATE           );
            }
          case 129: break;
          case 60: 
            { return symbol(STARTING           );
            }
          case 130: break;
          case 61: 
            { return symbol(SQLERROR           );
            }
          case 131: break;
          case 62: 
            { return symbol(RELATIVE           );
            }
          case 132: break;
          case 63: 
            { return symbol(CONTINUE           );
            }
          case 133: break;
          case 64: 
            { return symbol(WHENEVER           );
            }
          case 134: break;
          case 65: 
            { return symbol(ASSOCIATE          );
            }
          case 135: break;
          case 66: 
            { return symbol(SENSITIVE          );
            }
          case 136: break;
          case 67: 
            { return symbol(IMMEDIATE          );
            }
          case 137: break;
          case 68: 
            { return symbol(PROCEDURE          );
            }
          case 138: break;
          case 69: 
            { return symbol(SQLWARNING         );
            }
          case 139: break;
          case 70: 
            { return symbol(INSENSITIVE        );
            }
          case 140: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
