
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Apr 24 14:21:29 CEST 2017
//----------------------------------------------------

package com.jgg.sdp.parser.lang;

import java_cup.runtime.*;
import com.jgg.sdp.parser.base.*;
import com.jgg.sdp.parser.symbol.*;
import com.jgg.sdp.parser.stmt.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Apr 24 14:21:29 CEST 2017
  */
public class PCLParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PCLParser() {super();}

  /** Constructor which sets the default scanner. */
  public PCLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PCLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\223\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\112\002" +
    "\000\002\004\012\000\002\113\002\000\002\005\014\000" +
    "\002\062\003\000\002\062\003\000\002\010\005\000\002" +
    "\011\003\000\002\011\002\000\002\114\002\000\002\012" +
    "\005\000\002\013\004\000\002\014\003\000\002\014\002" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\016\005\000\002\017\003\000\002\020\006\000\002" +
    "\021\003\000\002\021\002\000\002\115\002\000\002\022" +
    "\005\000\002\116\002\000\002\023\005\000\002\117\002" +
    "\000\002\024\005\000\002\025\005\000\002\026\003\000" +
    "\002\027\004\000\002\027\004\000\002\067\006\000\002" +
    "\067\002\000\002\072\003\000\002\072\005\000\002\070" +
    "\005\000\002\070\002\000\002\030\007\000\002\031\003" +
    "\000\002\032\003\000\002\032\002\000\002\034\003\000" +
    "\002\034\004\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\036\003\000\002\036\003\000\002\037" +
    "\004\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\004\000\002\040\004\000\002\040\004\000\002" +
    "\040\007\000\002\033\003\000\002\041\005\000\002\043" +
    "\003\000\002\043\004\000\002\044\003\000\002\044\005" +
    "\000\002\042\005\000\002\042\002\000\002\045\004\000" +
    "\002\120\002\000\002\007\006\000\002\121\002\000\002" +
    "\006\006\000\002\060\003\000\002\060\005\000\002\122" +
    "\002\000\002\046\006\000\002\047\004\000\002\047\002" +
    "\000\002\050\004\000\002\050\003\000\002\051\003\000" +
    "\002\051\005\000\002\052\004\000\002\053\004\000\002" +
    "\123\002\000\002\054\006\000\002\055\004\000\002\055" +
    "\003\000\002\055\003\000\002\056\003\000\002\056\004" +
    "\000\002\057\003\000\002\102\004\000\002\103\003\000" +
    "\002\103\002\000\002\104\004\000\002\105\003\000\002" +
    "\105\003\000\002\105\004\000\002\066\004\000\002\064" +
    "\003\000\002\064\003\000\002\065\003\000\002\065\002" +
    "\000\002\076\003\000\002\076\003\000\002\077\003\000" +
    "\002\077\003\000\002\100\003\000\002\100\003\000\002" +
    "\101\003\000\002\101\004\000\002\061\003\000\002\061" +
    "\002\000\002\063\004\000\002\071\003\000\002\071\002" +
    "\000\002\074\003\000\002\074\002\000\002\075\003\000" +
    "\002\075\003\000\002\107\003\000\002\107\004\000\002" +
    "\110\003\000\002\110\003\000\002\110\003\000\002\110" +
    "\003\000\002\111\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\322\000\042\016\033\017\010\022\016\023\015\024" +
    "\043\025\040\033\037\034\012\035\034\041\047\044\042" +
    "\046\025\056\035\057\021\073\046\102\014\001\002\000" +
    "\002\001\ufffd\000\006\004\302\045\304\001\002\000\002" +
    "\001\ufff1\000\002\001\ufff2\000\002\001\uffed\000\002\001" +
    "\ufff4\000\002\001\uffd2\000\002\001\ufffe\000\002\001\uff9a" +
    "\000\014\004\127\005\054\006\053\010\057\030\131\001" +
    "\002\000\002\001\uffd9\000\002\001\ufff5\000\002\001\ufff0" +
    "\000\012\004\065\013\066\053\071\065\072\001\002\000" +
    "\034\014\202\015\172\021\167\027\164\036\176\047\175" +
    "\051\173\054\201\060\161\062\200\066\163\071\162\103" +
    "\166\001\uffc6\000\002\001\ufff3\000\002\001\ufffb\000\004" +
    "\004\157\001\002\000\002\001\ufffa\000\002\001\ufff6\000" +
    "\002\001\001\000\004\002\156\001\002\000\002\001\ufff9" +
    "\000\002\001\uffef\000\002\001\uffc8\000\002\001\uffa4\000" +
    "\002\001\ufff7\000\002\001\uffd7\000\010\063\104\077\101" +
    "\100\106\001\uffe2\000\002\001\ufff8\000\004\052\076\001" +
    "\002\000\002\001\uffe6\000\002\001\ufffc\000\002\001\uffff" +
    "\000\012\004\065\013\066\053\071\065\072\001\002\000" +
    "\004\052\050\001\002\000\002\001\uffaa\000\010\005\054" +
    "\006\053\010\057\001\002\000\002\001\uffa6\000\002\001" +
    "\uff8d\000\002\001\uff8e\000\004\013\063\001\uffa9\000\004" +
    "\007\062\001\uff87\000\004\004\060\001\002\000\002\001" +
    "\uff8c\000\002\001\uff8f\000\002\001\uff88\000\010\005\054" +
    "\006\053\010\057\001\002\000\002\001\uffa5\000\002\001" +
    "\uff73\000\002\001\uff70\000\002\001\uff75\000\012\004\065" +
    "\013\066\053\071\065\072\001\uff9b\000\002\001\uff72\000" +
    "\002\001\uff71\000\002\001\uff74\000\004\004\075\001\002" +
    "\000\002\001\uffe5\000\002\001\uffa8\000\010\005\054\006" +
    "\053\010\057\001\002\000\004\013\063\001\uffa7\000\012" +
    "\005\054\006\053\010\057\011\114\001\002\000\002\001" +
    "\uffe3\000\002\001\uffe4\000\002\001\uffdd\000\002\001\uffe1" +
    "\000\010\005\054\006\053\010\057\001\002\000\002\001" +
    "\uffe0\000\002\001\uffdf\000\004\101\112\001\002\000\010" +
    "\005\054\006\053\010\057\001\002\000\002\001\uffdc\000" +
    "\002\001\uff85\000\002\001\uff86\000\004\100\106\001\uffda" +
    "\000\002\001\uffde\000\002\001\uffdb\000\004\031\123\001" +
    "\002\000\002\001\uffd6\000\002\001\uffd5\000\004\070\125" +
    "\001\002\000\002\001\uffd4\000\006\004\127\030\131\001" +
    "\002\000\002\001\uff8a\000\004\007\062\001\uff87\000\002" +
    "\001\uff6f\000\002\001\uff89\000\004\101\135\001\uffa1\000" +
    "\002\001\uffa3\000\012\005\054\006\053\010\057\032\136" +
    "\001\002\000\004\004\144\001\002\000\002\001\uff9e\000" +
    "\002\001\uffa2\000\004\013\142\001\uff9f\000\010\005\054" +
    "\006\053\010\057\001\002\000\002\001\uff9d\000\002\001" +
    "\uffa0\000\002\001\uff8b\000\006\004\127\030\131\001\002" +
    "\000\004\030\151\001\002\000\002\001\uff93\000\004\037" +
    "\152\001\002\000\004\064\153\001\002\000\004\072\154" +
    "\001\002\000\010\005\054\006\053\010\057\001\002\000" +
    "\002\001\uffee\000\002\001\000\000\002\001\uffab\000\002" +
    "\001\uffc3\000\002\001\uffbc\000\002\001\uffbf\000\004\076" +
    "\236\001\002\000\002\001\002\000\004\042\212\001\uff78" +
    "\000\004\026\210\001\002\000\002\001\uffb8\000\002\001" +
    "\uffc1\000\002\001\uffc2\000\002\001\uffb9\000\002\001\uffba" +
    "\000\002\001\uffc5\000\002\001\uffc0\000\002\001\uffbb\000" +
    "\034\014\202\015\172\021\167\027\164\036\176\047\175" +
    "\051\173\054\201\060\161\062\200\066\163\071\162\103" +
    "\166\001\uffc7\000\012\005\054\006\053\010\057\012\205" +
    "\001\002\000\002\001\uffbd\000\012\005\054\006\053\010" +
    "\057\012\205\001\002\000\002\001\uffb6\000\002\001\uff84" +
    "\000\002\001\uff83\000\002\001\uffb5\000\002\001\uffc4\000" +
    "\002\001\uffbe\000\006\004\127\030\131\001\002\000\002" +
    "\001\uff79\000\004\037\217\001\uffac\000\002\001\uffb3\000" +
    "\002\001\uffc9\000\004\050\222\001\002\000\012\005\054" +
    "\006\053\010\057\012\205\001\002\000\004\067\221\001" +
    "\002\000\002\001\uffad\000\012\005\054\006\053\010\057" +
    "\032\223\001\002\000\006\004\127\030\131\001\002\000" +
    "\004\013\232\001\uffb1\000\010\005\054\006\053\010\057" +
    "\001\uff90\000\002\001\uffaf\000\002\001\uffb2\000\002\001" +
    "\uff91\000\002\001\uff92\000\010\005\054\006\053\010\057" +
    "\001\002\000\002\001\uffae\000\002\001\uffb0\000\002\001" +
    "\uffb7\000\004\020\237\001\002\000\006\014\242\062\241" +
    "\001\002\000\012\005\054\006\053\010\057\012\205\001" +
    "\002\000\002\001\uff76\000\002\001\uff77\000\002\001\uffb4" +
    "\000\012\004\065\013\066\053\071\065\072\001\uff9c\000" +
    "\004\031\123\001\002\000\002\001\uffd8\000\002\001\uffeb" +
    "\000\002\001\uffea\000\012\004\065\013\066\053\071\065" +
    "\072\001\uffe7\000\002\001\uffe9\000\012\004\065\013\066" +
    "\053\071\065\072\001\uffe8\000\010\055\256\074\257\075" +
    "\260\001\002\000\006\026\263\043\264\001\002\000\004" +
    "\040\261\001\002\000\002\001\uff97\000\002\001\uff96\000" +
    "\002\001\uff98\000\002\001\uff99\000\002\001\uff95\000\002" +
    "\001\002\000\002\001\uff94\000\004\064\270\001\uff7d\000" +
    "\004\052\273\001\002\000\004\072\272\001\002\000\002" +
    "\001\uff7e\000\002\001\uff7c\000\004\053\274\001\002\000" +
    "\010\005\054\006\053\010\057\001\002\000\006\013\063" +
    "\065\276\001\002\000\004\103\277\001\002\000\004\061" +
    "\300\001\002\000\014\004\127\005\054\006\053\010\057" +
    "\030\131\001\002\000\002\001\uffec\000\004\101\310\001" +
    "\uffce\000\010\005\054\006\053\010\057\001\002\000\012" +
    "\005\054\006\053\010\057\011\114\001\002\000\002\001" +
    "\uffd0\000\004\013\063\001\uffd3\000\002\001\uffd1\000\004" +
    "\032\311\001\uff7a\000\002\001\uff7b\000\012\004\313\005" +
    "\054\006\053\010\057\001\002\000\002\001\uff81\000\006" +
    "\013\317\037\320\001\uffca\000\002\001\uff82\000\002\001" +
    "\uffcd\000\012\004\313\005\054\006\053\010\057\001\002" +
    "\000\012\005\054\006\053\010\057\012\205\001\002\000" +
    "\002\001\uffcf\000\004\067\323\001\002\000\002\001\uffcb" +
    "\000\002\001\uffcc" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\322\000\052\002\030\003\027\004\044\005\012\006" +
    "\016\007\026\010\003\012\043\013\023\022\025\023\031" +
    "\025\040\026\004\030\035\031\021\045\010\046\022\052" +
    "\006\053\005\054\017\001\001\000\002\001\001\000\004" +
    "\027\302\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\113\265\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\123\253\001\001\000\016\062" +
    "\250\064\127\066\246\104\247\105\055\111\131\001\001" +
    "\000\004\115\244\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\107\243\110\066\001\001\000\016\032\164" +
    "\034\176\035\173\036\167\037\157\040\170\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\112\145\001\001\000\002" +
    "\001\001\000\004\122\125\001\001\000\002\001\001\000" +
    "\004\116\120\001\001\000\014\014\102\015\101\016\104" +
    "\017\106\020\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\114\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\107\067\110\066\001\001\000\002\001" +
    "\001\000\004\120\050\001\001\000\010\060\054\104\051" +
    "\105\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\065\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\104\063\105\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\110\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\121\076\001\001\000\010\060\077\104\051" +
    "\105\055\001\001\000\002\001\001\000\010\076\115\104" +
    "\114\105\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\104\110\105" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\104\112\105\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\117" +
    "\021\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\121\001\001\000\002\001\001\000\004\117\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\064" +
    "\127\066\132\111\131\001\001\000\002\001\001\000\004" +
    "\065\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\133\001\001\000\002\001\001\000\012\050\137" +
    "\051\140\104\136\105\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\104\142\105\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\057\146\064\127\066\147" +
    "\111\131\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\104\154\105\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\073\234\001" +
    "\001\000\004\074\210\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\035\206\036\167\037\157\040" +
    "\170\001\001\000\010\077\205\104\203\105\055\001\001" +
    "\000\002\001\001\000\010\077\202\104\203\105\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\033\212\064\127\066\213\111\131\001\001\000\002" +
    "\001\001\000\006\041\214\042\215\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\077\217" +
    "\104\203\105\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\043\226\044\223\102\225\104\224\105\055" +
    "\001\001\000\010\064\127\066\233\111\131\001\001\000" +
    "\002\001\001\000\010\103\230\104\227\105\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\102\232\104\224\105\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\075\237\001\001\000\010\077\242" +
    "\104\203\105\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\110\072\001\001\000\004" +
    "\024\245\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\251\107\252\110\066\001\001" +
    "\000\002\001\001\000\004\110\072\001\001\000\004\055" +
    "\254\001\001\000\004\056\261\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\106\264\001\001" +
    "\000\002\001\001\000\006\061\266\063\270\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\060\274\104\051\105" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\062\300\064\127\066\246\104\247\105" +
    "\055\111\131\001\001\000\002\001\001\000\004\067\306" +
    "\001\001\000\010\060\305\104\051\105\055\001\001\000" +
    "\010\076\304\104\114\105\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\071\311\001" +
    "\001\000\002\001\001\000\012\072\313\100\315\104\314" +
    "\105\055\001\001\000\002\001\001\000\004\070\320\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\100\323" +
    "\104\314\105\055\001\001\000\010\077\321\104\203\105" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PCLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PCLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PCLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

  action_obj.initActionClass();

    }


   ParserInfo    info     = ParserInfo.getInstance();
   public void syntax_error(Symbol token) throws ParseException {
          info.syntax_error(token);
   }

   public void unrecovered_syntax_error(Symbol token) throws ParseException {
      info.unrecovered_syntax_error(token);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PCLParser$actions {


   ComplexSymbolFactory symbolFactory = new ComplexSymbolFactory();
   ParserInfo      info     = ParserInfo.getInstance();
   StmtSQL         stmt     = new StmtSQL();
   
   public void initActionClass() {
   }

   public void print(String txt) { 
      System.out.println(txt); 
   }


  private final PCLParser parser;

  /** Constructor */
  CUP$PCLParser$actions(PCLParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PCLParser$do_action(
    int                        CUP$PCLParser$act_num,
    java_cup.runtime.lr_parser CUP$PCLParser$parser,
    java.util.Stack            CUP$PCLParser$stack,
    int                        CUP$PCLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PCLParser$result;

      /* select the action based on the action number */
      switch (CUP$PCLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // non_reserved_words ::= CURSOR 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("non_reserved_words",71, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // eat_token ::= COMMA 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("eat_token",70, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // eat_token ::= RPAR 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("eat_token",70, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // eat_token ::= LPAR 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("eat_token",70, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // eat_token ::= ID 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("eat_token",70, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // eat ::= eat eat_token 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("eat",69, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // eat ::= eat_token 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("eat",69, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // choice_abs_rel ::= RELATIVE 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("choice_abs_rel",59, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // choice_abs_rel ::= ABSOLUTE 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("choice_abs_rel",59, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // opt_from ::= 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("opt_from",58, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // opt_from ::= FROM 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("opt_from",58, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // opt_descriptor ::= 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("opt_descriptor",55, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // opt_descriptor ::= DESCRIPTOR 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("opt_descriptor",55, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // result_set ::= RESULT SET 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("result_set",49, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // opt_result_set ::= 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("opt_result_set",47, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // opt_result_set ::= result_set 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("opt_result_set",47, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // literal ::= literal LITERAL 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("literal",63, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // literal ::= LITERAL 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("literal",63, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // var_id ::= ID 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("var_id",62, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // var_id ::= host_var 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("var_id",62, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // var_int ::= NUM_ENTERO 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("var_int",61, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // var_int ::= host_var 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("var_int",61, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // var_string ::= LITERAL 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("var_string",60, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // var_string ::= host_var 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("var_string",60, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // id_qualified ::= 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("id_qualified",51, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // id_qualified ::= IDQUALIFIED 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("id_qualified",51, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // id_base ::= non_reserved_words 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("id_base",50, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // id_base ::= ID 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("id_base",50, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // id ::= id_base id_qualified 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("id",52, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // host_var_base ::= PREHOST ID 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("host_var_base",67, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // host_var_base ::= HOSTVAR2 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("host_var_base",67, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // host_var_base ::= HOSTVAR1 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("host_var_base",67, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // host_var ::= host_var_base id_qualified 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("host_var",66, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // host_var_opt ::= 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("host_var_opt",65, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // host_var_opt ::= host_var 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("host_var_opt",65, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // host_field ::= host_var host_var_opt 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("host_field",64, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // cursor_name ::= id 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("cursor_name",45, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // whenever_action ::= GOTO host_label 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("whenever_action",44, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // whenever_action ::= CONTINUE 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("whenever_action",44, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // whenever_type ::= SQLWARNING 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("whenever_type",43, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // whenever_type ::= SQLERROR 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("whenever_type",43, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // whenever_type ::= NOT FOUND 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("whenever_type",43, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // sql_whenever ::= WHENEVER NT$9 whenever_type whenever_action 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-3)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-3)).value;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_whenever",42, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$9 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$PCLParser$stack.peek()).value;
 stmt.setVerb(s); 
              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("NT$9",81, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sql_signal ::= SIGNAL eat 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_signal",41, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // sql_prepare ::= PREPARE eat 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)).value;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_prepare",40, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // sql_open_using_fields ::= sql_open_using_fields COMMA host_var 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_open_using_fields",39, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // sql_open_using_fields ::= host_var 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_open_using_fields",39, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sql_open_using_type ::= sql_open_using_fields 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_open_using_type",38, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sql_open_using_type ::= DESCRIPTOR ID 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_open_using_type",38, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // sql_open_using_opt ::= 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_open_using_opt",37, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sql_open_using_opt ::= USING sql_open_using_type 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_open_using_opt",37, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // sql_open ::= OPEN NT$8 id sql_open_using_opt 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-3)).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-3)).value;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_open",36, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$8 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$PCLParser$stack.peek()).value;
 stmt.setVerb(v); 
              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("NT$8",80, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // locator_variable_lst ::= locator_variable_lst COMMA host_var 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("locator_variable_lst",46, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // locator_variable_lst ::= host_var 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("locator_variable_lst",46, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sql_hold_locator ::= HOLD LOCATOR NT$7 locator_variable_lst 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-3)).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-2)).value;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_hold_locator",4, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$7 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$PCLParser$stack.peek()).value;
 stmt.setVerb(p, s); 
              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("NT$7",79, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sql_free_locator ::= FREE LOCATOR NT$6 locator_variable_lst 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-3)).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-2)).value;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_free_locator",5, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$6 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$PCLParser$stack.peek()).value;
 stmt.setVerb(p, s); 
              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("NT$6",78, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sql_include ::= INCLUDE ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()).right;
		Symbol m = (Symbol)((java_cup.runtime.Symbol) CUP$PCLParser$stack.peek()).value;
		 stmt.setVerb(i); 
                                  stmt.addRValue(new SymbolExt(m));
                               
              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_include",35, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sql_fetch_count_opt ::= 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_fetch_count_opt",32, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sql_fetch_count_opt ::= FOR var_int ROWS 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_fetch_count_opt",32, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sql_fetch_fields_lst ::= sql_fetch_fields_lst COMMA host_field 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_fetch_fields_lst",34, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sql_fetch_fields_lst ::= host_field 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_fetch_fields_lst",34, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sql_fetch_fields ::= DESCRIPTOR id 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_fetch_fields",33, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sql_fetch_fields ::= sql_fetch_fields_lst 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_fetch_fields",33, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sql_fetch_rows ::= sql_fetch_count_opt INTO sql_fetch_fields 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_fetch_rows",31, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sql_fetch_cursor ::= id 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_fetch_cursor",25, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sql_fetch_orientation ::= ROWSET STARTING AT choice_abs_rel var_int 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_fetch_orientation",30, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-4)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sql_fetch_orientation ::= RELATIVE var_int 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_fetch_orientation",30, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sql_fetch_orientation ::= ABSOLUTE var_int 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_fetch_orientation",30, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sql_fetch_orientation ::= CURRENT opt_continue 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_fetch_orientation",30, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sql_fetch_orientation ::= BEFORE 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_fetch_orientation",30, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // sql_fetch_orientation ::= AFTER 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_fetch_orientation",30, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sql_fetch_orientation ::= LAST 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_fetch_orientation",30, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sql_fetch_orientation ::= FIRST 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_fetch_orientation",30, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sql_fetch_orientation ::= PRIOR 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_fetch_orientation",30, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sql_fetch_orientation ::= NEXT 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_fetch_orientation",30, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sql_fetch_continue ::= WITH CONTINUE 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_fetch_continue",29, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sql_fetch_sensitive ::= SENSITIVE 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_fetch_sensitive",28, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sql_fetch_sensitive ::= INSENSITIVE 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_fetch_sensitive",28, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sql_fetch_opt ::= sql_fetch_sensitive 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_fetch_opt",27, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sql_fetch_opt ::= sql_fetch_orientation 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_fetch_opt",27, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sql_fetch_opt ::= sql_fetch_continue 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_fetch_opt",27, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sql_fetch_opt_lst ::= sql_fetch_opt_lst sql_fetch_opt 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_fetch_opt_lst",26, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sql_fetch_opt_lst ::= sql_fetch_opt 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_fetch_opt_lst",26, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sql_fetch_options ::= 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_fetch_options",24, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sql_fetch_options ::= sql_fetch_opt_lst 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_fetch_options",24, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sql_fetch_verb ::= FETCH 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$PCLParser$stack.peek()).value;
		 stmt.setVerb(i); 
//JGG                                  stmt.addRValue(new SymbolExt(m));
                            
              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_fetch_verb",23, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sql_fetch ::= sql_fetch_verb sql_fetch_options opt_from sql_fetch_cursor sql_fetch_rows 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_fetch",22, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-4)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // clause_using_for_opt ::= 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("clause_using_for_opt",54, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // clause_using_for_opt ::= FOR var_int ROWS 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("clause_using_for_opt",54, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // descriptor_values ::= descriptor_values COMMA var_id 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("descriptor_values",56, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // descriptor_values ::= var_id 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("descriptor_values",56, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // clause_using_opt ::= 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("clause_using_opt",53, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // clause_using_opt ::= USING opt_descriptor descriptor_values clause_using_for_opt 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("clause_using_opt",53, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // execute_type ::= IMMEDIATE var_string 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("execute_type",21, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // execute_type ::= ID clause_using_opt 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("execute_type",21, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // execute_verb ::= EXECUTE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$PCLParser$stack.peek()).value;
		 stmt.setVerb(p); 
              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("execute_verb",20, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sql_execute ::= execute_verb execute_type locator_variable_lst 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_execute",19, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declare_section ::= DECLARE NT$5 SECTION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-2)).value;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("declare_section",18, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$5 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$PCLParser$stack.peek()).value;
 stmt.appendVerb(s); 
              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("NT$5",77, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sql_declare_end ::= END NT$4 declare_section 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-2)).value;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_declare_end",17, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$4 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$PCLParser$stack.peek()).value;
 stmt.setVerb(s); 
              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("NT$4",76, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sql_declare_begin ::= BEGIN NT$3 declare_section 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-2)).value;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_declare_begin",16, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$3 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$PCLParser$stack.peek()).value;
 stmt.setVerb(s); 
              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("NT$3",75, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // connect_auth_opt ::= 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("connect_auth_opt",15, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // connect_auth_opt ::= connect_auth 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("connect_auth_opt",15, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // connect_auth ::= USER host_var USING host_var 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("connect_auth",14, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-3)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // connect_reset ::= RESET 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("connect_reset",13, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // connect_to ::= TO var_string connect_auth_opt 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("connect_to",12, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // connect_mode ::= connect_auth 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("connect_mode",11, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // connect_mode ::= connect_reset 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("connect_mode",11, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // connect_mode ::= connect_to 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("connect_mode",11, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // connect_opt ::= 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("connect_opt",10, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // connect_opt ::= connect_mode 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("connect_opt",10, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sql_connect ::= CONNECT connect_opt 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_connect",9, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sql_close ::= CLOSE NT$2 ID 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-2)).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-2)).value;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_close",8, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$2 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$PCLParser$stack.peek()).value;
 stmt.setVerb(v); 
              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("NT$2",74, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // call_opt ::= 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("call_opt",7, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // call_opt ::= eat 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("call_opt",7, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sql_call ::= CALL procedure_name call_opt 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_call",6, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // procedure_name ::= host_var 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("procedure_name",48, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // procedure_name ::= id 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("procedure_name",48, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sql_associate_locator ::= ASSOCIATE NT$1 opt_result_set LOCATOR LPAR locator_variable_lst RPAR WITH PROCEDURE procedure_name 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-9)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-9)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-9)).value;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_associate_locator",3, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-9)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$1 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$PCLParser$stack.peek()).value;
 stmt.setVerb(s); 
              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("NT$1",73, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sql_allocate ::= ALLOCATE NT$0 cursor_name CURSOR FOR RESULT SET host_var 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-7)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-7)).value;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_allocate",2, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-7)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$0 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$PCLParser$stack.peek()).value;
 stmt.setVerb(s); 
              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("NT$0",72, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sql_pcl ::= sql_whenever 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_pcl",1, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sql_pcl ::= sql_signal 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_pcl",1, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sql_pcl ::= sql_prepare 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_pcl",1, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sql_pcl ::= sql_open 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_pcl",1, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sql_pcl ::= sql_include 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_pcl",1, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sql_pcl ::= sql_hold_locator 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_pcl",1, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sql_pcl ::= sql_free_locator 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_pcl",1, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sql_pcl ::= sql_fetch 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_pcl",1, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sql_pcl ::= sql_execute 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_pcl",1, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sql_pcl ::= sql_declare_end 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_pcl",1, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sql_pcl ::= sql_declare_begin 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_pcl",1, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sql_pcl ::= sql_connect 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_pcl",1, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sql_pcl ::= sql_close 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_pcl",1, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sql_pcl ::= sql_call 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_pcl",1, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sql_pcl ::= sql_associate_locator 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_pcl",1, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sql_pcl ::= sql_allocate 
            {
              Object RESULT =null;

              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql_pcl",1, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= sql EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)).right;
		Symbol start_val = (Symbol)((java_cup.runtime.Symbol) CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)).value;
		RESULT = start_val;
              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.elementAt(CUP$PCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PCLParser$parser.done_parsing();
          return CUP$PCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // sql ::= sql_pcl 
            {
              Symbol RESULT =null;
		 stmt.adjust(info.getLastSymbol()); 
                   String name = stmt.getVerbName();
                   int id =  stmt.getVerbId();
                   int line = stmt.getVerb().left;
                   int col = stmt.getVerb().right;
                   RESULT = symbolFactory.newSymbol(name, id, new Symbol(id, line, col, stmt));  
                
              CUP$PCLParser$result = parser.getSymbolFactory().newSymbol("sql",0, ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$PCLParser$stack.peek()), RESULT);
            }
          return CUP$PCLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

