
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Sep 22 00:08:07 CEST 2017
//----------------------------------------------------

package com.jgg.sdp.parser.lang;

import java_cup.runtime.*;
import com.jgg.sdp.parser.base.*;
import com.jgg.sdp.parser.stmt.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Sep 22 00:08:07 CEST 2017
  */
public class TCLParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public TCLParser() {super();}

  /** Constructor which sets the default scanner. */
  public TCLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public TCLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\040\002\000" +
    "\002\004\005\000\002\041\002\000\002\005\006\000\002" +
    "\042\002\000\002\006\007\000\002\012\003\000\002\012" +
    "\002\000\002\013\003\000\002\013\004\000\002\014\006" +
    "\000\002\014\006\000\002\043\002\000\002\007\012\000" +
    "\002\015\004\000\002\015\002\000\002\016\003\000\002" +
    "\016\002\000\002\017\003\000\002\017\003\000\002\044" +
    "\002\000\002\010\005\000\002\020\003\000\002\020\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\004\000" +
    "\002\022\005\000\002\045\002\000\002\011\007\000\002" +
    "\036\003\000\002\037\003\000\002\037\003\000\002\035" +
    "\003\000\002\033\003\000\002\033\003\000\002\024\003" +
    "\000\002\024\003\000\002\032\003\000\002\032\002\000" +
    "\002\027\005\000\002\027\002\000\002\026\003\000\002" +
    "\026\002\000\002\031\003\000\002\031\002\000\002\025" +
    "\004\000\002\025\002\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\016\005\006\017\016\030\004\031\007\033" +
    "\010\034\012\001\002\000\004\037\117\001\002\000\002" +
    "\001\001\000\002\001\ufff9\000\002\001\uffe5\000\002\001" +
    "\ufff7\000\002\001\ufffc\000\002\001\ufff5\000\002\001\ufffe" +
    "\000\002\001\uffff\000\002\001\ufffa\000\004\037\023\001" +
    "\002\000\002\001\ufffb\000\002\001\ufffd\000\004\002\022" +
    "\001\002\000\002\001\000\000\002\001\uffed\000\004\015" +
    "\025\001\002\000\002\001\uffd8\000\004\026\030\001\uffea" +
    "\000\004\016\032\001\002\000\004\024\031\001\002\000" +
    "\002\001\uffeb\000\006\012\036\035\035\001\uffe8\000\002" +
    "\001\uffe9\000\004\023\037\001\002\000\002\001\uffe7\000" +
    "\002\001\uffe6\000\002\001\uffec\000\024\010\042\011\050" +
    "\015\047\021\044\022\052\036\046\040\051\041\043\043" +
    "\053\001\002\000\002\001\002\000\002\001\uffc4\000\002" +
    "\001\uffc3\000\002\001\uffc8\000\002\001\uffd6\000\002\001" +
    "\uffc2\000\002\001\uffd7\000\002\001\uffc9\000\002\001\uffc5" +
    "\000\002\001\uffc7\000\002\001\uffc6\000\004\025\057\001" +
    "\ufff2\000\002\001\ufff1\000\002\001\ufff4\000\004\033\062" +
    "\001\002\000\004\025\057\001\ufff3\000\002\001\ufff0\000" +
    "\004\032\063\001\002\000\006\007\064\020\065\001\002" +
    "\000\002\001\uffef\000\002\001\uffee\000\004\044\070\001" +
    "\uffd2\000\004\042\071\001\uffd0\000\002\001\uffd3\000\004" +
    "\034\073\001\002\000\002\001\ufff6\000\024\010\042\011" +
    "\050\015\047\021\044\022\052\036\046\040\051\041\043" +
    "\043\053\001\uffce\000\002\001\uffcf\000\002\001\uffd1\000" +
    "\014\004\103\006\111\013\101\014\100\042\102\001\uffcc" +
    "\000\002\001\uffe4\000\002\001\uffd9\000\002\001\uffda\000" +
    "\002\001\uffcd\000\002\001\002\000\002\001\uffdb\000\002" +
    "\001\uffe1\000\004\034\112\001\002\000\002\001\uffe3\000" +
    "\002\001\uffe2\000\002\001\uffe0\000\024\010\042\011\050" +
    "\015\047\021\044\022\052\036\046\040\051\041\043\043" +
    "\053\001\002\000\002\001\uffde\000\002\001\uffdf\000\004" +
    "\044\070\001\uffd2\000\002\001\ufff8\000\002\001\uffdd\000" +
    "\004\015\025\001\002\000\004\027\122\001\uffca\000\010" +
    "\013\101\014\100\024\126\001\002\000\002\001\uffdc\000" +
    "\002\001\uffd4\000\002\001\uffcb\000\002\001\uffd5" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\022\002\020\003\004\004\013\005\012\006" +
    "\017\007\010\010\016\011\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\114\001\001\000\004\044" +
    "\075\001\001\000\004\041\065\001\001\000\002\001\001" +
    "\000\004\042\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\043\023\001\001\000\004\035\025\001\001\000\002" +
    "\001\001\000\004\015\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\033\017\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\044" +
    "\033\040\001\001\000\004\034\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\055\013\057\014\054\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\066\001\001" +
    "\000\004\027\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\023\044\026\074\033\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\020" +
    "\076\021\106\022\107\031\105\036\104\037\103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\023\044\033\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\115\001\001\000\002\001\001\000\004\045\117\001\001" +
    "\000\004\035\120\001\001\000\004\025\122\001\001\000" +
    "\006\024\124\037\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$TCLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$TCLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$TCLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

  action_obj.initActionClass();

    }


   ParserInfo    info     = ParserInfo.getInstance();
   
   public void syntax_error(Symbol token) throws ParseException {
          info.syntax_error(token);
   }

   public void unrecovered_syntax_error(Symbol token) throws ParseException {
      info.unrecovered_syntax_error(token);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$TCLParser$actions {


   ComplexSymbolFactory symbolFactory = new ComplexSymbolFactory();
   ParserInfo      info     = ParserInfo.getInstance();
   StmtSQL         stmt     = new StmtSQL();
   
   public void initActionClass() {
   }

   public void print(String txt) { 
      System.out.println(txt); 
   }


  private final TCLParser parser;

  /** Constructor */
  CUP$TCLParser$actions(TCLParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$TCLParser$do_action(
    int                        CUP$TCLParser$act_num,
    java_cup.runtime.lr_parser CUP$TCLParser$parser,
    java.util.Stack            CUP$TCLParser$stack,
    int                        CUP$TCLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$TCLParser$result;

      /* select the action based on the action number */
      switch (CUP$TCLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // non_reserved_words ::= SMALLINT 
            {
              Symbol RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("non_reserved_words",17, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // non_reserved_words ::= TIME 
            {
              Symbol RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("non_reserved_words",17, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // non_reserved_words ::= DATE 
            {
              Symbol RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("non_reserved_words",17, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // non_reserved_words ::= TIMESTAMP 
            {
              Symbol RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("non_reserved_words",17, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // non_reserved_words ::= VERSION 
            {
              Symbol RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("non_reserved_words",17, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // non_reserved_words ::= MIN 
            {
              Symbol RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("non_reserved_words",17, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // non_reserved_words ::= MAX 
            {
              Symbol RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("non_reserved_words",17, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // non_reserved_words ::= DEC 
            {
              Symbol RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("non_reserved_words",17, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // opt_clause_queryno ::= 
            {
              Object RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("opt_clause_queryno",19, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // opt_clause_queryno ::= QUERYNO integer 
            {
              Object RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("opt_clause_queryno",19, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // opt_to ::= 
            {
              Object RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("opt_to",23, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // opt_to ::= TO 
            {
              Object RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("opt_to",23, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // opt_id ::= 
            {
              Object RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("opt_id",20, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // opt_id ::= id 
            {
              Object RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("opt_id",20, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // opt_savepoint ::= 
            {
              Object RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("opt_savepoint",21, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // opt_savepoint ::= TO SAVEPOINT opt_id 
            {
              Object RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("opt_savepoint",21, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // opt_work ::= 
            {
              Object RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("opt_work",24, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // opt_work ::= WORK 
            {
              Object RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("opt_work",24, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // integer ::= host_variable 
            {
              Symbol RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("integer",18, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // integer ::= NUM_ENTERO 
            {
              Symbol RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("integer",18, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // id ::= non_reserved_words 
            {
              Object RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("id",25, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // id ::= ID 
            {
              Object RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("id",25, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // table_name ::= ID 
            {
              Object RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("table_name",27, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // host_variable ::= HOSTVAR2 
            {
              Object RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("host_variable",29, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // host_variable ::= HOSTVAR1 
            {
              Object RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("host_variable",29, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // host_var_simple ::= host_variable 
            {
              Object RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("host_var_simple",28, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sql_refresh ::= REFRESH TABLE NT$5 table_name opt_clause_queryno 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-4)).right;
		Symbol r = (Symbol)((java_cup.runtime.Symbol) CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-3)).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-3)).value;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("sql_refresh",7, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-4)), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$5 ::= 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-1)).right;
		Symbol r = (Symbol)((java_cup.runtime.Symbol) CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$TCLParser$stack.peek()).value;
 stmt.setVerb(r,t); 
              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("NT$5",35, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // release_savepoint ::= opt_to SAVEPOINT id 
            {
              Object RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("release_savepoint",16, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // release_connection ::= ALL opt_sql 
            {
              Object RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("release_connection",15, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // release_connection ::= CURRENT 
            {
              Object RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("release_connection",15, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // release_connection ::= host_var_simple 
            {
              Object RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("release_connection",15, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sql_release_type ::= release_savepoint 
            {
              Object RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("sql_release_type",14, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sql_release_type ::= release_connection 
            {
              Object RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("sql_release_type",14, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sql_release ::= RELEASE NT$4 sql_release_type 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-2)).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-2)).value;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("sql_release",6, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$4 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$TCLParser$stack.peek()).value;
 stmt.setVerb(v); 
              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("NT$4",34, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lock_mode ::= EXCLUSIVE 
            {
              Object RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("lock_mode",13, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // lock_mode ::= SHARE 
            {
              Object RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("lock_mode",13, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // lock_mode_opt ::= 
            {
              Object RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("lock_mode_opt",12, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // lock_mode_opt ::= lock_mode 
            {
              Object RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("lock_mode_opt",12, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lock_partition_opt ::= 
            {
              Object RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("lock_partition_opt",11, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lock_partition_opt ::= PARTITION NUM_ENTERO 
            {
              Object RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("lock_partition_opt",11, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sql_lock_table ::= LOCK TABLE NT$3 table_name lock_partition_opt IN lock_mode_opt MODE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-7)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-7)).right;
		Symbol l = (Symbol)((java_cup.runtime.Symbol) CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-6)).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-6)).value;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("sql_lock_table",5, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-7)), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$3 ::= 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-1)).right;
		Symbol l = (Symbol)((java_cup.runtime.Symbol) CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$TCLParser$stack.peek()).value;
 stmt.setVerb(l, t); 
              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("NT$3",33, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sql_savepoint_item ::= ON ROLLBACK RETAIN LOCKS 
            {
              Object RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("sql_savepoint_item",10, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-3)), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sql_savepoint_item ::= ON ROLLBACK RETAIN CURSORS 
            {
              Object RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("sql_savepoint_item",10, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-3)), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sql_savepoint_lst ::= sql_savepoint_lst sql_savepoint_item 
            {
              Object RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("sql_savepoint_lst",9, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sql_savepoint_lst ::= sql_savepoint_item 
            {
              Object RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("sql_savepoint_lst",9, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sql_savepoint_opt ::= 
            {
              Object RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("sql_savepoint_opt",8, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sql_savepoint_opt ::= sql_savepoint_lst 
            {
              Object RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("sql_savepoint_opt",8, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sql_savepoint ::= SAVEPOINT NT$2 id opt_unique sql_savepoint_opt 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-4)).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-4)).value;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("sql_savepoint",4, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-4)), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$2 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$TCLParser$stack.peek()).value;
 stmt.setVerb(v); 
              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("NT$2",32, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sql_rollback ::= ROLLBACK NT$1 opt_work opt_savepoint 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-3)).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-3)).value;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("sql_rollback",3, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-3)), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$1 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$TCLParser$stack.peek()).value;
 stmt.setVerb(v); 
              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("NT$1",31, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sql_commit ::= COMMIT NT$0 opt_work 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-2)).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-2)).value;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("sql_commit",2, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-2)), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$0 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$TCLParser$stack.peek()).value;
 stmt.setVerb(v); 
              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("NT$0",30, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sql_tcl ::= sql_refresh 
            {
              Object RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("sql_tcl",1, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sql_tcl ::= sql_release 
            {
              Object RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("sql_tcl",1, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sql_tcl ::= sql_lock_table 
            {
              Object RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("sql_tcl",1, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sql_tcl ::= sql_savepoint 
            {
              Object RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("sql_tcl",1, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sql_tcl ::= sql_rollback 
            {
              Object RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("sql_tcl",1, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sql_tcl ::= sql_commit 
            {
              Object RESULT =null;

              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("sql_tcl",1, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= sql EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-1)).right;
		Symbol start_val = (Symbol)((java_cup.runtime.Symbol) CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-1)).value;
		RESULT = start_val;
              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.elementAt(CUP$TCLParser$top-1)), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$TCLParser$parser.done_parsing();
          return CUP$TCLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // sql ::= sql_tcl 
            {
              Symbol RESULT =null;
		 stmt.adjust(info.getLastSymbol()); 
                    String name = stmt.getVerbName();
                    int id =  stmt.getVerbId();
                    int line = stmt.getVerb().left;
                    int col = stmt.getVerb().right;
                    RESULT = symbolFactory.newSymbol(name, id, new Symbol(id, line, col, stmt));  
                 
              CUP$TCLParser$result = parser.getSymbolFactory().newSymbol("sql",0, ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TCLParser$stack.peek()), RESULT);
            }
          return CUP$TCLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

