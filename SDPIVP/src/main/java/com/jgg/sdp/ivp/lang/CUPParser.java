
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Sep 29 08:49:03 CEST 2017
//----------------------------------------------------

package com.jgg.sdp.ivp.lang;

import java.util.*;
import java_cup.*;
import java_cup.runtime.*;
import java.util.Hashtable;
import java.util.Stack;
import com.jgg.sdp.ivp.generator.cobol.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Sep 29 08:49:03 CEST 2017
  */
public class CUPParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CUPParser() {super();}

  /** Constructor which sets the default scanner. */
  public CUPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CUPParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\002\006\000\002\005" +
    "\004\000\002\005\003\000\002\011\005\000\002\011\004" +
    "\000\002\011\005\000\002\011\004\000\002\012\003\000" +
    "\002\012\005\000\002\010\005\000\002\010\006\000\002" +
    "\010\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\027" +
    "\004\000\002\013\005\000\002\013\003\000\002\034\003" +
    "\000\002\030\004\000\002\014\005\000\002\014\003\000" +
    "\002\020\003\000\002\025\005\000\002\025\003\000\002" +
    "\033\003\000\002\007\004\000\002\007\003\000\002\040" +
    "\002\000\002\015\007\000\002\041\002\000\002\021\006" +
    "\000\002\042\002\000\002\021\004\000\002\022\005\000" +
    "\002\022\003\000\002\016\004\000\002\016\003\000\002" +
    "\017\004\000\002\032\004\000\002\032\003\000\002\036" +
    "\003\000\002\036\005\000\002\037\003\000\002\031\003" +
    "\000\002\004\004\000\002\004\003\000\002\003\002\000" +
    "\002\023\003\000\002\023\003\000\002\026\004\000\002" +
    "\026\003\000\002\024\006\000\002\024\006\000\002\024" +
    "\006\000\002\006\006\000\002\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\154\000\010\007\004\010\011\032\010\001\002\000" +
    "\040\004\073\005\070\006\071\007\104\010\074\011\107" +
    "\012\110\013\106\014\105\023\077\024\075\025\102\026" +
    "\100\032\101\035\147\001\002\000\004\002\145\001\002" +
    "\000\040\004\073\005\070\006\071\007\104\010\074\011" +
    "\107\012\110\013\106\014\105\023\077\024\075\025\102" +
    "\026\100\032\101\035\117\001\002\000\002\001\ufffe\000" +
    "\002\001\uffc6\000\004\007\115\001\002\000\012\007\004" +
    "\010\011\023\015\032\010\001\uffc5\000\004\014\041\001" +
    "\uffc5\000\002\001\uffc1\000\010\024\022\025\023\026\024" +
    "\001\002\000\002\001\uffff\000\002\001\uffc3\000\004\023" +
    "\015\001\uffc4\000\002\001\uffc2\000\004\035\025\001\002" +
    "\000\004\035\025\001\002\000\004\035\025\001\002\000" +
    "\002\001\uffdb\000\002\001\uffdc\000\006\015\031\016\030" +
    "\001\002\000\004\035\025\001\002\000\002\001\uffbe\000" +
    "\002\001\uffdd\000\006\015\034\016\030\001\002\000\002" +
    "\001\uffbf\000\006\015\036\016\030\001\002\000\002\001" +
    "\uffc0\000\004\035\045\001\002\000\002\001\uffbc\000\004" +
    "\013\042\001\002\000\004\035\043\001\002\000\004\015" +
    "\044\001\002\000\002\001\uffbd\000\002\001\uffd8\000\002" +
    "\001\uffd9\000\004\035\045\001\000\000\002\001\uffda\000" +
    "\004\021\052\001\002\000\002\001\uffd4\000\006\015\112" +
    "\022\111\001\002\000\002\001\uffc5\000\002\001\uffcf\000" +
    "\002\001\uffd3\000\006\027\061\035\060\001\uffd1\000\004" +
    "\020\065\001\uffc5\000\004\035\063\001\002\000\002\001" +
    "\uffd0\000\002\001\uffe2\000\002\001\uffd2\000\040\004\073" +
    "\005\070\006\071\007\104\010\074\011\107\012\110\013" +
    "\106\014\105\023\077\024\075\025\102\026\100\032\101" +
    "\035\103\001\002\000\002\001\uffcc\000\002\001\uffce\000" +
    "\002\001\ufff2\000\002\001\ufff1\000\002\001\uffc8\000\002" +
    "\001\ufff3\000\002\001\uffef\000\002\001\uffe8\000\002\001" +
    "\uffcd\000\002\001\uffe9\000\002\001\uffe6\000\002\001\uffee" +
    "\000\002\001\uffe7\000\002\001\ufff4\000\002\001\ufff0\000" +
    "\002\001\uffea\000\002\001\uffeb\000\002\001\uffed\000\002" +
    "\001\uffec\000\002\001\uffd6\000\002\001\uffd7\000\002\001" +
    "\uffc5\000\002\001\uffd5\000\002\001\uffc7\000\002\001\uffdf" +
    "\000\006\015\uffde\016\uffde\001\ufff4\000\006\017\135\034" +
    "\134\001\ufff9\000\006\015\132\016\131\001\002\000\002" +
    "\001\ufff5\000\006\030\127\035\126\001\002\000\002\001" +
    "\ufffa\000\002\001\ufffb\000\002\001\uffde\000\004\031\130" +
    "\001\002\000\002\001\ufff8\000\004\035\126\001\002\000" +
    "\002\001\uffe1\000\002\001\uffe0\000\040\004\073\005\070" +
    "\006\071\007\104\010\074\011\107\012\110\013\106\014" +
    "\105\023\077\024\075\025\102\026\100\032\101\035\103" +
    "\001\002\000\040\004\073\005\070\006\071\007\104\010" +
    "\074\011\107\012\110\013\106\014\105\023\077\024\075" +
    "\025\102\026\100\032\101\035\103\001\002\000\002\001" +
    "\ufff7\000\006\016\142\033\143\001\002\000\004\030\127" +
    "\001\uffc9\000\002\001\uffcb\000\040\004\073\005\070\006" +
    "\071\007\104\010\074\011\107\012\110\013\106\014\105" +
    "\023\077\024\075\025\102\026\100\032\101\035\103\001" +
    "\002\000\002\001\ufff6\000\002\001\uffca\000\002\001\001" +
    "\000\002\001\ufffc\000\006\015\uffe2\016\uffe2\001\ufff4\000" +
    "\006\015\155\016\154\001\002\000\002\001\uffe3\000\006" +
    "\030\127\035\063\001\002\000\002\001\ufffd\000\004\035" +
    "\063\001\002\000\002\001\uffe5\000\002\001\uffe4" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\154\000\012\002\004\004\005\005\011\011\006\001" +
    "\001\000\016\010\117\012\151\013\147\027\145\034\150" +
    "\035\121\001\001\000\002\001\001\000\016\010\117\012" +
    "\122\014\120\020\115\030\123\035\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\016\004\005\011\015\023\012\024\013\026\017\001\001" +
    "\000\006\003\037\006\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\020\001\001\000\002\001\001\000\006\025\034\033" +
    "\025\001\001\000\006\025\032\033\025\001\001\000\006" +
    "\025\026\033\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\046" +
    "\015\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\050\001\001\000\002\001\001\000\004\015\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\052" +
    "\042\053\001\001\000\002\001\001\000\010\003\054\016" +
    "\056\022\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\061\001\001\000\006\003\065\032\066\001" +
    "\001\000\004\034\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\031\075\035\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\112\001\001\000\002\001\001\000\010\003\054" +
    "\016\056\022\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\014\120\020" +
    "\115\030\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\010\117\012\137\035\121\036\136\037\140\001" +
    "\001\000\004\035\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\010" +
    "\117\012\137\035\121\037\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\147\027\152\034\150\001\001\000\002\001\001\000" +
    "\004\034\155\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CUPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CUPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CUPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public boolean debugSymbols;
  public void setDebugSymbols(boolean debugSymbols){
    this.debugSymbols = debugSymbols;
  }
  public void report_fatal_error(
    String   message,
    Object   info)
    {
      done_parsing();
      System.err.println("Can't recover from previous error(s), giving up." + (Symbol)info);
      System.exit(1);
    }

    public void report_error(String message, Object info) {
      System.out.println("REPORT_ERROR");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CUPParser$actions {



  ComplexSymbolFactory symbolFactory = new ComplexSymbolFactory();
  
  CUPCode code = new CUPCode();
      

  private final CUPParser parser;

  /** Constructor */
  CUP$CUPParser$actions(CUPParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CUPParser$do_action(
    int                        CUP$CUPParser$act_num,
    java_cup.runtime.lr_parser CUP$CUPParser$parser,
    java.util.Stack            CUP$CUPParser$stack,
    int                        CUP$CUPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CUPParser$result;

      /* select the action based on the action number */
      switch (CUP$CUPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // start_spec ::= empty 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("start_spec",4, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // start_spec ::= START WITH ID SEMI 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("start_spec",4, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // preced ::= PRECEDENCE NONASSOC terminal_list SEMI 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("preced",18, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // preced ::= PRECEDENCE RIGHT terminal_list SEMI 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("preced",18, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // preced ::= PRECEDENCE LEFT terminal_list SEMI 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("preced",18, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // precedence_l ::= preced 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("precedence_l",20, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // precedence_l ::= precedence_l preced 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("precedence_l",20, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // precedence_list ::= empty 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("precedence_list",17, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // precedence_list ::= precedence_l 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("precedence_list",17, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // empty ::= 
            {
              Symbol RESULT =null;
		 Symbol s = new Symbol(-1, 0, 0, "empty");
             RESULT = symbolFactory.newSymbol("empty", -1, s);
          
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("empty",1, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // non_terminal ::= NONTERMINAL 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("non_terminal",2, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // non_terminal ::= NON TERMINAL 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("non_terminal",2, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // label_id ::= robust_id 
            {
              Symbol RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("label_id",23, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // typearguement ::= type_id 
            {
              Symbol RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("typearguement",29, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // typearglist ::= typearglist COMMA typearguement 
            {
              Symbol RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("typearglist",28, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // typearglist ::= typearguement 
            {
              Symbol RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("typearglist",28, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // opt_label ::= empty 
            {
              Symbol RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("opt_label",24, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // opt_label ::= COLON label_id 
            {
              Symbol RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("opt_label",24, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // prod_part ::= ID opt_label 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		Symbol id = (Symbol)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		 code.addComponent(id); 
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("prod_part",13, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // prod_part_list ::= empty 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Symbol id = (Symbol)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("prod_part_list",12, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // prod_part_list ::= prod_part_list prod_part 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("prod_part_list",12, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // rhs ::= prod_part_list 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("rhs",16, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // rhs ::= prod_part_list PERCENT_PREC term_id 
            {
              Object RESULT =null;
		int term_nameleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int term_nameright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Symbol term_name = (Symbol)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("rhs",16, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // rhs_list ::= NT$2 rhs 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		 code.addRHS(); 
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("rhs_list",15, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$2 ::= 
            {
              Object RESULT =null;
 code.setCurrentRHS(); 
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("NT$2",32, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // rhs_list ::= rhs_list BAR NT$1 rhs 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		 code.addRHS(); 
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("rhs_list",15, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$1 ::= 
            {
              Object RESULT =null;
 code.setCurrentRHS(); 
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("NT$1",31, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // production ::= ID NT$0 COLON_COLON_EQUALS rhs_list SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)).right;
		Symbol id = (Symbol)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)).value;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("production",11, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-4)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Symbol id = (Symbol)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
 code.setCurrentLHS(id); 
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("NT$0",30, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // production_list ::= production 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("production_list",5, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // production_list ::= production_list production 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("production_list",5, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // terminal_id ::= ID 
            {
              Symbol RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int symright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Symbol sym = (Symbol)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("terminal_id",25, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // terminal_list ::= terminal_id 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("terminal_list",19, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // terminal_list ::= terminal_list COMMA terminal_id 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("terminal_list",19, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // non_terminal_id ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Symbol id = (Symbol)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 code.addNonTerminal(id); 
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("non_terminal_id",14, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // non_terminal_list ::= non_terminal_id 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("non_terminal_list",10, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // non_terminal_list ::= non_terminal_list COMMA non_terminal_id 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("non_terminal_list",10, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declares_non_term ::= non_terminal_list SEMI 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("declares_non_term",22, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // term_id ::= ID 
            {
              Symbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()).right;
		Symbol id = (Symbol)((java_cup.runtime.Symbol) CUP$CUPParser$stack.peek()).value;
		 code.addTerminal(id);  
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("term_id",26, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // term_name_list ::= term_id 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("term_name_list",9, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // term_name_list ::= term_name_list COMMA term_id 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("term_name_list",9, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declares_term ::= term_name_list SEMI 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("declares_term",21, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // robust_id ::= NONASSOC 
            {
              Symbol RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("robust_id",27, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // robust_id ::= RIGHT 
            {
              Symbol RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("robust_id",27, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // robust_id ::= LEFT 
            {
              Symbol RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("robust_id",27, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // robust_id ::= PRECEDENCE 
            {
              Symbol RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("robust_id",27, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // robust_id ::= START 
            {
              Symbol RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("robust_id",27, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // robust_id ::= WITH 
            {
              Symbol RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("robust_id",27, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // robust_id ::= SCAN 
            {
              Symbol RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("robust_id",27, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // robust_id ::= INIT 
            {
              Symbol RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("robust_id",27, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // robust_id ::= NONTERMINAL 
            {
              Symbol RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("robust_id",27, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // robust_id ::= NON 
            {
              Symbol RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("robust_id",27, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // robust_id ::= TERMINAL 
            {
              Symbol RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("robust_id",27, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // robust_id ::= PARSER 
            {
              Symbol RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("robust_id",27, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // robust_id ::= ACTION 
            {
              Symbol RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("robust_id",27, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // robust_id ::= CODE 
            {
              Symbol RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("robust_id",27, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // robust_id ::= ID 
            {
              Symbol RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("robust_id",27, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // multipart_id ::= robust_id 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("multipart_id",6, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // multipart_id ::= multipart_id LT typearglist GT 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("multipart_id",6, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // multipart_id ::= multipart_id DOT robust_id 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("multipart_id",6, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type_id ::= type_id LBRACK RBRACK 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("type_id",8, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // type_id ::= multipart_id 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("type_id",8, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // symbol ::= non_terminal declares_non_term 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("symbol",7, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // symbol ::= non_terminal type_id declares_non_term 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("symbol",7, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // symbol ::= TERMINAL declares_term 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("symbol",7, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // symbol ::= TERMINAL type_id declares_term 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("symbol",7, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-2)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // symbol_list ::= symbol 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("symbol_list",3, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // symbol_list ::= symbol_list symbol 
            {
              Object RESULT =null;

              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("symbol_list",3, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // spec ::= symbol_list precedence_list start_spec production_list 
            {
              CUPAST RESULT =null;
		 RESULT = code.getAST(); 
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("spec",0, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-3)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          return CUP$CUPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= spec EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).right;
		CUPAST start_val = (CUPAST)((java_cup.runtime.Symbol) CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)).value;
		RESULT = start_val;
              CUP$CUPParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CUPParser$stack.elementAt(CUP$CUPParser$top-1)), ((java_cup.runtime.Symbol)CUP$CUPParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CUPParser$parser.done_parsing();
          return CUP$CUPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

