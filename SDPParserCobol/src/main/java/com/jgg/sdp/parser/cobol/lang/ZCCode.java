
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Apr 11 13:33:09 CEST 2017
//----------------------------------------------------

package com.jgg.sdp.parser.cobol.lang;

import java.util.*;
import java_cup.runtime.*;
import com.jgg.sdp.module.base.*;
import com.jgg.sdp.module.items.*;
import com.jgg.sdp.module.factorias.*;
import com.jgg.sdp.core.ctes.*;
import com.jgg.sdp.core.config.*;
import com.jgg.sdp.parser.base.*;
import com.jgg.sdp.parser.base.stmt.*;
import com.jgg.sdp.parser.base.symbol.*;
import com.jgg.sdp.parser.cobol.base.*;
import com.jgg.sdp.parser.cobol.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Apr 11 13:33:09 CEST 2017
  */
public class ZCCode extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ZCCode() {super();}

  /** Constructor which sets the default scanner. */
  public ZCCode(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ZCCode(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0220\000\002\144\003\000\002\002\004\000\002\145" +
    "\004\000\002\003\005\000\002\003\002\000\002\002\004" +
    "\000\002\004\004\000\002\u0122\002\000\002\162\005\000" +
    "\002\165\003\000\002\165\002\000\002\166\003\000\002" +
    "\166\004\000\002\167\004\000\002\167\004\000\002\163" +
    "\003\000\002\163\002\000\002\164\003\000\002\164\004" +
    "\000\002\005\004\000\002\151\003\000\002\146\003\000" +
    "\002\146\002\000\002\147\003\000\002\147\004\000\002" +
    "\150\004\000\002\152\003\000\002\152\002\000\002\153" +
    "\005\000\002\154\003\000\002\154\002\000\002\156\003" +
    "\000\002\156\004\000\002\157\003\000\002\157\003\000" +
    "\002\160\003\000\002\160\003\000\002\160\003\000\002" +
    "\160\003\000\002\160\003\000\002\160\003\000\002\160" +
    "\003\000\002\161\003\000\002\161\003\000\002\161\003" +
    "\000\002\161\003\000\002\161\003\000\002\161\003\000" +
    "\002\161\003\000\002\161\003\000\002\161\003\000\002" +
    "\161\003\000\002\161\003\000\002\161\003\000\002\331" +
    "\004\000\002\331\003\000\002\331\003\000\002\332\003" +
    "\000\002\333\003\000\002\333\003\000\002\334\003\000" +
    "\002\334\003\000\002\334\003\000\002\334\003\000\002" +
    "\334\003\000\002\334\003\000\002\334\003\000\002\323" +
    "\004\000\002\323\003\000\002\324\003\000\002\325\003" +
    "\000\002\325\003\000\002\325\003\000\002\325\003\000" +
    "\002\325\003\000\002\325\003\000\002\326\004\000\002" +
    "\326\003\000\002\327\003\000\002\327\003\000\002\327" +
    "\003\000\002\327\003\000\002\327\003\000\002\330\003" +
    "\000\002\330\003\000\002\330\003\000\002\330\003\000" +
    "\002\330\003\000\002\330\003\000\002\330\003\000\002" +
    "\330\003\000\002\330\003\000\002\330\003\000\002\330" +
    "\003\000\002\335\003\000\002\335\003\000\002\335\003" +
    "\000\002\335\003\000\002\335\003\000\002\336\003\000" +
    "\002\336\003\000\002\336\003\000\002\175\003\000\002" +
    "\200\003\000\002\202\003\000\002\245\004\000\002\171" +
    "\003\000\002\203\003\000\002\251\003\000\002\172\003" +
    "\000\002\250\005\000\002\256\003\000\002\256\002\000" +
    "\002\272\003\000\002\272\003\000\002\204\003\000\002" +
    "\210\003\000\002\210\003\000\002\210\003\000\002\206" +
    "\004\000\002\205\003\000\002\207\003\000\002\155\003" +
    "\000\002\155\003\000\002\155\003\000\002\155\002\000" +
    "\002\236\003\000\002\302\003\000\002\252\003\000\002" +
    "\303\005\000\002\301\003\000\002\301\003\000\002\274" +
    "\003\000\002\006\005\000\002\006\002\000\002\305\010" +
    "\000\002\007\003\000\002\010\003\000\002\010\002\000" +
    "\002\011\003\000\002\011\004\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\262\006\000\002\263" +
    "\003\000\002\263\002\000\002\264\004\000\002\267\003" +
    "\000\002\267\004\000\002\270\003\000\002\270\004\000" +
    "\002\271\003\000\002\271\003\000\002\265\003\000\002" +
    "\265\002\000\002\266\004\000\002\253\004\000\002\176" +
    "\007\000\002\013\004\000\002\014\003\000\002\014\004" +
    "\000\002\015\003\000\002\016\003\000\002\016\002\000" +
    "\002\017\003\000\002\017\004\000\002\020\003\000\002" +
    "\201\004\000\002\021\006\000\002\022\003\000\002\023" +
    "\004\000\002\023\004\000\002\024\003\000\002\024\002" +
    "\000\002\025\003\000\002\025\004\000\002\026\003\000" +
    "\002\026\003\000\002\211\004\000\002\212\003\000\002" +
    "\213\003\000\002\317\004\000\002\320\003\000\002\214" +
    "\003\000\002\214\003\000\002\215\004\000\002\216\003" +
    "\000\002\321\004\000\002\321\002\000\002\240\006\000" +
    "\002\241\003\000\002\241\004\000\002\242\003\000\002" +
    "\242\002\000\002\243\004\000\002\314\004\000\002\315" +
    "\003\000\002\170\004\000\002\027\004\000\002\030\004" +
    "\000\002\030\002\000\002\031\003\000\002\031\004\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\257\005\000\002\260\003\000\002\260" +
    "\004\000\002\261\003\000\002\261\003\000\002\261\003" +
    "\000\002\261\003\000\002\261\003\000\002\261\003\000" +
    "\002\261\003\000\002\261\003\000\002\261\003\000\002" +
    "\261\003\000\002\261\003\000\002\261\003\000\002\246" +
    "\007\000\002\247\004\000\002\033\004\000\002\034\005" +
    "\000\002\035\003\000\002\035\002\000\002\036\003\000" +
    "\002\036\004\000\002\037\003\000\002\037\003\000\002" +
    "\255\004\000\002\340\003\000\002\340\004\000\002\341" +
    "\004\000\002\342\003\000\002\342\003\000\002\342\003" +
    "\000\002\342\003\000\002\337\003\000\002\337\004\000" +
    "\002\217\004\000\002\220\003\000\002\221\004\000\002" +
    "\221\003\000\002\230\003\000\002\222\003\000\002\222" +
    "\002\000\002\224\003\000\002\224\002\000\002\225\003" +
    "\000\002\225\003\000\002\225\004\000\002\223\003\000" +
    "\002\223\004\000\002\226\003\000\002\226\003\000\002" +
    "\226\003\000\002\226\003\000\002\226\003\000\002\226" +
    "\003\000\002\226\003\000\002\227\003\000\002\227\003" +
    "\000\002\233\004\000\002\232\004\000\002\234\010\000" +
    "\002\235\010\000\002\231\004\000\002\231\004\000\002" +
    "\040\005\000\002\041\003\000\002\041\002\000\002\042" +
    "\003\000\002\042\004\000\002\043\003\000\002\043\003" +
    "\000\002\044\004\000\002\045\004\000\002\046\005\000" +
    "\002\047\003\000\002\050\004\000\002\051\003\000\002" +
    "\051\002\000\002\052\003\000\002\052\004\000\002\053" +
    "\003\000\002\054\004\000\002\055\004\000\002\056\004" +
    "\000\002\056\004\000\002\u0123\002\000\002\057\006\000" +
    "\002\060\003\000\002\060\004\000\002\061\003\000\002" +
    "\061\003\000\002\061\003\000\002\061\003\000\002\061" +
    "\003\000\002\062\005\000\002\063\003\000\002\064\004" +
    "\000\002\065\004\000\002\066\004\000\002\066\004\000" +
    "\002\067\005\000\002\070\005\000\002\070\002\000\002" +
    "\071\005\000\002\072\003\000\002\072\004\000\002\074" +
    "\004\000\002\075\003\000\002\075\004\000\002\076\005" +
    "\000\002\077\003\000\002\077\003\000\002\073\005\000" +
    "\002\100\003\000\002\100\002\000\002\101\004\000\002" +
    "\102\004\000\002\103\004\000\002\104\003\000\002\104" +
    "\004\000\002\105\004\000\002\105\003\000\002\105\003" +
    "\000\002\173\004\000\002\106\006\000\002\107\003\000" +
    "\002\107\002\000\002\113\006\000\002\114\003\000\002" +
    "\114\004\000\002\115\003\000\002\115\003\000\002\110" +
    "\004\000\002\111\003\000\002\111\004\000\002\112\004" +
    "\000\002\116\003\000\002\116\002\000\002\117\003\000" +
    "\002\117\004\000\002\120\005\000\002\120\005\000\002" +
    "\121\003\000\002\121\002\000\002\122\003\000\002\122" +
    "\004\000\002\123\004\000\002\123\005\000\002\123\003" +
    "\000\002\254\005\000\002\244\005\000\002\124\003\000" +
    "\002\124\002\000\002\125\003\000\002\125\004\000\002" +
    "\126\003\000\002\126\003\000\002\126\003\000\002\126" +
    "\003\000\002\127\004\000\002\130\004\000\002\131\003" +
    "\000\002\132\003\000\002\237\005\000\002\177\004\000" +
    "\002\304\004\000\002\306\004\000\002\174\004\000\002" +
    "\344\003\000\002\344\004\000\002\343\004\000\002\311" +
    "\003\000\002\312\004\000\002\313\003\000\002\u0112\003" +
    "\000\002\u0112\002\000\002\u0113\003\000\002\u0113\004\000" +
    "\002\u0113\003\000\002\u0113\003\000\002\u0113\003\000\002" +
    "\u0115\003\000\002\u0116\003\000\002\u0117\004\000\002\u0118" +
    "\003\000\002\307\003\000\002\307\002\000\002\310\003" +
    "\000\002\u0119\003\000\002\134\003\000\002\134\003\000" +
    "\002\133\003\000\002\133\003\000\002\133\003\000\002" +
    "\135\003\000\002\135\003\000\002\277\003\000\002\316" +
    "\003\000\002\275\003\000\002\276\003\000\002\273\003" +
    "\000\002\322\003\000\002\300\003\000\002\136\003\000" +
    "\002\136\002\000\002\137\003\000\002\137\004\000\002" +
    "\140\003\000\002\140\003\000\002\140\003\000\002\141" +
    "\003\000\002\141\002\000\002\142\003\000\002\142\004" +
    "\000\002\143\003\000\002\143\003\000\002\143\003\000" +
    "\002\143\003\000\002\143\003\000\002\143\003\000\002" +
    "\143\003\000\002\345\003\000\002\346\003\000\002\346" +
    "\005\000\002\347\004\000\002\350\004\000\002\350\002" +
    "\000\002\351\003\000\002\351\002\000\002\352\003\000" +
    "\002\352\005\000\002\353\003\000\002\357\003\000\002" +
    "\357\005\000\002\360\003\000\002\360\005\000\002\360" +
    "\004\000\002\361\004\000\002\362\003\000\002\362\002" +
    "\000\002\363\003\000\002\363\003\000\002\363\005\000" +
    "\002\366\003\000\002\366\005\000\002\367\003\000\002" +
    "\355\003\000\002\356\004\000\002\356\003\000\002\354" +
    "\003\000\002\354\003\000\002\354\003\000\002\354\003" +
    "\000\002\354\003\000\002\354\003\000\002\365\003\000" +
    "\002\365\005\000\002\364\004\000\002\364\003\000\002" +
    "\364\003\000\002\u011c\003\000\002\u011c\002\000\002\u011b" +
    "\003\000\002\u011b\004\000\002\u011a\003\000\002\u011a\003" +
    "\000\002\u011a\003\000\002\u011a\005\000\002\u011a\003\000" +
    "\002\377\003\000\002\377\003\000\002\377\003\000\002" +
    "\377\003\000\002\377\003\000\002\377\003\000\002\377" +
    "\003\000\002\377\003\000\002\377\003\000\002\371\005" +
    "\000\002\371\005\000\002\372\005\000\002\373\003\000" +
    "\002\373\002\000\002\374\003\000\002\374\005\000\002" +
    "\375\003\000\002\375\003\000\002\370\003\000\002\370" +
    "\003\000\002\370\003\000\002\370\003\000\002\370\003" +
    "\000\002\u0102\003\000\002\u0103\003\000\002\u0103\004\000" +
    "\002\u0104\003\000\002\u0104\004\000\002\376\003\000\002" +
    "\376\003\000\002\376\003\000\002\u0105\004\000\002\u0106" +
    "\004\000\002\u0107\003\000\002\u0108\003\000\002\u010a\003" +
    "\000\002\u010a\002\000\002\u010b\003\000\002\u010b\004\000" +
    "\002\u010c\005\000\002\u010d\003\000\002\u010d\005\000\002" +
    "\u010e\003\000\002\u010f\003\000\002\u010f\002\000\002\u0110" +
    "\003\000\002\u0110\004\000\002\u0111\004\000\002\u0111\004" +
    "\000\002\u0100\003\000\002\u0101\003\000\002\u0101\003\000" +
    "\002\u0101\003\000\002\u0101\003\000\002\u0101\003\000\002" +
    "\u0101\003\000\002\u0101\003\000\002\u011d\003\000\002\u011d" +
    "\002\000\002\u011e\003\000\002\u011e\002\000\002\u011f\003" +
    "\000\002\u011f\002\000\002\u0121\003\000\002\u0121\002\000" +
    "\002\u0120\003\000\002\u0120\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02aa\000\004\004\004\001\002\000\006\210\u029f\221" +
    "\u02a2\001\ufff7\000\004\011\u029c\001\ufffd\000\002\001\001" +
    "\000\004\002\u029a\001\002\000\166\044\163\045\123\046" +
    "\104\047\226\050\133\051\017\052\220\053\067\054\173" +
    "\055\117\056\056\057\114\060\206\061\107\062\223\063" +
    "\167\064\153\065\146\066\066\067\174\070\033\071\026" +
    "\072\200\073\045\074\100\075\034\076\222\077\135\100" +
    "\024\101\177\102\124\103\141\104\027\105\176\106\165" +
    "\107\221\110\171\111\157\112\213\113\201\114\053\115" +
    "\172\116\147\117\112\125\170\140\126\141\046\142\150" +
    "\143\106\144\211\145\102\146\116\151\210\163\013\224" +
    "\076\235\217\236\072\237\111\001\uffe6\000\010\121\u0210" +
    "\132\u0213\211\u0214\001\ufe82\000\002\001\uffc5\000\004\166" +
    "\u0111\001\ufde2\000\002\001\uffda\000\002\001\uffb1\000\002" +
    "\001\uffa5\000\004\005\u0283\001\002\000\002\001\uffd4\000" +
    "\002\001\uffe2\000\004\121\u01a4\001\ufdea\000\002\001\uffc7" +
    "\000\004\005\u0277\001\002\000\002\001\uffd6\000\026\005" +
    "\231\006\254\010\246\026\260\027\256\030\243\031\261" +
    "\170\252\233\245\240\257\001\002\000\002\001\uff82\000" +
    "\002\001\uffce\000\002\001\uffcf\000\002\001\uffaf\000\004" +
    "\005\231\001\002\000\002\001\uff81\000\002\001\uffd3\000" +
    "\002\001\uffa9\000\002\001\uffa0\000\002\001\uffdc\000\074" +
    "\005\231\006\254\010\246\021\u015d\022\u0161\023\u0163\024" +
    "\u0168\025\u0160\026\260\027\256\030\243\031\261\032\u0147" +
    "\033\u013c\034\u0146\035\u014e\036\u014c\037\u013d\040\u0142\041" +
    "\u0150\042\u0151\150\u015f\160\u015e\170\252\173\u0165\225\u01d0" +
    "\231\u0164\233\245\240\257\001\002\000\002\001\uffa6\000" +
    "\026\005\231\006\254\010\246\026\260\027\256\030\243" +
    "\031\261\170\252\233\245\240\257\001\002\000\002\001" +
    "\uffdf\000\010\121\u0210\132\u0213\211\u0214\001\ufe82\000\002" +
    "\001\ufe69\000\002\001\uffa1\000\002\001\uffed\000\002\001" +
    "\ufffc\000\022\005\231\120\u022f\154\u022c\215\u0226\216\u0229" +
    "\217\u0222\220\u0230\223\u0233\001\uff08\000\002\001\uff9b\000" +
    "\002\001\uffab\000\002\001\uffd8\000\026\005\231\006\254" +
    "\010\246\026\260\027\256\030\243\031\261\170\252\233" +
    "\245\240\257\001\002\000\002\001\uffd5\000\002\001\uffbd" +
    "\000\034\005\u0145\006\u014a\010\u0143\032\u0147\033\u013c\034" +
    "\u0146\035\u014e\036\u014c\037\u013d\040\u0142\041\u0150\042\u0151" +
    "\225\u0152\001\ufe2c\000\002\001\uffb7\000\002\001\uffc1\000" +
    "\002\001\uff9d\000\002\001\uff8c\000\004\227\u016a\001\ufde4" +
    "\000\004\005\231\001\002\000\002\001\uffd2\000\002\001" +
    "\uff8d\000\002\001\uff7e\000\002\001\uffc6\000\002\001\uffa8" +
    "\000\002\001\uffb6\000\002\001\uff4a\000\002\001\uffd0\000" +
    "\026\005\231\006\254\010\246\026\260\027\256\030\243" +
    "\031\261\170\252\233\245\240\257\001\002\000\002\001" +
    "\uffa3\000\002\001\ufe67\000\076\005\231\006\254\010\246" +
    "\021\u015d\022\u0161\023\u0163\024\u0168\025\u0160\026\260\027" +
    "\256\030\243\031\261\032\u0147\033\u013c\034\u0146\035\u014e" +
    "\036\u014c\037\u013d\040\u0142\041\u0150\042\u0151\150\u015f\160" +
    "\u015e\170\252\173\u0165\177\u01f0\225\u01d0\231\u0164\233\245" +
    "\240\257\001\002\000\002\001\uff9a\000\002\001\uff9e\000" +
    "\002\001\ufe6a\000\002\001\uff88\000\002\001\uffae\000\002" +
    "\001\uff7d\000\004\005\u01ed\001\002\000\002\001\uff9c\000" +
    "\002\001\uff57\000\002\001\uffb9\000\002\001\ufe68\000\004" +
    "\005\u01ec\001\002\000\002\001\uff8e\000\002\001\uffde\000" +
    "\002\001\uffca\000\002\001\uff79\000\004\005\u01e1\001\002" +
    "\000\166\044\163\045\123\046\104\047\226\050\133\051" +
    "\017\052\220\053\067\054\173\055\117\056\056\057\114" +
    "\060\206\061\107\062\223\063\167\064\153\065\146\066" +
    "\066\067\174\070\033\071\026\072\200\073\045\074\100" +
    "\075\034\076\222\077\135\100\024\101\177\102\124\103" +
    "\141\104\027\105\176\106\165\107\221\110\171\111\157" +
    "\112\213\113\201\114\053\115\172\116\147\117\112\125" +
    "\170\140\126\141\046\142\150\143\106\144\211\145\102" +
    "\146\116\151\210\163\013\224\076\235\217\236\072\237" +
    "\111\001\uffe7\000\002\001\ufe6c\000\002\001\uffbc\000\002" +
    "\001\uffb2\000\074\005\231\006\254\010\246\021\u015d\022" +
    "\u0161\023\u0163\024\u0168\025\u0160\026\260\027\256\030\243" +
    "\031\261\032\u0147\033\u013c\034\u0146\035\u014e\036\u014c\037" +
    "\u013d\040\u0142\041\u0150\042\u0151\150\u015f\160\u015e\170\252" +
    "\173\u0165\225\u01d0\231\u0164\233\245\240\257\001\002\000" +
    "\002\001\uffbf\000\026\005\231\006\254\010\246\026\260" +
    "\027\256\030\243\031\261\170\252\233\245\240\257\001" +
    "\002\000\002\001\uffdb\000\002\001\uff0d\000\002\001\uffb4" +
    "\000\034\005\u0145\006\u014a\010\u0143\032\u0147\033\u013c\034" +
    "\u0146\035\u014e\036\u014c\037\u013d\040\u0142\041\u0150\042\u0151" +
    "\225\u0152\001\ufe2c\000\002\001\uffb3\000\004\005\u01b5\001" +
    "\002\000\004\007\u01af\001\uffeb\000\002\001\uffad\000\002" +
    "\001\uffa7\000\002\001\uffe0\000\002\001\uff96\000\026\005" +
    "\231\006\254\010\246\026\260\027\256\030\243\031\261" +
    "\170\252\233\245\240\257\001\002\000\002\001\ufe6b\000" +
    "\002\001\uffb8\000\002\001\uffd9\000\002\001\uff83\000\002" +
    "\001\uffa4\000\002\001\uffc9\000\002\001\uffa2\000\034\005" +
    "\u0145\006\u014a\010\u0143\032\u0147\033\u013c\034\u0146\035\u014e" +
    "\036\u014c\037\u013d\040\u0142\041\u0150\042\u0151\225\u0152\001" +
    "\ufe2c\000\034\005\u0145\006\u014a\010\u0143\032\u0147\033\u013c" +
    "\034\u0146\035\u014e\036\u014c\037\u013d\040\u0142\041\u0150\042" +
    "\u0151\225\u0152\001\ufe2c\000\002\001\uffac\000\002\001\uffba" +
    "\000\004\005\231\001\002\000\002\001\uffcc\000\004\005" +
    "\231\001\002\000\002\001\uffc4\000\010\203\u0171\205\u0172" +
    "\212\u016f\001\uff84\000\002\001\ufe86\000\004\005\u0158\001" +
    "\002\000\002\001\uff95\000\002\001\uff99\000\002\001\uff3c" +
    "\000\002\001\uffc0\000\002\001\ufee7\000\004\005\u013a\001" +
    "\002\000\002\001\uff94\000\026\005\231\006\254\010\246" +
    "\026\260\027\256\030\243\031\261\170\252\233\245\240" +
    "\257\001\002\000\002\001\uff9f\000\002\001\uffd7\000\002" +
    "\001\uff8b\000\002\001\uffaa\000\002\001\uff4d\000\002\001" +
    "\uffc2\000\002\001\ufe84\000\002\001\ufe6d\000\002\001\uffdd" +
    "\000\026\005\231\006\254\010\246\026\260\027\256\030" +
    "\243\031\261\170\252\233\245\240\257\001\002\000\002" +
    "\001\uffc3\000\002\001\uffcd\000\002\001\uffc8\000\002\001" +
    "\uff7f\000\002\001\uff97\000\002\001\ufedc\000\012\152\363" +
    "\161\360\165\356\200\357\001\002\000\002\001\uff89\000" +
    "\002\001\uffb0\000\002\001\uffd1\000\006\005\231\010\230" +
    "\001\002\000\002\001\uffbb\000\002\001\uff8f\000\002\001" +
    "\ufe02\000\006\164\347\175\352\001\ufdf8\000\002\001\uff90" +
    "\000\004\225\333\001\ufe00\000\004\221\240\001\uff6f\000" +
    "\002\001\uff70\000\004\210\326\001\uff66\000\030\005\231" +
    "\006\254\010\246\026\260\027\256\030\243\031\261\127" +
    "\251\170\252\233\245\240\257\001\002\000\002\001\uff6d" +
    "\000\002\001\ufe06\000\002\001\ufded\000\002\001\ufdf3\000" +
    "\004\234\270\001\002\000\002\001\ufdf2\000\030\005\231" +
    "\006\254\010\246\026\260\027\256\030\243\031\261\127" +
    "\251\170\252\233\245\240\257\001\uff6e\000\002\001\ufe07" +
    "\000\006\206\266\222\265\001\002\000\004\175\262\001" +
    "\002\000\002\001\uff6b\000\002\001\ufdf1\000\002\001\ufe08" +
    "\000\002\001\ufdee\000\002\001\ufdf0\000\002\001\ufdef\000" +
    "\002\001\ufdec\000\026\005\231\006\254\010\246\026\260" +
    "\027\256\030\243\031\261\170\252\233\245\240\257\001" +
    "\002\000\002\001\ufe1a\000\002\001\uff6a\000\002\001\uff69" +
    "\000\002\001\uff68\000\002\001\uff6c\000\004\225\271\001" +
    "\002\000\030\005\231\006\254\010\246\026\260\027\256" +
    "\030\243\031\261\170\252\225\304\233\245\240\257\001" +
    "\ufe17\000\002\001\ufe1b\000\002\001\ufe53\000\002\001\ufe16" +
    "\000\004\226\325\001\002\000\004\020\321\001\ufe4f\000" +
    "\014\013\312\014\314\015\315\016\317\017\313\001\ufe54" +
    "\000\002\001\ufe4c\000\002\001\ufe4a\000\002\001\ufe13\000" +
    "\004\012\310\001\ufe18\000\030\005\231\006\254\010\246" +
    "\026\260\027\256\030\243\031\261\170\252\225\304\233" +
    "\245\240\257\001\002\000\002\001\ufe14\000\004\226\307" +
    "\001\002\000\002\001\ufe4b\000\030\005\231\006\254\010" +
    "\246\026\260\027\256\030\243\031\261\170\252\225\304" +
    "\233\245\240\257\001\002\000\002\001\ufe15\000\002\001" +
    "\ufe0e\000\002\001\ufe12\000\002\001\ufe10\000\002\001\ufe0f" +
    "\000\030\005\231\006\254\010\246\026\260\027\256\030" +
    "\243\031\261\170\252\225\304\233\245\240\257\001\002" +
    "\000\002\001\ufe11\000\002\001\ufe52\000\026\005\231\006" +
    "\254\010\246\026\260\027\256\030\243\031\261\170\252" +
    "\233\245\240\257\001\ufe4d\000\002\001\ufe51\000\002\001" +
    "\ufe50\000\002\001\ufe4e\000\002\001\ufe19\000\004\005\231" +
    "\001\002\000\002\001\uff67\000\002\001\uff71\000\002\001" +
    "\uff65\000\002\001\ufe0d\000\030\005\231\006\254\010\246" +
    "\026\260\027\256\030\243\031\261\170\252\225\304\233" +
    "\245\240\257\001\002\000\002\001\ufe04\000\004\225\333" +
    "\001\ufe01\000\002\001\ufdff\000\002\001\ufdfe\000\006\012" +
    "\343\226\344\001\002\000\002\001\ufdfc\000\002\001\ufdfa" +
    "\000\030\005\231\006\254\010\246\026\260\027\256\030" +
    "\243\031\261\170\252\225\304\233\245\240\257\001\002" +
    "\000\002\001\ufdfd\000\002\001\ufdfb\000\006\164\347\175" +
    "\352\001\ufdf9\000\004\005\231\001\002\000\002\001\ufe05" +
    "\000\002\001\ufdf7\000\004\005\231\001\002\000\002\001" +
    "\ufdf4\000\002\001\ufdf5\000\002\001\ufdf6\000\002\001\uff12" +
    "\000\002\001\uff13\000\002\001\uff14\000\012\152\363\161" +
    "\360\165\356\200\357\001\uff18\000\004\005\365\001\002" +
    "\000\002\001\uff11\000\002\001\uff17\000\002\001\uff10\000" +
    "\004\005\367\001\uff15\000\002\001\uff0f\000\002\001\uff16" +
    "\000\004\005\372\001\002\000\020\043\u0106\124\u0107\137" +
    "\377\157\u0101\161\u0102\200\375\221\u0103\001\002\000\002" +
    "\001\ufed6\000\004\166\u0111\001\ufde2\000\004\005\u0110\001" +
    "\002\000\002\001\ufed5\000\002\001\ufe6e\000\002\001\ufed8" +
    "\000\026\005\231\006\254\010\246\026\260\027\256\030" +
    "\243\031\261\170\252\233\245\240\257\001\002\000\004" +
    "\005\u010e\001\002\000\026\005\231\006\254\010\246\026" +
    "\260\027\256\030\243\031\261\170\252\233\245\240\257" +
    "\001\002\000\002\001\ufed7\000\002\001\ufed4\000\002\001" +
    "\ufed2\000\002\001\ufe6f\000\002\001\ufeda\000\020\043\u0106" +
    "\124\u0107\137\377\157\u0101\161\u0102\200\375\221\u0103\001" +
    "\ufedb\000\002\001\ufed9\000\026\005\231\006\254\010\246" +
    "\026\260\027\256\030\243\031\261\170\252\233\245\240" +
    "\257\001\ufed1\000\002\001\ufe0a\000\002\001\ufe09\000\002" +
    "\001\ufecf\000\026\005\231\006\254\010\246\026\260\027" +
    "\256\030\243\031\261\170\252\233\245\240\257\001\ufed0" +
    "\000\002\001\ufece\000\002\001\ufde3\000\026\005\231\006" +
    "\254\010\246\026\260\027\256\030\243\031\261\170\252" +
    "\233\245\240\257\001\002\000\026\005\231\006\254\010" +
    "\246\026\260\027\256\030\243\031\261\170\252\233\245" +
    "\240\257\001\ufed3\000\002\001\uff98\000\030\005\231\006" +
    "\254\010\246\026\260\027\256\030\243\031\261\135\u0124" +
    "\170\252\233\245\240\257\001\002\000\002\001\ufec9\000" +
    "\002\001\ufec6\000\030\005\231\006\254\010\246\026\260" +
    "\027\256\030\243\031\261\162\u011b\170\252\233\245\240" +
    "\257\001\002\000\002\001\ufec8\000\004\201\u0123\001\ufe77" +
    "\000\004\005\231\001\002\000\004\204\u011f\001\ufebf\000" +
    "\002\001\ufec1\000\002\001\ufec0\000\004\005\231\001\002" +
    "\000\002\001\ufebe\000\002\001\ufeca\000\002\001\ufe78\000" +
    "\002\001\ufe76\000\004\127\u0128\001\ufde8\000\002\001\ufec5" +
    "\000\002\001\ufec7\000\030\005\231\006\254\010\246\026" +
    "\260\027\256\030\243\031\261\170\252\213\u012b\233\245" +
    "\240\257\001\002\000\002\001\ufde9\000\002\001\ufec4\000" +
    "\002\001\ufec3\000\002\001\ufec2\000\002\001\ufebd\000\034" +
    "\005\231\006\254\010\246\026\260\027\256\030\243\031" +
    "\261\156\u012e\157\u012f\170\252\232\u0134\233\245\240\257" +
    "\001\002\000\026\005\231\006\254\010\246\026\260\027" +
    "\256\030\243\031\261\170\252\233\245\240\257\001\002" +
    "\000\004\005\231\001\002\000\002\001\ufeb7\000\002\001" +
    "\ufeb8\000\002\001\ufebb\000\010\156\u012e\157\u012f\232\u0134" +
    "\001\ufebc\000\002\001\ufe75\000\002\001\ufeba\000\002\001" +
    "\ufe0c\000\004\005\231\001\ufe7a\000\002\001\ufe0b\000\026" +
    "\005\231\006\254\010\246\026\260\027\256\030\243\031" +
    "\261\170\252\233\245\240\257\001\ufeb9\000\050\005\u0145" +
    "\006\u014a\010\u0143\032\u0147\033\u013c\034\u0146\035\u014e\036" +
    "\u014c\037\u013d\040\u0142\041\u0150\042\u0151\120\u014b\171\u014d" +
    "\172\u013f\174\u014f\202\u0148\225\u0152\230\u0144\001\ufe5e\000" +
    "\002\001\ufe8e\000\002\001\ufe21\000\002\001\ufe23\000\002" +
    "\001\ufe5d\000\002\001\ufe59\000\002\001\ufe5b\000\002\001" +
    "\ufe25\000\002\001\ufe22\000\002\001\ufe28\000\002\001\ufe5a" +
    "\000\002\001\ufe29\000\002\001\ufe20\000\002\001\ufe24\000" +
    "\002\001\ufe56\000\050\005\u0145\006\u014a\010\u0143\032\u0147" +
    "\033\u013c\034\u0146\035\u014e\036\u014c\037\u013d\040\u0142\041" +
    "\u0150\042\u0151\120\u014b\171\u014d\172\u013f\174\u014f\202\u0148" +
    "\225\u0152\230\u0144\001\ufe5f\000\002\001\ufe27\000\002\001" +
    "\ufe55\000\002\001\ufe1e\000\002\001\ufe57\000\002\001\ufe1f" +
    "\000\002\001\ufe58\000\002\001\ufe1c\000\002\001\ufe1d\000" +
    "\034\005\u0145\006\u014a\010\u0143\032\u0147\033\u013c\034\u0146" +
    "\035\u014e\036\u014c\037\u013d\040\u0142\041\u0150\042\u0151\225" +
    "\u0152\001\002\000\002\001\ufe2b\000\036\005\u0145\006\u014a" +
    "\010\u0143\032\u0147\033\u013c\034\u0146\035\u014e\036\u014c\037" +
    "\u013d\040\u0142\041\u0150\042\u0151\225\u0152\226\u0156\001\002" +
    "\000\002\001\ufe2a\000\002\001\ufe26\000\002\001\ufe5c\000" +
    "\004\166\u0159\001\ufecb\000\024\021\u015d\022\u0161\023\u0163" +
    "\024\u0168\025\u0160\150\u015f\160\u015e\173\u0165\231\u0164\001" +
    "\002\000\002\001\ufecd\000\026\005\231\006\254\010\246" +
    "\026\260\027\256\030\243\031\261\170\252\233\245\240" +
    "\257\001\002\000\004\176\u016c\001\ufe33\000\002\001\ufe36" +
    "\000\002\001\ufe2f\000\004\227\u016a\001\ufde4\000\002\001" +
    "\ufe38\000\002\001\ufe34\000\002\001\ufe3b\000\002\001\ufe37" +
    "\000\002\001\ufe2e\000\022\021\u015d\022\u0161\023\u0163\024" +
    "\u0168\025\u0160\150\u015f\160\u015e\231\u0164\001\002\000\002" +
    "\001\ufe32\000\002\001\ufe39\000\002\001\ufe35\000\002\001" +
    "\ufe3a\000\002\001\ufde5\000\002\001\ufe30\000\010\150\u015f" +
    "\160\u015e\231\u0164\001\002\000\002\001\ufe31\000\002\001" +
    "\ufecc\000\002\001\uff85\000\002\001\uff8a\000\002\001\uff86" +
    "\000\002\001\uff87\000\010\005\231\127\u0177\227\u0175\001" +
    "\002\000\002\001\ufe8b\000\026\005\231\006\254\010\246" +
    "\026\260\027\256\030\243\031\261\170\252\233\245\240" +
    "\257\001\002\000\002\001\ufedf\000\026\005\231\006\254" +
    "\010\246\026\260\027\256\030\243\031\261\170\252\233" +
    "\245\240\257\001\002\000\002\001\ufedd\000\002\001\ufede" +
    "\000\004\156\u017b\001\uff7b\000\026\005\231\006\254\010" +
    "\246\026\260\027\256\030\243\031\261\170\252\233\245" +
    "\240\257\001\002\000\002\001\uff93\000\004\005\u017e\001" +
    "\uff91\000\002\001\uff92\000\002\001\uff7c\000\002\001\uffcb" +
    "\000\034\005\u0145\006\u014a\010\u0143\032\u0147\033\u013c\034" +
    "\u0146\035\u014e\036\u014c\037\u013d\040\u0142\041\u0150\042\u0151" +
    "\225\u0152\001\ufe2d\000\002\001\ufe8c\000\004\135\u0186\001" +
    "\ufeb3\000\002\001\ufeb6\000\002\001\ufeb4\000\004\127\u0128" +
    "\001\ufde8\000\004\162\u0189\001\002\000\010\201\u0123\204" +
    "\u019c\214\u0199\001\ufea2\000\004\005\231\001\002\000\002" +
    "\001\ufeac\000\006\133\u0191\136\u018e\001\ufea8\000\004\005" +
    "\231\001\ufead\000\002\001\ufeab\000\004\164\u0194\001\ufde6" +
    "\000\002\001\ufeaa\000\006\133\u0191\136\u018e\001\ufea9\000" +
    "\004\164\u0194\001\ufde6\000\002\001\ufea7\000\004\005\231" +
    "\001\002\000\002\001\ufde7\000\002\001\ufea4\000\002\001" +
    "\ufea6\000\004\005\231\001\002\000\002\001\ufea5\000\004" +
    "\164\u0194\001\ufde6\000\002\001\ufe9d\000\002\001\ufeb5\000" +
    "\004\005\231\001\002\000\010\201\u0123\204\u019c\214\u0199" +
    "\001\ufea3\000\002\001\ufea1\000\002\001\ufea0\000\002\001" +
    "\ufe9f\000\004\005\231\001\002\000\002\001\ufe9e\000\004" +
    "\121\u01a4\001\ufdea\000\002\001\ufdeb\000\030\005\231\006" +
    "\254\010\246\026\260\027\256\030\243\031\261\170\252" +
    "\176\u01a6\233\245\240\257\001\002\000\002\001\ufeae\000" +
    "\002\001\ufeb1\000\030\005\231\006\254\010\246\026\260" +
    "\027\256\030\243\031\261\170\252\176\u01a6\233\245\240" +
    "\257\001\ufeb2\000\002\001\ufeaf\000\002\001\ufeb0\000\002" +
    "\001\uffea\000\002\001\uffee\000\166\044\163\045\123\046" +
    "\104\047\226\050\133\051\017\052\220\053\067\054\173" +
    "\055\117\056\056\057\114\060\206\061\107\062\223\063" +
    "\167\064\153\065\146\066\066\067\174\070\033\071\026" +
    "\072\200\073\045\074\100\075\034\076\222\077\135\100" +
    "\024\101\177\102\124\103\141\104\027\105\176\106\165" +
    "\107\221\110\171\111\157\112\213\113\201\114\053\115" +
    "\172\116\147\117\112\125\170\140\126\141\046\142\150" +
    "\143\106\144\211\145\102\146\116\151\210\163\013\224" +
    "\076\235\217\236\072\237\111\001\uffe6\000\004\007\u01af" +
    "\001\uffec\000\004\212\u01b1\001\uffe3\000\004\144\u01b2\001" +
    "\002\000\002\001\uffe4\000\002\001\uffe5\000\002\001\uffe9" +
    "\000\002\001\uffe8\000\012\120\u01c0\126\u01bb\147\u01b6\156" +
    "\u01bf\001\ufe99\000\002\001\ufe8f\000\002\001\ufe96\000\002" +
    "\001\ufe93\000\026\005\231\006\254\010\246\026\260\027" +
    "\256\030\243\031\261\170\252\233\245\240\257\001\002" +
    "\000\002\001\ufe94\000\002\001\ufe74\000\002\001\ufe98\000" +
    "\002\001\ufe9b\000\012\120\u01c0\126\u01bb\147\u01b6\156\u01bf" +
    "\001\ufe9a\000\026\005\231\006\254\010\246\026\260\027" +
    "\256\030\243\031\261\170\252\233\245\240\257\001\002" +
    "\000\026\005\ufe73\006\ufe73\010\ufe73\026\ufe73\027\ufe73\030" +
    "\ufe73\031\ufe73\170\ufe73\233\ufe73\240\ufe73\001\ufe90\000\002" +
    "\001\ufe95\000\002\001\ufe92\000\002\001\ufe97\000\002\001" +
    "\ufe91\000\002\001\uffb5\000\002\001\uff64\000\010\122\u01d5" +
    "\123\u01d4\176\u01d7\001\uff4c\000\014\013\312\014\314\015" +
    "\315\016\317\017\313\001\ufe41\000\024\021\u015d\022\u0161" +
    "\023\u0163\024\u0168\025\u0160\150\u015f\160\u015e\173\u0165\231" +
    "\u0164\001\ufe49\000\002\001\ufe40\000\002\001\ufe3c\000\002" +
    "\001\uff4e\000\002\001\ufe47\000\002\001\ufe3e\000\024\032" +
    "\u0147\033\u013c\034\u0146\035\u014e\036\u014c\037\u013d\040\u0142" +
    "\041\u0150\042\u0151\001\ufe42\000\074\005\231\006\254\010" +
    "\246\021\u015d\022\u0161\023\u0163\024\u0168\025\u0160\026\260" +
    "\027\256\030\243\031\261\032\u0147\033\u013c\034\u0146\035" +
    "\u014e\036\u014c\037\u013d\040\u0142\041\u0150\042\u0151\150\u015f" +
    "\160\u015e\170\252\173\u0165\225\u01d0\231\u0164\233\245\240" +
    "\257\001\002\000\052\005\231\006\254\010\246\026\260" +
    "\027\256\030\243\031\261\032\u0147\033\u013c\034\u0146\035" +
    "\u014e\036\u014c\037\u013d\040\u0142\041\u0150\042\u0151\170\252" +
    "\225\u01d0\233\245\240\257\001\002\000\002\001\ufe45\000" +
    "\012\122\u01d5\123\u01d4\176\u01d7\226\u01d8\001\002\000\002" +
    "\001\ufe72\000\002\001\ufe70\000\074\005\231\006\254\010" +
    "\246\021\u015d\022\u0161\023\u0163\024\u0168\025\u0160\026\260" +
    "\027\256\030\243\031\261\032\u0147\033\u013c\034\u0146\035" +
    "\u014e\036\u014c\037\u013d\040\u0142\041\u0150\042\u0151\150\u015f" +
    "\160\u015e\170\252\173\u0165\225\u01d0\231\u0164\233\245\240" +
    "\257\001\002\000\002\001\ufe71\000\002\001\ufe3f\000\024" +
    "\021\u015d\022\u0161\023\u0163\024\u0168\025\u0160\150\u015f\160" +
    "\u015e\173\u0165\231\u0164\001\ufe48\000\052\005\231\006\254" +
    "\010\246\026\260\027\256\030\243\031\261\032\u0147\033" +
    "\u013c\034\u0146\035\u014e\036\u014c\037\u013d\040\u0142\041\u0150" +
    "\042\u0151\170\252\225\u01d0\233\245\240\257\001\002\000" +
    "\002\001\ufe46\000\002\001\ufe44\000\002\001\ufe43\000\026" +
    "\005\231\006\254\010\246\026\260\027\256\030\243\031" +
    "\261\170\252\233\245\240\257\001\002\000\002\001\ufe3d" +
    "\000\002\001\uffe1\000\006\162\u01e7\166\u01e2\001\ufeef\000" +
    "\026\005\231\006\254\010\246\026\260\027\256\030\243" +
    "\031\261\170\252\233\245\240\257\001\002\000\002\001" +
    "\ufeee\000\006\162\u01e7\166\u01e2\001\ufef0\000\002\001\uff80" +
    "\000\002\001\ufeeb\000\004\005\231\001\002\000\002\001" +
    "\ufeec\000\002\001\ufeea\000\002\001\ufeed\000\002\001\ufee9" +
    "\000\002\001\ufe8d\000\012\120\u01c0\126\u01bb\147\u01b6\156" +
    "\u01bf\001\ufe99\000\002\001\ufe9c\000\012\122\u01d5\123\u01d4" +
    "\176\u01d7\216\u01f4\001\uff44\000\002\001\uff46\000\002\001" +
    "\uff48\000\002\001\uff49\000\002\001\uff4b\000\074\005\231" +
    "\006\254\010\246\021\u015d\022\u0161\023\u0163\024\u0168\025" +
    "\u0160\026\260\027\256\030\243\031\261\032\u0147\033\u013c" +
    "\034\u0146\035\u014e\036\u014c\037\u013d\040\u0142\041\u0150\042" +
    "\u0151\150\u015f\160\u015e\170\252\173\u0165\225\u01d0\231\u0164" +
    "\233\245\240\257\001\002\000\002\001\uff47\000\010\122" +
    "\u01d5\123\u01d4\176\u01d7\001\uff45\000\004\127\u0200\001\002" +
    "\000\002\001\uff21\000\006\157\u012f\232\u0134\001\uff1d\000" +
    "\002\001\uff1c\000\006\157\u012f\232\u0134\001\uff1e\000\002" +
    "\001\uff20\000\002\001\uff19\000\002\001\uff1a\000\002\001" +
    "\uff1b\000\026\005\231\006\254\010\246\026\260\027\256" +
    "\030\243\031\261\170\252\233\245\240\257\001\002\000" +
    "\002\001\uff1f\000\010\121\u0210\132\u0213\211\u0214\001\ufe82" +
    "\000\004\025\u0204\001\002\000\030\005\231\006\254\010" +
    "\246\026\260\027\256\030\243\031\261\170\252\225\304" +
    "\233\245\240\257\001\002\000\032\005\231\006\254\010" +
    "\246\026\260\027\256\030\243\031\261\170\252\225\304" +
    "\232\u0134\233\245\240\257\001\uff5d\000\002\001\uff5f\000" +
    "\002\001\uff61\000\002\001\uff63\000\004\232\u0134\001\uff5e" +
    "\000\002\001\uff5a\000\002\001\uff5c\000\002\001\uff60\000" +
    "\002\001\uff5b\000\002\001\ufe7d\000\002\001\ufe81\000\002" +
    "\001\ufe7c\000\002\001\ufe7e\000\002\001\uff62\000\002\001" +
    "\ufe7b\000\002\001\ufe79\000\002\001\ufe7f\000\002\001\ufe83" +
    "\000\002\001\ufe80\000\004\005\u0219\001\002\000\002\001" +
    "\uff42\000\006\005\u021b\134\u021e\001\uff3f\000\002\001\uff41" +
    "\000\002\001\uff40\000\002\001\uff43\000\026\005\231\006" +
    "\254\010\246\026\260\027\256\030\243\031\261\170\252" +
    "\233\245\240\257\001\002\000\002\001\uff3e\000\002\001" +
    "\uffbe\000\026\005\231\006\254\010\246\026\260\027\256" +
    "\030\243\031\261\170\252\233\245\240\257\001\uff59\000" +
    "\002\001\ufeff\000\002\001\uff02\000\022\006\u0247\120\u022f" +
    "\154\u022c\215\u0226\216\u0229\217\u0222\220\u0230\223\u0233\001" +
    "\uff06\000\002\001\uff0e\000\006\120\u0245\126\u0244\001\002" +
    "\000\002\001\ufefa\000\002\001\uff0b\000\004\005\231\001" +
    "\002\000\044\005\231\006\254\010\246\026\260\027\256" +
    "\030\243\031\261\120\u022f\154\u022c\170\252\215\u0226\216" +
    "\u0229\217\u0222\220\u0230\223\u0233\233\245\240\257\001\uff09" +
    "\000\002\001\ufefd\000\002\001\uff00\000\002\001\uff0a\000" +
    "\002\001\ufefc\000\026\005\231\006\254\010\246\026\260" +
    "\027\256\030\243\031\261\170\252\233\245\240\257\001" +
    "\002\000\074\005\231\006\254\010\246\021\u015d\022\u0161" +
    "\023\u0163\024\u0168\025\u0160\026\260\027\256\030\243\031" +
    "\261\032\u0147\033\u013c\034\u0146\035\u014e\036\u014c\037\u013d" +
    "\040\u0142\041\u0150\042\u0151\150\u015f\160\u015e\170\252\173" +
    "\u0165\225\u01d0\231\u0164\233\245\240\257\001\002\000\002" +
    "\001\ufefb\000\002\001\ufefe\000\026\005\231\006\254\010" +
    "\246\026\260\027\256\030\243\031\261\170\252\233\245" +
    "\240\257\001\002\000\004\156\u0236\001\002\000\002\001" +
    "\ufe03\000\026\005\231\006\254\010\246\026\260\027\256" +
    "\030\243\031\261\170\252\233\245\240\257\001\002\000" +
    "\004\127\u0238\001\002\000\026\005\231\006\254\010\246" +
    "\026\260\027\256\030\243\031\261\170\252\233\245\240" +
    "\257\001\002\000\002\001\ufef5\000\010\122\u01d5\123\u01d4" +
    "\176\u01d7\001\ufef6\000\004\156\u023c\001\002\000\026\005" +
    "\231\006\254\010\246\026\260\027\256\030\243\031\261" +
    "\170\252\233\245\240\257\001\002\000\004\127\u023e\001" +
    "\002\000\026\005\231\006\254\010\246\026\260\027\256" +
    "\030\243\031\261\170\252\233\245\240\257\001\002\000" +
    "\002\001\ufef4\000\002\001\ufef9\000\002\001\ufef8\000\002" +
    "\001\uff01\000\002\001\ufef7\000\002\001\ufef3\000\002\001" +
    "\ufef2\000\002\001\uff0c\000\002\001\uff04\000\044\005\231" +
    "\006\254\010\246\026\260\027\256\030\243\031\261\120" +
    "\u022f\154\u022c\170\252\215\u0226\216\u0229\217\u0222\220\u0230" +
    "\223\u0233\233\245\240\257\001\uff07\000\002\001\uff05\000" +
    "\002\001\uff03\000\030\005\231\006\254\010\246\026\260" +
    "\027\256\030\243\031\261\170\252\225\304\233\245\240" +
    "\257\001\002\000\004\227\u024d\001\002\000\004\005\231" +
    "\001\002\000\004\005\231\001\uff22\000\006\127\u0252\162" +
    "\u0251\001\002\000\006\157\u012f\211\u0214\001\uff53\000\004" +
    "\005\231\001\002\000\026\005\231\006\254\010\246\026" +
    "\260\027\256\030\243\031\261\170\252\233\245\240\257" +
    "\001\002\000\026\005\231\006\254\010\246\026\260\027" +
    "\256\030\243\031\261\170\252\233\245\240\257\001\uff55" +
    "\000\004\005\231\001\uff56\000\006\157\u012f\211\u0214\001" +
    "\uff54\000\002\001\uff58\000\002\001\uff52\000\002\001\uff4f" +
    "\000\002\001\uff50\000\002\001\uff51\000\010\122\u01d5\123" +
    "\u01d4\176\u01d7\001\uff3d\000\006\005\231\207\u025f\001\uff38" +
    "\000\002\001\uff3b\000\002\001\uff3a\000\026\005\231\006" +
    "\254\010\246\026\260\027\256\030\243\031\261\121\u0262" +
    "\127\u0260\240\257\001\002\000\002\001\uff33\000\002\001" +
    "\uff35\000\002\001\uff32\000\026\005\231\006\254\010\246" +
    "\026\260\027\256\030\243\031\261\121\u0262\127\u0260\240" +
    "\257\001\uff39\000\002\001\uff34\000\002\001\uff37\000\002" +
    "\001\uff36\000\054\005\231\006\254\010\246\026\260\027" +
    "\256\030\243\031\261\120\u0270\121\u026a\126\u026d\127\u026c" +
    "\130\u0269\131\u0268\153\u0273\167\u026b\170\252\207\u0272\214" +
    "\u0275\227\u0274\233\245\240\257\001\002\000\002\001\uff24" +
    "\000\002\001\uff28\000\002\001\uff2e\000\002\001\uff2a\000" +
    "\002\001\uff2d\000\002\001\uff2c\000\054\005\231\006\254" +
    "\010\246\026\260\027\256\030\243\031\261\120\u0270\121" +
    "\u026a\126\u026d\127\u026c\130\u0269\131\u0268\153\u0273\167\u026b" +
    "\170\252\207\u0272\214\u0275\227\u0274\233\245\240\257\001" +
    "\uff31\000\002\001\uff23\000\002\001\uff2b\000\002\001\uff30" +
    "\000\002\001\uff25\000\002\001\uff29\000\002\001\uff27\000" +
    "\002\001\uff26\000\002\001\uff2f\000\006\162\u01e7\166\u01e2" +
    "\001\ufeef\000\002\001\ufef1\000\026\005\231\006\254\010" +
    "\246\026\260\027\256\030\243\031\261\170\252\233\245" +
    "\240\257\001\002\000\002\001\ufee8\000\004\223\u0280\001" +
    "\ufee4\000\004\223\u0280\001\ufee5\000\002\001\ufee6\000\002" +
    "\001\ufee3\000\002\001\ufee1\000\026\005\231\006\254\010" +
    "\246\026\260\027\256\030\243\031\261\170\252\233\245" +
    "\240\257\001\002\000\002\001\ufee0\000\002\001\ufee2\000" +
    "\010\155\u0287\174\u028b\230\u0288\001\ufe65\000\004\005\u0283" +
    "\001\ufe8a\000\002\001\ufe89\000\002\001\ufe88\000\002\001" +
    "\ufe60\000\002\001\ufe62\000\002\001\ufe64\000\002\001\ufe87" +
    "\000\002\001\ufe61\000\010\155\u0287\174\u028b\230\u0288\001" +
    "\ufe66\000\002\001\ufe63\000\002\001\ufe85\000\026\005\231" +
    "\006\254\010\246\026\260\027\256\030\243\031\261\170" +
    "\252\233\245\240\257\001\002\000\030\005\231\006\254" +
    "\010\246\026\260\027\256\030\243\031\261\170\252\227" +
    "\u0291\233\245\240\257\001\002\000\004\005\231\001\002" +
    "\000\012\005\231\132\u0213\157\u012f\211\u0214\001\uff77\000" +
    "\002\001\uff76\000\002\001\uff73\000\002\001\uff72\000\002" +
    "\001\uff74\000\002\001\uff7a\000\010\132\u0213\157\u012f\211" +
    "\u0214\001\uff78\000\002\001\uff75\000\002\001\000\000\002" +
    "\001\uffff\000\004\005\u029d\001\002\000\004\144\u029e\001" +
    "\002\000\002\001\ufffe\000\026\005\231\006\254\010\246" +
    "\026\260\027\256\030\243\031\261\170\252\233\245\240" +
    "\257\001\002\000\002\001\ufffb\000\002\001\ufff6\000\004" +
    "\005\u02a8\001\ufff1\000\002\001\ufffa\000\006\210\u029f\221" +
    "\u02a2\001\ufff8\000\002\001\ufff5\000\004\144\u02a7\001\002" +
    "\000\002\001\ufff9\000\002\001\ufff0\000\002\001\ufff4\000" +
    "\004\005\u02ab\001\ufff2\000\002\001\uffef\000\002\001\ufff3" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02aa\000\012\002\004\004\007\144\006\145\005\001" +
    "\001\000\012\162\u029f\165\u02a2\166\u02a3\167\u02a0\001\001" +
    "\000\004\003\u029a\001\001\000\002\001\001\000\002\001" +
    "\001\000\254\005\050\007\010\021\036\022\042\040\204" +
    "\046\131\047\021\057\153\067\223\102\201\151\141\152" +
    "\047\156\124\157\020\160\144\161\043\170\061\171\137" +
    "\172\014\173\150\174\053\175\126\176\155\177\041\200" +
    "\104\201\142\202\174\203\072\204\121\205\064\206\070" +
    "\207\203\210\117\211\206\212\130\217\011\220\051\236" +
    "\112\237\035\240\062\244\015\245\161\246\226\247\100" +
    "\250\107\251\127\252\215\253\063\254\143\255\160\257" +
    "\114\262\165\273\214\274\027\275\024\276\056\277\202" +
    "\300\163\301\054\302\031\303\073\304\022\305\046\306" +
    "\074\311\224\312\076\313\030\314\213\315\040\316\067" +
    "\317\034\320\102\322\017\323\037\324\060\325\057\326" +
    "\013\327\136\330\135\331\120\332\157\333\154\334\211" +
    "\335\133\336\151\001\001\000\016\u0112\u028e\u0113\u0215\u0114" +
    "\u020e\u0115\u0214\u0116\u0210\u0118\u020d\001\001\000\002\001\001" +
    "\000\004\u0120\u028d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\343\u0284\344\u0283\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\u011d\u0278\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\371\241\376\u0266\u0100\247\u0101\243\u0105\254\u0106" +
    "\231\u0108\233\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\027\u025c\u0102" +
    "\u0135\u0103\u025b\u0105\331\u0106\231\u0108\233\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\353\u01ca\354\u0166\355\u01d0" +
    "\356\u0161\357\u025a\360\u01c8\361\u01cc\363\u01ce\364\u0165\365" +
    "\u015b\366\u01c7\367\u01cd\371\241\376\300\377\u01c9\u0100\247" +
    "\u0101\243\u0105\254\u0106\231\u0108\233\001\001\000\002\001" +
    "\001\000\020\371\241\376\u024e\u0100\247\u0101\243\u0105\254" +
    "\u0106\231\u0108\233\001\001\000\002\001\001\000\016\u0112" +
    "\u024a\u0113\u0215\u0114\u020e\u0115\u0214\u0116\u0210\u0118\u020d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\221\u0224\222\u0227\223\u0229\226\u0222" +
    "\230\u0223\231\u0226\232\u0231\233\u022a\234\u022d\235\u0230\u0105" +
    "\u022c\u0106\231\u0108\233\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\371\241\376\u010b\u0100" +
    "\247\u0101\243\u0104\u0220\u0105\254\u0106\231\u0108\233\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\377\u0140\u011a" +
    "\u0152\u011b\u0180\u011c\u021f\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\u0121" +
    "\u0217\001\001\000\014\013\u0202\u0102\u0201\u0105\331\u0106\231" +
    "\u0108\233\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\033" +
    "\u01f7\034\u01f8\371\241\376\u01f6\u0100\247\u0101\243\u0105\254" +
    "\u0106\231\u0108\233\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\214\u01f2\215\u01f1\216\u01f0\353\u01ca\354\u0166" +
    "\355\u01d0\356\u0161\357\u01ee\360\u01c8\361\u01cc\363\u01ce\364" +
    "\u0165\365\u015b\366\u01c7\367\u01cd\371\241\376\300\377\u01c9" +
    "\u0100\247\u0101\243\u0105\254\u0106\231\u0108\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\244\007\010\021\036\022\042\040\204\046" +
    "\131\047\021\057\153\067\223\102\201\157\u01df\160\144" +
    "\161\043\170\061\171\137\172\014\173\150\174\053\175" +
    "\126\176\155\177\041\200\104\201\142\202\174\203\072" +
    "\204\121\205\064\206\070\207\203\210\117\211\206\212" +
    "\130\217\011\220\051\236\112\237\035\240\062\244\015" +
    "\245\161\246\226\247\100\250\107\251\127\252\215\253" +
    "\063\254\143\255\160\257\114\262\165\273\214\274\027" +
    "\275\024\276\056\277\202\300\163\301\054\302\031\303" +
    "\073\304\022\305\046\306\074\311\224\312\076\313\030" +
    "\314\213\315\040\316\067\317\034\320\102\322\017\323" +
    "\037\324\060\325\057\326\013\327\136\330\135\331\120" +
    "\332\157\333\154\334\211\335\133\336\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\213\u01cb\353\u01ca\354\u0166\355\u01d0\356\u0161\357\u01c6\360" +
    "\u01c8\361\u01cc\363\u01ce\364\u0165\365\u015b\366\u01c7\367\u01cd" +
    "\371\241\376\300\377\u01c9\u0100\247\u0101\243\u0105\254\u0106" +
    "\231\u0108\233\001\001\000\002\001\001\000\020\371\241" +
    "\376\u01c5\u0100\247\u0101\243\u0105\254\u0106\231\u0108\233\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\377\u0140\u011a\u0152\u011b\u0180\u011c\u01c4\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\146\u01ab\147\u01ad" +
    "\150\u01aa\153\u01ac\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\106\u0183" +
    "\371\241\376\u0182\u0100\247\u0101\243\u0105\254\u0106\231\u0108" +
    "\233\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\377\u0140\u011a\u0152\u011b\u0180" +
    "\u011c\u0181\001\001\000\012\377\u0140\u011a\u0152\u011b\u0180\u011c" +
    "\u017f\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\u0102\u0179\u0105\331\u0106\231\u0108\233\001\001\000\002\001" +
    "\001\000\016\055\u0173\u0102\u0135\u0103\u0172\u0105\331\u0106\231" +
    "\u0108\233\001\001\000\002\001\001\000\004\155\u016f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\103\u012b\371\241\376\u010b\u0100\247\u0101\243\u0104\u012c\u0105" +
    "\254\u0106\231\u0108\233\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\071\u0113\072\u0117\074\u0115\075" +
    "\u0114\371\241\376\u0116\u0100\247\u0101\243\u0105\254\u0106\231" +
    "\u0108\233\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\u0123\370\001\001\000\010\340\360\341\363\342\361\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\272\234\u0105\232\u0106\231\u0108\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\u010f\347\u0110\345\u0111\350\001\001\000\002\001\001\000" +
    "\010\u010a\333\u010b\334\u010c\335\001\001\000\006\263\236" +
    "\264\235\001\001\000\002\001\001\000\006\265\327\266" +
    "\326\001\001\000\024\267\246\270\240\371\241\376\252" +
    "\u0100\247\u0101\243\u0105\254\u0106\231\u0108\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\270" +
    "\266\371\241\376\252\u0100\247\u0101\243\u0105\254\u0106\231" +
    "\u0108\233\001\001\000\002\001\001\000\004\271\263\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\371\241\376\262" +
    "\u0100\247\u0101\243\u0105\254\u0106\231\u0108\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\372\271\001\001\000" +
    "\042\345\275\346\276\347\304\352\272\353\277\371\241" +
    "\373\274\374\302\375\273\376\300\u0100\247\u0101\243\u0105" +
    "\254\u0106\231\u0108\233\u0109\301\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\350\321\001\001\000\004\370\315\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\345\275\346\276\347\305\352\272\353\277" +
    "\371\241\376\300\u0100\247\u0101\243\u0105\254\u0106\231\u0108" +
    "\233\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\345\275\346\276\347\304\352\272\353" +
    "\277\371\241\375\310\376\300\u0100\247\u0101\243\u0105\254" +
    "\u0106\231\u0108\233\u0109\301\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\352\317\353\277\371\241\376\300\u0100" +
    "\247\u0101\243\u0105\254\u0106\231\u0108\233\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\351\322\353\323\371" +
    "\241\376\300\u0100\247\u0101\243\u0105\254\u0106\231\u0108\233" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\u0102\330\u0105\331\u0106\231" +
    "\u0108\233\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\345\275\346\276" +
    "\347\341\352\272\353\277\371\241\376\300\u0100\247\u0101" +
    "\243\u0105\254\u0106\231\u0108\233\u010d\337\u010e\340\001\001" +
    "\000\002\001\001\000\004\u010c\336\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\345\275\346\276\347\341\352" +
    "\272\353\277\371\241\376\300\u0100\247\u0101\243\u0105\254" +
    "\u0106\231\u0108\233\u010e\344\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\u0111\354\001\001\000\006\u0106\353" +
    "\u0108\233\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\u0106\352\u0108\233\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\341\367\342\361\001\001" +
    "\000\004\337\365\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\060\u0108\061" +
    "\u0107\062\377\063\u0103\064\372\065\375\066\u0104\135\373" +
    "\001\001\000\002\001\001\000\004\u0120\u0111\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\371\241\376\u010b\u0100\247\u0101\243\u0104" +
    "\u010e\u0105\254\u0106\231\u0108\233\001\001\000\002\001\001" +
    "\000\022\371\241\376\u010b\u0100\247\u0101\243\u0104\u010a\u0105" +
    "\254\u0106\231\u0108\233\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\061\u0109\062\377\063\u0103\064\372\065\375" +
    "\066\u0104\135\373\001\001\000\002\001\001\000\020\371" +
    "\241\376\u010c\u0100\247\u0101\243\u0105\254\u0106\231\u0108\233" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\371\241\376\u010c\u0100\247\u0101\243\u0105\254" +
    "\u0106\231\u0108\233\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\371\241\376\u010b\u0100\247\u0101\243\u0104\u0112" +
    "\u0105\254\u0106\231\u0108\233\001\001\000\020\371\241\376" +
    "\u010c\u0100\247\u0101\243\u0105\254\u0106\231\u0108\233\001\001" +
    "\000\002\001\001\000\022\076\u0125\371\241\376\u0124\u0100" +
    "\247\u0101\243\u0105\254\u0106\231\u0108\233\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\073\u0119\074\u0118\075" +
    "\u0114\371\241\376\u0116\u0100\247\u0101\243\u0105\254\u0106\231" +
    "\u0108\233\001\001\000\002\001\001\000\006\307\u0120\310" +
    "\u0121\001\001\000\012\u0102\u011b\u0105\331\u0106\231\u0108\233" +
    "\001\001\000\006\100\u011c\101\u011d\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\u0102\u011f\u0105\331\u0106\231" +
    "\u0108\233\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\u011e\u0126\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\077\u0128\371" +
    "\241\376\u0129\u0100\247\u0101\243\u0105\254\u0106\231\u0108\233" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\104\u0132" +
    "\105\u0131\371\241\376\u010c\u0100\247\u0101\243\u0105\254\u0106" +
    "\231\u0108\233\u0117\u0130\u0119\u012f\001\001\000\022\371\241" +
    "\376\u010b\u0100\247\u0101\243\u0104\u0138\u0105\254\u0106\231\u0108" +
    "\233\001\001\000\014\u0102\u0135\u0103\u0136\u0105\331\u0106\231" +
    "\u0108\233\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\105\u0134\u0117\u0130\u0119\u012f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\u0102\u0137\u0105\331\u0106\231\u0108\233\001\001\000\002" +
    "\001\001\000\020\371\241\376\u010c\u0100\247\u0101\243\u0105" +
    "\254\u0106\231\u0108\233\001\001\000\014\141\u013a\142\u0148" +
    "\143\u013d\377\u0140\u011a\u013f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\143\u0156\377\u0140\u011a\u013f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\377\u0140\u011a\u0152\u011b\u0153\001\001\000" +
    "\002\001\001\000\006\377\u0140\u011a\u0154\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\070" +
    "\u0159\001\001\000\014\354\u0166\355\u015a\356\u0161\364\u0165" +
    "\365\u015b\001\001\000\002\001\001\000\020\371\241\376" +
    "\u016d\u0100\247\u0101\243\u0105\254\u0106\231\u0108\233\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\u0121\u016a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\354\u0168\364\u0165\365\u015b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\364\u016c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\056\u0175\u0102\u0137\u0105\331\u0106\231\u0108\233\001\001\000" +
    "\002\001\001\000\020\371\241\376\u0178\u0100\247\u0101\243" +
    "\u0105\254\u0106\231\u0108\233\001\001\000\002\001\001\000" +
    "\020\371\241\376\u0177\u0100\247\u0101\243\u0105\254\u0106\231" +
    "\u0108\233\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\u017b\001\001\000\020\371\241\376\u017c\u0100\247" +
    "\u0101\243\u0105\254\u0106\231\u0108\233\001\001\000\002\001" +
    "\001\000\004\256\u017e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\377\u0140\u011a\u0154\001" +
    "\001\000\002\001\001\000\006\107\u0186\113\u0184\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\u011e\u01a2\001" +
    "\001\000\004\110\u0187\001\001\000\012\121\u019a\122\u019c" +
    "\123\u019d\310\u0199\001\001\000\016\111\u018b\112\u0189\u0102" +
    "\u018a\u0105\331\u0106\231\u0108\233\001\001\000\002\001\001" +
    "\000\010\116\u018e\117\u018f\120\u0191\001\001\000\014\112" +
    "\u018c\u0102\u018a\u0105\331\u0106\231\u0108\233\001\001\000\002" +
    "\001\001\000\004\u011f\u0196\001\001\000\002\001\001\000" +
    "\004\120\u0195\001\001\000\004\u011f\u0192\001\001\000\002" +
    "\001\001\000\012\u0102\u0194\u0105\331\u0106\231\u0108\233\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\u0102\u0197\u0105\331\u0106\231\u0108\233\001\001\000" +
    "\002\001\001\000\004\u011f\u01a0\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\u0102\u019f\u0105\331\u0106\231\u0108" +
    "\233\001\001\000\006\123\u019e\310\u0199\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\u0102" +
    "\u01a1\u0105\331\u0106\231\u0108\233\001\001\000\002\001\001" +
    "\000\004\u011d\u01a4\001\001\000\002\001\001\000\024\114" +
    "\u01a7\115\u01a6\371\241\376\u01a8\u0100\247\u0101\243\u0105\254" +
    "\u0106\231\u0108\233\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\115\u01a9\371\241\376\u01a8\u0100\247\u0101\243" +
    "\u0105\254\u0106\231\u0108\233\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\250" +
    "\007\010\021\036\022\042\040\204\046\131\047\021\057" +
    "\153\067\223\102\201\152\u01b3\156\124\157\020\160\144" +
    "\161\043\170\061\171\137\172\014\173\150\174\053\175" +
    "\126\176\155\177\041\200\104\201\142\202\174\203\072" +
    "\204\121\205\064\206\070\207\203\210\117\211\206\212" +
    "\130\217\011\220\051\236\112\237\035\240\062\244\015" +
    "\245\161\246\226\247\100\250\107\251\127\252\215\253" +
    "\063\254\143\255\160\257\114\262\165\273\214\274\027" +
    "\275\024\276\056\277\202\300\163\301\054\302\031\303" +
    "\073\304\022\305\046\306\074\311\224\312\076\313\030" +
    "\314\213\315\040\316\067\317\034\320\102\322\017\323" +
    "\037\324\060\325\057\326\013\327\136\330\135\331\120" +
    "\332\157\333\154\334\211\335\133\336\151\001\001\000" +
    "\006\150\u01b2\153\u01ac\001\001\000\004\154\u01af\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\124\u01bc\125\u01bd" +
    "\126\u01bb\127\u01b6\130\u01c0\131\u01b9\132\u01b7\134\u01b8\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\371\241\376\u01c3\u0100\247\u0101\243\u0105\254\u0106" +
    "\231\u0108\233\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\126\u01c2\127" +
    "\u01b6\130\u01c0\131\u01b9\132\u01b7\134\u01b8\001\001\000\020" +
    "\371\241\376\u01c1\u0100\247\u0101\243\u0105\254\u0106\231\u0108" +
    "\233\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\133\u01d5\001\001\000\004" +
    "\370\u01dd\001\001\000\014\354\u0166\355\u01d9\356\u0161\364" +
    "\u0165\365\u015b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\362\u01db\377\u01dc\001\001\000\052\353\u01ca\354\u0166" +
    "\355\u01d0\356\u0161\357\u01d2\360\u01c8\361\u01cc\363\u01ce\364" +
    "\u0165\365\u015b\366\u01c7\367\u01cd\371\241\376\300\377\u01c9" +
    "\u0100\247\u0101\243\u0105\254\u0106\231\u0108\233\001\001\000" +
    "\034\353\u01ca\361\u01d1\363\u01ce\366\u01c7\367\u01cd\371\241" +
    "\376\300\377\u01c9\u0100\247\u0101\243\u0105\254\u0106\231\u0108" +
    "\233\001\001\000\002\001\001\000\004\133\u01d5\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\353\u01ca\354" +
    "\u0166\355\u01d0\356\u0161\360\u01d8\361\u01cc\363\u01ce\364\u0165" +
    "\365\u015b\366\u01c7\367\u01cd\371\241\376\300\377\u01c9\u0100" +
    "\247\u0101\243\u0105\254\u0106\231\u0108\233\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\354\u0166\355\u01d9\356" +
    "\u0161\364\u0165\365\u015b\001\001\000\034\353\u01ca\361\u01da" +
    "\363\u01ce\366\u01c7\367\u01cd\371\241\376\300\377\u01c9\u0100" +
    "\247\u0101\243\u0105\254\u0106\231\u0108\233\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\353" +
    "\u01ca\367\u01de\371\241\376\300\u0100\247\u0101\243\u0105\254" +
    "\u0106\231\u0108\233\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\041\u01e4\042\u01e3\043\u01e2\044\u01e7\045\u01e5" +
    "\001\001\000\020\371\241\376\u01ea\u0100\247\u0101\243\u0105" +
    "\254\u0106\231\u0108\233\001\001\000\002\001\001\000\010" +
    "\043\u01e9\044\u01e7\045\u01e5\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\u0102\u01e8\u0105\331\u0106\231\u0108\233" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\124\u01ed" +
    "\125\u01bd\126\u01bb\127\u01b6\130\u01c0\131\u01b9\132\u01b7\134" +
    "\u01b8\001\001\000\002\001\001\000\006\133\u01d5\321\u01f4" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\353\u01ca\354\u0166\355\u01d0" +
    "\356\u0161\357\u01f5\360\u01c8\361\u01cc\363\u01ce\364\u0165\365" +
    "\u015b\366\u01c7\367\u01cd\371\241\376\300\377\u01c9\u0100\247" +
    "\u0101\243\u0105\254\u0106\231\u0108\233\001\001\000\002\001" +
    "\001\000\004\133\u01d5\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\035\u01fb\036\u01fa\037\u01f9\u0117\u01fd\u0119" +
    "\u01fc\001\001\000\002\001\001\000\010\037\u01fe\u0117\u01fd" +
    "\u0119\u01fc\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\371\241\376\u0200" +
    "\u0100\247\u0101\243\u0105\254\u0106\231\u0108\233\001\001\000" +
    "\002\001\001\000\016\u0112\u0211\u0113\u0215\u0114\u020e\u0115\u0214" +
    "\u0116\u0210\u0118\u020d\001\001\000\002\001\001\000\034\014" +
    "\u0204\015\u0206\345\u0205\346\276\352\272\353\277\371\241" +
    "\376\300\u0100\247\u0101\243\u0105\254\u0106\231\u0108\233\001" +
    "\001\000\042\015\u020b\016\u0207\017\u0208\020\u020a\345\u0205" +
    "\346\276\352\272\353\277\371\241\376\300\u0100\247\u0101" +
    "\243\u0105\254\u0106\231\u0108\233\u0119\u0209\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\u020c\u0119\u0209\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\u0114\u0216\001\001\000\002\001\001\000\004" +
    "\241\u0219\001\001\000\002\001\001\000\006\242\u021c\243" +
    "\u021b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\371\241\376\u021e\u0100\247\u0101\243\u0105" +
    "\254\u0106\231\u0108\233\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\371\241\376\u010c\u0100\247\u0101\243\u0105" +
    "\254\u0106\231\u0108\233\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\224\u0245\225\u0247\226\u0248\231\u0226\232" +
    "\u0231\233\u022a\234\u022d\235\u0230\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\u0108\u0242\001\001\000\040\226\u023f\227\u0241\231\u0226" +
    "\232\u0231\233\u022a\234\u022d\235\u0230\371\241\376\u0234\u0100" +
    "\247\u0101\243\u0105\254\u0106\231\u0107\u0240\u0108\233\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\371\241\376\u0234\u0100\247\u0101\243" +
    "\u0105\254\u0106\231\u0107\u023a\u0108\233\001\001\000\052\353" +
    "\u01ca\354\u0166\355\u01d0\356\u0161\357\u0239\360\u01c8\361\u01cc" +
    "\363\u01ce\364\u0165\365\u015b\366\u01c7\367\u01cd\371\241\376" +
    "\300\377\u01c9\u0100\247\u0101\243\u0105\254\u0106\231\u0108\233" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\371" +
    "\241\376\u0234\u0100\247\u0101\243\u0105\254\u0106\231\u0107\u0233" +
    "\u0108\233\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\371\241\376\u0234\u0100\247\u0101\243\u0105\254\u0106\231" +
    "\u0107\u0236\u0108\233\001\001\000\002\001\001\000\022\371" +
    "\241\376\u0234\u0100\247\u0101\243\u0105\254\u0106\231\u0107\u0238" +
    "\u0108\233\001\001\000\002\001\001\000\004\133\u01d5\001" +
    "\001\000\002\001\001\000\022\371\241\376\u0234\u0100\247" +
    "\u0101\243\u0105\254\u0106\231\u0107\u023c\u0108\233\001\001\000" +
    "\002\001\001\000\022\371\241\376\u0234\u0100\247\u0101\243" +
    "\u0105\254\u0106\231\u0107\u023e\u0108\233\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\226\u023f\227\u0249" +
    "\231\u0226\232\u0231\233\u022a\234\u022d\235\u0230\371\241\376" +
    "\u0234\u0100\247\u0101\243\u0105\254\u0106\231\u0107\u0240\u0108\233" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\345" +
    "\u024b\346\276\352\272\353\277\371\241\376\300\u0100\247" +
    "\u0101\243\u0105\254\u0106\231\u0108\233\001\001\000\002\001" +
    "\001\000\014\u0102\u0135\u0103\u024d\u0105\331\u0106\231\u0108\233" +
    "\001\001\000\012\u0102\u0137\u0105\331\u0106\231\u0108\233\001" +
    "\001\000\004\023\u024f\001\001\000\014\024\u0255\025\u0254" +
    "\026\u0256\u0117\u0258\u0118\u0257\001\001\000\014\u0102\u0135\u0103" +
    "\u0253\u0105\331\u0106\231\u0108\233\001\001\000\022\371\241" +
    "\376\u010b\u0100\247\u0101\243\u0104\u0252\u0105\254\u0106\231\u0108" +
    "\233\001\001\000\020\371\241\376\u010c\u0100\247\u0101\243" +
    "\u0105\254\u0106\231\u0108\233\001\001\000\012\u0102\u0137\u0105" +
    "\331\u0106\231\u0108\233\001\001\000\010\026\u0259\u0117\u0258" +
    "\u0118\u0257\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\133\u01d5\001\001\000\014\030\u025d\u0102\u0137\u0105\331\u0106" +
    "\231\u0108\233\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\031\u0262\032\u0264\u0100\u0263\u0101\243\u0105\u0260\u0106" +
    "\231\u0108\233\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\032\u0265\u0100\u0263\u0101\243\u0105" +
    "\u0260\u0106\231\u0108\233\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\260\u026d\261\u0270\371" +
    "\241\376\u026e\u0100\247\u0101\243\u0105\254\u0106\231\u0108\233" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\261\u0275\371\241\376\u026e\u0100\247\u0101\243\u0105" +
    "\254\u0106\231\u0108\233\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\041\u0277\042\u01e3\043\u01e2\044\u01e7\045\u01e5\001" +
    "\001\000\002\001\001\000\022\050\u0279\371\241\376\u027a" +
    "\u0100\247\u0101\243\u0105\254\u0106\231\u0108\233\001\001\000" +
    "\002\001\001\000\012\051\u027c\052\u027b\053\u027d\054\u027e" +
    "\001\001\000\006\053\u0281\054\u027e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\371\241" +
    "\376\u0280\u0100\247\u0101\243\u0105\254\u0106\231\u0108\233\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\136\u0289" +
    "\137\u028b\140\u0288\001\001\000\004\343\u0285\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\140\u028c\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\371\241\376\u010b\u0100\247\u0101\243\u0104" +
    "\u028f\u0105\254\u0106\231\u0108\233\001\001\000\020\371\241" +
    "\376\u010c\u0100\247\u0101\243\u0105\254\u0106\231\u0108\233\001" +
    "\001\000\014\u0102\u0135\u0103\u0291\u0105\331\u0106\231\u0108\233" +
    "\001\001\000\026\010\u0296\011\u0297\012\u0292\u0102\u0137\u0105" +
    "\331\u0106\231\u0108\233\u0116\u0294\u0117\u0295\u0118\u0293\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\u0298\u0116\u0294" +
    "\u0117\u0295\u0118\u0293\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\371\241\376\u02ab\u0100\247\u0101" +
    "\243\u0105\254\u0106\231\u0108\233\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\163\u02a8\164\u02a9\001\001\000" +
    "\004\u0122\u02a5\001\001\000\004\167\u02a4\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ZCCode$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ZCCode$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ZCCode$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

  action_obj.initActionClass();

    }


   Module        module   = ModulesFactory.getDefaultModule();
   Summary       summary  = module.getSummary();
   Configuration cfg      = Configuration.getInstance();
   ParserInfo    info     = ParserInfo.getInstance();
             
   public void syntax_error(Symbol token) throws ParseException {
          info.syntax_error(token);
   }

   public void unrecovered_syntax_error(Symbol token) throws ParseException {
      info.unrecovered_syntax_error(token);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ZCCode$actions {


   Module          module   = null;
   Summary         summary  = null;
   Persistence     fichero  = null;
   ZCCCode         code     = null;
   Sections        sections = null;
   ParserInfo      info     = ParserInfo.getInstance();
      
   Variable  currVar  = null;
   StmtCobol lastStmt = null;  // Ultima instruccion
   StmtCobol currStmt = null;  // Instruccion en proceso
   
   boolean   hasEndProgram = false; // Hay STOPRUN o GOBACK?
    
   boolean master     = false;  // El fichero es el maestro?   
   int     numFillers = 0;
   
   public void initActionClass() {
      module = ModulesFactory.getMainModule();
      summary = module.getSummary();
      sections = module.getSections();
      code = new ZCCCode(module);
   }

   public String getSymbolName(Symbol s)    { return (String) s.value; }
   public int    getSymbolLine(Symbol s)    { return (int)    s.left;  }
   
   public void debug(String txt) { 
      System.err.println(txt); 
   }
   public void print(String txt) { 
      System.out.println(txt); 
   }


  private final ZCCode parser;

  /** Constructor */
  CUP$ZCCode$actions(ZCCode parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ZCCode$do_action(
    int                        CUP$ZCCode$act_num,
    java_cup.runtime.lr_parser CUP$ZCCode$parser,
    java.util.Stack            CUP$ZCCode$stack,
    int                        CUP$ZCCode$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ZCCode$result;

      /* select the action based on the action number */
      switch (CUP$ZCCode$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 543: // opt_key ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("opt_key",286, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 542: // opt_key ::= KEY 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("opt_key",286, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 541: // opt_to ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("opt_to",287, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 540: // opt_to ::= TO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("opt_to",287, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 539: // opt_in ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("opt_in",285, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 538: // opt_in ::= IN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("opt_in",285, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 537: // opt_by ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("opt_by",284, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 536: // opt_by ::= BY 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("opt_by",284, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 535: // opt_all ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("opt_all",283, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 534: // opt_all ::= ALL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("opt_all",283, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 533: // constante ::= LOWVAL 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("constante",255, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 532: // constante ::= HIGHVAL 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("constante",255, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 531: // constante ::= ZERO 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("constante",255, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 530: // constante ::= SPACES 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("constante",255, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 529: // constante ::= DFHCICS 
            {
              SymbolExt RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(d); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("constante",255, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 528: // constante ::= NUMERO 
            {
              SymbolExt RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol n = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(n); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("constante",255, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 527: // constante ::= LITERAL 
            {
              SymbolExt RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol l = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(l); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("constante",255, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 526: // constantes ::= constante 
            {
              SymbolExt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt c = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("constantes",254, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 525: // padre ::= OF var_base 
            {
              SymbolExt RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("padre",271, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 524: // padre ::= IN var_base 
            {
              SymbolExt RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("padre",271, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 523: // padres ::= padres padre 
            {
              SymbolExt RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("padres",270, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 522: // padres ::= padre 
            {
              SymbolExt RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("padres",270, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 521: // padres_opt ::= 
            {
              SymbolExt RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("padres_opt",269, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 520: // padres_opt ::= padres 
            {
              SymbolExt RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("padres_opt",269, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 519: // indice_item ::= expr_colon 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("indice_item",268, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 518: // indice_lst ::= indice_lst COMMA indice_item 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("indice_lst",267, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 517: // indice_lst ::= indice_item 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("indice_lst",267, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 516: // indice ::= LPAR indice_lst RPAR 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("indice",266, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 515: // indices ::= indices indice 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("indices",265, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 514: // indices ::= indice 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("indices",265, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 513: // indices_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("indices_opt",264, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 512: // indices_opt ::= indices 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("indices_opt",264, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 511: // id ::= ID 
            {
              SymbolExt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("id",262, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 510: // var_int ::= rvalue 
            {
              SymbolExt RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("var_int",261, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 509: // var_base ::= id indices_opt 
            {
              SymbolExt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = i; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("var_base",260, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 508: // variable ::= var_base padres_opt 
            {
              SymbolExt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = i;    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("variable",259, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 507: // rvalue ::= function 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f);    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("rvalue",252, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 506: // rvalue ::= constantes 
            {
              SymbolExt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt c = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("rvalue",252, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 505: // rvalue ::= variable 
            {
              SymbolExt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = i;  code.setVarRead(i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("rvalue",252, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 504: // rvalue_list ::= rvalue_list rvalue 
            {
              SymbolExtList RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("rvalue_list",258, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 503: // rvalue_list ::= rvalue 
            {
              SymbolExtList RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("rvalue_list",258, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 502: // lvalue_list ::= lvalue_list lvalue 
            {
              SymbolExtList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		SymbolExtList l = (SymbolExtList)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l.add(i);       
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("lvalue_list",257, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 501: // lvalue_list ::= lvalue 
            {
              SymbolExtList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExtList(i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("lvalue_list",257, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 500: // lvalue ::= variable 
            {
              SymbolExt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = i; code.setVarWrite(i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("lvalue",256, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 499: // operator_arit ::= OP_POW 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("operator_arit",246, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 498: // operator_arit ::= OP_DIV 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("operator_arit",246, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 497: // operator_arit ::= OP_MUL 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("operator_arit",246, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 496: // operator_arit ::= OP_SUB 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("operator_arit",246, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 495: // operator_arit ::= OP_ADD 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("operator_arit",246, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 494: // function_parm ::= literal 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("function_parm",251, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 493: // function_parm ::= expr_colon 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("function_parm",251, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 492: // function_parms_lst ::= function_parms_lst COMMA function_parm 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("function_parms_lst",250, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 491: // function_parms_lst ::= function_parm 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("function_parms_lst",250, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 490: // function_parms_lst_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("function_parms_lst_opt",249, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // function_parms_lst_opt ::= function_parms_lst 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("function_parms_lst_opt",249, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // function_parms ::= LPAR function_parms_lst_opt RPAR 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("function_parms",248, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // function ::= LENGTH OF rvalue 
            {
              Symbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol l = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		 RESULT = l; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("function",247, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // function ::= FUNCTION INTRINSIC function_parms 
            {
              Symbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = f; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("function",247, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // figurative ::= NULL 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",253, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // figurative ::= DCBS 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",253, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // figurative ::= KANJI 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",253, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // figurative ::= NUMERIC 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",253, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // figurative ::= ALPHANUMERIC 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",253, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // figurative ::= ALPHABETIC 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",253, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // figurative ::= NEGATIVE 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",253, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // figurative ::= POSITIVE 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",253, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // figurative ::= QUOTE 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",253, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // token ::= figurative 
            {
              Tokens RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt f = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("token",280, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // token ::= LPAR tokens RPAR 
            {
              Tokens RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new Tokens(t); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("token",280, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // token ::= NUMERO 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("token",280, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // token ::= LITERAL 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("token",280, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // token ::= ID 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("token",280, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // tokens ::= tokens token 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l.add(t); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("tokens",281, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // tokens ::= token 
            {
              Tokens RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = t;        
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("tokens",281, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // optTokens ::= 
            {
              Tokens RESULT =null;
		 RESULT = new Tokens();    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("optTokens",282, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // optTokens ::= tokens 
            {
              Tokens RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = t;               
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("optTokens",282, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // logical_figurative ::= LESS 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_figurative",242, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // logical_figurative ::= GREATER 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_figurative",242, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // logical_figurative ::= EQUAL opt_to 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_figurative",242, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // logical_rel ::= logical_rel OR logical_figurative 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_rel",243, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // logical_rel ::= logical_figurative 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_rel",243, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // logical_op ::= logical_rel 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_op",234, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // logical_op ::= REL_LE 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_op",234, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // logical_op ::= REL_LT 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_op",234, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // logical_op ::= REL_GE 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_op",234, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // logical_op ::= REL_GT 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_op",234, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // logical_op ::= REL_EQ 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_op",234, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // logical_not ::= logical_op 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_not",236, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // logical_not ::= NOT logical_op 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_not",236, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // logical_oper ::= logical_not 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_oper",235, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // logical_operand ::= expr_primary 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_operand",245, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // logical_expr ::= logical_expr operator_arit logical_operand 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_expr",244, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // logical_expr ::= logical_operand 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_expr",244, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // logical_unary ::= LPAR logical_condition RPAR 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_unary",241, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // logical_unary ::= figurative 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_unary",241, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // logical_unary ::= logical_expr 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_unary",241, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // logical_class_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_class_opt",240, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // logical_class_opt ::= figurative 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_class_opt",240, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // logical_class ::= logical_unary logical_class_opt 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_class",239, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // logical_expression ::= logical_oper logical_class 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_expression",238, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // logical_expression ::= logical_expression logical_oper logical_class 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_expression",238, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // logical_expression ::= logical_class 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_expression",238, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // logical_condition ::= logical_condition option_and_or logical_expression 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_condition",237, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // logical_condition ::= logical_expression 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_condition",237, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // expr_primary ::= rvalue 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("expr_primary",233, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // expr_operand ::= LPAR expr_colon RPAR 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("expr_operand",232, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // expr_operand ::= expr_primary 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("expr_operand",232, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // expr_colon_value ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("expr_colon_value",231, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // expr_colon_value ::= expr_primary 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("expr_colon_value",231, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // expr_colon_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("expr_colon_opt",230, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // expr_colon_opt ::= OP_COL expr_colon_value 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("expr_colon_opt",230, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // expr_colon ::= expression expr_colon_opt 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("expr_colon",229, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // expression_arit ::= expression_arit operator_arit expr_operand 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("expression_arit",228, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // expression_arit ::= expr_operand 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("expression_arit",228, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // expression ::= expression_arit 
            {
              SymbolExt RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("expression",227, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // eatWriteItem ::= AFTER 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteItem",97, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // eatWriteItem ::= PAGE 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteItem",97, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // eatWriteItem ::= LINE 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteItem",97, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // eatWriteItem ::= NO 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteItem",97, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // eatWriteItem ::= LOCK 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteItem",97, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // eatWriteItem ::= WITH 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteItem",97, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // eatWriteItem ::= token 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens s = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteItem",97, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // eatWriteLst ::= eatWriteLst eatWriteItem 
            {
              Tokens RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens x = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens i = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = x.add(i);      
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteLst",96, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // eatWriteLst ::= eatWriteItem 
            {
              Tokens RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens e = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(e); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteLst",96, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // eatWrite ::= 
            {
              Tokens RESULT =null;
		 RESULT = new Tokens(); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWrite",95, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // eatWrite ::= eatWriteLst 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l;            
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWrite",95, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // eatCloseItem ::= FOR 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatCloseItem",94, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // eatCloseItem ::= NO 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatCloseItem",94, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // eatCloseItem ::= WITH 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatCloseItem",94, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // eatCloseLst ::= eatCloseLst eatCloseItem 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens i = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l.add(i);      
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatCloseLst",93, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // eatCloseLst ::= eatCloseItem 
            {
              Tokens RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens i = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatCloseLst",93, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // eatClose ::= 
            {
              Tokens RESULT =null;
		 RESULT = new Tokens(); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatClose",92, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // eatClose ::= eatCloseLst 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l;            
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatClose",92, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // stmtEndSearch ::= ENDSEARCH 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEndSearch",190, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // stmtEndVerb ::= ENDVERB 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEndVerb",208, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // stmtEndEvaluate ::= ENDEVAL 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEndEvaluate",185, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // stmtEndPerform ::= ENDPERFORM 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEndPerform",188, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // stmtEndIf ::= ENDIF 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEndIf",187, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // stmtElse ::= ELSE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtElse",204, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // stmtEndP ::= ENDP 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEndP",189, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // option_order ::= DESCENDING 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_order",91, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // option_order ::= ASCENDING 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_order",91, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // option_and_or ::= ALSO 
            {
              Symbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol a = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = a; code.incComplexity(); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_and_or",89, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // option_and_or ::= OR 
            {
              Symbol RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = o; code.incComplexity(); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_and_or",89, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // option_and_or ::= AND 
            {
              Symbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol a = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = a; code.incComplexity(); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_and_or",89, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // option_position ::= AFTER 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_position",90, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // option_position ::= BEFORE 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_position",90, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // option_size_error ::= SIZE_ERROR 
            {
              Option RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 code.setImperative(); 
                                   RESULT = new Option(i); 
                                
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_size_error",279, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // optionOverflow ::= OVERFLOW 
            {
              StmtCobol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 code.setImperative(); 
                                   RESULT = new StmtCobol(i); 
                                
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("optionOverflow",198, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // optionOverflow_opt ::= 
            {
              StmtCobol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("optionOverflow_opt",197, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // optionOverflow_opt ::= optionOverflow 
            {
              StmtCobol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("optionOverflow_opt",197, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // option_rounded ::= ROUNDED 
            {
              Option RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol r = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 currStmt.addOption(new Option(r)); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_rounded",278, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // option_giving ::= GIVING lvalue_list 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new Option(o); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_giving",277, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // option_corr ::= CORR 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Option(o); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_corr",276, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // option_all ::= ALL 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Option(o); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_all",275, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // rvalue_options ::= option_rounded 
            {
              Option RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("rvalue_options",273, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // rvalue_options ::= option_corr 
            {
              Option RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("rvalue_options",273, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // rvalue_options ::= option_all 
            {
              Option RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("rvalue_options",273, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // rvalue_options ::= rvalue_options rvalue_option 
            {
              Option RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("rvalue_options",273, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // rvalue_options ::= rvalue_option 
            {
              Option RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("rvalue_options",273, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // rvalue_options_opt ::= 
            {
              Option RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("rvalue_options_opt",272, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // rvalue_options_opt ::= rvalue_options 
            {
              Option RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("rvalue_options_opt",272, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // stmtException ::= EXCEPTION 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtException",201, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // stmtInvalid ::= INVALID opt_key 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 StmtCobol stmt = new StmtCobol(s);
                                              RESULT = code.setAtEnd(stmt); 
                                           
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInvalid",200, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // stmtAtEnd ::= ATEND 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s);
                             RESULT = code.setAtEnd(stmt); 
                          
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAtEnd",199, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // closeFile ::= ID eatClose 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens e = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 Tokens t = new Tokens(s);
                                         RESULT = t.add(e); 
                                      
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("closeFile",225, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // closeLstFiles ::= closeLstFiles closeFile 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens c = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l.add(c);  
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("closeLstFiles",226, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // closeLstFiles ::= closeFile 
            {
              Tokens RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens c = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = c;         
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("closeLstFiles",226, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // stmtClose ::= CLOSE closeLstFiles 
            {
              StmtCobol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.fileAction(TRAP.ACC_CLOSE, c, l); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtClose",122, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // stmtSet ::= SET stmtSet_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSet",196, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // stmtStop ::= STOPRUN optTokens 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtStop",194, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // stmtDelete ::= DELETE ID 
            {
              StmtCobol RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.fileAccess(TRAP.ACC_DELETE, d, i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDelete",125, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // stmtRelease ::= RELEASE ID eatWrite 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens e = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s);
                     RESULT = stmt.addLValue(i);
                  
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRelease",157, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // stmtWrite_eop ::= EOP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 code.setImperative(); 
                                   RESULT = new StmtCobol(s); 
                                
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_eop",88, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // stmtWrite_after ::= AFTER 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_after",87, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // stmtWrite_position ::= option_position rvalue 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_position",86, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // stmtWrite_from ::= FROM rvalue 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_from",85, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // stmtWrite_option ::= stmtWrite_eop 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_option",84, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // stmtWrite_option ::= stmtWrite_after 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_option",84, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // stmtWrite_option ::= stmtWrite_position 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_option",84, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // stmtWrite_option ::= stmtWrite_from 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_option",84, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // stmtWrite_options ::= stmtWrite_options stmtWrite_option 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_options",83, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // stmtWrite_options ::= stmtWrite_option 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_options",83, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // stmtWrite_detail ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_detail",82, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // stmtWrite_detail ::= stmtWrite_options 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_detail",82, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // stmtRewrite ::= REWRITE ID stmtWrite_detail 
            {
              StmtCobol RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol r = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = code.fileAccess(TRAP.ACC_UPDATE, r, i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRewrite",162, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // stmtWrite ::= WRITE ID stmtWrite_detail 
            {
              StmtCobol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol w = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = code.fileAccess(TRAP.ACC_INSERT, w, i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite",170, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // stmtUnstring_option ::= optionOverflow 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_option",81, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // stmtUnstring_option ::= TALLYING opt_in lvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_option",81, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // stmtUnstring_option ::= POINTER lvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_option",81, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // stmtUnstring_options ::= stmtUnstring_options stmtUnstring_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_options",80, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // stmtUnstring_options ::= stmtUnstring_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_options",80, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // stmtUnstring_options_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_options_opt",79, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // stmtUnstring_options_opt ::= stmtUnstring_options 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_options_opt",79, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // stmtUnstring_delimiter ::= COUNT opt_in lvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiter",78, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // stmtUnstring_delimiter ::= DELIMITER opt_in lvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiter",78, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // stmtUnstring_delimiters ::= stmtUnstring_delimiters stmtUnstring_delimiter 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiters",77, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // stmtUnstring_delimiters ::= stmtUnstring_delimiter 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiters",77, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // stmtUnstring_delimiters_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiters_opt",76, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // stmtUnstring_delimiters_opt ::= stmtUnstring_delimiters 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiters_opt",76, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // stmtUnstring_target ::= lvalue stmtUnstring_delimiters_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_target",72, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // stmtUnstring_targets ::= stmtUnstring_targets stmtUnstring_target 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_targets",71, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // stmtUnstring_targets ::= stmtUnstring_target 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_targets",71, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // stmtUnstring_to ::= INTO stmtUnstring_targets 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_to",70, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // stmtUnstring_delimited_token ::= OR 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimited_token",75, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // stmtUnstring_delimited_token ::= rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimited_token",75, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // stmtUnstring_delimiteds ::= stmtUnstring_delimiteds stmtUnstring_delimited_token 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiteds",74, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // stmtUnstring_delimiteds ::= stmtUnstring_delimited_token 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiteds",74, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // stmtUnstring_delimited ::= DELIMITED opt_by opt_all stmtUnstring_delimiteds 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimited",73, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // stmtUnstring_delimited_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimited_opt",69, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // stmtUnstring_delimited_opt ::= stmtUnstring_delimited 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimited_opt",69, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // stmtUnstring_detail ::= rvalue stmtUnstring_delimited_opt stmtUnstring_to stmtUnstring_options_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_detail",68, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // stmtUnstring ::= UNSTRING stmtUnstring_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring",121, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // stmtSubtract_option ::= option_size_error 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSubtract_option",67, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // stmtSubtract_option ::= option_giving 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSubtract_option",67, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // stmtSubtract_option ::= FROM rvalue_list 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSubtract_option",67, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // stmtSubtract_options ::= stmtSubtract_options stmtSubtract_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSubtract_options",66, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // stmtSubtract_options ::= stmtSubtract_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSubtract_options",66, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // stmtSubtract_detail ::= rvalue_list stmtSubtract_options 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSubtract_detail",65, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // stmtSubtract ::= SUBTRACT stmtSubtract_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSubtract",64, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // stmtString_pointer ::= POINTER lvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_pointer",63, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // stmtString_pointer_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_pointer_opt",62, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // stmtString_pointer_opt ::= stmtString_pointer 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_pointer_opt",62, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // stmtString_into ::= INTO lvalue stmtString_pointer_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_into",57, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // stmtString_from_delim ::= SIZE 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_from_delim",61, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // stmtString_from_delim ::= rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_from_delim",61, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // stmtString_from_delimiter ::= DELIMITED opt_by stmtString_from_delim 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_from_delimiter",60, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // stmtString_from_tokens ::= stmtString_from_tokens rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_from_tokens",59, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // stmtString_from_tokens ::= rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_from_tokens",59, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // stmtString_from_string ::= stmtString_from_tokens stmtString_from_delimiter 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_from_string",58, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // stmtString_from ::= stmtString_from stmtString_from_string 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_from",56, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // stmtString_from ::= stmtString_from_string 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_from",56, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // stmtString_detail ::= stmtString_from stmtString_into optionOverflow_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_detail",55, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // stmtStart_key ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtStart_key",54, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // stmtStart_key ::= KEY logical_oper rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtStart_key",54, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // stmtStart ::= START ID stmtStart_key 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtStart",53, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // stmtSort_procedure ::= OUTPUT ID 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_procedure",52, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // stmtSort_procedure ::= INPUT ID 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_procedure",52, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // stmtSort_giving ::= GIVING rvalue_list 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_giving",51, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // stmtSort_using ::= USING rvalue_list 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_using",50, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // stmtSort_duplicates ::= DUPLICATES 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_duplicates",49, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // stmtSort_order ::= option_order opt_key rvalue_list 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_order",48, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // stmtSort_option ::= stmtSort_procedure 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_option",47, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // stmtSort_option ::= stmtSort_giving 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_option",47, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // stmtSort_option ::= stmtSort_using 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_option",47, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // stmtSort_option ::= stmtSort_duplicates 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_option",47, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // stmtSort_option ::= stmtSort_order 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_option",47, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // stmtSort_detail ::= stmtSort_detail stmtSort_option 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_detail",46, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // stmtSort_detail ::= stmtSort_option 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_detail",46, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // stmtSort ::= SORT NT$1 ID stmtSort_detail 
            {
              StmtCobol RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (StmtCobol) ((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).value;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort",45, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // NT$1 ::= 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
 RESULT = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("NT$1",289, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // stmtSet_resto ::= BY rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSet_resto",44, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // stmtSet_resto ::= TO rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSet_resto",44, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // stmtSet_detail ::= lvalue_list stmtSet_resto 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSet_detail",43, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // search_varying ::= VARYING rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("search_varying",42, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // search_opt ::= search_varying 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("search_opt",41, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // search_option ::= search_option search_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("search_option",40, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // search_option ::= search_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("search_option",40, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // search_options ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("search_options",39, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // search_options ::= search_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("search_options",39, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // search_detail ::= rvalue search_options 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("search_detail",38, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // search_verb ::= SEARCH 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = currStmt = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("search_verb",37, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // stmtSearch ::= search_verb opt_all search_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		 RESULT = code.processSearch(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSearch",36, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // stmtRead_key ::= KEY rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead_key",35, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // stmtRead_into ::= INTO lvalue 
            {
              Tokens RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt d = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 Tokens t = new Tokens(i); RESULT = t.add(d); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead_into",34, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // stmtRead_option ::= stmtRead_key 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead_option",33, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // stmtRead_option ::= stmtRead_into 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead_option",33, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // stmtRead_options ::= stmtRead_options stmtRead_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead_options",32, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // stmtRead_options ::= stmtRead_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead_options",32, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // stmtRead_detail ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead_detail",31, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // stmtRead_detail ::= stmtRead_options 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead_detail",31, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // stmtRead ::= READ ID stmtRead_detail 
            {
              StmtCobol RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol r = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens s = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = code.fileAccess(TRAP.ACC_READ, r, i);
                     RESULT = stmt; 
                  
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead",30, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // perform_test ::= TEST AFTER 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new Option(o);    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_test",151, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // perform_test ::= TEST BEFORE 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new Option(o);    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_test",151, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // perform_after ::= AFTER var_int FROM var_int BY var_int 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-5)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-5)).value;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_after",155, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-5)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // perform_varying ::= VARYING var_int FROM var_int BY var_int 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-5)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-5)).value;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_varying",154, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-5)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // perform_until ::= UNTIL logical_condition 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Option(o); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_until",152, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // perform_thru ::= THRU id 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Option(o, i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_thru",153, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // perform_option_second ::= var_int 
            {
              Option RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt v = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Option(v); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_option_second",149, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // perform_option_second ::= perform_option_first 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = o;                
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_option_second",149, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // perform_option_first ::= perform_test 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_option_first",148, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // perform_option_first ::= perform_after 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_option_first",148, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // perform_option_first ::= perform_varying 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_option_first",148, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // perform_option_first ::= perform_thru 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_option_first",148, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // perform_option_first ::= perform_until 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_option_first",148, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // perform_option_first ::= TIMES 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 currStmt.replaceOption(new Option(o)); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_option_first",148, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // perform_option_first ::= FOREVER 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Option(o); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_option_first",148, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // perform_options ::= perform_options perform_option_second 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 currStmt.addOption(o); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_options",145, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // perform_options ::= perform_option_first 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 currStmt.addOption(o); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_options",145, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // perform_options_label ::= perform_options_label perform_option_second 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 currStmt.addOption(o); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_options_label",147, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // perform_options_label ::= NUMERO 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 currStmt.addOption(new Option(o)); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_options_label",147, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // perform_options_label ::= perform_option_first 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 currStmt.addOption(o); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_options_label",147, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // perform_options_label_opt ::= 
            {
              Option RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_options_label_opt",146, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // perform_options_label_opt ::= perform_options_label 
            {
              Option RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_options_label_opt",146, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // perform_options_opt ::= 
            {
              Option RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_options_opt",144, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // perform_options_opt ::= perform_options 
            {
              Option RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_options_opt",144, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // perform_label ::= variable 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt v = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 currStmt.addOption(new Option(v)); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_label",150, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // perform_from ::= perform_options_opt 
            {
              Option RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_from",143, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // perform_from ::= perform_label perform_options_label_opt 
            {
              Option RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_from",143, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // perform_verb ::= PERFORM 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 currStmt = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_verb",142, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // stmtPerform ::= perform_verb perform_from 
            {
              StmtCobol RESULT =null;
		 RESULT = code.processPerform(currStmt, lastStmt); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform",141, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // stmtOpen_files ::= stmtOpen_files ID 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l.add(s);      
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_files",221, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // stmtOpen_files ::= ID 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_files",221, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // stmtOpen_mode ::= EXTEND 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s);
                               stmt.setId(Persistence.EXTEND);
                               RESULT = stmt;
                            
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_mode",224, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // stmtOpen_mode ::= IO 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s);
                               stmt.setId(Persistence.IO);
                               RESULT = stmt;
                            
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_mode",224, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // stmtOpen_mode ::= OUTPUT 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s);
                               stmt.setId(Persistence.OUTPUT);
                               RESULT = stmt;
                            
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_mode",224, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // stmtOpen_mode ::= INPUT 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s);
                               stmt.setId(Persistence.INPUT);
                               RESULT = stmt; 
                            
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_mode",224, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // stmtOpen_group ::= stmtOpen_mode stmtOpen_files 
            {
              Tokens RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		StmtCobol o = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 Persistence f;
                 /*JGG
                    for (Symbol s : l.getTokens()) {
                        f = module.getFile(getSymbolName(s));
                        f.setAccess(o.getId());
                    }
                    */
                    RESULT = l;
                 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_group",223, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // stmtOpen_list ::= stmtOpen_list stmtOpen_group 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens s = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l.add(s);  
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_list",222, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // stmtOpen_list ::= stmtOpen_group 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens s = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;         
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_list",222, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // stmtOpen ::= OPEN stmtOpen_list 
            {
              StmtCobol RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.fileAction(TRAP.ACC_OPEN, o, l); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen",171, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // multiply_option ::= option_size_error 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("multiply_option",29, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // multiply_option ::= option_giving 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("multiply_option",29, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // multiply_options ::= multiply_options multiply_option 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("multiply_options",28, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // multiply_options ::= multiply_option 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("multiply_options",28, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // multiply_options_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("multiply_options_opt",27, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // multiply_options_opt ::= multiply_options 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("multiply_options_opt",27, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // stmtMultiply_by ::= rvalue BY rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtMultiply_by",26, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // stmtMultiply_detail ::= stmtMultiply_by multiply_options_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtMultiply_detail",25, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // stmtMultiply ::= MULTIPLY stmtMultiply_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtMultiply",165, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // stmtMove ::= MOVE rvalue_options_opt expression TO lvalue_list 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-4)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		SymbolExt r = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExtList l = (SymbolExtList)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 code.checkCall(l, r);
                      StmtCobol stmt = new StmtCobol(s, code.getStmts());
                      stmt.addRValue(r);
                      stmt.addLValue(l);
                      RESULT = stmt; 
                   
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtMove",164, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-4)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // stmtInspect_token ::= rvalue 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",175, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // stmtInspect_token ::= CONVERTING 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",175, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // stmtInspect_token ::= REPLACING 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",175, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // stmtInspect_token ::= TALLYING 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",175, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // stmtInspect_token ::= TO 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",175, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // stmtInspect_token ::= CHARACTER 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",175, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // stmtInspect_token ::= FIRST 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",175, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // stmtInspect_token ::= LEADING 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",175, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // stmtInspect_token ::= AFTER 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",175, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // stmtInspect_token ::= BEFORE 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",175, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // stmtInspect_token ::= BY 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",175, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // stmtInspect_token ::= ALL 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",175, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // stmtInspect_detail ::= stmtInspect_detail stmtInspect_token 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_detail",174, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // stmtInspect_detail ::= stmtInspect_token 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_detail",174, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // stmtInspect ::= INSPECT rvalue stmtInspect_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		SymbolExt l = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect",173, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // stmtInitialize_tokens ::= ALL 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_tokens",24, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // stmtInitialize_tokens ::= BY 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_tokens",24, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // stmtInitialize_tokens ::= constantes 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_tokens",24, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // stmtInitialize_tokens ::= variable 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_tokens",24, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // stmtInitialize_resto ::= stmtInitialize_resto stmtInitialize_tokens 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_resto",23, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // stmtInitialize_resto ::= stmtInitialize_tokens 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_resto",23, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // stmtInitialize_replacing_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_replacing_opt",22, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // stmtInitialize_replacing_opt ::= REPLACING stmtInitialize_resto 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_replacing_opt",22, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // stmtInitialize_detail ::= lvalue_list stmtInitialize_replacing_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_detail",21, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // stmtInitialize ::= INITIALIZE stmtInitialize_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize",118, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // if_verb ::= IF 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = currStmt = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("if_verb",203, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // stmtIf ::= if_verb logical_condition 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		  RESULT = code.processIf(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIf",202, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // stmtGoto_depending ::= DEPENDING rvalue 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtGoto_depending",161, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // stmtGoto_depending_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtGoto_depending_opt",160, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // stmtGoto_depending_opt ::= stmtGoto_depending 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtGoto_depending_opt",160, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // stmtGoto_procs ::= stmtGoto_procs ID 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtGoto_procs",159, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // stmtGoto_procs ::= ID 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtGoto_procs",159, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // stmtGoTo ::= GOTO opt_to stmtGoto_procs stmtGoto_depending_opt 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtGoTo",158, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // when_thru ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("when_thru",207, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // when_thru ::= THRU logical_condition 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("when_thru",207, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // when_other ::= OTHER 
            {
              Symbol RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("when_other",140, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // when_item ::= logical_condition when_thru 
            {
              StmtCobol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("when_item",139, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // when_condition ::= when_other 
            {
              StmtCobol RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 currStmt.addOption(new Option(o)); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("when_condition",138, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // when_condition ::= when_item 
            {
              StmtCobol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("when_condition",138, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // when_verb ::= WHEN 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = currStmt = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("when_verb",206, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // stmtWhen ::= when_verb when_condition 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWhen",205, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // evaluate_object ::= logical_condition 
            {
              StmtCobol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("evaluate_object",137, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // evaluate_verb ::= EVALUATE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = currStmt = new StmtCobol(s);  
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("evaluate_verb",136, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // stmtEvaluate ::= evaluate_verb evaluate_object 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = code.processEvaluate(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEvaluate",135, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // divide_option ::= option_rounded 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 currStmt.addOption(o); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("divide_option",20, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // divide_option ::= option_giving 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 currStmt.addOption(o); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("divide_option",20, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // divide_options ::= divide_options divide_option 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("divide_options",19, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // divide_options ::= divide_option 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("divide_options",19, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // divide_options_opt ::= 
            {
              Option RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("divide_options_opt",18, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // divide_options_opt ::= divide_options 
            {
              Option RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("divide_options_opt",18, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // divide_mode ::= BY rvalue_list 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("divide_mode",17, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // divide_mode ::= INTO lvalue_list 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("divide_mode",17, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // divide_verb ::= DIVIDE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, currStmt); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("divide_verb",16, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // stmtDivide ::= divide_verb rvalue divide_mode divide_options_opt 
            {
              StmtCobol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDivide",15, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // stmtDisplay ::= DISPLAY rvalue_list 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDisplay",127, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // compute_option ::= option_size_error 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("compute_option",14, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // compute_options ::= compute_options compute_option 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("compute_options",13, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // compute_options ::= compute_option 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("compute_options",13, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // compute_options_opt ::= 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("compute_options_opt",12, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // compute_options_opt ::= compute_options 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("compute_options_opt",12, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // compute_rvalue ::= expression 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("compute_rvalue",11, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // compute_rvalues ::= compute_rvalues compute_rvalue 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("compute_rvalues",10, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // compute_rvalues ::= compute_rvalue 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("compute_rvalues",10, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // compute_lvalue ::= lvalue rvalue_options_opt 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("compute_lvalue",9, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // stmtCompute ::= COMPUTE compute_lvalue REL_EQ compute_rvalues compute_options_opt 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-4)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-4)).value;
		 StmtCobol stmt = new StmtCobol(s, code.getStmts());
//                      stmt.addSymbol(i);
                      RESULT = stmt; 
                   
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCompute",124, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-4)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // stmtCancel ::= CANCEL rvalue 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCancel",169, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // stmtCall_returning ::= RETURNING lvalue 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_returning",180, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // stmtCall_returning_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_returning_opt",179, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // stmtCall_returning_opt ::= stmtCall_returning 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_returning_opt",179, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // stmtCall_parm_type ::= REFERENCE 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_parm_type",183, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // stmtCall_parm_type ::= VALUE 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_parm_type",183, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // stmtCall_parm ::= BY stmtCall_parm_type 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_parm",182, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // stmtCall_parm ::= rvalue 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_parm",182, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // stmtCall_parm_list ::= stmtCall_parm_list stmtCall_parm 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_parm_list",181, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // stmtCall_parm_list ::= stmtCall_parm 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_parm_list",181, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // stmtCall_using ::= USING stmtCall_parm_list 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_using",178, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // stmtCall_using_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_using_opt",177, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // stmtCall_using_opt ::= stmtCall_using 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_using_opt",177, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // stmtCall ::= CALL moduloCall stmtCall_using_opt stmtCall_returning_opt 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		 RESULT = code.processCall(s, i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall",176, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // add_option ::= option_corr 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("add_option",8, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // add_option ::= option_rounded 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("add_option",8, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // add_option ::= option_giving 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("add_option",8, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // add_options ::= add_options add_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("add_options",7, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // add_options ::= add_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("add_options",7, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // add_options_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("add_options_opt",6, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // add_options_opt ::= add_options 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("add_options_opt",6, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // add_verb ::= ADD 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 currStmt = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("add_verb",5, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // stmtAdd ::= add_verb rvalue_options_opt rvalue_list TO lvalue_list add_options_opt 
            {
              StmtCobol RESULT =null;
		 RESULT = currStmt; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAdd",195, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-5)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // stmtAccept_detail ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAccept_detail",4, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // stmtAccept_detail ::= FROM rvalue stmtAcceptOpt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAccept_detail",4, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // stmtEndExec ::= END_EXEC 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEndExec",186, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // stmtExec ::= SQLCODE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 module.incStmtSql();  RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtExec",191, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // stmtExec ::= CICSCODE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 module.incStmtCics(); RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtExec",191, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // stmtReturn ::= RETURN ID stmtRead_detail 
            {
              StmtCobol RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol r = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens j = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = code.fileAccess(TRAP.ACC_READ, r, i);
                     RESULT = stmt; // .addTokens(j); 
                  
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtReturn",193, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // stmtNext ::= NEXT 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtNext",168, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // stmtRollback ::= ROLLBACK 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRollback",192, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // stmtFree ::= FREE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtFree",156, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // exitType ::= 
            {
              Symbol RESULT =null;
		 RESULT = code.makeSymbol(ZCCSym.PARAGRAPH, -1, -1, ""); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("exitType",107, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // exitType ::= SECTION 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("exitType",107, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // exitType ::= PARAGRAPH 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("exitType",107, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // exitType ::= PROGRAM 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("exitType",107, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // stmtExitPgm ::= EXITPGM 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s, code.getStmts());
                               RESULT = stmt.addRValue(s); 
                            
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtExitPgm",133, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // stmtExitP ::= EXITP 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s, code.getStmts());
                           RESULT = stmt.addRValue(code.makeSymbol(ZCCSym.PERFORM, -1, -1, "PERFORM")); 
                        
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtExitP",131, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // stmtExitG ::= EXIT exitType 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s, code.getStmts());
                                       RESULT = stmt.addRValue(t); 
                                    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtExitG",132, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // exitTypes ::= stmtExitPgm 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("exitTypes",134, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // exitTypes ::= stmtExitP 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("exitTypes",134, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // exitTypes ::= stmtExitG 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("exitTypes",134, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // stmtExit ::= exitTypes 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtExit",130, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // moduloCall ::= LITERAL 
            {
              Symbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol l = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("moduloCall",184, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // moduloCall ::= variable 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = i; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("moduloCall",184, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // stmtAcceptOpt ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAcceptOpt",172, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // stmtAcceptOpt ::= ID 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAcceptOpt",172, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // stmtAccept ::= ACCEPT lvalue stmtAccept_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAccept",166, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // stmtMerge ::= MERGE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtMerge",120, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // stmtUnlock ::= UNLOCK 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnlock",167, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // stmtGoback ::= GOBACK 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtGoback",129, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // stmtCommit ::= COMMIT 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCommit",119, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // stmtString ::= STRING stmtString_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString",163, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // stmtContinue ::= CONTINUE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtContinue",128, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // stmtAllocate ::= ALLOCATE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAllocate",126, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // stmtTransform ::= TRANSFORM 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtTransform",123, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // stmtLang ::= stmtFree 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtLang",220, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // stmtLang ::= stmtCancel 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtLang",220, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // stmtLang ::= stmtAllocate 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtLang",220, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // stmtArit ::= stmtSubtract 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtArit",219, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // stmtArit ::= stmtDivide 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtArit",219, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // stmtArit ::= stmtAdd 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtArit",219, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // stmtArit ::= stmtCompute 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtArit",219, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // stmtArit ::= stmtMultiply 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtArit",219, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // stmtIO2 ::= stmtSort 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",214, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // stmtIO2 ::= stmtRewrite 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",214, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // stmtIO2 ::= stmtDelete 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",214, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // stmtIO2 ::= stmtWrite 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",214, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // stmtIO2 ::= stmtReturn 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",214, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // stmtIO2 ::= stmtRelease 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",214, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // stmtIO2 ::= stmtRead 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",214, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // stmtIO2 ::= stmtClose 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",214, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // stmtIO2 ::= stmtOpen 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",214, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // stmtIO2 ::= stmtDisplay 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",214, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // stmtIO2 ::= stmtAccept 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",214, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // stmtIO1 ::= stmtRollback 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO1",213, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // stmtIO1 ::= stmtStart 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO1",213, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // stmtIO1 ::= stmtMerge 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO1",213, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // stmtIO1 ::= stmtUnlock 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO1",213, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // stmtIO1 ::= stmtCommit 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO1",213, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // stmtIO ::= stmtIO2 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO",212, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // stmtIO ::= stmtIO1 optTokens 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO",212, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // stmtDatos2 ::= stmtSet 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos2",211, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // stmtDatos2 ::= stmtInitialize 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos2",211, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // stmtDatos2 ::= stmtUnstring 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos2",211, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // stmtDatos2 ::= stmtInspect 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos2",211, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // stmtDatos2 ::= stmtString 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos2",211, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // stmtDatos2 ::= stmtMove 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos2",211, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // stmtDatos1 ::= stmtTransform 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos1",210, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // stmtDatos ::= stmtDatos2 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos",209, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // stmtDatos ::= stmtDatos1 optTokens 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos",209, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // stmtFlujo ::= stmtSearch 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtFlujo",218, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // stmtFlujo ::= stmtContinue 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtFlujo",218, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // stmtFlujo ::= stmtGoTo 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtFlujo",218, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // stmtFlujo ::= stmtEvaluate 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtFlujo",218, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // stmtFlujo ::= stmtIf 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtFlujo",218, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // stmtFlujo ::= stmtCall 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtFlujo",218, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // stmtFlujo ::= stmtPerform 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtFlujo",218, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // stmtControl2 ::= stmtGoback 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		  hasEndProgram = true;
                                      code.trapEndModule();
                                      RESULT = s; 
                                   
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtControl2",217, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // stmtControl2 ::= stmtStop 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 hasEndProgram = true;
                                       RESULT = s; 
                                       code.trapEndModule(); 
                                   
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtControl2",217, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // stmtControl1 ::= stmtNext 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtControl1",216, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // stmtControl ::= stmtControl2 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 hasEndProgram = true; RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtControl",215, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // stmtControl ::= stmtExit 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT =  code.processExit(s);    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtControl",215, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // stmtControl ::= stmtControl1 optTokens 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;          
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtControl",215, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // noverbos ::= stmtEndSearch 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.endSearch(s);         
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",111, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // noverbos ::= stmtEndEvaluate 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.endEvaluate(s);       
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",111, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // noverbos ::= stmtEndExec 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;                         
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",111, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // noverbos ::= stmtException 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;                         
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",111, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // noverbos ::= stmtInvalid 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;                         
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",111, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // noverbos ::= stmtAtEnd 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;                         
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",111, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // noverbos ::= stmtElse 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.processElse(s);       
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",111, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // noverbos ::= stmtWhen 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.processWhen(s);       
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",111, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // noverbos ::= stmtEndVerb 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;                         
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",111, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // noverbos ::= stmtEndPerform 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.endPerform(s);        
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",111, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // noverbos ::= stmtEndIf 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.endIf(s);              
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",111, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // noverbos ::= stmtEndP 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.checkFlujo( s, lastStmt);
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",111, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // verbos ::= stmtExec 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;                         
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("verbos",110, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // verbos ::= stmtLang 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; module.incStmtLang();    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("verbos",110, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // verbos ::= stmtIO 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; module.incStmtIO();      
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("verbos",110, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // verbos ::= stmtArit 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; module.incStmtArit();    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("verbos",110, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // verbos ::= stmtDatos 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; module.incStmtDatos();   
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("verbos",110, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // verbos ::= stmtFlujo 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; module.incStmtFlujo();   
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("verbos",110, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // verbos ::= stmtControl 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; module.incStmtControl(); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("verbos",110, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= noverbos 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmt",109, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= verbos 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; code.incStmt(); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmt",109, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lista_stmt ::= lista_stmt stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 lastStmt = code.processStatement(s, lastStmt); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("lista_stmt",108, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lista_stmt ::= stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 lastStmt = code.processStatement(s, lastStmt); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("lista_stmt",108, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parr_section ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("parr_section",106, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parr_section ::= SECTION 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = true;  
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("parr_section",106, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parrafo_name ::= PARRAFO parr_section ENDP 
            {
              Symbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 // if (b == true) code.notSupportedSection(p); 
                        RESULT = code.processParrafo(p, lastStmt); 
                     
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("parrafo_name",105, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bloque_sentences ::= 
            {
              Integer RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("bloque_sentences",104, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bloque_sentences ::= lista_stmt 
            {
              Integer RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("bloque_sentences",104, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bloque_parrafo ::= parrafo_name bloque_sentences 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("bloque_parrafo",102, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bloque_parrafos ::= bloque_parrafos bloque_parrafo 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("bloque_parrafos",101, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bloque_parrafos ::= bloque_parrafo 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("bloque_parrafos",101, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lista_parrafos ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("lista_parrafos",100, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lista_parrafos ::= bloque_parrafos 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("lista_parrafos",100, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bloque_inicial ::= bloque_sentences 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("bloque_inicial",103, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bloque_procedure ::= bloque_inicial lista_parrafos 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("bloque_procedure",3, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // list_parms ::= list_parms ID 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l.add(s);      
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("list_parms",114, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // list_parms ::= ID 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("list_parms",114, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // list_parms_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("list_parms_opt",113, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // list_parms_opt ::= list_parms 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("list_parms_opt",113, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // proc_parm ::= RETURNING rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("proc_parm",117, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // proc_parm ::= USING list_parms_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("proc_parm",117, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // proc_parms ::= proc_parms proc_parm 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("proc_parms",116, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // proc_parms ::= proc_parm 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("proc_parms",116, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // proc_parms_list ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("proc_parms_list",115, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // proc_parms_list ::= proc_parms 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("proc_parms_list",115, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // resto_call ::= proc_parms_list NT$0 ENDP 
            {
              Tokens RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Tokens) ((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Tokens p = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 code.parrafoVirtual(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("resto_call",112, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              Tokens RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens p = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
 RESULT = p; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("NT$0",288, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // proc_div_header ::= DIV_PROC resto_call 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens p = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 code.beginCode(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("proc_div_header",2, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // procedure_division ::= proc_div_header bloque_procedure 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("procedure_division",0, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // end_program ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("end_program",1, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // end_program ::= END_PGM ID ENDP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		 hasEndProgram = true; 
                                      StmtCobol stmt = new StmtCobol(s); 
                                      code.endProgram(stmt);
                                      lastStmt = stmt;
                                   
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("end_program",1, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // module ::= procedure_division end_program 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("module",99, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= cobolCode EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		StmtCobol start_val = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		RESULT = start_val;
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ZCCode$parser.done_parsing();
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // cobolCode ::= module 
            {
              StmtCobol RESULT =null;
		 code.EndOfFile(lastStmt, hasEndProgram);
                         RESULT = null;  
                      
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("cobolCode",98, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

