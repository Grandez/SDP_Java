
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Mar 23 17:54:36 CET 2017
//----------------------------------------------------

package com.jgg.sdp.parser.cobol.lang;

import java.util.*;
import java_cup.runtime.*;
import com.jgg.sdp.module.base.*;
import com.jgg.sdp.module.items.*;
import com.jgg.sdp.module.factorias.*;
import com.jgg.sdp.core.ctes.*;
import com.jgg.sdp.core.config.*;
import com.jgg.sdp.parser.base.*;
import com.jgg.sdp.parser.cobol.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Mar 23 17:54:36 CET 2017
  */
public class ZCCode extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ZCCode() {super();}

  /** Constructor which sets the default scanner. */
  public ZCCode(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ZCCode(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u01fe\000\002\154\003\000\002\002\004\000\002\155" +
    "\004\000\002\003\005\000\002\003\002\000\002\002\004" +
    "\000\002\004\004\000\002\u0105\002\000\002\203\005\000" +
    "\002\206\003\000\002\206\002\000\002\207\003\000\002" +
    "\207\004\000\002\210\004\000\002\210\004\000\002\204" +
    "\003\000\002\204\002\000\002\205\003\000\002\205\004" +
    "\000\002\005\004\000\002\167\003\000\002\164\003\000" +
    "\002\164\002\000\002\165\003\000\002\165\004\000\002" +
    "\166\004\000\002\170\003\000\002\170\002\000\002\171" +
    "\005\000\002\172\003\000\002\172\002\000\002\174\003" +
    "\000\002\174\004\000\002\175\003\000\002\175\003\000" +
    "\002\176\003\000\002\176\003\000\002\176\003\000\002" +
    "\176\003\000\002\176\003\000\002\176\003\000\002\176" +
    "\003\000\002\177\003\000\002\177\003\000\002\177\003" +
    "\000\002\177\003\000\002\177\003\000\002\177\003\000" +
    "\002\177\003\000\002\177\003\000\002\177\003\000\002" +
    "\177\003\000\002\177\003\000\002\343\004\000\002\343" +
    "\003\000\002\343\003\000\002\344\003\000\002\345\003" +
    "\000\002\345\003\000\002\346\003\000\002\346\003\000" +
    "\002\346\003\000\002\346\003\000\002\346\003\000\002" +
    "\346\003\000\002\335\004\000\002\335\003\000\002\336" +
    "\003\000\002\337\003\000\002\337\003\000\002\337\003" +
    "\000\002\337\003\000\002\337\003\000\002\337\003\000" +
    "\002\337\003\000\002\340\004\000\002\340\003\000\002" +
    "\341\003\000\002\341\003\000\002\341\003\000\002\341" +
    "\003\000\002\341\003\000\002\342\003\000\002\342\003" +
    "\000\002\342\003\000\002\342\003\000\002\342\003\000" +
    "\002\342\003\000\002\342\003\000\002\342\003\000\002" +
    "\342\003\000\002\342\003\000\002\342\003\000\002\347" +
    "\003\000\002\347\003\000\002\347\003\000\002\347\003" +
    "\000\002\347\003\000\002\350\003\000\002\350\003\000" +
    "\002\350\003\000\002\216\003\000\002\221\003\000\002" +
    "\223\003\000\002\257\004\000\002\212\003\000\002\224" +
    "\003\000\002\263\003\000\002\213\003\000\002\262\005" +
    "\000\002\270\003\000\002\270\002\000\002\304\003\000" +
    "\002\304\003\000\002\225\003\000\002\231\003\000\002" +
    "\231\003\000\002\231\003\000\002\227\004\000\002\226" +
    "\003\000\002\230\003\000\002\173\003\000\002\173\003" +
    "\000\002\173\003\000\002\173\002\000\002\250\003\000" +
    "\002\310\003\000\002\264\003\000\002\311\005\000\002" +
    "\306\003\000\002\306\003\000\002\307\003\000\002\006" +
    "\005\000\002\006\002\000\002\313\004\000\002\007\004" +
    "\000\002\010\003\000\002\010\004\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\274\006\000\002" +
    "\275\003\000\002\275\002\000\002\276\004\000\002\301" +
    "\003\000\002\301\004\000\002\302\003\000\002\302\004" +
    "\000\002\303\003\000\002\303\003\000\002\277\003\000" +
    "\002\277\002\000\002\300\004\000\002\265\004\000\002" +
    "\217\004\000\002\012\006\000\002\013\003\000\002\013" +
    "\004\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\015\003\000\002\015\002\000\002\016\003\000" +
    "\002\016\004\000\002\017\003\000\002\222\004\000\002" +
    "\020\004\000\002\021\005\000\002\022\003\000\002\022" +
    "\004\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\u0106\002\000" +
    "\002\232\005\000\002\233\003\000\002\u0107\002\000\002" +
    "\331\005\000\002\234\003\000\002\234\003\000\002\235" +
    "\004\000\002\236\003\000\002\333\004\000\002\333\002" +
    "\000\002\252\006\000\002\253\003\000\002\253\004\000" +
    "\002\254\003\000\002\254\002\000\002\255\004\000\002" +
    "\324\004\000\002\024\003\000\002\211\004\000\002\025" +
    "\004\000\002\026\004\000\002\026\002\000\002\027\003" +
    "\000\002\027\004\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\271\005\000\002" +
    "\272\003\000\002\272\004\000\002\273\003\000\002\273" +
    "\003\000\002\273\003\000\002\273\003\000\002\273\003" +
    "\000\002\273\003\000\002\273\003\000\002\273\003\000" +
    "\002\273\003\000\002\273\003\000\002\273\003\000\002" +
    "\273\003\000\002\260\007\000\002\261\004\000\002\031" +
    "\005\000\002\032\005\000\002\267\004\000\002\352\003" +
    "\000\002\352\004\000\002\353\004\000\002\354\003\000" +
    "\002\354\003\000\002\354\003\000\002\354\003\000\002" +
    "\351\003\000\002\351\004\000\002\237\006\000\002\240" +
    "\003\000\002\241\003\000\002\241\002\000\002\242\003" +
    "\000\002\242\004\000\002\243\003\000\002\243\002\000" +
    "\002\244\004\000\002\244\004\000\002\245\003\000\002" +
    "\245\002\000\002\246\003\000\002\246\004\000\002\247" +
    "\003\000\002\247\003\000\002\247\004\000\002\247\004" +
    "\000\002\247\004\000\002\247\004\000\002\200\003\000" +
    "\002\200\003\000\002\201\003\000\002\201\004\000\002" +
    "\202\003\000\002\202\003\000\002\202\003\000\002\033" +
    "\005\000\002\034\003\000\002\034\002\000\002\035\003" +
    "\000\002\035\004\000\002\036\003\000\002\036\003\000" +
    "\002\037\004\000\002\040\004\000\002\041\005\000\002" +
    "\042\004\000\002\043\003\000\002\043\002\000\002\044" +
    "\003\000\002\044\004\000\002\045\003\000\002\046\004" +
    "\000\002\047\004\000\002\050\004\000\002\050\004\000" +
    "\002\u0108\002\000\002\051\006\000\002\052\003\000\002" +
    "\052\004\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\054\005" +
    "\000\002\055\003\000\002\056\004\000\002\057\004\000" +
    "\002\060\004\000\002\060\004\000\002\061\005\000\002" +
    "\062\003\000\002\063\003\000\002\063\002\000\002\064" +
    "\003\000\002\064\004\000\002\065\003\000\002\066\005" +
    "\000\002\067\003\000\002\067\002\000\002\070\003\000" +
    "\002\070\004\000\002\071\003\000\002\071\003\000\002" +
    "\071\003\000\002\071\003\000\002\071\003\000\002\072" +
    "\005\000\002\073\003\000\002\073\004\000\002\075\004" +
    "\000\002\076\003\000\002\076\004\000\002\077\005\000" +
    "\002\100\003\000\002\100\003\000\002\074\005\000\002" +
    "\101\003\000\002\101\002\000\002\102\004\000\002\103" +
    "\004\000\002\104\004\000\002\105\003\000\002\105\004" +
    "\000\002\106\004\000\002\106\003\000\002\106\003\000" +
    "\002\214\004\000\002\107\006\000\002\110\003\000\002" +
    "\110\002\000\002\114\006\000\002\115\003\000\002\115" +
    "\004\000\002\116\003\000\002\116\003\000\002\111\004" +
    "\000\002\112\003\000\002\112\004\000\002\113\004\000" +
    "\002\117\003\000\002\117\002\000\002\120\003\000\002" +
    "\120\004\000\002\121\005\000\002\121\005\000\002\122" +
    "\003\000\002\122\002\000\002\123\003\000\002\123\004" +
    "\000\002\124\004\000\002\124\005\000\002\124\003\000" +
    "\002\266\005\000\002\256\005\000\002\125\003\000\002" +
    "\125\002\000\002\126\003\000\002\126\004\000\002\127" +
    "\003\000\002\127\003\000\002\127\003\000\002\127\003" +
    "\000\002\130\004\000\002\131\004\000\002\132\003\000" +
    "\002\133\003\000\002\251\005\000\002\220\004\000\002" +
    "\312\004\000\002\314\004\000\002\215\004\000\002\356" +
    "\003\000\002\356\004\000\002\355\004\000\002\321\003" +
    "\000\002\322\004\000\002\323\003\000\002\315\003\000" +
    "\002\315\002\000\002\316\003\000\002\317\003\000\002" +
    "\317\002\000\002\320\003\000\002\137\003\000\002\137" +
    "\002\000\002\140\004\000\002\141\004\000\002\135\003" +
    "\000\002\135\003\000\002\134\003\000\002\134\003\000" +
    "\002\134\003\000\002\136\003\000\002\136\003\000\002" +
    "\150\003\000\002\150\002\000\002\151\003\000\002\151" +
    "\002\000\002\152\003\000\002\152\002\000\002\153\003" +
    "\000\002\153\002\000\002\305\003\000\002\325\003\000" +
    "\002\326\003\000\002\327\003\000\002\330\003\000\002" +
    "\334\003\000\002\142\003\000\002\142\002\000\002\143" +
    "\003\000\002\143\004\000\002\144\003\000\002\144\003" +
    "\000\002\144\003\000\002\145\003\000\002\145\002\000" +
    "\002\146\003\000\002\146\004\000\002\147\003\000\002" +
    "\147\003\000\002\147\003\000\002\147\003\000\002\147" +
    "\003\000\002\147\003\000\002\147\003\000\002\u0102\003" +
    "\000\002\u0102\005\000\002\u0103\003\000\002\u0103\004\000" +
    "\002\u0104\003\000\002\u0104\003\000\002\u0104\003\000\002" +
    "\u0104\003\000\002\u0104\003\000\002\u0104\003\000\002\u0104" +
    "\003\000\002\u0104\003\000\002\u0104\003\000\002\u0104\003" +
    "\000\002\u0101\003\000\002\u0101\002\000\002\u0100\003\000" +
    "\002\u0100\004\000\002\377\003\000\002\377\003\000\002" +
    "\377\003\000\002\377\005\000\002\377\003\000\002\372" +
    "\003\000\002\373\003\000\002\373\004\000\002\374\003" +
    "\000\002\374\004\000\002\363\003\000\002\363\003\000" +
    "\002\370\004\000\002\371\004\000\002\371\003\000\002" +
    "\357\003\000\002\357\002\000\002\360\003\000\002\360" +
    "\004\000\002\361\004\000\002\362\003\000\002\362\003" +
    "\000\002\156\003\000\002\156\002\000\002\162\003\000" +
    "\002\162\004\000\002\157\005\000\002\160\003\000\002" +
    "\160\004\000\002\161\003\000\002\161\003\000\002\161" +
    "\003\000\002\161\005\000\002\365\003\000\002\365\003" +
    "\000\002\366\003\000\002\366\003\000\002\367\003\000" +
    "\002\367\003\000\002\367\003\000\002\364\003\000\002" +
    "\364\003\000\002\364\003\000\002\364\003\000\002\364" +
    "\003\000\002\364\003\000\002\364\003\000\002\364\003" +
    "\000\002\364\003\000\002\364\003\000\002\364\003\000" +
    "\002\364\003\000\002\364\003\000\002\163\003\000\002" +
    "\163\002\000\002\375\004\000\002\376\003\000\002\376" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u026d\000\004\004\004\001\002\000\006\166\u0262\176" +
    "\u0265\001\ufff7\000\004\011\u025f\001\ufffd\000\002\001\001" +
    "\000\004\002\u025d\001\002\000\164\027\153\030\114\031" +
    "\075\032\216\033\122\034\016\035\210\036\061\037\162" +
    "\040\110\041\051\042\105\043\176\044\100\045\212\046" +
    "\155\047\143\050\136\051\062\052\163\053\031\054\024" +
    "\055\170\056\041\057\073\060\032\061\211\062\125\063" +
    "\022\064\166\065\115\066\131\067\026\070\165\071\156" +
    "\072\207\073\160\074\150\075\204\076\167\077\047\100" +
    "\161\101\140\102\103\110\157\122\117\123\043\124\137" +
    "\125\076\126\201\127\107\131\200\142\012\201\070\217" +
    "\174\220\213\221\102\001\uffe6\000\002\001\uffc6\000\004" +
    "\145\372\001\ufe6a\000\002\001\uffda\000\002\001\uffb2\000" +
    "\002\001\uffa6\000\004\005\u0251\001\002\000\002\001\uffd4" +
    "\000\002\001\uffe2\000\002\001\uffc8\000\004\005\u024f\001" +
    "\002\000\002\001\uffd6\000\044\005\221\006\251\010\237" +
    "\012\256\013\253\014\235\015\260\016\244\017\233\020" +
    "\243\021\255\022\252\023\234\024\241\025\257\216\225" +
    "\222\254\001\002\000\002\001\uffce\000\002\001\uff83\000" +
    "\002\001\uffcf\000\002\001\uffb0\000\006\005\221\216\225" +
    "\001\002\000\002\001\uff82\000\002\001\uffd3\000\002\001" +
    "\uffaa\000\002\001\uffa1\000\002\001\uffdc\000\002\001\uffa7" +
    "\000\002\001\uffdf\000\004\104\u014d\001\ufe6e\000\002\001" +
    "\uffa2\000\002\001\ufe63\000\002\001\uffed\000\002\001\ufffc" +
    "\000\002\001\uffac\000\002\001\uff9c\000\002\001\uffd8\000" +
    "\044\005\221\006\251\010\237\012\256\013\253\014\235" +
    "\015\260\016\244\017\233\020\243\021\255\022\252\023" +
    "\234\024\241\025\257\216\225\222\254\001\002\000\002" +
    "\001\uffd5\000\002\001\uffbf\000\044\005\u013f\006\u0143\010" +
    "\u013e\012\256\013\253\014\235\015\260\016\244\017\233" +
    "\020\243\021\255\022\252\023\234\024\241\025\257\202" +
    "\u0147\222\254\001\ufe40\000\002\001\uffb8\000\002\001\uffc2" +
    "\000\002\001\uff9e\000\002\001\uff8d\000\006\005\221\216" +
    "\225\001\002\000\004\205\u0217\001\ufe68\000\044\005\221" +
    "\006\251\010\237\012\256\013\253\014\235\015\260\016" +
    "\244\017\233\020\243\021\255\022\252\023\234\024\241" +
    "\025\257\216\225\222\254\001\uff13\000\002\001\uffd2\000" +
    "\002\001\uff8e\000\002\001\uffc7\000\002\001\uffa9\000\002" +
    "\001\uff4d\000\002\001\uffb7\000\002\001\uffd0\000\044\005" +
    "\221\006\251\010\237\012\256\013\253\014\235\015\260" +
    "\016\244\017\233\020\243\021\255\022\252\023\234\024" +
    "\241\025\257\216\225\222\254\001\002\000\002\001\uffa4" +
    "\000\002\001\uff9b\000\002\001\ufe64\000\002\001\uff9f\000" +
    "\002\001\uff89\000\002\001\uffaf\000\002\001\uff7e\000\004" +
    "\005\u01e6\001\002\000\002\001\uff9d\000\044\005\221\006" +
    "\251\010\237\012\256\013\253\014\235\015\260\016\244" +
    "\017\233\020\243\021\255\022\252\023\234\024\241\025" +
    "\257\216\225\222\254\001\002\000\002\001\uffbb\000\002" +
    "\001\ufe62\000\004\005\u01d9\001\002\000\002\001\uff8f\000" +
    "\002\001\uffde\000\002\001\uffcb\000\044\005\221\006\251" +
    "\010\237\012\256\013\253\014\235\015\260\016\244\017" +
    "\233\020\243\021\255\022\252\023\234\024\241\025\257" +
    "\216\225\222\254\001\002\000\004\005\u01c4\001\002\000" +
    "\164\027\153\030\114\031\075\032\216\033\122\034\016" +
    "\035\210\036\061\037\162\040\110\041\051\042\105\043" +
    "\176\044\100\045\212\046\155\047\143\050\136\051\062" +
    "\052\163\053\031\054\024\055\170\056\041\057\073\060" +
    "\032\061\211\062\125\063\022\064\166\065\115\066\131" +
    "\067\026\070\165\071\156\072\207\073\160\074\150\075" +
    "\204\076\167\077\047\100\161\101\140\102\103\110\157" +
    "\122\117\123\043\124\137\125\076\126\201\127\107\131" +
    "\200\142\012\201\070\217\174\220\213\221\102\001\uffe7" +
    "\000\002\001\ufe66\000\002\001\uffbe\000\002\001\uffb3\000" +
    "\044\005\221\006\251\010\237\012\256\013\253\014\235" +
    "\015\260\016\244\017\233\020\243\021\255\022\252\023" +
    "\234\024\241\025\257\216\225\222\254\001\002\000\002" +
    "\001\uffdb\000\002\001\uffba\000\002\001\uff15\000\002\001" +
    "\uffb5\000\044\005\u013f\006\u0143\010\u013e\012\256\013\253" +
    "\014\235\015\260\016\244\017\233\020\243\021\255\022" +
    "\252\023\234\024\241\025\257\202\u0147\222\254\001\ufe40" +
    "\000\002\001\uffb4\000\004\005\u01b1\001\002\000\004\007" +
    "\u01ab\001\uffeb\000\002\001\uffae\000\002\001\uffa8\000\002" +
    "\001\uffe0\000\002\001\uff97\000\002\001\ufe65\000\044\005" +
    "\221\006\251\010\237\012\256\013\253\014\235\015\260" +
    "\016\244\017\233\020\243\021\255\022\252\023\234\024" +
    "\241\025\257\216\225\222\254\001\002\000\002\001\uffd9" +
    "\000\002\001\uffb9\000\002\001\uff84\000\002\001\uffa5\000" +
    "\002\001\uffca\000\002\001\uffa3\000\002\001\uffad\000\044" +
    "\005\u013f\006\u0143\010\u013e\012\256\013\253\014\235\015" +
    "\260\016\244\017\233\020\243\021\255\022\252\023\234" +
    "\024\241\025\257\202\u0147\222\254\001\ufe40\000\044\005" +
    "\u013f\006\u0143\010\u013e\012\256\013\253\014\235\015\260" +
    "\016\244\017\233\020\243\021\255\022\252\023\234\024" +
    "\241\025\257\202\u0147\222\254\001\ufe40\000\002\001\uffbc" +
    "\000\006\005\221\216\225\001\002\000\002\001\uffc5\000" +
    "\010\161\u0175\163\u0176\167\u0173\001\uff85\000\006\005\221" +
    "\216\225\001\002\000\002\001\ufe83\000\004\005\u015a\001" +
    "\002\000\002\001\uff96\000\002\001\uff9a\000\064\005\221" +
    "\006\251\010\237\012\256\013\253\014\235\015\260\016" +
    "\244\017\233\020\243\021\255\022\252\023\234\024\241" +
    "\025\257\104\u0117\202\u0120\203\u0121\204\u011e\205\u011f\207" +
    "\u0116\210\u0122\211\u0118\216\225\222\254\001\002\000\002" +
    "\001\uffc1\000\004\104\u014d\001\ufe6e\000\004\005\u0138\001" +
    "\002\000\044\005\221\006\251\010\237\012\256\013\253" +
    "\014\235\015\260\016\244\017\233\020\243\021\255\022" +
    "\252\023\234\024\241\025\257\216\225\222\254\001\002" +
    "\000\002\001\uff95\000\002\001\uffa0\000\002\001\uffd7\000" +
    "\002\001\uffab\000\002\001\uff80\000\002\001\uff8c\000\002" +
    "\001\uff50\000\002\001\uffc3\000\002\001\ufe81\000\002\001" +
    "\ufe67\000\002\001\uffdd\000\002\001\uffcd\000\044\005\221" +
    "\006\251\010\237\012\256\013\253\014\235\015\260\016" +
    "\244\017\233\020\243\021\255\022\252\023\234\024\241" +
    "\025\257\216\225\222\254\001\002\000\002\001\uffc4\000" +
    "\002\001\uffc9\000\002\001\ufee7\000\002\001\uff98\000\012" +
    "\132\334\140\331\144\327\156\330\001\002\000\002\001" +
    "\uff8a\000\002\001\uff7f\000\002\001\uffb1\000\002\001\uffd1" +
    "\000\010\005\221\010\220\216\225\001\002\000\002\001" +
    "\uffbd\000\002\001\uff90\000\006\143\320\153\324\001\ufe2d" +
    "\000\002\001\ufe2f\000\004\203\275\001\ufe26\000\002\001" +
    "\uff91\000\006\005\272\147\273\001\002\000\004\176\231" +
    "\001\uff72\000\002\001\uff73\000\004\166\265\001\uff69\000" +
    "\046\005\221\006\251\010\237\012\256\013\253\014\235" +
    "\015\260\016\244\017\233\020\243\021\255\022\252\023" +
    "\234\024\241\025\257\112\247\216\225\222\254\001\002" +
    "\000\002\001\uff70\000\002\001\ufe0e\000\002\001\ufe10\000" +
    "\002\001\ufe13\000\002\001\ufe1c\000\002\001\ufe1a\000\002" +
    "\001\ufe1b\000\002\001\ufe0f\000\046\005\221\006\251\010" +
    "\237\012\256\013\253\014\235\015\260\016\244\017\233" +
    "\020\243\021\255\022\252\023\234\024\241\025\257\112" +
    "\247\216\225\222\254\001\uff71\000\002\001\ufe0d\000\002" +
    "\001\ufe11\000\002\001\ufe32\000\002\001\ufe33\000\006\164" +
    "\263\177\262\001\002\000\002\001\uff6e\000\002\001\ufe19" +
    "\000\002\001\ufe0b\000\002\001\ufe14\000\002\001\ufe09\000" +
    "\002\001\ufe0c\000\002\001\ufe15\000\002\001\ufe0a\000\002" +
    "\001\ufe12\000\002\001\uff6d\000\002\001\uff6c\000\002\001" +
    "\uff6b\000\002\001\uff6f\000\006\005\221\216\225\001\002" +
    "\000\002\001\uff6a\000\002\001\uff74\000\002\001\uff68\000" +
    "\002\001\ufe38\000\002\001\ufe05\000\002\001\ufe04\000\002" +
    "\001\ufe06\000\020\005\221\006\310\202\304\212\307\213" +
    "\312\214\303\216\225\001\002\000\004\203\275\001\ufe27" +
    "\000\002\001\ufe31\000\002\001\ufe25\000\002\001\ufe24\000" +
    "\002\001\ufe22\000\002\001\ufe17\000\020\005\221\006\310" +
    "\202\304\212\307\213\312\214\303\216\225\001\002\000" +
    "\002\001\ufe1f\000\002\001\ufe20\000\002\001\ufe18\000\002" +
    "\001\ufe1e\000\022\005\221\006\310\202\304\204\314\212" +
    "\307\213\312\214\303\216\225\001\002\000\002\001\ufe16" +
    "\000\002\001\ufe21\000\002\001\ufe23\000\022\005\221\006" +
    "\310\202\304\204\316\212\307\213\312\214\303\216\225" +
    "\001\002\000\002\001\ufe1d\000\006\143\320\153\324\001" +
    "\ufe2e\000\002\001\ufe28\000\002\001\ufe2c\000\004\005\325" +
    "\001\002\000\002\001\ufe30\000\002\001\ufe29\000\002\001" +
    "\ufe2a\000\002\001\ufe2b\000\002\001\uff1a\000\002\001\uff1b" +
    "\000\002\001\uff1c\000\012\132\334\140\331\144\327\156" +
    "\330\001\uff20\000\004\005\336\001\002\000\002\001\uff19" +
    "\000\002\001\uff1f\000\002\001\uff18\000\004\005\340\001" +
    "\uff1d\000\002\001\uff17\000\002\001\uff1e\000\004\005\343" +
    "\001\002\000\020\026\357\107\360\121\351\137\352\140" +
    "\353\156\346\176\354\001\002\000\002\001\ufee1\000\004" +
    "\145\372\001\ufe6a\000\004\005\371\001\002\000\002\001" +
    "\ufee0\000\002\001\ufee3\000\002\001\ufe70\000\044\005\221" +
    "\006\251\010\237\012\256\013\253\014\235\015\260\016" +
    "\244\017\233\020\243\021\255\022\252\023\234\024\241" +
    "\025\257\216\225\222\254\001\002\000\004\005\367\001" +
    "\002\000\044\005\221\006\251\010\237\012\256\013\253" +
    "\014\235\015\260\016\244\017\233\020\243\021\255\022" +
    "\252\023\234\024\241\025\257\216\225\222\254\001\002" +
    "\000\002\001\ufee2\000\002\001\ufedf\000\002\001\ufedd\000" +
    "\002\001\ufe71\000\002\001\ufee5\000\020\026\357\107\360" +
    "\121\351\137\352\140\353\156\346\176\354\001\ufee6\000" +
    "\002\001\ufee4\000\044\005\221\006\251\010\237\012\256" +
    "\013\253\014\235\015\260\016\244\017\233\020\243\021" +
    "\255\022\252\023\234\024\241\025\257\216\225\222\254" +
    "\001\ufedc\000\002\001\ufe35\000\002\001\ufe34\000\002\001" +
    "\ufeda\000\044\005\221\006\251\010\237\012\256\013\253" +
    "\014\235\015\260\016\244\017\233\020\243\021\255\022" +
    "\252\023\234\024\241\025\257\216\225\222\254\001\ufedb" +
    "\000\002\001\ufed9\000\002\001\ufe6b\000\044\005\221\006" +
    "\251\010\237\012\256\013\253\014\235\015\260\016\244" +
    "\017\233\020\243\021\255\022\252\023\234\024\241\025" +
    "\257\216\225\222\254\001\002\000\044\005\221\006\251" +
    "\010\237\012\256\013\253\014\235\015\260\016\244\017" +
    "\233\020\243\021\255\022\252\023\234\024\241\025\257" +
    "\216\225\222\254\001\ufede\000\002\001\uff99\000\046\005" +
    "\221\006\251\010\237\012\256\013\253\014\235\015\260" +
    "\016\244\017\233\020\243\021\255\022\252\023\234\024" +
    "\241\025\257\117\u010d\216\225\222\254\001\002\000\002" +
    "\001\ufec6\000\002\001\ufec3\000\046\005\221\006\251\010" +
    "\237\012\256\013\253\014\235\015\260\016\244\017\233" +
    "\020\243\021\255\022\252\023\234\024\241\025\257\141" +
    "\u0104\216\225\222\254\001\002\000\002\001\ufec5\000\004" +
    "\157\u010c\001\ufe7f\000\006\005\221\216\225\001\002\000" +
    "\004\162\u0108\001\ufebc\000\002\001\ufebe\000\002\001\ufebd" +
    "\000\006\005\221\216\225\001\002\000\002\001\ufebb\000" +
    "\002\001\ufec7\000\002\001\ufe80\000\002\001\ufe7e\000\004" +
    "\112\u0111\001\ufe07\000\002\001\ufec2\000\002\001\ufec4\000" +
    "\046\005\221\006\251\010\237\012\256\013\253\014\235" +
    "\015\260\016\244\017\233\020\243\021\255\022\252\023" +
    "\234\024\241\025\257\170\u0114\216\225\222\254\001\002" +
    "\000\002\001\ufe08\000\002\001\ufec1\000\002\001\ufec0\000" +
    "\002\001\ufebf\000\064\005\221\006\251\010\237\012\256" +
    "\013\253\014\235\015\260\016\244\017\233\020\243\021" +
    "\255\022\252\023\234\024\241\025\257\104\u0117\202\u0120" +
    "\203\u0121\204\u011e\205\u011f\207\u0116\210\u0122\211\u0118\216" +
    "\225\222\254\001\002\000\002\001\ufe48\000\002\001\ufe49" +
    "\000\002\001\ufe44\000\002\001\ufe4a\000\002\001\uff4f\000" +
    "\002\001\ufe4d\000\064\005\221\006\251\010\237\012\256" +
    "\013\253\014\235\015\260\016\244\017\233\020\243\021" +
    "\255\022\252\023\234\024\241\025\257\104\u0117\202\u0120" +
    "\203\u0121\204\u011e\205\u011f\207\u0116\210\u0122\211\u0118\216" +
    "\225\222\254\001\ufe4f\000\010\105\u0125\106\u0124\154\u0127" +
    "\001\uff4e\000\002\001\ufe43\000\002\001\ufe42\000\002\001" +
    "\ufe46\000\002\001\ufe45\000\002\001\ufe47\000\002\001\ufe4b" +
    "\000\002\001\ufe74\000\002\001\ufe72\000\064\005\221\006" +
    "\251\010\237\012\256\013\253\014\235\015\260\016\244" +
    "\017\233\020\243\021\255\022\252\023\234\024\241\025" +
    "\257\104\u0117\202\u0120\203\u0121\204\u011e\205\u011f\207\u0116" +
    "\210\u0122\211\u0118\216\225\222\254\001\002\000\002\001" +
    "\ufe73\000\064\005\221\006\251\010\237\012\256\013\253" +
    "\014\235\015\260\016\244\017\233\020\243\021\255\022" +
    "\252\023\234\024\241\025\257\104\u0117\202\u0120\203\u0121" +
    "\204\u011e\205\u011f\207\u0116\210\u0122\211\u0118\216\225\222" +
    "\254\001\ufe4e\000\002\001\ufe4c\000\002\001\ufeba\000\052" +
    "\005\221\006\251\010\237\012\256\013\253\014\235\015" +
    "\260\016\244\017\233\020\243\021\255\022\252\023\234" +
    "\024\241\025\257\136\u012c\137\u012d\215\u0132\216\225\222" +
    "\254\001\002\000\044\005\221\006\251\010\237\012\256" +
    "\013\253\014\235\015\260\016\244\017\233\020\243\021" +
    "\255\022\252\023\234\024\241\025\257\216\225\222\254" +
    "\001\002\000\006\005\221\216\225\001\002\000\002\001" +
    "\ufeb4\000\002\001\ufeb5\000\002\001\ufeb8\000\010\136\u012c" +
    "\137\u012d\215\u0132\001\ufeb9\000\002\001\ufe7b\000\002\001" +
    "\ufeb7\000\002\001\ufe37\000\006\005\221\216\225\001\ufe78" +
    "\000\002\001\ufe36\000\044\005\221\006\251\010\237\012" +
    "\256\013\253\014\235\015\260\016\244\017\233\020\243" +
    "\021\255\022\252\023\234\024\241\025\257\216\225\222" +
    "\254\001\ufeb6\000\060\005\u013f\006\u0143\010\u013e\012\256" +
    "\013\253\014\235\015\260\016\244\017\233\020\243\021" +
    "\255\022\252\023\234\024\241\025\257\103\u0144\150\u0145" +
    "\151\u013b\152\u0146\160\u0141\202\u0147\206\u0140\222\254\001" +
    "\ufe59\000\002\001\ufe8b\000\002\001\ufe58\000\002\001\ufe54" +
    "\000\002\001\ufe56\000\002\001\ufe39\000\002\001\ufe3c\000" +
    "\002\001\ufe3d\000\002\001\ufe55\000\002\001\ufe51\000\060" +
    "\005\u013f\006\u0143\010\u013e\012\256\013\253\014\235\015" +
    "\260\016\244\017\233\020\243\021\255\022\252\023\234" +
    "\024\241\025\257\103\u0144\150\u0145\151\u013b\152\u0146\160" +
    "\u0141\202\u0147\206\u0140\222\254\001\ufe5a\000\002\001\ufe3b" +
    "\000\002\001\ufe50\000\002\001\ufe52\000\002\001\ufe53\000" +
    "\044\005\u013f\006\u0143\010\u013e\012\256\013\253\014\235" +
    "\015\260\016\244\017\233\020\243\021\255\022\252\023" +
    "\234\024\241\025\257\202\u0147\222\254\001\002\000\002" +
    "\001\ufe3f\000\046\005\u013f\006\u0143\010\u013e\012\256\013" +
    "\253\014\235\015\260\016\244\017\233\020\243\021\255" +
    "\022\252\023\234\024\241\025\257\202\u0147\204\u014b\222" +
    "\254\001\002\000\002\001\ufe3e\000\002\001\ufe3a\000\002" +
    "\001\ufe57\000\002\001\ufe6f\000\044\005\221\006\251\010" +
    "\237\012\256\013\253\014\235\015\260\016\244\017\233" +
    "\020\243\021\255\022\252\023\234\024\241\025\257\216" +
    "\225\222\254\001\002\000\004\200\u0155\001\ufeef\000\002" +
    "\001\ufef2\000\002\001\ufeec\000\002\001\ufeee\000\002\001" +
    "\ufef1\000\004\200\u0155\001\ufef0\000\044\005\221\006\251" +
    "\010\237\012\256\013\253\014\235\015\260\016\244\017" +
    "\233\020\243\021\255\022\252\023\234\024\241\025\257" +
    "\216\225\222\254\001\002\000\002\001\ufeeb\000\002\001" +
    "\ufeed\000\010\105\u0125\106\u0124\154\u0127\001\uff3e\000\002" +
    "\001\uff3f\000\004\145\u015d\001\ufed5\000\002\001\ufed8\000" +
    "\002\001\ufed4\000\014\154\u0169\205\u0162\207\u0165\210\u0167" +
    "\211\u0166\001\ufecf\000\004\145\u015d\001\ufed6\000\002\001" +
    "\ufed2\000\002\001\ufed7\000\002\001\ufed3\000\002\001\ufec9" +
    "\000\014\154\u0169\205\u0162\207\u0165\210\u0167\211\u0166\001" +
    "\ufed0\000\002\001\ufece\000\002\001\ufecb\000\002\001\ufec8" +
    "\000\002\001\ufeca\000\044\005\221\006\251\010\237\012" +
    "\256\013\253\014\235\015\260\016\244\017\233\020\243" +
    "\021\255\022\252\023\234\024\241\025\257\216\225\222" +
    "\254\001\002\000\002\001\ufecc\000\002\001\ufed1\000\002" +
    "\001\ufecd\000\012\005\221\112\u016f\205\u0170\216\225\001" +
    "\002\000\002\001\ufe88\000\002\001\ufeea\000\044\005\221" +
    "\006\251\010\237\012\256\013\253\014\235\015\260\016" +
    "\244\017\233\020\243\021\255\022\252\023\234\024\241" +
    "\025\257\216\225\222\254\001\002\000\044\005\221\006" +
    "\251\010\237\012\256\013\253\014\235\015\260\016\244" +
    "\017\233\020\243\021\255\022\252\023\234\024\241\025" +
    "\257\216\225\222\254\001\002\000\002\001\ufee9\000\002" +
    "\001\ufee8\000\002\001\uff86\000\002\001\uff8b\000\002\001" +
    "\uff87\000\002\001\uff88\000\004\136\u0178\001\uff7c\000\044" +
    "\005\221\006\251\010\237\012\256\013\253\014\235\015" +
    "\260\016\244\017\233\020\243\021\255\022\252\023\234" +
    "\024\241\025\257\216\225\222\254\001\002\000\002\001" +
    "\uff94\000\004\005\u017b\001\uff92\000\002\001\uff93\000\002" +
    "\001\uff7d\000\002\001\uffcc\000\044\005\u013f\006\u0143\010" +
    "\u013e\012\256\013\253\014\235\015\260\016\244\017\233" +
    "\020\243\021\255\022\252\023\234\024\241\025\257\202" +
    "\u0147\222\254\001\ufe41\000\002\001\ufe89\000\004\117\u0183" +
    "\001\ufeb0\000\002\001\ufeb3\000\002\001\ufeb1\000\004\112" +
    "\u0111\001\ufe07\000\004\141\u0186\001\002\000\010\157\u010c" +
    "\162\u0199\171\u0196\001\ufe9f\000\006\005\221\216\225\001" +
    "\002\000\006\115\u018e\120\u018b\001\ufea5\000\002\001\ufea9" +
    "\000\006\005\221\216\225\001\ufeaa\000\002\001\ufea8\000" +
    "\004\143\u0191\001\ufe6c\000\002\001\ufea7\000\006\115\u018e" +
    "\120\u018b\001\ufea6\000\004\143\u0191\001\ufe6c\000\002\001" +
    "\ufea4\000\006\005\221\216\225\001\002\000\002\001\ufe6d" +
    "\000\002\001\ufea1\000\002\001\ufea3\000\006\005\221\216" +
    "\225\001\002\000\002\001\ufea2\000\004\143\u0191\001\ufe6c" +
    "\000\002\001\ufe9a\000\002\001\ufeb2\000\006\005\221\216" +
    "\225\001\002\000\010\157\u010c\162\u0199\171\u0196\001\ufea0" +
    "\000\002\001\ufe9e\000\002\001\ufe9d\000\002\001\ufe9c\000" +
    "\006\005\221\216\225\001\002\000\002\001\ufe9b\000\004" +
    "\104\u014d\001\ufe6e\000\046\005\221\006\251\010\237\012" +
    "\256\013\253\014\235\015\260\016\244\017\233\020\243" +
    "\021\255\022\252\023\234\024\241\025\257\154\u01a2\216" +
    "\225\222\254\001\002\000\002\001\ufeab\000\002\001\ufeae" +
    "\000\046\005\221\006\251\010\237\012\256\013\253\014" +
    "\235\015\260\016\244\017\233\020\243\021\255\022\252" +
    "\023\234\024\241\025\257\154\u01a2\216\225\222\254\001" +
    "\ufeaf\000\002\001\ufeac\000\002\001\ufead\000\002\001\uffea" +
    "\000\002\001\uffee\000\164\027\153\030\114\031\075\032" +
    "\216\033\122\034\016\035\210\036\061\037\162\040\110" +
    "\041\051\042\105\043\176\044\100\045\212\046\155\047" +
    "\143\050\136\051\062\052\163\053\031\054\024\055\170" +
    "\056\041\057\073\060\032\061\211\062\125\063\022\064" +
    "\166\065\115\066\131\067\026\070\165\071\156\072\207" +
    "\073\160\074\150\075\204\076\167\077\047\100\161\101" +
    "\140\102\103\110\157\122\117\123\043\124\137\125\076" +
    "\126\201\127\107\131\200\142\012\201\070\217\174\220" +
    "\213\221\102\001\uffe6\000\004\007\u01ab\001\uffec\000\004" +
    "\167\u01ad\001\uffe3\000\004\126\u01ae\001\002\000\002\001" +
    "\uffe4\000\002\001\uffe5\000\002\001\uffe9\000\002\001\uffe8" +
    "\000\012\103\u01bc\111\u01b7\130\u01b2\136\u01bb\001\ufe96\000" +
    "\002\001\ufe8c\000\002\001\ufe93\000\002\001\ufe90\000\044" +
    "\005\221\006\251\010\237\012\256\013\253\014\235\015" +
    "\260\016\244\017\233\020\243\021\255\022\252\023\234" +
    "\024\241\025\257\216\225\222\254\001\002\000\002\001" +
    "\ufe91\000\002\001\ufe76\000\002\001\ufe95\000\002\001\ufe98" +
    "\000\012\103\u01bc\111\u01b7\130\u01b2\136\u01bb\001\ufe97\000" +
    "\044\005\221\006\251\010\237\012\256\013\253\014\235" +
    "\015\260\016\244\017\233\020\243\021\255\022\252\023" +
    "\234\024\241\025\257\216\225\222\254\001\002\000\044" +
    "\005\ufe75\006\ufe75\010\ufe75\012\ufe75\013\ufe75\014\ufe75\015" +
    "\ufe75\016\ufe75\017\ufe75\020\ufe75\021\ufe75\022\ufe75\023\ufe75" +
    "\024\ufe75\025\ufe75\216\ufe75\222\ufe75\001\ufe8d\000\002\001" +
    "\ufe92\000\002\001\ufe8f\000\002\001\ufe94\000\002\001\ufe8e" +
    "\000\002\001\uffb6\000\002\001\uff67\000\002\001\uffe1\000" +
    "\006\141\u01ca\145\u01c5\001\ufef9\000\044\005\221\006\251" +
    "\010\237\012\256\013\253\014\235\015\260\016\244\017" +
    "\233\020\243\021\255\022\252\023\234\024\241\025\257" +
    "\216\225\222\254\001\002\000\002\001\ufef8\000\006\141" +
    "\u01ca\145\u01c5\001\ufefa\000\002\001\uff81\000\002\001\ufef5" +
    "\000\006\005\221\216\225\001\002\000\002\001\ufef6\000" +
    "\002\001\ufef4\000\002\001\ufef7\000\002\001\ufef3\000\052" +
    "\005\221\006\251\010\237\012\256\013\253\014\235\015" +
    "\260\016\244\017\233\020\243\021\255\022\252\023\234" +
    "\024\241\025\257\137\u012d\205\u01d6\215\u0132\216\225\222" +
    "\254\001\002\000\002\001\uff7b\000\010\137\u012d\205\u01d6" +
    "\215\u0132\001\uff7a\000\002\001\uff79\000\002\001\uff75\000" +
    "\002\001\uff77\000\002\001\uff76\000\044\005\221\006\251" +
    "\010\237\012\256\013\253\014\235\015\260\016\244\017" +
    "\233\020\243\021\255\022\252\023\234\024\241\025\257" +
    "\216\225\222\254\001\002\000\044\005\221\006\251\010" +
    "\237\012\256\013\253\014\235\015\260\016\244\017\233" +
    "\020\243\021\255\022\252\023\234\024\241\025\257\216" +
    "\225\222\254\001\ufe77\000\002\001\uff78\000\002\001\ufe8a" +
    "\000\002\001\uff59\000\016\005\221\006\u01e1\112\u01dc\137" +
    "\u01df\141\u01dd\216\225\001\002\000\002\001\uff51\000\002" +
    "\001\uff52\000\002\001\uff55\000\002\001\uff53\000\002\001" +
    "\uff57\000\002\001\uff54\000\020\005\221\006\u01e1\112\u01dc" +
    "\137\u01df\141\u01dd\215\u0132\216\225\001\ufe7c\000\002\001" +
    "\uff58\000\002\001\ufe7d\000\002\001\uff56\000\012\103\u01bc" +
    "\111\u01b7\130\u01b2\136\u01bb\001\ufe96\000\002\001\ufe99\000" +
    "\004\112\u01ee\001\002\000\002\001\uff23\000\004\137\u012d" +
    "\001\ufe79\000\004\215\u0132\001\ufe7c\000\002\001\ufe7a\000" +
    "\002\001\uff22\000\044\005\221\006\251\010\237\012\256" +
    "\013\253\014\235\015\260\016\244\017\233\020\243\021" +
    "\255\022\252\023\234\024\241\025\257\216\225\222\254" +
    "\001\002\000\002\001\uff21\000\066\005\221\006\251\010" +
    "\237\012\256\013\253\014\235\015\260\016\244\017\233" +
    "\020\243\021\255\022\252\023\234\024\241\025\257\104" +
    "\u0117\155\u01f2\202\u0120\203\u0121\204\u011e\205\u011f\207\u0116" +
    "\210\u0122\211\u0118\216\225\222\254\001\002\000\012\105" +
    "\u0125\106\u0124\154\u0127\173\u01f6\001\uff46\000\002\001\uff48" +
    "\000\002\001\uff4c\000\002\001\uff4b\000\002\001\uff4a\000" +
    "\064\005\221\006\251\010\237\012\256\013\253\014\235" +
    "\015\260\016\244\017\233\020\243\021\255\022\252\023" +
    "\234\024\241\025\257\104\u0117\202\u0120\203\u0121\204\u011e" +
    "\205\u011f\207\u0116\210\u0122\211\u0118\216\225\222\254\001" +
    "\002\000\002\001\uff49\000\010\105\u0125\106\u0124\154\u0127" +
    "\001\uff47\000\044\005\221\006\251\010\237\012\256\013" +
    "\253\014\235\015\260\016\244\017\233\020\243\021\255" +
    "\022\252\023\234\024\241\025\257\216\225\222\254\001" +
    "\uff14\000\004\173\u01fc\001\uff0f\000\002\001\uff12\000\004" +
    "\005\u0215\001\002\000\016\103\u0205\134\u0203\172\u0204\174" +
    "\u0206\175\u0207\200\u0208\001\uff0b\000\044\005\221\006\251" +
    "\010\237\012\256\013\253\014\235\015\260\016\244\017" +
    "\233\020\243\021\255\022\252\023\234\024\241\025\257" +
    "\216\225\222\254\001\uff10\000\002\001\uff0d\000\002\001" +
    "\uff0a\000\002\001\uff16\000\016\103\u0205\134\u0203\172\u0204" +
    "\174\u0206\175\u0207\200\u0208\001\uff0c\000\002\001\uff08\000" +
    "\006\103\u0213\111\u0212\001\002\000\050\005\221\006\251" +
    "\010\237\012\256\013\253\014\235\015\260\016\244\017" +
    "\233\020\243\021\255\022\252\023\234\024\241\025\257" +
    "\112\u020b\136\u020a\216\225\222\254\001\002\000\002\001" +
    "\uff07\000\064\005\221\006\251\010\237\012\256\013\253" +
    "\014\235\015\260\016\244\017\233\020\243\021\255\022" +
    "\252\023\234\024\241\025\257\104\u0117\202\u0120\203\u0121" +
    "\204\u011e\205\u011f\207\u0116\210\u0122\211\u0118\216\225\222" +
    "\254\001\002\000\050\005\221\006\251\010\237\012\256" +
    "\013\253\014\235\015\260\016\244\017\233\020\243\021" +
    "\255\022\252\023\234\024\241\025\257\112\u020b\136\u020a" +
    "\216\225\222\254\001\002\000\002\001\uff00\000\002\001" +
    "\ufefd\000\002\001\ufefc\000\002\001\ufefe\000\050\005\221" +
    "\006\251\010\237\012\256\013\253\014\235\015\260\016" +
    "\244\017\233\020\243\021\255\022\252\023\234\024\241" +
    "\025\257\112\u020b\136\u020a\216\225\222\254\001\uff05\000" +
    "\002\001\ufeff\000\010\105\u0125\106\u0124\154\u0127\001\uff06" +
    "\000\050\005\221\006\251\010\237\012\256\013\253\014" +
    "\235\015\260\016\244\017\233\020\243\021\255\022\252" +
    "\023\234\024\241\025\257\112\u020b\136\u020a\216\225\222" +
    "\254\001\uff04\000\002\001\uff03\000\002\001\uff02\000\002" +
    "\001\uff01\000\002\001\uff09\000\002\001\uff0e\000\002\001" +
    "\uff11\000\002\001\ufe69\000\004\005\u0219\001\002\000\002" +
    "\001\uff44\000\006\005\u021b\116\u021e\001\uff41\000\002\001" +
    "\uff43\000\002\001\uff42\000\002\001\uff45\000\044\005\221" +
    "\006\251\010\237\012\256\013\253\014\235\015\260\016" +
    "\244\017\233\020\243\021\255\022\252\023\234\024\241" +
    "\025\257\216\225\222\254\001\002\000\002\001\uff40\000" +
    "\004\207\u0222\001\002\000\002\001\uff66\000\050\005\221" +
    "\006\251\010\237\012\256\013\253\014\235\015\260\016" +
    "\244\017\233\020\243\021\255\022\252\023\234\024\241" +
    "\025\257\202\u0227\204\u0226\216\225\222\254\001\002\000" +
    "\052\005\221\006\251\010\237\012\256\013\253\014\235" +
    "\015\260\016\244\017\233\020\243\021\255\022\252\023" +
    "\234\024\241\025\257\202\u0227\204\u0226\215\u0132\216\225" +
    "\222\254\001\uff5e\000\002\001\uff64\000\002\001\uff62\000" +
    "\002\001\uff60\000\002\001\uff61\000\002\001\uff5d\000\002" +
    "\001\uff63\000\002\001\uff5b\000\004\215\u0132\001\uff5f\000" +
    "\002\001\uff65\000\002\001\uff5c\000\002\001\uffc0\000\044" +
    "\005\221\006\251\010\237\012\256\013\253\014\235\015" +
    "\260\016\244\017\233\020\243\021\255\022\252\023\234" +
    "\024\241\025\257\216\225\222\254\001\uff5a\000\044\005" +
    "\221\006\251\010\237\012\256\013\253\014\235\015\260" +
    "\016\244\017\233\020\243\021\255\022\252\023\234\024" +
    "\241\025\257\216\225\222\254\001\002\000\004\205\u0232" +
    "\001\002\000\006\005\221\216\225\001\002\000\006\005" +
    "\221\216\225\001\uff24\000\010\005\221\165\u0237\216\225" +
    "\001\uff3a\000\002\001\uff3d\000\002\001\uff3c\000\050\005" +
    "\221\006\251\010\237\012\256\013\253\014\235\015\260" +
    "\016\244\017\233\020\243\021\255\022\252\023\234\024" +
    "\241\025\257\104\u0238\112\u023c\216\225\222\254\001\002" +
    "\000\002\001\uff34\000\002\001\uff39\000\002\001\uff36\000" +
    "\002\001\uff37\000\002\001\uff35\000\050\005\221\006\251" +
    "\010\237\012\256\013\253\014\235\015\260\016\244\017" +
    "\233\020\243\021\255\022\252\023\234\024\241\025\257" +
    "\104\u0238\112\u023c\216\225\222\254\001\uff3b\000\002\001" +
    "\uff38\000\072\005\221\006\251\010\237\012\256\013\253" +
    "\014\235\015\260\016\244\017\233\020\243\021\255\022" +
    "\252\023\234\024\241\025\257\103\u024b\104\u024c\111\u0242" +
    "\112\u0246\113\u0244\114\u024d\133\u0245\146\u0243\165\u024a\171" +
    "\u0240\205\u0249\216\225\222\254\001\002\000\002\001\uff28" +
    "\000\072\005\221\006\251\010\237\012\256\013\253\014" +
    "\235\015\260\016\244\017\233\020\243\021\255\022\252" +
    "\023\234\024\241\025\257\103\u024b\104\u024c\111\u0242\112" +
    "\u0246\113\u0244\114\u024d\133\u0245\146\u0243\165\u024a\171\u0240" +
    "\205\u0249\216\225\222\254\001\uff33\000\002\001\uff2e\000" +
    "\002\001\uff2c\000\002\001\uff2a\000\002\001\uff2b\000\002" +
    "\001\uff2f\000\002\001\uff25\000\002\001\uff32\000\002\001" +
    "\uff29\000\002\001\uff27\000\002\001\uff2d\000\002\001\uff30" +
    "\000\002\001\uff26\000\002\001\uff31\000\006\141\u01ca\145" +
    "\u01c5\001\ufef9\000\002\001\ufefb\000\010\135\u0255\152\u0259" +
    "\206\u0256\001\ufe60\000\004\005\u0251\001\ufe87\000\002\001" +
    "\ufe86\000\002\001\ufe85\000\002\001\ufe5b\000\002\001\ufe5d" +
    "\000\002\001\ufe5f\000\002\001\ufe84\000\002\001\ufe5c\000" +
    "\010\135\u0255\152\u0259\206\u0256\001\ufe61\000\002\001\ufe5e" +
    "\000\002\001\ufe82\000\002\001\000\000\002\001\uffff\000" +
    "\004\005\u0260\001\002\000\004\126\u0261\001\002\000\002" +
    "\001\ufffe\000\044\005\221\006\251\010\237\012\256\013" +
    "\253\014\235\015\260\016\244\017\233\020\243\021\255" +
    "\022\252\023\234\024\241\025\257\216\225\222\254\001" +
    "\002\000\002\001\ufffb\000\002\001\ufff6\000\004\005\u026b" +
    "\001\ufff1\000\002\001\ufffa\000\006\166\u0262\176\u0265\001" +
    "\ufff8\000\002\001\ufff5\000\004\126\u026a\001\002\000\002" +
    "\001\ufff9\000\002\001\ufff0\000\002\001\ufff4\000\004\005" +
    "\u026e\001\ufff2\000\002\001\uffef\000\002\001\ufff3" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u026d\000\012\002\004\004\007\154\006\155\005\001" +
    "\001\000\012\203\u0262\206\u0265\207\u0266\210\u0263\001\001" +
    "\000\004\003\u025d\001\001\000\002\001\001\000\002\001" +
    "\001\000\236\005\044\020\034\033\172\041\123\051\143" +
    "\061\213\103\170\167\131\170\043\174\115\175\017\176" +
    "\134\177\037\211\054\212\127\213\013\214\141\215\045" +
    "\216\117\217\145\220\036\221\076\222\132\223\163\224" +
    "\065\225\112\226\057\227\064\230\174\231\110\232\176" +
    "\237\010\240\062\250\103\251\033\252\055\256\014\257" +
    "\151\260\216\261\073\262\100\263\120\264\205\265\056" +
    "\266\133\267\146\271\105\274\153\305\171\306\047\307" +
    "\024\310\027\311\066\312\020\313\041\314\070\321\214" +
    "\322\071\323\026\324\204\325\063\326\022\327\051\330" +
    "\202\331\032\334\016\335\035\336\053\337\052\340\012" +
    "\341\126\342\125\343\111\344\150\345\144\346\201\347" +
    "\122\350\140\001\001\000\002\001\001\000\004\152\u025b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\355\u0252\356\u0251\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\363\u023e\364\237\365\244\366\235" +
    "\370\245\371\222\375\221\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\025\u0234\370\270\371\222\372\u0133\373\u0233\375\221\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\150\u022f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\363\364\364\237\365\244\366\235\370\245\371\222\374" +
    "\u022e\375\221\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\364\u013c\377\u0147\u0100\u017d\u0101\u022d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\012\u0220\370\270\371\222\372\u021f\375" +
    "\221\001\001\000\004\153\u0217\001\001\000\024\241\u01f9" +
    "\242\u01f8\363\u01fa\364\237\365\244\366\235\370\245\371" +
    "\222\375\221\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\u0107\u01ef\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\031\u01e8" +
    "\032\u01e9\363\u01e7\364\237\365\244\366\235\370\245\371" +
    "\222\375\221\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\021\u01d9\363\u01da\364\237\365\244\366" +
    "\235\370\245\371\222\375\221\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\007\u01cf\363\364" +
    "\364\237\365\244\366\235\370\245\371\222\374\u01ce\375" +
    "\221\001\001\000\002\001\001\000\226\020\034\033\172" +
    "\041\123\051\143\061\213\103\170\175\u01c2\176\134\177" +
    "\037\211\054\212\127\213\013\214\141\215\045\216\117" +
    "\217\145\220\036\221\076\222\132\223\163\224\065\225" +
    "\112\226\057\227\064\230\174\231\110\232\176\237\010" +
    "\240\062\250\103\251\033\252\055\256\014\257\151\260" +
    "\216\261\073\262\100\263\120\264\205\265\056\266\133" +
    "\267\146\271\105\274\153\305\171\306\047\307\024\310" +
    "\027\311\066\312\020\313\041\314\070\321\214\322\071" +
    "\323\026\324\204\325\063\326\022\327\051\330\202\331" +
    "\032\334\016\335\035\336\053\337\052\340\012\341\126" +
    "\342\125\343\111\344\150\345\144\346\201\347\122\350" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\363\u01c1\364\237\365\244\366\235\370" +
    "\245\371\222\375\221\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\364" +
    "\u013c\377\u0147\u0100\u017d\u0101\u01c0\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\164\u01a7\165\u01a9\166\u01a6\171" +
    "\u01a8\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\107" +
    "\u0180\363\u017f\364\237\365\244\366\235\370\245\371\222" +
    "\375\221\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\364\u013c\377\u0147\u0100" +
    "\u017d\u0101\u017e\001\001\000\012\364\u013c\377\u0147\u0100\u017d" +
    "\u0101\u017c\001\001\000\002\001\001\000\012\370\270\371" +
    "\222\372\u0176\375\221\001\001\000\002\001\001\000\004" +
    "\173\u0173\001\001\000\016\047\u016c\370\270\371\222\372" +
    "\u0133\373\u016b\375\221\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\024" +
    "\u0158\364\237\365\u0118\366\235\371\u0122\375\221\u0102\u0157" +
    "\u0103\u011b\u0104\u011a\001\001\000\002\001\001\000\004\150" +
    "\u014d\001\001\000\002\001\001\000\024\104\u0129\363\364" +
    "\364\237\365\244\366\235\370\245\371\222\374\u012a\375" +
    "\221\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\u0106\u0114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\072\374\073\u0100\075\376\076\375\363\377" +
    "\364\237\365\244\366\235\370\245\371\222\375\221\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\u0108\341" +
    "\001\001\000\002\001\001\000\010\352\331\353\334\354" +
    "\332\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\304\225\370\223\371" +
    "\222\375\221\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\357\322\360\316\361\320\362\321\001\001\000" +
    "\002\001\001\000\010\156\276\157\277\162\275\001\001" +
    "\000\002\001\001\000\004\376\273\001\001\000\006\275" +
    "\227\276\226\001\001\000\002\001\001\000\006\277\266" +
    "\300\265\001\001\000\024\301\241\302\231\363\247\364" +
    "\237\365\244\366\235\370\245\371\222\375\221\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\302\263\363\247\364" +
    "\237\365\244\366\235\370\245\371\222\375\221\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\303\260\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\370\270" +
    "\371\222\372\267\375\221\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\160" +
    "\310\161\301\367\304\370\305\371\222\375\221\001\001" +
    "\000\004\157\300\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\160\314\161\301\367\304\370\305\371\222\375" +
    "\221\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\161\312\367\304\370" +
    "\305\371\222\375\221\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\161\312\367\304\370" +
    "\305\371\222\375\221\001\001\000\002\001\001\000\006" +
    "\361\325\362\321\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\353\340\354\332" +
    "\001\001\000\004\351\336\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\052" +
    "\361\053\360\054\347\055\354\056\343\057\346\060\355" +
    "\136\344\001\001\000\002\001\001\000\004\152\372\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\363\364\364\237\365\244\366" +
    "\235\370\245\371\222\374\367\375\221\001\001\000\002" +
    "\001\001\000\022\363\364\364\237\365\244\366\235\370" +
    "\245\371\222\374\363\375\221\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\053\362\054\347\055\354\056\343" +
    "\057\346\060\355\136\344\001\001\000\002\001\001\000" +
    "\020\363\365\364\237\365\244\366\235\370\245\371\222" +
    "\375\221\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\363\365\364\237\365\244\366\235" +
    "\370\245\371\222\375\221\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\363\364\364\237\365\244\366\235" +
    "\370\245\371\222\374\373\375\221\001\001\000\020\363" +
    "\365\364\237\365\244\366\235\370\245\371\222\375\221" +
    "\001\001\000\002\001\001\000\022\077\u010e\363\u010d\364" +
    "\237\365\244\366\235\370\245\371\222\375\221\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\074\u0102\075" +
    "\u0101\076\375\363\377\364\237\365\244\366\235\370\245" +
    "\371\222\375\221\001\001\000\002\001\001\000\006\315" +
    "\u0109\316\u010a\001\001\000\012\370\270\371\222\372\u0104" +
    "\375\221\001\001\000\006\101\u0105\102\u0106\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\370\270\371\222" +
    "\372\u0108\375\221\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\163\u010f" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\100" +
    "\u0111\363\u0112\364\237\365\244\366\235\370\245\371\222" +
    "\375\221\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\233\u0119\364\237" +
    "\365\u0118\366\235\371\u0122\375\221\u0102\u011c\u0103\u011b\u0104" +
    "\u011a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\364\237\365\u0118\366\235\371\u0122\375\221" +
    "\u0104\u0128\001\001\000\004\134\u0125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\364\237\365\u0118\366\235\371\u0122" +
    "\375\221\u0103\u0127\u0104\u011a\001\001\000\002\001\001\000" +
    "\016\364\237\365\u0118\366\235\371\u0122\375\221\u0104\u0128" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\105" +
    "\u0130\106\u012f\140\u012e\320\u012d\363\365\364\237\365\244" +
    "\366\235\370\245\371\222\375\221\001\001\000\022\363" +
    "\364\364\237\365\244\366\235\370\245\371\222\374\u0136" +
    "\375\221\001\001\000\014\370\270\371\222\372\u0133\373" +
    "\u0134\375\221\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\106\u0132\140\u012e\320\u012d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\370\270\371\222\372\u0135\375\221\001\001\000" +
    "\002\001\001\000\020\363\365\364\237\365\244\366\235" +
    "\370\245\371\222\375\221\001\001\000\014\145\u0138\146" +
    "\u0141\147\u0139\364\u013c\377\u013b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\147\u014b\364\u013c\377" +
    "\u013b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\364\u013c\377\u0147\u0100" +
    "\u0148\001\001\000\002\001\001\000\006\364\u013c\377\u0149" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\042\u014f\363\u014e\364\237" +
    "\365\244\366\235\370\245\371\222\375\221\001\001\000" +
    "\012\043\u0152\044\u0153\045\u0151\046\u0150\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\045\u0156\046\u0150\001\001\000\020\363\u0155" +
    "\364\237\365\244\366\235\370\245\371\222\375\221\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\134\u0125" +
    "\001\001\000\002\001\001\000\014\062\u015a\063\u015f\064" +
    "\u015d\065\u015b\066\u015e\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\067\u0167\070\u0162\071\u0163\001\001\000" +
    "\006\065\u0160\066\u015e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\071" +
    "\u016a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\363\u0169\364\237\365" +
    "\244\366\235\370\245\371\222\375\221\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\050" +
    "\u016d\370\270\371\222\372\u0135\375\221\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\363\u0171\364\237\365" +
    "\244\366\235\370\245\371\222\375\221\001\001\000\020" +
    "\363\u0170\364\237\365\244\366\235\370\245\371\222\375" +
    "\221\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\u0178\001\001\000\020\363\u0179\364\237" +
    "\365\244\366\235\370\245\371\222\375\221\001\001\000" +
    "\002\001\001\000\004\270\u017b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\364\u013c\377" +
    "\u0149\001\001\000\002\001\001\000\006\110\u0183\114\u0181" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\163" +
    "\u019f\001\001\000\004\111\u0184\001\001\000\012\122\u0197" +
    "\123\u0199\124\u019a\316\u0196\001\001\000\016\112\u0188\113" +
    "\u0187\370\270\371\222\372\u0186\375\221\001\001\000\010" +
    "\117\u018b\120\u018c\121\u018e\001\001\000\002\001\001\000" +
    "\014\113\u0189\370\270\371\222\372\u0186\375\221\001\001" +
    "\000\002\001\001\000\004\151\u0193\001\001\000\002\001" +
    "\001\000\004\121\u0192\001\001\000\004\151\u018f\001\001" +
    "\000\002\001\001\000\012\370\270\371\222\372\u0191\375" +
    "\221\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\370\270\371\222\372\u0194\375\221\001" +
    "\001\000\002\001\001\000\004\151\u019d\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\370\270\371\222\372" +
    "\u019c\375\221\001\001\000\006\124\u019b\316\u0196\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\370\270\371\222\372\u019e\375\221\001\001\000\002" +
    "\001\001\000\004\150\u01a0\001\001\000\024\115\u01a3\116" +
    "\u01a2\363\u01a4\364\237\365\244\366\235\370\245\371\222" +
    "\375\221\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\116\u01a5\363\u01a4\364\237\365\244\366\235\370\245" +
    "\371\222\375\221\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\232\020\034" +
    "\033\172\041\123\051\143\061\213\103\170\170\u01af\174" +
    "\115\175\017\176\134\177\037\211\054\212\127\213\013" +
    "\214\141\215\045\216\117\217\145\220\036\221\076\222" +
    "\132\223\163\224\065\225\112\226\057\227\064\230\174" +
    "\231\110\232\176\237\010\240\062\250\103\251\033\252" +
    "\055\256\014\257\151\260\216\261\073\262\100\263\120" +
    "\264\205\265\056\266\133\267\146\271\105\274\153\305" +
    "\171\306\047\307\024\310\027\311\066\312\020\313\041" +
    "\314\070\321\214\322\071\323\026\324\204\325\063\326" +
    "\022\327\051\330\202\331\032\334\016\335\035\336\053" +
    "\337\052\340\012\341\126\342\125\343\111\344\150\345" +
    "\144\346\201\347\122\350\140\001\001\000\006\166\u01ae" +
    "\171\u01a8\001\001\000\004\172\u01ab\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\125\u01b8\126\u01b9\127\u01b7\130" +
    "\u01b2\131\u01bc\132\u01b5\133\u01b3\135\u01b4\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\363" +
    "\u01bf\364\237\365\244\366\235\370\245\371\222\375\221" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\127\u01be\130\u01b2\131\u01bc" +
    "\132\u01b5\133\u01b3\135\u01b4\001\001\000\020\363\u01bd\364" +
    "\237\365\244\366\235\370\245\371\222\375\221\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\034\u01c7\035\u01c6\036" +
    "\u01c5\037\u01ca\040\u01c8\001\001\000\020\363\u01cd\364\237" +
    "\365\244\366\235\370\245\371\222\375\221\001\001\000" +
    "\002\001\001\000\010\036\u01cc\037\u01ca\040\u01c8\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\370\270\371" +
    "\222\372\u01cb\375\221\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\010" +
    "\u01d0\011\u01d1\140\u01d3\141\u01d4\320\u01d2\363\365\364\237" +
    "\365\244\366\235\370\245\371\222\375\221\001\001\000" +
    "\002\001\001\000\012\011\u01d7\140\u01d3\141\u01d4\320\u01d2" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\363\364\364\237\365\244" +
    "\366\235\370\245\371\222\374\u01d6\375\221\001\001\000" +
    "\020\363\365\364\237\365\244\366\235\370\245\371\222" +
    "\375\221\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\022\u01e1\023\u01df\370\u01dd\371\222" +
    "\375\221\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\023\u01e4\317\u01e2\320\u01e3\370\u01dd\371" +
    "\222\375\221\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\125\u01e6\126\u01b9\127\u01b7\130" +
    "\u01b2\131\u01bc\132\u01b5\133\u01b3\135\u01b4\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\137" +
    "\u01ea\140\u01eb\001\001\000\006\317\u01ec\320\u01e3\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\363\u01ee\364" +
    "\237\365\244\366\235\370\245\371\222\375\221\001\001" +
    "\000\002\001\001\000\030\234\u01f2\235\u01f3\236\u01f4\364" +
    "\237\365\u0118\366\235\371\u0122\375\221\u0102\u01f0\u0103\u011b" +
    "\u0104\u011a\001\001\000\006\134\u0125\333\u01f6\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\364\237\365\u0118\366\235\371\u0122\375" +
    "\221\u0102\u01f7\u0103\u011b\u0104\u011a\001\001\000\002\001\001" +
    "\000\004\134\u0125\001\001\000\020\363\u0215\364\237\365" +
    "\244\366\235\370\245\371\222\375\221\001\001\000\006" +
    "\243\u01fc\244\u01fd\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\245\u0200\246\u0201\247\u01ff\001\001\000\020" +
    "\363\u01fe\364\237\365\244\366\235\370\245\371\222\375" +
    "\221\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\247\u0213\001\001\000\002\001\001\000" +
    "\004\200\u0210\001\001\000\024\201\u020f\202\u0208\363\u020b" +
    "\364\237\365\244\366\235\370\245\371\222\375\221\001" +
    "\001\000\002\001\001\000\022\364\237\365\u0118\366\235" +
    "\371\u0122\375\221\u0102\u020e\u0103\u011b\u0104\u011a\001\001\000" +
    "\024\201\u020c\202\u0208\363\u020b\364\237\365\244\366\235" +
    "\370\245\371\222\375\221\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\202\u020d\363\u020b\364\237\365\244\366\235\370\245\371" +
    "\222\375\221\001\001\000\002\001\001\000\004\134\u0125" +
    "\001\001\000\022\202\u020d\363\u020b\364\237\365\244\366" +
    "\235\370\245\371\222\375\221\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\253\u0219\001\001\000\002\001\001\000\006\254\u021c\255" +
    "\u021b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\363\u021e\364\237\365\244\366\235\370" +
    "\245\371\222\375\221\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\013\u0222\014\u0223\363" +
    "\u0224\364\237\365\244\366\235\370\245\371\222\375\221" +
    "\001\001\000\032\014\u0228\015\u022b\016\u022a\017\u0227\320" +
    "\u0229\363\u0224\364\237\365\244\366\235\370\245\371\222" +
    "\375\221\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\u022c\320\u0229\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\363\365\364\237\365\244\366\235\370\245\371" +
    "\222\375\221\001\001\000\020\363\u0230\364\237\365\244" +
    "\366\235\370\245\371\222\375\221\001\001\000\002\001" +
    "\001\000\014\370\270\371\222\372\u0133\373\u0232\375\221" +
    "\001\001\000\012\370\270\371\222\372\u0135\375\221\001" +
    "\001\000\014\026\u0235\370\270\371\222\372\u0135\375\221" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\027" +
    "\u023c\030\u0238\364\237\365\u0239\366\235\370\u023a\371\222" +
    "\375\221\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\030\u023d\364\237\365\u0239\366\235\370\u023a\371\222\375" +
    "\221\001\001\000\002\001\001\000\024\272\u0240\273\u0247" +
    "\363\u0246\364\237\365\244\366\235\370\245\371\222\375" +
    "\221\001\001\000\002\001\001\000\022\273\u024d\363\u0246" +
    "\364\237\365\244\366\235\370\245\371\222\375\221\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\034\u024f\035\u01c6\036\u01c5\037\u01ca\040\u01c8" +
    "\001\001\000\002\001\001\000\010\142\u0257\143\u0259\144" +
    "\u0256\001\001\000\004\355\u0253\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\144\u025a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\363\u026e\364\237\365" +
    "\244\366\235\370\245\371\222\375\221\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\204\u026b\205\u026c\001" +
    "\001\000\004\u0105\u0268\001\001\000\004\210\u0267\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ZCCode$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ZCCode$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ZCCode$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

  action_obj.initActionClass();

    }


   Module        module   = ModulesFactory.getDefaultModule();
   Summary       summary  = module.getSummary();
   Configuration cfg      = Configuration.getInstance();
   ParserInfo    info     = ParserInfo.getInstance();
             
   public void syntax_error(Symbol token) throws ParseException {
          info.syntax_error(token);
   }

   public void unrecovered_syntax_error(Symbol token) throws ParseException {
      info.unrecovered_syntax_error(token);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ZCCode$actions {


   Module          module   = null;
   Summary         summary  = null;
   Persistence     fichero  = null;
   ZCCCode         code     = null;
   Sections        sections = null;
   ParserInfo      info     = ParserInfo.getInstance();
      
   Variable    currVar  = null;
   Statement lastStmt = null;  // Ultima instruccion
   Statement currStmt = null;  // Instruccion en proceso
   
   boolean   hasEndProgram = false; // Hay STOPRUN o GOBACK?
    
   boolean master     = false;  // El fichero es el maestro?   
   int     numFillers = 0;
   
   // Pila para EVALUATE e IF
   Stack<Statement> stack = new Stack<Statement>();
          
   public void initActionClass() {
      module = ModulesFactory.getMainModule();
      summary = module.getSummary();
      sections = module.getSections();
      code = new ZCCCode(module);
   }

   public String getSymbolName(Symbol s)    { return (String) s.value; }
   public int    getSymbolLine(Symbol s)    { return (int)    s.left;  }
   
   public void debug(String txt) { 
      System.err.println(txt); 
   }
   public void print(String txt) { 
      System.out.println(txt); 
   }


  private final ZCCode parser;

  /** Constructor */
  CUP$ZCCode$actions(ZCCode parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ZCCode$do_action(
    int                        CUP$ZCCode$act_num,
    java_cup.runtime.lr_parser CUP$ZCCode$parser,
    java.util.Stack            CUP$ZCCode$stack,
    int                        CUP$ZCCode$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ZCCode$result;

      /* select the action based on the action number */
      switch (CUP$ZCCode$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 509: // function_name ::= LENGTH 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("function_name",252, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 508: // function_name ::= ID 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("function_name",252, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 507: // function ::= FUNCTION function_name 
            {
              Symbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = f; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("function",251, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 506: // by_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("by_opt",113, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 505: // by_opt ::= BY 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("by_opt",113, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 504: // figurative ::= DFHCICS 
            {
              SymbolExt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",242, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 503: // figurative ::= NULL 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",242, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 502: // figurative ::= KANJI 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",242, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 501: // figurative ::= NUMERIC 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",242, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 500: // figurative ::= ALPHANUMERIC 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",242, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 499: // figurative ::= ALPHABETIC 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",242, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 498: // figurative ::= NEGATIVE 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",242, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 497: // figurative ::= POSITIVE 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",242, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 496: // figurative ::= QUOTE 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",242, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 495: // figurative ::= LOWVAL 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",242, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 494: // figurative ::= HIGHVAL 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",242, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 493: // figurative ::= ZERO 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",242, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 492: // figurative ::= SPACES 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",242, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 491: // operadores ::= POWER 
            {
              Symbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = p; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("operadores",245, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 490: // operadores ::= MULT 
            {
              Symbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = p; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("operadores",245, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // operadores ::= PLUS 
            {
              Symbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = p; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("operadores",245, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // constante ::= NUMERO 
            {
              SymbolExt RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol n = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(n); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("constante",244, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // constante ::= LITERAL 
            {
              SymbolExt RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol l = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(l); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("constante",244, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // constantes ::= figurative 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt f = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 f.setId(ZCZSym.FIGURATIVE); RESULT = f; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("constantes",243, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // constantes ::= constante 
            {
              SymbolExt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt c = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("constantes",243, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // ind_item ::= LPAR ind_items RPAR 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("ind_item",111, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // ind_item ::= NUMERO 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("ind_item",111, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // ind_item ::= operadores 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("ind_item",111, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // ind_item ::= ident 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("ind_item",111, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // ind_items ::= ind_items ind_item 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("ind_items",110, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // ind_items ::= ind_item 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("ind_items",110, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // indice ::= LPARID ind_items RPAR 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("indice",109, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // lst_indices ::= lst_indices indice 
            {
              Statement RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("lst_indices",112, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // lst_indices ::= indice 
            {
              Statement RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("lst_indices",112, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // indices_opt ::= 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("indices_opt",108, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // indices_opt ::= lst_indices 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("indices_opt",108, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // padre_indicator ::= IN 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("padre_indicator",240, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // padre_indicator ::= OF 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("padre_indicator",240, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // padre ::= padre_indicator ID 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("padre",239, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // padres ::= padres padre 
            {
              SymbolExt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		SymbolExt p = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = p.addParent(i);   
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("padres",238, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // padres ::= padre 
            {
              SymbolExt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(p); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("padres",238, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // padres_lst ::= 
            {
              SymbolExt RESULT =null;
		 RESULT = null; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("padres_lst",237, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // padres_lst ::= padres 
            {
              SymbolExt RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt p = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = p;    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("padres_lst",237, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // ident_base ::= function 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f);    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("ident_base",247, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // ident_base ::= ID padres_lst 
            {
              SymbolExt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt s = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(i, s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("ident_base",247, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // ident ::= ident_base indices_opt 
            {
              SymbolExt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = i;    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("ident",246, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // rvalue ::= constantes 
            {
              SymbolExt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt c = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("rvalue",241, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // rvalue ::= ident 
            {
              SymbolExt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = i;  code.setVarRead(i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("rvalue",241, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // rvalue_list ::= rvalue_list rvalue 
            {
              SymbolExtList RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("rvalue_list",250, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // rvalue_list ::= rvalue 
            {
              SymbolExtList RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("rvalue_list",250, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // lvalue_list ::= lvalue_list lvalue 
            {
              SymbolExtList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		SymbolExtList l = (SymbolExtList)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l.add(i);       
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("lvalue_list",249, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // lvalue_list ::= lvalue 
            {
              SymbolExtList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExtList(i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("lvalue_list",249, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // lvalue ::= ident 
            {
              SymbolExt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = i; code.setVarWrite(i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("lvalue",248, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // token ::= figurative 
            {
              Tokens RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt f = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("token",253, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // token ::= LPAR tokens RPAR 
            {
              Tokens RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new Tokens(t); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("token",253, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // token ::= NUMERO 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("token",253, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // token ::= LITERAL 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("token",253, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // token ::= ID 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("token",253, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // tokens ::= tokens token 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l.add(t); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("tokens",254, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // tokens ::= token 
            {
              Tokens RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = t;        
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("tokens",254, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // optTokens ::= 
            {
              Tokens RESULT =null;
		 RESULT = new Tokens();    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("optTokens",255, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // optTokens ::= tokens 
            {
              Tokens RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = t;               
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("optTokens",255, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // cond_operando ::= TO 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("cond_operando",258, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // cond_operando ::= RPAR 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("cond_operando",258, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // cond_operando ::= OP_REL 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("cond_operando",258, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // cond_operando ::= LPARID 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("cond_operando",258, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // cond_operando ::= LPAR 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("cond_operando",258, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // cond_operando ::= LESS 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("cond_operando",258, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // cond_operando ::= EQUAL 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("cond_operando",258, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // cond_operando ::= ALL 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("cond_operando",258, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // cond_operando ::= constantes 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("cond_operando",258, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // cond_operando ::= ident_base 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("cond_operando",258, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // cond_tokens ::= cond_tokens cond_operando 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("cond_tokens",257, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // cond_tokens ::= cond_operando 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("cond_tokens",257, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // condition ::= condition option_and_or cond_tokens 
            {
              Statement RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("condition",256, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // condition ::= cond_tokens 
            {
              Statement RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("condition",256, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // eatWriteItem ::= AFTER 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteItem",101, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // eatWriteItem ::= PAGE 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteItem",101, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // eatWriteItem ::= LINE 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteItem",101, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // eatWriteItem ::= NO 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteItem",101, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // eatWriteItem ::= LOCK 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteItem",101, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // eatWriteItem ::= WITH 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteItem",101, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // eatWriteItem ::= token 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens s = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteItem",101, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // eatWriteLst ::= eatWriteLst eatWriteItem 
            {
              Tokens RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens x = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens i = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = x.add(i);      
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteLst",100, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // eatWriteLst ::= eatWriteItem 
            {
              Tokens RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens e = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(e); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteLst",100, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // eatWrite ::= 
            {
              Tokens RESULT =null;
		 RESULT = new Tokens(); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWrite",99, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // eatWrite ::= eatWriteLst 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l;            
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWrite",99, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // eatCloseItem ::= FOR 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatCloseItem",98, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // eatCloseItem ::= NO 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatCloseItem",98, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // eatCloseItem ::= WITH 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatCloseItem",98, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // eatCloseLst ::= eatCloseLst eatCloseItem 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens i = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l.add(i);      
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatCloseLst",97, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // eatCloseLst ::= eatCloseItem 
            {
              Tokens RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens i = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatCloseLst",97, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // eatClose ::= 
            {
              Tokens RESULT =null;
		 RESULT = new Tokens(); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatClose",96, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // eatClose ::= eatCloseLst 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l;            
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatClose",96, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // stmtEndVerb ::= ENDVERB 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Statement(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEndVerb",218, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // stmtEndEvaluate ::= ENDEVAL 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Statement(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEndEvaluate",214, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // stmtEndPerform ::= ENDPERFORM 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Statement(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEndPerform",213, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // stmtEndIf ::= ENDIF 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Statement(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEndIf",212, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // stmtElse ::= ELSE 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Statement(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtElse",211, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // stmtEndP ::= ENDP 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Statement(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEndP",195, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // to_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("to_opt",105, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // to_opt ::= TO 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("to_opt",105, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // key_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("key_opt",104, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // key_opt ::= KEY 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("key_opt",104, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // in_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("in_opt",103, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // in_opt ::= IN 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("in_opt",103, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // all_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("all_opt",102, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // all_opt ::= ALL 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("all_opt",102, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // option_order ::= DESCENDING 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_order",92, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // option_order ::= ASCENDING 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_order",92, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // option_and_or ::= ALSO 
            {
              Symbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol a = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = a; code.incComplexity(); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_and_or",90, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // option_and_or ::= OR 
            {
              Symbol RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = o; code.incComplexity(); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_and_or",90, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // option_and_or ::= AND 
            {
              Symbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol a = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = a; code.incComplexity(); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_and_or",90, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // option_position ::= AFTER 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_position",91, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // option_position ::= BEFORE 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_position",91, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // option_to_multiple ::= TO rvalue_list 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_to_multiple",95, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // option_giving ::= GIVING lvalue_list 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_giving",94, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // option_giving_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_giving_opt",93, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // option_giving_opt ::= option_giving 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_giving_opt",93, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // option_size_error ::= SIZE_ERROR 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 code.setImperative(); 
                                   RESULT = new Statement(i); 
                                
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_size_error",206, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // option_size_error_opt ::= 
            {
              Statement RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_size_error_opt",205, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // option_size_error_opt ::= option_size_error 
            {
              Statement RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_size_error_opt",205, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // optionOverflow ::= OVERFLOW 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 code.setImperative(); 
                                   RESULT = new Statement(i); 
                                
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("optionOverflow",204, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // optionOverflow_opt ::= 
            {
              Statement RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("optionOverflow_opt",203, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // optionOverflow_opt ::= optionOverflow 
            {
              Statement RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("optionOverflow_opt",203, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // stmtException ::= EXCEPTION 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Statement(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtException",209, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // stmtInvalid ::= INVALID key_opt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 Statement stmt = new Statement(s);
                                              RESULT = code.setAtEnd(stmt); 
                                           
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInvalid",208, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // stmtAtEnd ::= ATEND 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 Statement stmt = new Statement(s);
                             RESULT = code.setAtEnd(stmt); 
                          
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAtEnd",207, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // closeFile ::= ID eatClose 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens e = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 Tokens t = new Tokens(s);
                                         RESULT = t.add(e); 
                                      
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("closeFile",235, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // closeLstFiles ::= closeLstFiles closeFile 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens c = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l.add(c);  
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("closeLstFiles",236, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // closeLstFiles ::= closeFile 
            {
              Tokens RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens c = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = c;         
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("closeLstFiles",236, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // stmtClose ::= CLOSE closeLstFiles 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.fileAction(TRAP.ACC_CLOSE, c, l); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtClose",139, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // stmtSet ::= SET stmtSet_detail 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new Statement(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSet",202, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // stmtStop ::= STOPRUN optTokens 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new Statement(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtStop",200, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // stmtDelete ::= DELETE ID 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.fileAccess(TRAP.ACC_DELETE, d, i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDelete",142, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // stmtRelease ::= RELEASE ID eatWrite 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens e = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 Statement stmt = new Statement(s);
                     stmt.addSymbol(i);
                     RESULT = stmt.addTokens(e);
                  
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRelease",167, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // stmtWrite_eop ::= EOP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 code.setImperative(); 
                                   RESULT = new Statement(s); 
                                
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_eop",89, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // stmtWrite_after ::= AFTER 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_after",88, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // stmtWrite_position ::= option_position rvalue 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_position",87, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // stmtWrite_from ::= FROM rvalue 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_from",86, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // stmtWrite_option ::= stmtWrite_eop 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_option",85, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // stmtWrite_option ::= stmtWrite_after 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_option",85, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // stmtWrite_option ::= stmtWrite_position 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_option",85, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // stmtWrite_option ::= stmtWrite_from 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_option",85, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // stmtWrite_options ::= stmtWrite_options stmtWrite_option 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_options",84, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // stmtWrite_options ::= stmtWrite_option 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_options",84, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // stmtWrite_detail ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_detail",83, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // stmtWrite_detail ::= stmtWrite_options 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_detail",83, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // stmtRewrite ::= REWRITE ID stmtWrite_detail 
            {
              Statement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol r = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = code.fileAccess(TRAP.ACC_UPDATE, r, i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRewrite",172, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // stmtWrite ::= WRITE ID stmtWrite_detail 
            {
              Statement RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol w = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = code.fileAccess(TRAP.ACC_INSERT, w, i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite",180, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // stmtUnstring_option ::= optionOverflow 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_option",82, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // stmtUnstring_option ::= TALLYING in_opt lvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_option",82, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // stmtUnstring_option ::= POINTER lvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_option",82, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // stmtUnstring_options ::= stmtUnstring_options stmtUnstring_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_options",81, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // stmtUnstring_options ::= stmtUnstring_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_options",81, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // stmtUnstring_options_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_options_opt",80, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // stmtUnstring_options_opt ::= stmtUnstring_options 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_options_opt",80, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // stmtUnstring_delimiter ::= COUNT in_opt lvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiter",79, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // stmtUnstring_delimiter ::= DELIMITER in_opt lvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiter",79, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // stmtUnstring_delimiters ::= stmtUnstring_delimiters stmtUnstring_delimiter 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiters",78, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // stmtUnstring_delimiters ::= stmtUnstring_delimiter 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiters",78, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // stmtUnstring_delimiters_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiters_opt",77, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // stmtUnstring_delimiters_opt ::= stmtUnstring_delimiters 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiters_opt",77, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // stmtUnstring_target ::= lvalue stmtUnstring_delimiters_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_target",73, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // stmtUnstring_targets ::= stmtUnstring_targets stmtUnstring_target 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_targets",72, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // stmtUnstring_targets ::= stmtUnstring_target 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_targets",72, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // stmtUnstring_to ::= INTO stmtUnstring_targets 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_to",71, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // stmtUnstring_delimited_token ::= OR 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimited_token",76, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // stmtUnstring_delimited_token ::= rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimited_token",76, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // stmtUnstring_delimiteds ::= stmtUnstring_delimiteds stmtUnstring_delimited_token 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiteds",75, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // stmtUnstring_delimiteds ::= stmtUnstring_delimited_token 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiteds",75, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // stmtUnstring_delimited ::= DELIMITED by_opt all_opt stmtUnstring_delimiteds 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimited",74, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // stmtUnstring_delimited_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimited_opt",70, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // stmtUnstring_delimited_opt ::= stmtUnstring_delimited 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimited_opt",70, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // stmtUnstring_detail ::= rvalue stmtUnstring_delimited_opt stmtUnstring_to stmtUnstring_options_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_detail",69, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // stmtUnstring ::= UNSTRING stmtUnstring_detail 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new Statement(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring",138, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // stmtSubtract_option ::= option_size_error 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSubtract_option",68, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // stmtSubtract_option ::= option_giving 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSubtract_option",68, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // stmtSubtract_option ::= FROM rvalue_list 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSubtract_option",68, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // stmtSubtract_options ::= stmtSubtract_options stmtSubtract_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSubtract_options",67, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // stmtSubtract_options ::= stmtSubtract_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSubtract_options",67, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // stmtSubtract_detail ::= rvalue_list stmtSubtract_options 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSubtract_detail",66, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // stmtSubtract ::= SUBTRACT stmtSubtract_detail 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new Statement(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSubtract",65, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // stmtString_pointer ::= POINTER lvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_pointer",64, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // stmtString_pointer_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_pointer_opt",63, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // stmtString_pointer_opt ::= stmtString_pointer 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_pointer_opt",63, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // stmtString_into ::= INTO lvalue stmtString_pointer_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_into",58, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // stmtString_from_delim ::= SIZE 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_from_delim",62, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // stmtString_from_delim ::= rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_from_delim",62, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // stmtString_from_delimiter ::= DELIMITED by_opt stmtString_from_delim 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_from_delimiter",61, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // stmtString_from_tokens ::= stmtString_from_tokens rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_from_tokens",60, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // stmtString_from_tokens ::= rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_from_tokens",60, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // stmtString_from_string ::= stmtString_from_tokens stmtString_from_delimiter 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_from_string",59, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // stmtString_from ::= stmtString_from stmtString_from_string 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_from",57, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // stmtString_from ::= stmtString_from_string 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_from",57, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // stmtString_detail ::= stmtString_from stmtString_into optionOverflow_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_detail",56, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // stmtStart_key_word ::= OP_REL 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtStart_key_word",55, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // stmtStart_key_word ::= TO 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtStart_key_word",55, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // stmtStart_key_word ::= LESS 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtStart_key_word",55, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // stmtStart_key_word ::= EQUAL 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtStart_key_word",55, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // stmtStart_key_word ::= OR 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtStart_key_word",55, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // stmtStart_key_words ::= stmtStart_key_words stmtStart_key_word 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtStart_key_words",54, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // stmtStart_key_words ::= stmtStart_key_word 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtStart_key_words",54, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // stmtStart_key_words_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtStart_key_words_opt",53, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // stmtStart_key_words_opt ::= stmtStart_key_words 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtStart_key_words_opt",53, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // stmtStart_key ::= KEY stmtStart_key_words_opt rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtStart_key",52, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // stmtStart_option ::= stmtStart_key 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtStart_option",51, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // stmtStart_options ::= stmtStart_options stmtStart_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtStart_options",50, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // stmtStart_options ::= stmtStart_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtStart_options",50, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // stmtStart_options_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtStart_options_opt",49, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // stmtStart_options_opt ::= stmtStart_options 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtStart_options_opt",49, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // stmtStart_detail ::= stmtStart_options_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtStart_detail",48, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // stmtStart ::= START ID stmtStart_detail 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		 RESULT = new Statement(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtStart",47, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // stmtSort_procedure ::= OUTPUT ID 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_procedure",46, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // stmtSort_procedure ::= INPUT ID 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_procedure",46, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // stmtSort_giving ::= GIVING rvalue_list 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_giving",45, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // stmtSort_using ::= USING rvalue_list 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_using",44, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // stmtSort_duplicates ::= DUPLICATES 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_duplicates",43, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // stmtSort_order ::= option_order key_opt rvalue_list 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_order",42, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // stmtSort_option ::= stmtSort_procedure 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_option",41, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // stmtSort_option ::= stmtSort_giving 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_option",41, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // stmtSort_option ::= stmtSort_using 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_option",41, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // stmtSort_option ::= stmtSort_duplicates 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_option",41, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // stmtSort_option ::= stmtSort_order 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_option",41, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // stmtSort_detail ::= stmtSort_detail stmtSort_option 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_detail",40, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // stmtSort_detail ::= stmtSort_option 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_detail",40, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // stmtSort ::= SORT NT$3 ID stmtSort_detail 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).value;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort",39, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // NT$3 ::= 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
 RESULT = new Statement(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("NT$3",262, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // stmtSet_resto ::= BY rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSet_resto",38, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // stmtSet_resto ::= TO rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSet_resto",38, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // stmtSet_detail ::= lvalue_list stmtSet_resto 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSet_detail",37, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // stmtSearch_varying ::= VARYING rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSearch_varying",36, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // stmtSearch_opt ::= stmtSearch_varying 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSearch_opt",35, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // stmtSearch_option ::= stmtSearch_option stmtSearch_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSearch_option",34, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // stmtSearch_option ::= stmtSearch_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSearch_option",34, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // stmtSearch_options ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSearch_options",33, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // stmtSearch_options ::= stmtSearch_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSearch_options",33, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // stmtSearch_detail ::= rvalue stmtSearch_options 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSearch_detail",32, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // stmtSearch ::= SEARCH all_opt stmtSearch_detail 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		 RESULT = new Statement(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSearch",31, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // stmtRead_key ::= KEY rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead_key",30, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // stmtRead_into ::= INTO lvalue 
            {
              Tokens RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt d = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 Tokens t = new Tokens(i); RESULT = t.add(d); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead_into",29, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // stmtRead_option ::= stmtRead_key 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead_option",28, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // stmtRead_option ::= stmtRead_into 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead_option",28, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // stmtRead_options ::= stmtRead_options stmtRead_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead_options",27, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // stmtRead_options ::= stmtRead_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead_options",27, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // stmtRead_detail ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead_detail",26, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // stmtRead_detail ::= stmtRead_options 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead_detail",26, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // stmtRead ::= READ ID stmtRead_detail 
            {
              Statement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol r = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens s = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 Statement stmt = code.fileAccess(TRAP.ACC_READ, r, i);
                     RESULT = stmt.addTokens(s); 
                  
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead",25, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // perform_token ::= BY 
            {
              Tokens RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_token",128, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // perform_token ::= FROM 
            {
              Tokens RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_token",128, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // perform_token ::= rvalue 
            {
              Tokens RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt t = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(t); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_token",128, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // perform_tokens ::= perform_tokens perform_token 
            {
              Tokens RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens v = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 v.add(t); RESULT = v; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_tokens",127, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // perform_tokens ::= perform_token 
            {
              Tokens RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = t; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_tokens",127, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // perform_test ::= AFTER 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_test",126, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // perform_test ::= BEFORE 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_test",126, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // stmtPerform_option ::= TEST perform_test 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Option(o);    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_option",165, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // stmtPerform_option ::= AFTER perform_tokens 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Option(o, t); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_option",165, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // stmtPerform_option ::= VARYING perform_tokens 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Option(o, t); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_option",165, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // stmtPerform_option ::= UNTIL condition 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement t = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Option(o, t); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_option",165, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // stmtPerform_option ::= TIMES 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = currStmt.mergeOption(new Option(o)); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_option",165, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // stmtPerform_option ::= FOREVER 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Option(o); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_option",165, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // stmtPerform_options ::= stmtPerform_options stmtPerform_option 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = currStmt.addOption(o); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_options",164, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // stmtPerform_options ::= stmtPerform_option 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = currStmt.addOption(o); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_options",164, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // stmtPerform_options_opt ::= 
            {
              Statement RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_options_opt",163, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // stmtPerform_options_opt ::= stmtPerform_options 
            {
              Statement RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_options_opt",163, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // stmtPerform_thru ::= stmtPerform_thru rvalue 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt o = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = currStmt.addOption(new Option(o));    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_thru",162, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // stmtPerform_thru ::= THRU ID 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = currStmt.addOption(new Option(o, i)); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_thru",162, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // stmtPerform_thru_opt ::= 
            {
              Statement RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_thru_opt",161, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // stmtPerform_thru_opt ::= stmtPerform_thru 
            {
              Statement RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_thru_opt",161, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // stmtPerform_from ::= stmtPerform_from rvalue 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt o = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = currStmt.addOption(new Option(o)); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_from",160, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // stmtPerform_from ::= rvalue 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt o = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = currStmt.addOption(new Option(o)); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_from",160, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // stmtPerform_from_opt ::= 
            {
              Statement RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_from_opt",159, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // stmtPerform_from_opt ::= stmtPerform_from 
            {
              Statement RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_from_opt",159, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // stmtPerform_verb ::= PERFORM 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 currStmt = new Statement(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_verb",158, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // stmtPerform ::= stmtPerform_verb stmtPerform_from_opt stmtPerform_thru_opt stmtPerform_options_opt 
            {
              Statement RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement p = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.processPerform(currStmt, lastStmt); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform",157, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // stmtOpen_files ::= stmtOpen_files ID 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l.add(s);      
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_files",231, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // stmtOpen_files ::= ID 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_files",231, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // stmtOpen_mode ::= EXTEND 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 Statement stmt = new Statement(s);
                               stmt.setId(Persistence.EXTEND);
                               RESULT = stmt;
                            
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_mode",234, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // stmtOpen_mode ::= IO 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 Statement stmt = new Statement(s);
                               stmt.setId(Persistence.IO);
                               RESULT = stmt;
                            
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_mode",234, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // stmtOpen_mode ::= OUTPUT 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 Statement stmt = new Statement(s);
                               stmt.setId(Persistence.OUTPUT);
                               RESULT = stmt;
                            
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_mode",234, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // stmtOpen_mode ::= INPUT 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 Statement stmt = new Statement(s);
                               stmt.setId(Persistence.INPUT);
                               RESULT = stmt; 
                            
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_mode",234, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // stmtOpen_group ::= stmtOpen_mode stmtOpen_files 
            {
              Tokens RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Statement o = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 Persistence f;
                 /*JGG
                    for (Symbol s : l.getTokens()) {
                        f = module.getFile(getSymbolName(s));
                        f.setAccess(o.getId());
                    }
                    */
                    RESULT = l;
                 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_group",233, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // stmtOpen_list ::= stmtOpen_list stmtOpen_group 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens s = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l.add(s);  
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_list",232, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // stmtOpen_list ::= stmtOpen_group 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens s = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;         
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_list",232, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // stmtOpen ::= OPEN stmtOpen_list 
            {
              Statement RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.fileAction(TRAP.ACC_OPEN, o, l); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen",181, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // stmtMultiply_by ::= rvalue BY rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtMultiply_by",24, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // stmtMultiply_detail ::= stmtMultiply_by option_giving_opt option_size_error_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtMultiply_detail",23, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // stmtMultiply ::= MULTIPLY stmtMultiply_detail 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new Statement(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtMultiply",175, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // stmtMove ::= MOVE all_opt rvalue TO lvalue_list 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-4)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		SymbolExt r = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExtList l = (SymbolExtList)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 code.checkCall(l, r);
                      Statement stmt = new Statement(s, code.getStmts());
                      stmt.addSymbol(r);
                      stmt.addVariables(l);
                      RESULT = stmt; 
                   
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtMove",174, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-4)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // stmtInspect_token ::= rvalue 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",185, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // stmtInspect_token ::= CONVERTING 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",185, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // stmtInspect_token ::= REPLACING 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",185, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // stmtInspect_token ::= TALLYING 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",185, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // stmtInspect_token ::= TO 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",185, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // stmtInspect_token ::= CHARACTER 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",185, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // stmtInspect_token ::= FIRST 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",185, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // stmtInspect_token ::= LEADING 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",185, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // stmtInspect_token ::= AFTER 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",185, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // stmtInspect_token ::= BEFORE 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",185, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // stmtInspect_token ::= BY 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",185, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // stmtInspect_token ::= ALL 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",185, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // stmtInspect_detail ::= stmtInspect_detail stmtInspect_token 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_detail",184, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // stmtInspect_detail ::= stmtInspect_token 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_detail",184, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // stmtInspect ::= INSPECT rvalue stmtInspect_detail 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		SymbolExt l = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new Statement(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect",183, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // stmtInitialize_tokens ::= ALL 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_tokens",22, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // stmtInitialize_tokens ::= BY 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_tokens",22, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // stmtInitialize_tokens ::= constantes 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_tokens",22, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // stmtInitialize_tokens ::= ident 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_tokens",22, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // stmtInitialize_resto ::= stmtInitialize_resto stmtInitialize_tokens 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_resto",21, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // stmtInitialize_resto ::= stmtInitialize_tokens 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_resto",21, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // stmtInitialize_replacing_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_replacing_opt",20, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // stmtInitialize_replacing_opt ::= REPLACING stmtInitialize_resto 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_replacing_opt",20, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // stmtInitialize_detail ::= lvalue_list stmtInitialize_replacing_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_detail",19, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // stmtInitialize ::= INITIALIZE stmtInitialize_detail 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new Statement(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize",135, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // stmtIf_detail ::= condition 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIf_detail",18, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // stmtIf ::= IF stmtIf_detail 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 Statement stmt = new Statement(s, code.getStmts());      
                                 RESULT = code.processIf(stmt);
                              
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIf",210, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // stmtGoto_depending ::= DEPENDING rvalue 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtGoto_depending",171, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // stmtGoto_depending_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtGoto_depending_opt",170, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // stmtGoto_depending_opt ::= stmtGoto_depending 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtGoto_depending_opt",170, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // stmtGoto_procs ::= stmtGoto_procs ID 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtGoto_procs",169, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // stmtGoto_procs ::= ID 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtGoto_procs",169, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // stmtGoTo ::= GOTO to_opt stmtGoto_procs stmtGoto_depending_opt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).value;
		 RESULT = new Statement(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtGoTo",168, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // stmtWhen_thru ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWhen_thru",217, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // stmtWhen_thru ::= THRU condition 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWhen_thru",217, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // stmtEvaluate_other ::= OTHER 
            {
              Symbol RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEvaluate_other",156, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // stmtEvaluate_item ::= condition stmtWhen_thru 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Statement t = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEvaluate_item",155, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // stmtEvaluate_condition ::= stmtEvaluate_other 
            {
              Statement RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 stack.peek().addOption(new Option(o)); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEvaluate_condition",154, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // stmtEvaluate_condition ::= stmtEvaluate_item 
            {
              Statement RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEvaluate_condition",154, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // stmtWhen ::= WHEN NT$2 stmtEvaluate_condition 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWhen",215, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // NT$2 ::= 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
 stack.peek().addOption(new Option(s)); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("NT$2",261, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // stmtEvaluate_object ::= condition 
            {
              Statement RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEvaluate_object",153, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // stmtEvaluate ::= EVALUATE NT$1 stmtEvaluate_object 
            {
              Statement RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Statement) ((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		 RESULT = new Statement(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEvaluate",152, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // NT$1 ::= 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
 currStmt = new Statement(s); 
                                stack.push(currStmt);
                             
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("NT$1",260, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // stmtDivide_field ::= BY 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDivide_field",17, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // stmtDivide_field ::= INTO 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDivide_field",17, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // stmtDivide_field ::= GIVING 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDivide_field",17, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // stmtDivide_field ::= NUMERO 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDivide_field",17, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // stmtDivide_field ::= ident 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDivide_field",17, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // stmtDivide_fields ::= stmtDivide_fields stmtDivide_field 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDivide_fields",16, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // stmtDivide_fields ::= stmtDivide_field 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDivide_fields",16, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // stmtDivide_detail ::= rvalue stmtDivide_fields option_size_error_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDivide_detail",15, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // stmtDivide ::= DIVIDE stmtDivide_detail 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new Statement(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDivide",14, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // stmtDisplay ::= DISPLAY rvalue_list 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new Statement(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDisplay",144, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // stmtCompute_option ::= option_size_error 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCompute_option",13, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // stmtCompute_options ::= stmtCompute_options stmtCompute_option 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCompute_options",12, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // stmtCompute_options ::= stmtCompute_option 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCompute_options",12, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // stmtCompute_options_opt ::= 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCompute_options_opt",11, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // stmtCompute_options_opt ::= stmtCompute_options 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCompute_options_opt",11, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // stmtCompute_rvalue ::= RPAR 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCompute_rvalue",10, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // stmtCompute_rvalue ::= LPAR 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCompute_rvalue",10, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // stmtCompute_rvalue ::= rvalue 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCompute_rvalue",10, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // stmtCompute_rvalues ::= stmtCompute_rvalues stmtCompute_rvalue 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCompute_rvalues",9, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // stmtCompute_rvalues ::= stmtCompute_rvalue 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCompute_rvalues",9, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // stmtCompute_detail ::= lvalue EQUAL stmtCompute_rvalues stmtCompute_options_opt 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).value;
		 RESULT = i; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCompute_detail",8, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // stmtCompute ::= COMPUTE stmtCompute_detail 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 Statement stmt = new Statement(s, code.getStmts());
                      stmt.addSymbol(i);
                      RESULT = stmt; 
                   
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCompute",141, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // stmtCancel ::= CANCEL rvalue 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new Statement(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCancel",179, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // stmtCall_returning ::= RETURNING lvalue 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_returning",190, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // stmtCall_returning_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_returning_opt",189, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // stmtCall_returning_opt ::= stmtCall_returning 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_returning_opt",189, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // stmtCall_parm_type ::= REFERENCE 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_parm_type",193, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // stmtCall_parm_type ::= VALUE 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_parm_type",193, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // stmtCall_parm ::= BY stmtCall_parm_type 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_parm",192, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // stmtCall_parm ::= rvalue 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_parm",192, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // stmtCall_parm_list ::= stmtCall_parm_list stmtCall_parm 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_parm_list",191, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // stmtCall_parm_list ::= stmtCall_parm 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_parm_list",191, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // stmtCall_using ::= USING stmtCall_parm_list 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_using",188, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // stmtCall_using_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_using_opt",187, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // stmtCall_using_opt ::= stmtCall_using 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_using_opt",187, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // stmtCall ::= CALL moduloCall stmtCall_using_opt stmtCall_returning_opt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		 RESULT = code.processCall(s, i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall",186, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // stmtAdd_option ::= option_size_error 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAdd_option",7, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // stmtAdd_option ::= option_to_multiple 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAdd_option",7, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // stmtAdd_option ::= option_giving 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAdd_option",7, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // stmtAdd_options ::= stmtAdd_options stmtAdd_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAdd_options",6, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // stmtAdd_options ::= stmtAdd_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAdd_options",6, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // stmtAdd_detail ::= rvalue_list stmtAdd_options 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAdd_detail",5, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // stmtAdd ::= ADD stmtAdd_detail 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new Statement(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAdd",201, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // stmtAccept_detail ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAccept_detail",4, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // stmtAccept_detail ::= FROM rvalue stmtAcceptOpt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAccept_detail",4, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // stmtEndExec ::= END_EXEC 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Statement(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEndExec",197, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // stmtExec ::= EXEC_SQL 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 module.incStmtSql();  RESULT = new Statement(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtExec",196, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // stmtExec ::= EXEC_CICS 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 module.incStmtCics(); RESULT = new Statement(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtExec",196, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // stmtReturn ::= RETURN ID stmtRead_detail 
            {
              Statement RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol r = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens j = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 Statement stmt = code.fileAccess(TRAP.ACC_READ, r, i);
                     RESULT = stmt.addTokens(j); 
                  
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtReturn",199, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // stmtNext ::= NEXT 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Statement(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtNext",178, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // stmtRollback ::= ROLLBACK 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Statement(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRollback",198, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // stmtFree ::= FREE 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Statement(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtFree",166, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // exitType ::= 
            {
              Symbol RESULT =null;
		 RESULT = code.makeSymbol(ZCCSym.PARAGRAPH, -1, -1, ""); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("exitType",121, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // exitType ::= SECTION 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("exitType",121, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // exitType ::= PARAGRAPH 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("exitType",121, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // exitType ::= PROGRAM 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("exitType",121, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // stmtExitPgm ::= EXITPGM 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 Statement stmt = new Statement(s, code.getStmts());
                               RESULT = stmt.addSymbol(s); 
                            
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtExitPgm",150, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // stmtExitP ::= EXITP 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 Statement stmt = new Statement(s, code.getStmts());
                           RESULT = stmt.addSymbol(code.makeSymbol(ZCCSym.PERFORM, -1, -1, "PERFORM")); 
                        
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtExitP",148, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // stmtExitG ::= EXIT exitType 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 Statement stmt = new Statement(s, code.getStmts());
                                       RESULT = stmt.addSymbol(t); 
                                    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtExitG",149, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // exitTypes ::= stmtExitPgm 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("exitTypes",151, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // exitTypes ::= stmtExitP 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("exitTypes",151, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // exitTypes ::= stmtExitG 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("exitTypes",151, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // stmtExit ::= exitTypes 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtExit",147, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // moduloCall ::= LITERAL 
            {
              Symbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol l = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("moduloCall",194, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // moduloCall ::= ident 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = i; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("moduloCall",194, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // stmtAcceptOpt ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAcceptOpt",182, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // stmtAcceptOpt ::= ID 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAcceptOpt",182, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // stmtAccept ::= ACCEPT lvalue stmtAccept_detail 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		 RESULT = new Statement(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAccept",176, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // stmtMerge ::= MERGE 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Statement(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtMerge",137, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // stmtUnlock ::= UNLOCK 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Statement(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnlock",177, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // stmtGoback ::= GOBACK 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Statement(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtGoback",146, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // stmtCommit ::= COMMIT 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Statement(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCommit",136, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // stmtString ::= STRING stmtString_detail 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new Statement(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString",173, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // stmtContinue ::= CONTINUE 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Statement(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtContinue",145, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // stmtAllocate ::= ALLOCATE 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Statement(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAllocate",143, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // stmtTransform ::= TRANSFORM 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Statement(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtTransform",140, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // stmtLang ::= stmtFree 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtLang",230, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // stmtLang ::= stmtCancel 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtLang",230, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // stmtLang ::= stmtAllocate 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtLang",230, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // stmtArit ::= stmtSubtract 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtArit",229, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // stmtArit ::= stmtDivide 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtArit",229, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // stmtArit ::= stmtAdd 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtArit",229, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // stmtArit ::= stmtCompute 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtArit",229, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // stmtArit ::= stmtMultiply 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtArit",229, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // stmtIO2 ::= stmtSort 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",224, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // stmtIO2 ::= stmtRewrite 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",224, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // stmtIO2 ::= stmtDelete 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",224, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // stmtIO2 ::= stmtWrite 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",224, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // stmtIO2 ::= stmtReturn 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",224, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // stmtIO2 ::= stmtRelease 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",224, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // stmtIO2 ::= stmtRead 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",224, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // stmtIO2 ::= stmtClose 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",224, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // stmtIO2 ::= stmtOpen 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",224, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // stmtIO2 ::= stmtDisplay 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",224, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // stmtIO2 ::= stmtAccept 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",224, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // stmtIO1 ::= stmtRollback 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO1",223, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // stmtIO1 ::= stmtStart 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO1",223, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // stmtIO1 ::= stmtMerge 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO1",223, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // stmtIO1 ::= stmtUnlock 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO1",223, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // stmtIO1 ::= stmtCommit 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO1",223, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // stmtIO ::= stmtIO2 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;              
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO",222, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // stmtIO ::= stmtIO1 optTokens 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s.addTokens(t); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO",222, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // stmtDatos2 ::= stmtSet 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos2",221, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // stmtDatos2 ::= stmtInitialize 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos2",221, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // stmtDatos2 ::= stmtUnstring 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos2",221, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // stmtDatos2 ::= stmtSearch 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos2",221, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // stmtDatos2 ::= stmtInspect 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos2",221, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // stmtDatos2 ::= stmtString 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos2",221, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // stmtDatos2 ::= stmtMove 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos2",221, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // stmtDatos1 ::= stmtTransform 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos1",220, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // stmtDatos ::= stmtDatos2 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;              
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos",219, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // stmtDatos ::= stmtDatos1 optTokens 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s.addTokens(t); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos",219, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // stmtFlujo ::= stmtContinue 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtFlujo",228, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // stmtFlujo ::= stmtGoTo 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtFlujo",228, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // stmtFlujo ::= stmtEvaluate 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.processEvaluate(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtFlujo",228, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // stmtFlujo ::= stmtIf 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtFlujo",228, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // stmtFlujo ::= stmtCall 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtFlujo",228, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // stmtFlujo ::= stmtPerform 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtFlujo",228, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // stmtControl2 ::= stmtGoback 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		  hasEndProgram = true;
                                      code.trapEndModule();
                                      RESULT = s; 
                                   
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtControl2",227, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // stmtControl2 ::= stmtStop 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 hasEndProgram = true;
                                       RESULT = s; 
                                       code.trapEndModule(); 
                                   
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtControl2",227, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // stmtControl1 ::= stmtNext 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtControl1",226, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // stmtControl ::= stmtControl2 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 hasEndProgram = true; RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtControl",225, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // stmtControl ::= stmtExit 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT =  code.processExit(s);    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtControl",225, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // stmtControl ::= stmtControl1 optTokens 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s.addTokens(t);          
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtControl",225, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // noverbos ::= stmtEndEvaluate 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.endEvaluate(s);  
                                  stack.pop();     
                               
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",125, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // noverbos ::= stmtEndExec 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;                         
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",125, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // noverbos ::= stmtException 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;                         
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",125, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // noverbos ::= stmtInvalid 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;                         
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",125, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // noverbos ::= stmtAtEnd 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;                         
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",125, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // noverbos ::= stmtElse 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.processElse(s);       
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",125, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // noverbos ::= stmtWhen 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.processWhen(stack.peek());       
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",125, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // noverbos ::= stmtEndVerb 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;                         
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",125, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // noverbos ::= stmtEndPerform 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.endPerform(s);        
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",125, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // noverbos ::= stmtEndIf 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.endIf(s);              
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",125, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // noverbos ::= stmtEndP 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.checkFlujo( s, lastStmt);
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",125, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // verbos ::= stmtExec 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;                         
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("verbos",124, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // verbos ::= stmtLang 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; module.incStmtLang();    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("verbos",124, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // verbos ::= stmtIO 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; module.incStmtIO();      
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("verbos",124, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // verbos ::= stmtArit 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; module.incStmtArit();    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("verbos",124, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // verbos ::= stmtDatos 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; module.incStmtDatos();   
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("verbos",124, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // verbos ::= stmtFlujo 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; module.incStmtFlujo();   
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("verbos",124, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // verbos ::= stmtControl 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; module.incStmtControl(); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("verbos",124, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= noverbos 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmt",123, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= verbos 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; code.incStmt(); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmt",123, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lista_stmt ::= lista_stmt stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 lastStmt = code.processStatement(s, lastStmt); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("lista_stmt",122, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lista_stmt ::= stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 lastStmt = code.processStatement(s, lastStmt); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("lista_stmt",122, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parr_section ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("parr_section",120, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parr_section ::= SECTION 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = true;  
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("parr_section",120, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parrafo_name ::= PARRAFO parr_section ENDP 
            {
              Symbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 // if (b == true) code.notSupportedSection(p); 
                        RESULT = code.processParrafo(p, lastStmt); 
                     
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("parrafo_name",119, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bloque_sentences ::= 
            {
              Integer RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("bloque_sentences",118, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bloque_sentences ::= lista_stmt 
            {
              Integer RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("bloque_sentences",118, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bloque_parrafo ::= parrafo_name bloque_sentences 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("bloque_parrafo",116, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bloque_parrafos ::= bloque_parrafos bloque_parrafo 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("bloque_parrafos",115, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bloque_parrafos ::= bloque_parrafo 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("bloque_parrafos",115, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lista_parrafos ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("lista_parrafos",114, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lista_parrafos ::= bloque_parrafos 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("lista_parrafos",114, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bloque_inicial ::= bloque_sentences 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("bloque_inicial",117, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bloque_procedure ::= bloque_inicial lista_parrafos 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("bloque_procedure",3, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // list_parms ::= list_parms ID 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l.add(s);      
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("list_parms",131, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // list_parms ::= ID 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("list_parms",131, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // list_parms_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("list_parms_opt",130, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // list_parms_opt ::= list_parms 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("list_parms_opt",130, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // proc_parm ::= RETURNING rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("proc_parm",134, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // proc_parm ::= USING list_parms_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("proc_parm",134, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // proc_parms ::= proc_parms proc_parm 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("proc_parms",133, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // proc_parms ::= proc_parm 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("proc_parms",133, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // proc_parms_list ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("proc_parms_list",132, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // proc_parms_list ::= proc_parms 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("proc_parms_list",132, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // resto_call ::= proc_parms_list NT$0 ENDP 
            {
              Tokens RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Tokens) ((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Tokens p = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 code.parrafoVirtual(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("resto_call",129, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              Tokens RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens p = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
 RESULT = p; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("NT$0",259, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // proc_div_header ::= DIV_PROC resto_call 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens p = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 code.beginCode(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("proc_div_header",2, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // procedure_division ::= proc_div_header bloque_procedure 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("procedure_division",0, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // end_program ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("end_program",1, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // end_program ::= END_PGM ID ENDP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		 hasEndProgram = true; 
                                      Statement stmt = new Statement(s); 
                                      code.endProgram(stmt);
                                      lastStmt = stmt;
                                   
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("end_program",1, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // module ::= procedure_division end_program 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("module",107, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= cobolCode EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Statement start_val = (Statement)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		RESULT = start_val;
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ZCCode$parser.done_parsing();
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // cobolCode ::= module 
            {
              Statement RESULT =null;
		 code.EndOfFile(lastStmt, hasEndProgram);
                         RESULT = null;  
                      
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("cobolCode",106, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

