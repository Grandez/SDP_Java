
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Mar 31 12:04:37 CEST 2017
//----------------------------------------------------

package com.jgg.sdp.parser.cobol.lang;

import java.util.*;
import java_cup.runtime.*;
import com.jgg.sdp.module.base.*;
import com.jgg.sdp.module.items.*;
import com.jgg.sdp.module.factorias.*;
import com.jgg.sdp.core.ctes.*;
import com.jgg.sdp.core.config.*;
import com.jgg.sdp.parser.base.*;
import com.jgg.sdp.parser.base.stmt.*;
import com.jgg.sdp.parser.base.symbol.*;
import com.jgg.sdp.parser.cobol.base.*;
import com.jgg.sdp.parser.cobol.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Mar 31 12:04:37 CEST 2017
  */
public class ZCCode extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ZCCode() {super();}

  /** Constructor which sets the default scanner. */
  public ZCCode(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ZCCode(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0217\000\002\143\003\000\002\002\004\000\002\144" +
    "\004\000\002\003\005\000\002\003\002\000\002\002\004" +
    "\000\002\004\004\000\002\u011b\002\000\002\161\005\000" +
    "\002\164\003\000\002\164\002\000\002\165\003\000\002" +
    "\165\004\000\002\166\004\000\002\166\004\000\002\162" +
    "\003\000\002\162\002\000\002\163\003\000\002\163\004" +
    "\000\002\005\004\000\002\150\003\000\002\145\003\000" +
    "\002\145\002\000\002\146\003\000\002\146\004\000\002" +
    "\147\004\000\002\151\003\000\002\151\002\000\002\152" +
    "\005\000\002\153\003\000\002\153\002\000\002\155\003" +
    "\000\002\155\004\000\002\156\003\000\002\156\003\000" +
    "\002\157\003\000\002\157\003\000\002\157\003\000\002" +
    "\157\003\000\002\157\003\000\002\157\003\000\002\157" +
    "\003\000\002\160\003\000\002\160\003\000\002\160\003" +
    "\000\002\160\003\000\002\160\003\000\002\160\003\000" +
    "\002\160\003\000\002\160\003\000\002\160\003\000\002" +
    "\160\003\000\002\160\003\000\002\322\004\000\002\322" +
    "\003\000\002\322\003\000\002\323\003\000\002\324\003" +
    "\000\002\324\003\000\002\325\003\000\002\325\003\000" +
    "\002\325\003\000\002\325\003\000\002\325\003\000\002" +
    "\325\003\000\002\314\004\000\002\314\003\000\002\315" +
    "\003\000\002\316\003\000\002\316\003\000\002\316\003" +
    "\000\002\316\003\000\002\316\003\000\002\316\003\000" +
    "\002\316\003\000\002\317\004\000\002\317\003\000\002" +
    "\320\003\000\002\320\003\000\002\320\003\000\002\320" +
    "\003\000\002\320\003\000\002\321\003\000\002\321\003" +
    "\000\002\321\003\000\002\321\003\000\002\321\003\000" +
    "\002\321\003\000\002\321\003\000\002\321\003\000\002" +
    "\321\003\000\002\321\003\000\002\321\003\000\002\326" +
    "\003\000\002\326\003\000\002\326\003\000\002\326\003" +
    "\000\002\326\003\000\002\327\003\000\002\327\003\000" +
    "\002\327\003\000\002\174\003\000\002\177\003\000\002" +
    "\201\003\000\002\241\004\000\002\170\003\000\002\202" +
    "\003\000\002\245\003\000\002\171\003\000\002\244\005" +
    "\000\002\252\003\000\002\252\002\000\002\266\003\000" +
    "\002\266\003\000\002\203\003\000\002\207\003\000\002" +
    "\207\003\000\002\207\003\000\002\205\004\000\002\204" +
    "\003\000\002\206\003\000\002\154\003\000\002\154\003" +
    "\000\002\154\003\000\002\154\002\000\002\232\003\000" +
    "\002\272\003\000\002\246\003\000\002\273\005\000\002" +
    "\270\003\000\002\270\003\000\002\271\003\000\002\006" +
    "\005\000\002\006\002\000\002\275\010\000\002\007\003" +
    "\000\002\010\003\000\002\010\002\000\002\011\003\000" +
    "\002\011\004\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\256\006\000\002\257\003\000\002\257" +
    "\002\000\002\260\004\000\002\263\003\000\002\263\004" +
    "\000\002\264\003\000\002\264\004\000\002\265\003\000" +
    "\002\265\003\000\002\261\003\000\002\261\002\000\002" +
    "\262\004\000\002\247\004\000\002\175\007\000\002\013" +
    "\004\000\002\014\003\000\002\014\004\000\002\015\003" +
    "\000\002\016\003\000\002\016\002\000\002\017\003\000" +
    "\002\017\004\000\002\020\003\000\002\200\004\000\002" +
    "\021\006\000\002\022\003\000\002\023\004\000\002\023" +
    "\004\000\002\024\003\000\002\024\002\000\002\025\003" +
    "\000\002\025\004\000\002\026\003\000\002\026\003\000" +
    "\002\u011c\002\000\002\210\005\000\002\211\003\000\002" +
    "\u011d\002\000\002\311\005\000\002\212\003\000\002\212" +
    "\003\000\002\213\004\000\002\214\003\000\002\312\004" +
    "\000\002\312\002\000\002\234\006\000\002\235\003\000" +
    "\002\235\004\000\002\236\003\000\002\236\002\000\002" +
    "\237\004\000\002\304\004\000\002\167\004\000\002\027" +
    "\004\000\002\030\004\000\002\030\002\000\002\031\003" +
    "\000\002\031\004\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\253\005\000\002" +
    "\254\003\000\002\254\004\000\002\255\003\000\002\255" +
    "\003\000\002\255\003\000\002\255\003\000\002\255\003" +
    "\000\002\255\003\000\002\255\003\000\002\255\003\000" +
    "\002\255\003\000\002\255\003\000\002\255\003\000\002" +
    "\255\003\000\002\242\007\000\002\243\004\000\002\033" +
    "\004\000\002\034\005\000\002\035\003\000\002\035\002" +
    "\000\002\036\003\000\002\036\004\000\002\037\003\000" +
    "\002\037\003\000\002\251\004\000\002\331\003\000\002" +
    "\331\004\000\002\332\004\000\002\333\003\000\002\333" +
    "\003\000\002\333\003\000\002\333\003\000\002\330\003" +
    "\000\002\330\004\000\002\215\004\000\002\216\003\000" +
    "\002\217\004\000\002\217\003\000\002\217\002\000\002" +
    "\224\003\000\002\220\003\000\002\220\002\000\002\221" +
    "\003\000\002\221\004\000\002\222\003\000\002\222\003" +
    "\000\002\222\003\000\002\222\003\000\002\222\003\000" +
    "\002\222\003\000\002\222\003\000\002\223\003\000\002" +
    "\223\003\000\002\225\004\000\002\225\004\000\002\227" +
    "\004\000\002\226\004\000\002\230\010\000\002\231\010" +
    "\000\002\040\005\000\002\041\003\000\002\041\002\000" +
    "\002\042\003\000\002\042\004\000\002\043\003\000\002" +
    "\043\003\000\002\044\004\000\002\045\004\000\002\046" +
    "\005\000\002\047\004\000\002\050\003\000\002\050\002" +
    "\000\002\051\003\000\002\051\004\000\002\052\003\000" +
    "\002\053\004\000\002\054\004\000\002\055\004\000\002" +
    "\055\004\000\002\u011e\002\000\002\056\006\000\002\057" +
    "\003\000\002\057\004\000\002\060\003\000\002\060\003" +
    "\000\002\060\003\000\002\060\003\000\002\060\003\000" +
    "\002\061\005\000\002\062\003\000\002\063\004\000\002" +
    "\064\004\000\002\065\004\000\002\065\004\000\002\066" +
    "\005\000\002\067\005\000\002\067\002\000\002\070\005" +
    "\000\002\071\003\000\002\071\004\000\002\073\004\000" +
    "\002\074\003\000\002\074\004\000\002\075\005\000\002" +
    "\076\003\000\002\076\003\000\002\072\005\000\002\077" +
    "\003\000\002\077\002\000\002\100\004\000\002\101\004" +
    "\000\002\102\004\000\002\103\003\000\002\103\004\000" +
    "\002\104\004\000\002\104\003\000\002\104\003\000\002" +
    "\172\004\000\002\105\006\000\002\106\003\000\002\106" +
    "\002\000\002\112\006\000\002\113\003\000\002\113\004" +
    "\000\002\114\003\000\002\114\003\000\002\107\004\000" +
    "\002\110\003\000\002\110\004\000\002\111\004\000\002" +
    "\115\003\000\002\115\002\000\002\116\003\000\002\116" +
    "\004\000\002\117\005\000\002\117\005\000\002\120\003" +
    "\000\002\120\002\000\002\121\003\000\002\121\004\000" +
    "\002\122\004\000\002\122\005\000\002\122\003\000\002" +
    "\250\005\000\002\240\005\000\002\123\003\000\002\123" +
    "\002\000\002\124\003\000\002\124\004\000\002\125\003" +
    "\000\002\125\003\000\002\125\003\000\002\125\003\000" +
    "\002\126\004\000\002\127\004\000\002\130\003\000\002" +
    "\131\003\000\002\233\005\000\002\176\004\000\002\274" +
    "\004\000\002\276\004\000\002\173\004\000\002\335\003" +
    "\000\002\335\004\000\002\334\004\000\002\301\003\000" +
    "\002\302\004\000\002\303\003\000\002\u010b\003\000\002" +
    "\u010b\002\000\002\u010c\003\000\002\u010c\004\000\002\u010c" +
    "\003\000\002\u010c\003\000\002\u010c\003\000\002\u010e\003" +
    "\000\002\u010f\003\000\002\u0110\004\000\002\u0111\003\000" +
    "\002\277\003\000\002\277\002\000\002\300\003\000\002" +
    "\u0112\003\000\002\133\003\000\002\133\003\000\002\132" +
    "\003\000\002\132\003\000\002\132\003\000\002\134\003" +
    "\000\002\134\003\000\002\267\003\000\002\305\003\000" +
    "\002\306\003\000\002\307\003\000\002\310\003\000\002" +
    "\313\003\000\002\135\003\000\002\135\002\000\002\136" +
    "\003\000\002\136\004\000\002\137\003\000\002\137\003" +
    "\000\002\137\003\000\002\140\003\000\002\140\002\000" +
    "\002\141\003\000\002\141\004\000\002\142\003\000\002" +
    "\142\003\000\002\142\003\000\002\142\003\000\002\142" +
    "\003\000\002\142\003\000\002\142\003\000\002\336\003" +
    "\000\002\337\003\000\002\337\005\000\002\340\004\000" +
    "\002\341\004\000\002\341\002\000\002\342\003\000\002" +
    "\342\002\000\002\343\003\000\002\343\005\000\002\344" +
    "\003\000\002\350\003\000\002\350\005\000\002\351\003" +
    "\000\002\351\005\000\002\352\004\000\002\353\003\000" +
    "\002\353\002\000\002\354\003\000\002\354\003\000\002" +
    "\354\005\000\002\357\003\000\002\357\005\000\002\360" +
    "\003\000\002\346\003\000\002\347\004\000\002\347\003" +
    "\000\002\345\003\000\002\345\003\000\002\345\003\000" +
    "\002\345\003\000\002\345\003\000\002\345\003\000\002" +
    "\356\003\000\002\356\005\000\002\355\004\000\002\355" +
    "\003\000\002\355\003\000\002\u0115\003\000\002\u0115\002" +
    "\000\002\u0114\003\000\002\u0114\004\000\002\u0113\003\000" +
    "\002\u0113\003\000\002\u0113\003\000\002\u0113\005\000\002" +
    "\u0113\003\000\002\370\003\000\002\370\003\000\002\370" +
    "\003\000\002\370\003\000\002\370\003\000\002\370\003" +
    "\000\002\370\003\000\002\370\003\000\002\370\003\000" +
    "\002\362\005\000\002\362\005\000\002\363\005\000\002" +
    "\364\003\000\002\364\002\000\002\365\003\000\002\365" +
    "\005\000\002\366\003\000\002\366\003\000\002\361\003" +
    "\000\002\361\003\000\002\361\003\000\002\361\003\000" +
    "\002\361\003\000\002\373\003\000\002\374\003\000\002" +
    "\374\004\000\002\375\003\000\002\375\004\000\002\367" +
    "\003\000\002\367\003\000\002\367\003\000\002\376\004" +
    "\000\002\377\004\000\002\u0100\003\000\002\u0101\003\000" +
    "\002\u0103\003\000\002\u0103\002\000\002\u0104\003\000\002" +
    "\u0104\004\000\002\u0105\005\000\002\u0106\003\000\002\u0106" +
    "\005\000\002\u0107\003\000\002\u0108\003\000\002\u0108\002" +
    "\000\002\u0109\003\000\002\u0109\004\000\002\u010a\004\000" +
    "\002\u010a\004\000\002\371\003\000\002\372\003\000\002" +
    "\372\003\000\002\372\003\000\002\372\003\000\002\372" +
    "\003\000\002\372\003\000\002\372\003\000\002\u0116\003" +
    "\000\002\u0116\002\000\002\u0117\003\000\002\u0117\002\000" +
    "\002\u0118\003\000\002\u0118\002\000\002\u011a\003\000\002" +
    "\u011a\002\000\002\u0119\003\000\002\u0119\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u02a0\000\004\004\004\001\002\000\006\207\u0295\220" +
    "\u0298\001\ufff7\000\004\011\u0292\001\ufffd\000\002\001\001" +
    "\000\004\002\u0290\001\002\000\164\044\156\045\117\046" +
    "\100\047\220\050\125\051\017\052\212\053\065\054\165" +
    "\055\113\056\054\057\110\060\200\061\103\062\215\063" +
    "\160\064\146\065\141\066\064\067\166\070\032\071\025" +
    "\072\172\073\043\074\076\075\033\076\214\077\130\100" +
    "\023\101\171\102\120\103\134\104\027\105\170\106\161" +
    "\107\213\110\163\111\153\112\206\113\173\114\052\115" +
    "\164\116\143\117\106\125\162\140\122\141\045\142\142" +
    "\143\102\144\203\145\112\150\202\162\012\223\073\234" +
    "\211\235\070\236\105\001\uffe6\000\010\121\u0215\132\u0218" +
    "\210\u0219\001\ufe89\000\004\165\u010b\001\ufdeb\000\002\001" +
    "\uffc6\000\002\001\uffda\000\002\001\uffb2\000\002\001\uffa6" +
    "\000\004\005\u0279\001\002\000\002\001\uffd4\000\002\001" +
    "\uffe2\000\002\001\uffc8\000\004\005\u0277\001\002\000\002" +
    "\001\uffd6\000\026\005\223\006\253\010\244\026\257\027" +
    "\255\030\241\031\260\167\252\232\243\237\256\001\002" +
    "\000\002\001\uffce\000\002\001\uff83\000\002\001\uffcf\000" +
    "\002\001\uffb0\000\004\005\223\001\002\000\002\001\uff82" +
    "\000\002\001\uffd3\000\002\001\uffaa\000\002\001\uffa1\000" +
    "\002\001\uffdc\000\026\005\223\006\253\010\244\026\257" +
    "\027\255\030\241\031\260\167\252\232\243\237\256\001" +
    "\002\000\002\001\uffa7\000\002\001\uffdf\000\010\121\u0215" +
    "\132\u0218\210\u0219\001\ufe89\000\002\001\uffa2\000\002\001" +
    "\ufe70\000\002\001\uffed\000\022\005\223\120\u0233\153\u0230" +
    "\214\u022b\215\u022d\216\u0227\217\u0234\222\u0237\001\uff0c\000" +
    "\002\001\ufffc\000\002\001\uffac\000\002\001\uff9c\000\002" +
    "\001\uffd8\000\026\005\223\006\253\010\244\026\257\027" +
    "\255\030\241\031\260\167\252\232\243\237\256\001\002" +
    "\000\002\001\uffd5\000\002\001\uffbf\000\034\005\u016f\006" +
    "\u0172\010\u016d\032\u012d\033\u0138\034\u0139\035\u0129\036\u0128" +
    "\037\u0130\040\u012c\041\u0131\042\u0135\224\u0176\001\ufe35\000" +
    "\002\001\uffb8\000\002\001\uffc2\000\002\001\uff9e\000\002" +
    "\001\uff8d\000\004\226\u0150\001\ufded\000\004\005\223\001" +
    "\002\000\002\001\uffd2\000\002\001\uff8e\000\002\001\uff7f" +
    "\000\002\001\uffc7\000\002\001\uffa9\000\002\001\uff4c\000" +
    "\002\001\uffb7\000\002\001\uffd0\000\026\005\223\006\253" +
    "\010\244\026\257\027\255\030\241\031\260\167\252\232" +
    "\243\237\256\001\002\000\002\001\uffa4\000\002\001\uff9b" +
    "\000\002\001\uff9f\000\002\001\ufe71\000\002\001\uff89\000" +
    "\002\001\uffaf\000\002\001\uff7e\000\004\005\u01f1\001\002" +
    "\000\002\001\uff9d\000\002\001\uff58\000\002\001\uffbb\000" +
    "\002\001\ufe6f\000\004\005\u01f0\001\002\000\002\001\uff8f" +
    "\000\002\001\uffde\000\002\001\uffcb\000\002\001\uff7a\000" +
    "\004\005\u01e5\001\002\000\164\044\156\045\117\046\100" +
    "\047\220\050\125\051\017\052\212\053\065\054\165\055" +
    "\113\056\054\057\110\060\200\061\103\062\215\063\160" +
    "\064\146\065\141\066\064\067\166\070\032\071\025\072" +
    "\172\073\043\074\076\075\033\076\214\077\130\100\023" +
    "\101\171\102\120\103\134\104\027\105\170\106\161\107" +
    "\213\110\163\111\153\112\206\113\173\114\052\115\164" +
    "\116\143\117\106\125\162\140\122\141\045\142\142\143" +
    "\102\144\203\145\112\150\202\162\012\223\073\234\211" +
    "\235\070\236\105\001\uffe7\000\002\001\ufe73\000\002\001" +
    "\uffbe\000\002\001\uffb3\000\026\005\223\006\253\010\244" +
    "\026\257\027\255\030\241\031\260\167\252\232\243\237" +
    "\256\001\002\000\002\001\uffdb\000\002\001\uffba\000\002" +
    "\001\uff0f\000\002\001\uffb5\000\034\005\u016f\006\u0172\010" +
    "\u016d\032\u012d\033\u0138\034\u0139\035\u0129\036\u0128\037\u0130" +
    "\040\u012c\041\u0131\042\u0135\224\u0176\001\ufe35\000\002\001" +
    "\uffb4\000\004\005\u01d2\001\002\000\004\007\u01cc\001\uffeb" +
    "\000\002\001\uffae\000\002\001\uffa8\000\002\001\uffe0\000" +
    "\002\001\uff97\000\002\001\ufe72\000\026\005\223\006\253" +
    "\010\244\026\257\027\255\030\241\031\260\167\252\232" +
    "\243\237\256\001\002\000\002\001\uffd9\000\002\001\uffb9" +
    "\000\002\001\uff84\000\002\001\uffa5\000\002\001\uffca\000" +
    "\002\001\uffa3\000\002\001\uffad\000\034\005\u016f\006\u0172" +
    "\010\u016d\032\u012d\033\u0138\034\u0139\035\u0129\036\u0128\037" +
    "\u0130\040\u012c\041\u0131\042\u0135\224\u0176\001\ufe35\000\034" +
    "\005\u016f\006\u0172\010\u016d\032\u012d\033\u0138\034\u0139\035" +
    "\u0129\036\u0128\037\u0130\040\u012c\041\u0131\042\u0135\224\u0176" +
    "\001\ufe35\000\002\001\uffbc\000\004\005\223\001\002\000" +
    "\002\001\uffc5\000\010\202\u0196\204\u0197\211\u0194\001\uff85" +
    "\000\004\005\223\001\002\000\002\001\ufe8d\000\004\005" +
    "\u0188\001\002\000\002\001\uff96\000\002\001\uff9a\000\052" +
    "\005\223\006\253\010\244\026\257\027\255\030\241\031" +
    "\260\032\u012d\033\u0138\034\u0139\035\u0129\036\u0128\037\u0130" +
    "\040\u012c\041\u0131\042\u0135\167\252\224\u0137\232\243\237" +
    "\256\001\002\000\002\001\uffc1\000\004\121\u017c\001\ufdf3" +
    "\000\004\005\u0167\001\002\000\002\001\uff95\000\026\005" +
    "\223\006\253\010\244\026\257\027\255\030\241\031\260" +
    "\167\252\232\243\237\256\001\002\000\002\001\uffa0\000" +
    "\002\001\uffd7\000\002\001\uffab\000\002\001\uff8c\000\002" +
    "\001\uff4f\000\002\001\uffc3\000\002\001\ufe8b\000\002\001" +
    "\ufe74\000\002\001\uffdd\000\002\001\uffcd\000\026\005\223" +
    "\006\253\010\244\026\257\027\255\030\241\031\260\167" +
    "\252\232\243\237\256\001\002\000\002\001\uffc4\000\002" +
    "\001\uffc9\000\002\001\uff80\000\002\001\uff98\000\002\001" +
    "\ufee3\000\012\151\355\160\352\164\350\177\351\001\002" +
    "\000\002\001\uff8a\000\002\001\uffb1\000\002\001\uffd1\000" +
    "\006\005\223\010\222\001\002\000\002\001\uffbd\000\002" +
    "\001\uff90\000\002\001\ufe0b\000\006\163\341\174\344\001" +
    "\ufe01\000\002\001\uff91\000\004\220\322\001\uff70\000\004" +
    "\224\230\001\ufe09\000\030\005\223\006\253\010\244\026" +
    "\257\027\255\030\241\031\260\167\252\224\261\232\243" +
    "\237\256\001\002\000\002\001\ufe0d\000\004\224\230\001" +
    "\ufe0a\000\002\001\ufe08\000\002\001\ufe07\000\006\012\315" +
    "\225\316\001\002\000\002\001\ufe05\000\002\001\ufe5b\000" +
    "\002\001\ufe0f\000\002\001\ufdf6\000\002\001\ufdfc\000\004" +
    "\233\302\001\002\000\002\001\ufdfb\000\002\001\ufe10\000" +
    "\004\020\276\001\ufe57\000\014\013\267\014\270\015\272" +
    "\016\274\017\271\001\ufe5c\000\002\001\ufe54\000\002\001" +
    "\ufe52\000\004\174\265\001\002\000\002\001\ufdfa\000\002" +
    "\001\ufe11\000\002\001\ufdf7\000\002\001\ufdf9\000\002\001" +
    "\ufdf8\000\002\001\ufdf5\000\030\005\223\006\253\010\244" +
    "\026\257\027\255\030\241\031\260\167\252\224\261\232" +
    "\243\237\256\001\002\000\002\001\ufe03\000\004\225\264" +
    "\001\002\000\002\001\ufe53\000\026\005\223\006\253\010" +
    "\244\026\257\027\255\030\241\031\260\167\252\232\243" +
    "\237\256\001\002\000\002\001\ufe23\000\002\001\ufe17\000" +
    "\002\001\ufe19\000\002\001\ufe1b\000\002\001\ufe18\000\030" +
    "\005\223\006\253\010\244\026\257\027\255\030\241\031" +
    "\260\167\252\224\261\232\243\237\256\001\002\000\002" +
    "\001\ufe1a\000\002\001\ufe5a\000\026\005\223\006\253\010" +
    "\244\026\257\027\255\030\241\031\260\167\252\232\243" +
    "\237\256\001\ufe55\000\002\001\ufe59\000\002\001\ufe58\000" +
    "\002\001\ufe56\000\004\224\303\001\002\000\030\005\223" +
    "\006\253\010\244\026\257\027\255\030\241\031\260\167" +
    "\252\224\261\232\243\237\256\001\ufe20\000\002\001\ufe24" +
    "\000\002\001\ufe1f\000\004\225\314\001\002\000\002\001" +
    "\ufe1c\000\004\012\312\001\ufe21\000\002\001\ufe1d\000\030" +
    "\005\223\006\253\010\244\026\257\027\255\030\241\031" +
    "\260\167\252\224\261\232\243\237\256\001\002\000\002" +
    "\001\ufe1e\000\002\001\ufe22\000\030\005\223\006\253\010" +
    "\244\026\257\027\255\030\241\031\260\167\252\224\261" +
    "\232\243\237\256\001\002\000\002\001\ufe06\000\002\001" +
    "\ufe04\000\002\001\uff71\000\004\207\333\001\uff67\000\030" +
    "\005\223\006\253\010\244\026\257\027\255\030\241\031" +
    "\260\127\325\167\252\232\243\237\256\001\002\000\002" +
    "\001\uff6e\000\030\005\223\006\253\010\244\026\257\027" +
    "\255\030\241\031\260\127\325\167\252\232\243\237\256" +
    "\001\uff6f\000\006\205\330\221\331\001\002\000\002\001" +
    "\uff6c\000\002\001\uff6b\000\002\001\uff69\000\002\001\uff6a" +
    "\000\002\001\uff6d\000\004\005\223\001\002\000\002\001" +
    "\uff68\000\002\001\uff72\000\002\001\uff66\000\002\001\ufe16" +
    "\000\006\163\341\174\344\001\ufe02\000\004\005\223\001" +
    "\002\000\002\001\ufe0e\000\002\001\ufe00\000\004\005\223" +
    "\001\002\000\002\001\ufdfd\000\002\001\ufdfe\000\002\001" +
    "\ufdff\000\002\001\uff14\000\002\001\uff15\000\002\001\uff16" +
    "\000\012\151\355\160\352\164\350\177\351\001\uff1a\000" +
    "\004\005\357\001\002\000\002\001\uff13\000\002\001\uff19" +
    "\000\002\001\uff12\000\004\005\361\001\uff17\000\002\001" +
    "\uff11\000\002\001\uff18\000\004\005\364\001\002\000\020" +
    "\043\u0100\124\u0101\137\372\156\374\160\373\177\367\220" +
    "\375\001\002\000\004\165\u010b\001\ufdeb\000\002\001\ufedd" +
    "\000\004\005\u010a\001\002\000\002\001\ufedc\000\002\001" +
    "\ufedf\000\002\001\ufe75\000\004\005\u0109\001\002\000\026" +
    "\005\223\006\253\010\244\026\257\027\255\030\241\031" +
    "\260\167\252\232\243\237\256\001\002\000\026\005\223" +
    "\006\253\010\244\026\257\027\255\030\241\031\260\167" +
    "\252\232\243\237\256\001\002\000\002\001\ufede\000\002" +
    "\001\ufedb\000\002\001\ufed9\000\002\001\ufe76\000\002\001" +
    "\ufee1\000\020\043\u0100\124\u0101\137\372\156\374\160\373" +
    "\177\367\220\375\001\ufee2\000\002\001\ufee0\000\026\005" +
    "\223\006\253\010\244\026\257\027\255\030\241\031\260" +
    "\167\252\232\243\237\256\001\ufed8\000\002\001\ufe13\000" +
    "\002\001\ufe12\000\026\005\223\006\253\010\244\026\257" +
    "\027\255\030\241\031\260\167\252\232\243\237\256\001" +
    "\ufed7\000\002\001\ufed6\000\002\001\ufed5\000\002\001\ufdec" +
    "\000\026\005\223\006\253\010\244\026\257\027\255\030" +
    "\241\031\260\167\252\232\243\237\256\001\002\000\026" +
    "\005\223\006\253\010\244\026\257\027\255\030\241\031" +
    "\260\167\252\232\243\237\256\001\ufeda\000\002\001\uff99" +
    "\000\030\005\223\006\253\010\244\026\257\027\255\030" +
    "\241\031\260\135\u011e\167\252\232\243\237\256\001\002" +
    "\000\002\001\ufed0\000\002\001\ufecd\000\030\005\223\006" +
    "\253\010\244\026\257\027\255\030\241\031\260\161\u0115" +
    "\167\252\232\243\237\256\001\002\000\002\001\ufecf\000" +
    "\004\200\u011d\001\ufe7e\000\004\005\223\001\002\000\004" +
    "\203\u0119\001\ufec6\000\002\001\ufec8\000\002\001\ufec7\000" +
    "\004\005\223\001\002\000\002\001\ufec5\000\002\001\ufed1" +
    "\000\002\001\ufe7f\000\002\001\ufe7d\000\004\127\u0122\001" +
    "\ufdf1\000\002\001\ufecc\000\002\001\ufece\000\030\005\223" +
    "\006\253\010\244\026\257\027\255\030\241\031\260\167" +
    "\252\212\u0125\232\243\237\256\001\002\000\002\001\ufdf2" +
    "\000\002\001\ufecb\000\002\001\ufeca\000\002\001\ufec9\000" +
    "\052\005\223\006\253\010\244\026\257\027\255\030\241" +
    "\031\260\032\u012d\033\u0138\034\u0139\035\u0129\036\u0128\037" +
    "\u0130\040\u012c\041\u0131\042\u0135\167\252\224\u0137\232\243" +
    "\237\256\001\002\000\010\122\u013c\123\u013b\175\u013f\001" +
    "\uff4d\000\002\001\ufe27\000\002\001\ufe28\000\014\013\267" +
    "\014\270\015\272\016\274\017\271\001\ufe4a\000\024\021" +
    "\u0143\022\u0147\023\u0149\024\u014e\025\u0146\147\u0145\157\u0144" +
    "\172\u014b\230\u014a\001\ufe51\000\002\001\ufe2b\000\002\001" +
    "\ufe2d\000\002\001\ufe49\000\002\001\ufe45\000\002\001\ufe2c" +
    "\000\002\001\ufe25\000\002\001\uff4e\000\002\001\ufe4f\000" +
    "\002\001\ufe47\000\002\001\ufe26\000\024\032\u012d\033\u0138" +
    "\034\u0139\035\u0129\036\u0128\037\u0130\040\u012c\041\u0131\042" +
    "\u0135\001\ufe4b\000\052\005\223\006\253\010\244\026\257" +
    "\027\255\030\241\031\260\032\u012d\033\u0138\034\u0139\035" +
    "\u0129\036\u0128\037\u0130\040\u012c\041\u0131\042\u0135\167\252" +
    "\224\u0137\232\243\237\256\001\002\000\002\001\ufe2a\000" +
    "\002\001\ufe29\000\012\122\u013c\123\u013b\175\u013f\225\u013e" +
    "\001\002\000\002\001\ufe79\000\002\001\ufe77\000\052\005" +
    "\223\006\253\010\244\026\257\027\255\030\241\031\260" +
    "\032\u012d\033\u0138\034\u0139\035\u0129\036\u0128\037\u0130\040" +
    "\u012c\041\u0131\042\u0135\167\252\224\u0137\232\243\237\256" +
    "\001\002\000\002\001\ufe48\000\002\001\ufe78\000\024\021" +
    "\u0143\022\u0147\023\u0149\024\u014e\025\u0146\147\u0145\157\u0144" +
    "\172\u014b\230\u014a\001\ufe50\000\052\005\223\006\253\010" +
    "\244\026\257\027\255\030\241\031\260\032\u012d\033\u0138" +
    "\034\u0139\035\u0129\036\u0128\037\u0130\040\u012c\041\u0131\042" +
    "\u0135\167\252\224\u0137\232\243\237\256\001\002\000\004" +
    "\175\u0152\001\ufe3c\000\002\001\ufe3f\000\002\001\ufe38\000" +
    "\004\226\u0150\001\ufded\000\002\001\ufe41\000\002\001\ufe3d" +
    "\000\002\001\ufe44\000\002\001\ufe40\000\002\001\ufe37\000" +
    "\022\021\u0143\022\u0147\023\u0149\024\u014e\025\u0146\147\u0145" +
    "\157\u0144\230\u014a\001\002\000\002\001\ufe42\000\002\001" +
    "\ufe3b\000\002\001\ufe3e\000\002\001\ufe43\000\002\001\ufdee" +
    "\000\002\001\ufe39\000\010\147\u0145\157\u0144\230\u014a\001" +
    "\002\000\002\001\ufe3a\000\002\001\ufe4e\000\002\001\ufe4d" +
    "\000\002\001\ufe4c\000\026\005\223\006\253\010\244\026" +
    "\257\027\255\030\241\031\260\167\252\232\243\237\256" +
    "\001\002\000\002\001\ufe46\000\002\001\ufec4\000\034\005" +
    "\223\006\253\010\244\026\257\027\255\030\241\031\260" +
    "\155\u015b\156\u015c\167\252\231\u0161\232\243\237\256\001" +
    "\002\000\026\005\223\006\253\010\244\026\257\027\255" +
    "\030\241\031\260\167\252\232\243\237\256\001\002\000" +
    "\004\005\223\001\002\000\002\001\ufebe\000\002\001\ufebf" +
    "\000\002\001\ufec2\000\010\155\u015b\156\u015c\231\u0161\001" +
    "\ufec3\000\002\001\ufe7c\000\002\001\ufec1\000\002\001\ufe15" +
    "\000\004\005\223\001\ufe81\000\002\001\ufe14\000\026\005" +
    "\223\006\253\010\244\026\257\027\255\030\241\031\260" +
    "\167\252\232\243\237\256\001\ufec0\000\050\005\u016f\006" +
    "\u0172\010\u016d\032\u012d\033\u0138\034\u0139\035\u0129\036\u0128" +
    "\037\u0130\040\u012c\041\u0131\042\u0135\120\u0173\170\u0174\171" +
    "\u016a\173\u0175\201\u0170\224\u0176\227\u016e\001\ufe66\000\002" +
    "\001\ufe95\000\002\001\ufe65\000\002\001\ufe61\000\002\001" +
    "\ufe63\000\002\001\ufe2e\000\002\001\ufe31\000\002\001\ufe62" +
    "\000\002\001\ufe32\000\002\001\ufe5e\000\050\005\u016f\006" +
    "\u0172\010\u016d\032\u012d\033\u0138\034\u0139\035\u0129\036\u0128" +
    "\037\u0130\040\u012c\041\u0131\042\u0135\120\u0173\170\u0174\171" +
    "\u016a\173\u0175\201\u0170\224\u0176\227\u016e\001\ufe67\000\002" +
    "\001\ufe30\000\002\001\ufe5d\000\002\001\ufe5f\000\002\001" +
    "\ufe60\000\034\005\u016f\006\u0172\010\u016d\032\u012d\033\u0138" +
    "\034\u0139\035\u0129\036\u0128\037\u0130\040\u012c\041\u0131\042" +
    "\u0135\224\u0176\001\002\000\002\001\ufe34\000\036\005\u016f" +
    "\006\u0172\010\u016d\032\u012d\033\u0138\034\u0139\035\u0129\036" +
    "\u0128\037\u0130\040\u012c\041\u0131\042\u0135\224\u0176\225\u017a" +
    "\001\002\000\002\001\ufe33\000\002\001\ufe2f\000\002\001" +
    "\ufe64\000\002\001\ufdf4\000\026\005\223\006\253\010\244" +
    "\026\257\027\255\030\241\031\260\167\252\232\243\237" +
    "\256\001\002\000\004\222\u0184\001\ufeeb\000\002\001\ufeee" +
    "\000\002\001\ufee8\000\002\001\ufeea\000\002\001\ufeed\000" +
    "\004\222\u0184\001\ufeec\000\026\005\223\006\253\010\244" +
    "\026\257\027\255\030\241\031\260\167\252\232\243\237" +
    "\256\001\002\000\002\001\ufee7\000\002\001\ufee9\000\010" +
    "\122\u013c\123\u013b\175\u013f\001\uff3e\000\004\165\u0189\001" +
    "\ufed2\000\024\021\u0143\022\u0147\023\u0149\024\u014e\025\u0146" +
    "\147\u0145\157\u0144\172\u014b\230\u014a\001\002\000\002\001" +
    "\ufed4\000\026\005\223\006\253\010\244\026\257\027\255" +
    "\030\241\031\260\167\252\232\243\237\256\001\002\000" +
    "\002\001\ufed3\000\010\005\223\127\u0191\226\u018f\001\002" +
    "\000\002\001\ufe92\000\026\005\223\006\253\010\244\026" +
    "\257\027\255\030\241\031\260\167\252\232\243\237\256" +
    "\001\002\000\002\001\ufee6\000\026\005\223\006\253\010" +
    "\244\026\257\027\255\030\241\031\260\167\252\232\243" +
    "\237\256\001\002\000\002\001\ufee4\000\002\001\ufee5\000" +
    "\002\001\uff86\000\002\001\uff8b\000\002\001\uff87\000\002" +
    "\001\uff88\000\004\155\u0199\001\uff7c\000\026\005\223\006" +
    "\253\010\244\026\257\027\255\030\241\031\260\167\252" +
    "\232\243\237\256\001\002\000\002\001\uff94\000\004\005" +
    "\u019c\001\uff92\000\002\001\uff93\000\002\001\uff7d\000\034" +
    "\005\u016f\006\u0172\010\u016d\032\u012d\033\u0138\034\u0139\035" +
    "\u0129\036\u0128\037\u0130\040\u012c\041\u0131\042\u0135\224\u0176" +
    "\001\ufe36\000\002\001\uffcc\000\002\001\ufe93\000\004\135" +
    "\u01a4\001\ufeba\000\002\001\ufebd\000\002\001\ufebb\000\004" +
    "\127\u0122\001\ufdf1\000\004\161\u01a7\001\002\000\010\200" +
    "\u011d\203\u01bb\213\u01b7\001\ufea9\000\004\005\223\001\002" +
    "\000\006\133\u01af\136\u01ac\001\ufeaf\000\002\001\ufeb3\000" +
    "\004\005\223\001\ufeb4\000\002\001\ufeb2\000\004\163\u01b2" +
    "\001\ufdef\000\002\001\ufeb1\000\006\133\u01af\136\u01ac\001" +
    "\ufeb0\000\004\163\u01b2\001\ufdef\000\002\001\ufeae\000\004" +
    "\005\223\001\002\000\002\001\ufdf0\000\002\001\ufeab\000" +
    "\002\001\ufead\000\004\005\223\001\002\000\002\001\ufeac" +
    "\000\004\163\u01b2\001\ufdef\000\002\001\ufea4\000\002\001" +
    "\ufebc\000\010\200\u011d\203\u01bb\213\u01b7\001\ufeaa\000\004" +
    "\005\223\001\002\000\002\001\ufea8\000\002\001\ufea6\000" +
    "\002\001\ufea7\000\004\005\223\001\002\000\002\001\ufea5" +
    "\000\004\121\u017c\001\ufdf3\000\030\005\223\006\253\010" +
    "\244\026\257\027\255\030\241\031\260\167\252\175\u01c3" +
    "\232\243\237\256\001\002\000\002\001\ufeb5\000\002\001" +
    "\ufeb8\000\030\005\223\006\253\010\244\026\257\027\255" +
    "\030\241\031\260\167\252\175\u01c3\232\243\237\256\001" +
    "\ufeb9\000\002\001\ufeb6\000\002\001\ufeb7\000\002\001\uffea" +
    "\000\002\001\uffee\000\164\044\156\045\117\046\100\047" +
    "\220\050\125\051\017\052\212\053\065\054\165\055\113" +
    "\056\054\057\110\060\200\061\103\062\215\063\160\064" +
    "\146\065\141\066\064\067\166\070\032\071\025\072\172" +
    "\073\043\074\076\075\033\076\214\077\130\100\023\101" +
    "\171\102\120\103\134\104\027\105\170\106\161\107\213" +
    "\110\163\111\153\112\206\113\173\114\052\115\164\116" +
    "\143\117\106\125\162\140\122\141\045\142\142\143\102" +
    "\144\203\145\112\150\202\162\012\223\073\234\211\235" +
    "\070\236\105\001\uffe6\000\004\007\u01cc\001\uffec\000\004" +
    "\211\u01ce\001\uffe3\000\004\144\u01cf\001\002\000\002\001" +
    "\uffe4\000\002\001\uffe5\000\002\001\uffe9\000\002\001\uffe8" +
    "\000\012\120\u01de\126\u01d8\146\u01d3\155\u01db\001\ufea0\000" +
    "\002\001\ufe96\000\002\001\ufe9d\000\002\001\ufe9a\000\026" +
    "\005\223\006\253\010\244\026\257\027\255\030\241\031" +
    "\260\167\252\232\243\237\256\001\002\000\002\001\ufe9b" +
    "\000\002\001\ufe7b\000\002\001\ufe9f\000\002\001\ufea2\000" +
    "\026\005\223\006\253\010\244\026\257\027\255\030\241" +
    "\031\260\167\252\232\243\237\256\001\002\000\012\120" +
    "\u01de\126\u01d8\146\u01d3\155\u01db\001\ufea1\000\002\001\ufe9c" +
    "\000\026\005\ufe7a\006\ufe7a\010\ufe7a\026\ufe7a\027\ufe7a\030" +
    "\ufe7a\031\ufe7a\167\ufe7a\232\ufe7a\237\ufe7a\001\ufe97\000\002" +
    "\001\ufe9e\000\002\001\ufe99\000\002\001\ufe98\000\002\001" +
    "\uffb6\000\002\001\uff65\000\002\001\uffe1\000\006\161\u01eb" +
    "\165\u01e6\001\ufef5\000\026\005\223\006\253\010\244\026" +
    "\257\027\255\030\241\031\260\167\252\232\243\237\256" +
    "\001\002\000\002\001\ufef4\000\002\001\uff81\000\006\161" +
    "\u01eb\165\u01e6\001\ufef6\000\002\001\ufef1\000\004\005\223" +
    "\001\002\000\002\001\ufef2\000\002\001\ufef0\000\002\001" +
    "\ufef3\000\002\001\ufeef\000\002\001\ufe94\000\012\120\u01de" +
    "\126\u01d8\146\u01d3\155\u01db\001\ufea0\000\002\001\ufea3\000" +
    "\004\127\u01fc\001\002\000\002\001\uff23\000\006\156\u015c" +
    "\231\u0161\001\uff1f\000\002\001\uff1e\000\006\156\u015c\231" +
    "\u0161\001\uff20\000\002\001\uff22\000\002\001\uff1b\000\002" +
    "\001\uff1c\000\002\001\uff1d\000\026\005\223\006\253\010" +
    "\244\026\257\027\255\030\241\031\260\167\252\232\243" +
    "\237\256\001\002\000\002\001\uff21\000\054\005\223\006" +
    "\253\010\244\026\257\027\255\030\241\031\260\032\u012d" +
    "\033\u0138\034\u0139\035\u0129\036\u0128\037\u0130\040\u012c\041" +
    "\u0131\042\u0135\167\252\176\u0200\224\u0137\232\243\237\256" +
    "\001\002\000\012\122\u013c\123\u013b\175\u013f\215\u0204\001" +
    "\uff45\000\002\001\uff47\000\002\001\uff4b\000\002\001\uff4a" +
    "\000\002\001\uff49\000\052\005\223\006\253\010\244\026" +
    "\257\027\255\030\241\031\260\032\u012d\033\u0138\034\u0139" +
    "\035\u0129\036\u0128\037\u0130\040\u012c\041\u0131\042\u0135\167" +
    "\252\224\u0137\232\243\237\256\001\002\000\002\001\uff48" +
    "\000\010\122\u013c\123\u013b\175\u013f\001\uff46\000\010\121" +
    "\u0215\132\u0218\210\u0219\001\ufe89\000\004\025\u0209\001\002" +
    "\000\030\005\223\006\253\010\244\026\257\027\255\030" +
    "\241\031\260\167\252\224\261\232\243\237\256\001\002" +
    "\000\032\005\223\006\253\010\244\026\257\027\255\030" +
    "\241\031\260\167\252\224\261\231\u0161\232\243\237\256" +
    "\001\uff5e\000\002\001\uff60\000\002\001\uff62\000\002\001" +
    "\uff64\000\004\231\u0161\001\uff5f\000\002\001\uff5b\000\002" +
    "\001\uff5d\000\002\001\uff61\000\002\001\uff5c\000\002\001" +
    "\ufe84\000\002\001\ufe88\000\002\001\ufe83\000\002\001\uff63" +
    "\000\002\001\ufe85\000\002\001\ufe82\000\002\001\ufe80\000" +
    "\002\001\ufe86\000\002\001\ufe8a\000\002\001\ufe87\000\004" +
    "\005\u021e\001\002\000\002\001\uff43\000\006\005\u0220\134" +
    "\u0223\001\uff40\000\002\001\uff42\000\002\001\uff44\000\002" +
    "\001\uff41\000\026\005\223\006\253\010\244\026\257\027" +
    "\255\030\241\031\260\167\252\232\243\237\256\001\002" +
    "\000\002\001\uff3f\000\002\001\uffc0\000\026\005\223\006" +
    "\253\010\244\026\257\027\255\030\241\031\260\167\252" +
    "\232\243\237\256\001\uff5a\000\002\001\uff05\000\002\001" +
    "\uff08\000\020\120\u0233\153\u0230\214\u022b\215\u022d\216\u0227" +
    "\217\u0234\222\u0237\001\uff09\000\002\001\uff10\000\006\120" +
    "\u0249\126\u0248\001\002\000\002\001\uff00\000\004\005\223" +
    "\001\002\000\044\005\223\006\253\010\244\026\257\027" +
    "\255\030\241\031\260\120\u0233\153\u0230\167\252\214\u022b" +
    "\215\u022d\216\u0227\217\u0234\222\u0237\232\243\237\256\001" +
    "\uff0d\000\002\001\uff03\000\002\001\uff06\000\002\001\uff02" +
    "\000\002\001\uff0b\000\026\005\223\006\253\010\244\026" +
    "\257\027\255\030\241\031\260\167\252\232\243\237\256" +
    "\001\002\000\052\005\223\006\253\010\244\026\257\027" +
    "\255\030\241\031\260\032\u012d\033\u0138\034\u0139\035\u0129" +
    "\036\u0128\037\u0130\040\u012c\041\u0131\042\u0135\167\252\224" +
    "\u0137\232\243\237\256\001\002\000\002\001\uff01\000\002" +
    "\001\uff04\000\026\005\223\006\253\010\244\026\257\027" +
    "\255\030\241\031\260\167\252\232\243\237\256\001\002" +
    "\000\004\155\u023a\001\002\000\002\001\ufe0c\000\026\005" +
    "\223\006\253\010\244\026\257\027\255\030\241\031\260" +
    "\167\252\232\243\237\256\001\002\000\004\127\u023c\001" +
    "\002\000\026\005\223\006\253\010\244\026\257\027\255" +
    "\030\241\031\260\167\252\232\243\237\256\001\002\000" +
    "\002\001\ufef9\000\010\122\u013c\123\u013b\175\u013f\001\ufefa" +
    "\000\004\155\u0240\001\002\000\026\005\223\006\253\010" +
    "\244\026\257\027\255\030\241\031\260\167\252\232\243" +
    "\237\256\001\002\000\004\127\u0242\001\002\000\026\005" +
    "\223\006\253\010\244\026\257\027\255\030\241\031\260" +
    "\167\252\232\243\237\256\001\002\000\002\001\ufef8\000" +
    "\002\001\ufeff\000\002\001\ufefe\000\002\001\uff07\000\002" +
    "\001\ufefb\000\002\001\ufefd\000\002\001\ufefc\000\044\005" +
    "\223\006\253\010\244\026\257\027\255\030\241\031\260" +
    "\120\u0233\153\u0230\167\252\214\u022b\215\u022d\216\u0227\217" +
    "\u0234\222\u0237\232\243\237\256\001\uff0a\000\002\001\uff0e" +
    "\000\030\005\223\006\253\010\244\026\257\027\255\030" +
    "\241\031\260\167\252\224\261\232\243\237\256\001\002" +
    "\000\004\226\u024e\001\002\000\004\005\223\001\002\000" +
    "\004\005\223\001\uff24\000\006\127\u0253\161\u0252\001\002" +
    "\000\006\156\u015c\210\u0219\001\uff54\000\004\005\223\001" +
    "\002\000\026\005\223\006\253\010\244\026\257\027\255" +
    "\030\241\031\260\167\252\232\243\237\256\001\002\000" +
    "\026\005\223\006\253\010\244\026\257\027\255\030\241" +
    "\031\260\167\252\232\243\237\256\001\uff56\000\004\005" +
    "\223\001\uff57\000\002\001\uff59\000\006\156\u015c\210\u0219" +
    "\001\uff55\000\002\001\uff53\000\002\001\uff50\000\002\001" +
    "\uff51\000\002\001\uff52\000\006\005\223\206\u025f\001\uff3a" +
    "\000\002\001\uff3d\000\002\001\uff3c\000\026\005\223\006" +
    "\253\010\244\026\257\027\255\030\241\031\260\121\u0262" +
    "\127\u0260\237\256\001\002\000\002\001\uff35\000\002\001" +
    "\uff37\000\002\001\uff34\000\026\005\223\006\253\010\244" +
    "\026\257\027\255\030\241\031\260\121\u0262\127\u0260\237" +
    "\256\001\uff3b\000\002\001\uff36\000\002\001\uff39\000\002" +
    "\001\uff38\000\054\005\223\006\253\010\244\026\257\027" +
    "\255\030\241\031\260\120\u0270\121\u026a\126\u026d\127\u026c" +
    "\130\u0269\131\u0268\152\u0273\166\u026b\167\252\206\u0272\213" +
    "\u0275\226\u0274\232\243\237\256\001\002\000\002\001\uff26" +
    "\000\002\001\uff2a\000\002\001\uff30\000\002\001\uff2c\000" +
    "\002\001\uff2f\000\002\001\uff2e\000\054\005\223\006\253" +
    "\010\244\026\257\027\255\030\241\031\260\120\u0270\121" +
    "\u026a\126\u026d\127\u026c\130\u0269\131\u0268\152\u0273\166\u026b" +
    "\167\252\206\u0272\213\u0275\226\u0274\232\243\237\256\001" +
    "\uff33\000\002\001\uff25\000\002\001\uff2d\000\002\001\uff32" +
    "\000\002\001\uff27\000\002\001\uff2b\000\002\001\uff29\000" +
    "\002\001\uff28\000\002\001\uff31\000\006\161\u01eb\165\u01e6" +
    "\001\ufef5\000\002\001\ufef7\000\010\154\u027e\173\u0281\227" +
    "\u027d\001\ufe6d\000\002\001\ufe90\000\004\005\u0279\001\ufe91" +
    "\000\002\001\ufe8f\000\002\001\ufe6a\000\002\001\ufe68\000" +
    "\002\001\ufe8e\000\002\001\ufe6c\000\002\001\ufe69\000\010" +
    "\154\u027e\173\u0281\227\u027d\001\ufe6e\000\002\001\ufe6b\000" +
    "\002\001\ufe8c\000\026\005\223\006\253\010\244\026\257" +
    "\027\255\030\241\031\260\167\252\232\243\237\256\001" +
    "\002\000\030\005\223\006\253\010\244\026\257\027\255" +
    "\030\241\031\260\167\252\226\u0287\232\243\237\256\001" +
    "\002\000\004\005\223\001\002\000\012\005\223\132\u0218" +
    "\156\u015c\210\u0219\001\uff78\000\002\001\uff77\000\002\001" +
    "\uff74\000\002\001\uff73\000\002\001\uff75\000\002\001\uff7b" +
    "\000\010\132\u0218\156\u015c\210\u0219\001\uff79\000\002\001" +
    "\uff76\000\002\001\000\000\002\001\uffff\000\004\005\u0293" +
    "\001\002\000\004\144\u0294\001\002\000\002\001\ufffe\000" +
    "\026\005\223\006\253\010\244\026\257\027\255\030\241" +
    "\031\260\167\252\232\243\237\256\001\002\000\002\001" +
    "\ufffb\000\002\001\ufff6\000\004\005\u029e\001\ufff1\000\002" +
    "\001\ufffa\000\006\207\u0295\220\u0298\001\ufff8\000\002\001" +
    "\ufff5\000\004\144\u029d\001\002\000\002\001\ufff9\000\002" +
    "\001\ufff0\000\002\001\ufff4\000\004\005\u02a1\001\ufff2\000" +
    "\002\001\uffef\000\002\001\ufff3" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u02a0\000\012\002\004\004\007\143\006\144\005\001" +
    "\001\000\012\161\u0295\164\u0298\165\u0299\166\u0296\001\001" +
    "\000\004\003\u0290\001\001\000\002\001\001\000\002\001" +
    "\001\000\242\005\047\007\010\021\035\022\037\040\175" +
    "\046\126\056\146\066\215\101\173\150\134\151\045\155" +
    "\120\156\020\157\137\160\041\167\057\170\132\171\014" +
    "\172\144\173\050\174\122\175\150\176\040\177\100\200" +
    "\135\201\166\202\070\203\115\204\062\205\066\206\176" +
    "\207\113\210\200\215\012\216\046\232\106\233\034\234" +
    "\060\240\015\241\154\242\220\243\076\244\103\245\123" +
    "\246\207\247\061\250\136\251\151\253\110\256\156\267" +
    "\174\270\052\271\025\272\030\273\071\274\021\275\043" +
    "\276\073\301\216\302\074\303\027\304\206\305\065\306" +
    "\023\307\054\310\204\311\033\313\017\314\036\315\056" +
    "\316\055\317\013\320\131\321\130\322\114\323\153\324" +
    "\147\325\203\326\125\327\143\001\001\000\016\u010b\u0284" +
    "\u010c\u021a\u010d\u0213\u010e\u0219\u010f\u0216\u0111\u0212\001\001\000" +
    "\004\u0119\u0283\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\334\u0279\335" +
    "\u027a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\362" +
    "\237\367\u0266\371\244\372\241\376\253\377\223\u0101\226" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\027\u025c\373\u0162\374\u025b" +
    "\376\336\377\223\u0101\226\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\362\237\367\u024f\371\244\372\241\376" +
    "\253\377\223\u0101\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\u010b\u024b\u010c\u021a\u010d\u0213\u010e\u0219\u010f" +
    "\u0216\u0111\u0212\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\217\u0229\221\u022d\222\u0227\224" +
    "\u0228\225\u022b\226\u0235\227\u022e\230\u0230\231\u0234\376\u0231" +
    "\377\223\u0101\226\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\362\237" +
    "\367\u0105\371\244\372\241\375\u0225\376\253\377\223\u0101" +
    "\226\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\370\u016b\u0113\u0176\u0114\u019d\u0115\u0224\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\u011a\u021c\001\001\000\014\013\u0207\373\u0206\376" +
    "\336\377\223\u0101\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\u011d\u01fd\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\033\u01f3\034\u01f4\362\237\367\u01f2\371" +
    "\244\372\241\376\253\377\223\u0101\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\232\007\010\021\035\022\037" +
    "\040\175\046\126\056\146\066\215\101\173\156\u01e3\157" +
    "\137\160\041\167\057\170\132\171\014\172\144\173\050" +
    "\174\122\175\150\176\040\177\100\200\135\201\166\202" +
    "\070\203\115\204\062\205\066\206\176\207\113\210\200" +
    "\215\012\216\046\232\106\233\034\234\060\240\015\241" +
    "\154\242\220\243\076\244\103\245\123\246\207\247\061" +
    "\250\136\251\151\253\110\256\156\267\174\270\052\271" +
    "\025\272\030\273\071\274\021\275\043\276\073\301\216" +
    "\302\074\303\027\304\206\305\065\306\023\307\054\310" +
    "\204\311\033\313\017\314\036\315\056\316\055\317\013" +
    "\320\131\321\130\322\114\323\153\324\147\325\203\326" +
    "\125\327\143\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\362\237\367\u01e2\371\244\372" +
    "\241\376\253\377\223\u0101\226\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\370\u016b\u0113\u0176\u0114\u019d\u0115\u01e1\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\145\u01c8\146\u01ca\147" +
    "\u01c7\152\u01c9\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\105\u01a1\362\237\367\u01a0\371\244\372\241\376\253" +
    "\377\223\u0101\226\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\370\u016b\u0113" +
    "\u0176\u0114\u019d\u0115\u019f\001\001\000\012\370\u016b\u0113\u0176" +
    "\u0114\u019d\u0115\u019e\001\001\000\002\001\001\000\012\373" +
    "\u0197\376\336\377\223\u0101\226\001\001\000\002\001\001" +
    "\000\004\154\u0194\001\001\000\016\054\u018d\373\u0162\374" +
    "\u018c\376\336\377\223\u0101\226\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\344\u012e\350\u0186\351\u012a\352\u0132\354\u0135\357\u0129" +
    "\360\u0133\362\237\367\250\370\u012d\371\244\372\241\376" +
    "\253\377\223\u0101\226\001\001\000\002\001\001\000\004" +
    "\u0116\u017c\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\102\u0158\362\237\367\u0105\371\244\372\241\375\u0159" +
    "\376\253\377\223\u0101\226\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\u011c\u0125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\070\u010d\071\u0111\073\u010f\074\u010e\362\237\367\u0110\371" +
    "\244\372\241\376\253\377\223\u0101\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\u011e\362\001\001\000\010\331\352\332\355" +
    "\333\353\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\266\225\376\224\377\223\u0101\226" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\u0108\341\u0109\337\u010a\342\001\001\000\002" +
    "\001\001\000\006\257\320\260\317\001\001\000\010\u0103" +
    "\230\u0104\231\u0105\232\001\001\000\036\336\245\337\246" +
    "\340\261\343\236\344\247\362\237\367\250\371\244\372" +
    "\241\376\253\377\223\u0101\226\u0106\234\u0107\235\001\001" +
    "\000\002\001\001\000\004\u0105\233\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\341\276\001\001\000\004\361\272\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\336\245\337\246\340\262\343\236\344\247\362\237\367" +
    "\250\371\244\372\241\376\253\377\223\u0101\226\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\362\237\367\265\371\244\372\241\376\253\377\223" +
    "\u0101\226\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\343\274\344\247\362\237\367\250\371\244\372\241\376" +
    "\253\377\223\u0101\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\342\277\344\300\362\237\367\250\371" +
    "\244\372\241\376\253\377\223\u0101\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\363" +
    "\303\001\001\000\042\336\245\337\246\340\310\343\236" +
    "\344\247\362\237\364\305\365\307\366\304\367\250\371" +
    "\244\372\241\376\253\377\223\u0101\226\u0102\306\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\336\245\337\246\340\310\343\236\344\247\362\237\366" +
    "\312\367\250\371\244\372\241\376\253\377\223\u0101\226" +
    "\u0102\306\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\336\245\337\246\340\261\343\236\344\247\362\237" +
    "\367\250\371\244\372\241\376\253\377\223\u0101\226\u0107" +
    "\316\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\261\334\262\333\001\001\000\024\263" +
    "\323\264\322\362\237\367\325\371\244\372\241\376\253" +
    "\377\223\u0101\226\001\001\000\002\001\001\000\022\264" +
    "\331\362\237\367\325\371\244\372\241\376\253\377\223" +
    "\u0101\226\001\001\000\004\265\326\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\373\335\376\336\377\223\u0101" +
    "\226\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\u010a\346\001\001\000" +
    "\006\377\345\u0101\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\377\344\u0101\226\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\332\361\333" +
    "\353\001\001\000\004\330\357\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\057\u0102\060\u0101\061\370\062\375\063\365\064\367\065" +
    "\376\134\364\001\001\000\004\u0119\u010b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\362\237" +
    "\367\u0105\371\244\372\241\375\u0107\376\253\377\223\u0101" +
    "\226\001\001\000\022\362\237\367\u0105\371\244\372\241" +
    "\375\u0104\376\253\377\223\u0101\226\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\060\u0103\061\370\062\375\063" +
    "\365\064\367\065\376\134\364\001\001\000\002\001\001" +
    "\000\020\362\237\367\u0106\371\244\372\241\376\253\377" +
    "\223\u0101\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\362\237\367\u0106\371\244\372\241\376\253\377" +
    "\223\u0101\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\362\237\367\u0105\371\244\372" +
    "\241\375\u010c\376\253\377\223\u0101\226\001\001\000\020" +
    "\362\237\367\u0106\371\244\372\241\376\253\377\223\u0101" +
    "\226\001\001\000\002\001\001\000\022\075\u011f\362\237" +
    "\367\u011e\371\244\372\241\376\253\377\223\u0101\226\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\072\u0113" +
    "\073\u0112\074\u010e\362\237\367\u0110\371\244\372\241\376" +
    "\253\377\223\u0101\226\001\001\000\002\001\001\000\006" +
    "\277\u011a\300\u011b\001\001\000\012\373\u0115\376\336\377" +
    "\223\u0101\226\001\001\000\006\077\u0116\100\u0117\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\373\u0119\376" +
    "\336\377\223\u0101\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\u0117" +
    "\u0120\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\076\u0122\362\237\367\u0123\371\244\372\241\376\253\377" +
    "\223\u0101\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\211\u0131\344" +
    "\u012e\350\u0126\351\u012a\352\u0132\354\u0135\357\u0129\360\u0133" +
    "\362\237\367\250\370\u012d\371\244\372\241\376\253\377" +
    "\223\u0101\226\001\001\000\004\132\u013c\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\361\u0156\001\001\000" +
    "\014\345\u014b\346\u0140\347\u0147\355\u014c\356\u0141\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\353\u0154\370\u0155\001\001\000\040\344\u012e" +
    "\350\u0139\351\u012a\352\u0132\354\u0135\357\u0129\360\u0133\362" +
    "\237\367\250\370\u012d\371\244\372\241\376\253\377\223" +
    "\u0101\226\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\132\u013c\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\344\u012e\351\u013f\352\u0132\354\u0135\357\u0129\360" +
    "\u0133\362\237\367\250\370\u012d\371\244\372\241\376\253" +
    "\377\223\u0101\226\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\345\u014b\346\u0140\347\u0147\355\u014c\356\u0141" +
    "\001\001\000\034\344\u012e\352\u0153\354\u0135\357\u0129\360" +
    "\u0133\362\237\367\250\370\u012d\371\244\372\241\376\253" +
    "\377\223\u0101\226\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\u011a\u0150\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\345\u014e\355\u014c\356\u0141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\355\u0152\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\344\u012e" +
    "\360\u0157\362\237\367\250\371\244\372\241\376\253\377" +
    "\223\u0101\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\103\u015f\104\u015e\362\237\367\u0106\371\244\372" +
    "\241\376\253\377\223\u0101\226\u0110\u015d\u0112\u015c\001\001" +
    "\000\022\362\237\367\u0105\371\244\372\241\375\u0165\376" +
    "\253\377\223\u0101\226\001\001\000\014\373\u0162\374\u0163" +
    "\376\336\377\223\u0101\226\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\104\u0161\u0110\u015d" +
    "\u0112\u015c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\373\u0164\376\336\377\223\u0101\226" +
    "\001\001\000\002\001\001\000\020\362\237\367\u0106\371" +
    "\244\372\241\376\253\377\223\u0101\226\001\001\000\014" +
    "\140\u0167\141\u0170\142\u0168\370\u016b\u0113\u016a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\142\u017a" +
    "\370\u016b\u0113\u016a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\370\u016b" +
    "\u0113\u0176\u0114\u0177\001\001\000\002\001\001\000\006\370" +
    "\u016b\u0113\u0178\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\047\u017e\362" +
    "\237\367\u017d\371\244\372\241\376\253\377\223\u0101\226" +
    "\001\001\000\012\050\u0181\051\u0182\052\u0180\053\u017f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\052\u0185\053\u017f\001\001\000" +
    "\020\362\237\367\u0184\371\244\372\241\376\253\377\223" +
    "\u0101\226\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\132\u013c\001\001\000\004\067\u0189\001\001\000\014" +
    "\345\u014b\346\u018a\347\u0147\355\u014c\356\u0141\001\001\000" +
    "\002\001\001\000\020\362\237\367\u018b\371\244\372\241" +
    "\376\253\377\223\u0101\226\001\001\000\002\001\001\000" +
    "\014\055\u018f\373\u0164\376\336\377\223\u0101\226\001\001" +
    "\000\002\001\001\000\020\362\237\367\u0192\371\244\372" +
    "\241\376\253\377\223\u0101\226\001\001\000\002\001\001" +
    "\000\020\362\237\367\u0191\371\244\372\241\376\253\377" +
    "\223\u0101\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\u0199\001\001\000\020\362\237" +
    "\367\u019a\371\244\372\241\376\253\377\223\u0101\226\001" +
    "\001\000\002\001\001\000\004\252\u019c\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\370\u016b\u0113\u0178\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\106\u01a4" +
    "\112\u01a2\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\u0117\u01c0\001\001\000\004\107\u01a5\001\001\000\012" +
    "\120\u01b8\121\u01b9\122\u01bb\300\u01b7\001\001\000\016\110" +
    "\u01a9\111\u01a8\373\u01a7\376\336\377\223\u0101\226\001\001" +
    "\000\010\115\u01ac\116\u01ad\117\u01af\001\001\000\002\001" +
    "\001\000\014\111\u01aa\373\u01a7\376\336\377\223\u0101\226" +
    "\001\001\000\002\001\001\000\004\u0118\u01b4\001\001\000" +
    "\002\001\001\000\004\117\u01b3\001\001\000\004\u0118\u01b0" +
    "\001\001\000\002\001\001\000\012\373\u01b2\376\336\377" +
    "\223\u0101\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\373\u01b5\376\336\377\223\u0101" +
    "\226\001\001\000\002\001\001\000\004\u0118\u01be\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\122\u01bd\300" +
    "\u01b7\001\001\000\012\373\u01bc\376\336\377\223\u0101\226" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\373\u01bf\376\336\377\223\u0101\226\001\001" +
    "\000\002\001\001\000\004\u0116\u01c1\001\001\000\024\113" +
    "\u01c4\114\u01c3\362\237\367\u01c5\371\244\372\241\376\253" +
    "\377\223\u0101\226\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\114\u01c6\362\237\367\u01c5\371\244\372\241" +
    "\376\253\377\223\u0101\226\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\236" +
    "\007\010\021\035\022\037\040\175\046\126\056\146\066" +
    "\215\101\173\151\u01d0\155\120\156\020\157\137\160\041" +
    "\167\057\170\132\171\014\172\144\173\050\174\122\175" +
    "\150\176\040\177\100\200\135\201\166\202\070\203\115" +
    "\204\062\205\066\206\176\207\113\210\200\215\012\216" +
    "\046\232\106\233\034\234\060\240\015\241\154\242\220" +
    "\243\076\244\103\245\123\246\207\247\061\250\136\251" +
    "\151\253\110\256\156\267\174\270\052\271\025\272\030" +
    "\273\071\274\021\275\043\276\073\301\216\302\074\303" +
    "\027\304\206\305\065\306\023\307\054\310\204\311\033" +
    "\313\017\314\036\315\056\316\055\317\013\320\131\321" +
    "\130\322\114\323\153\324\147\325\203\326\125\327\143" +
    "\001\001\000\006\147\u01cf\152\u01c9\001\001\000\004\153" +
    "\u01cc\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\123" +
    "\u01d9\124\u01db\125\u01d8\126\u01d3\127\u01dc\130\u01d6\131\u01d4" +
    "\133\u01d5\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\362\237\367\u01e0\371\244\372\241" +
    "\376\253\377\223\u0101\226\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\362\237\367\u01df\371\244\372\241\376\253\377\223\u0101" +
    "\226\001\001\000\016\125\u01de\126\u01d3\127\u01dc\130\u01d6" +
    "\131\u01d4\133\u01d5\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\041\u01e7\042\u01e8\043\u01e6\044\u01eb\045\u01e9\001\001" +
    "\000\020\362\237\367\u01ee\371\244\372\241\376\253\377" +
    "\223\u0101\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\043\u01ed\044\u01eb\045\u01e9\001\001\000\002\001" +
    "\001\000\012\373\u01ec\376\336\377\223\u0101\226\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\123\u01f1\124\u01db" +
    "\125\u01d8\126\u01d3\127\u01dc\130\u01d6\131\u01d4\133\u01d5\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\035\u01f7\036\u01f6\037\u01f5\u0110\u01f9\u0112\u01f8\001" +
    "\001\000\002\001\001\000\010\037\u01fa\u0110\u01f9\u0112\u01f8" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\362\237\367\u01fc\371\244" +
    "\372\241\376\253\377\223\u0101\226\001\001\000\002\001" +
    "\001\000\046\212\u0200\213\u0201\214\u0202\344\u012e\350\u01fe" +
    "\351\u012a\352\u0132\354\u0135\357\u0129\360\u0133\362\237\367" +
    "\250\370\u012d\371\244\372\241\376\253\377\223\u0101\226" +
    "\001\001\000\006\132\u013c\312\u0204\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\344\u012e\350\u0205\351\u012a\352\u0132\354\u0135\357" +
    "\u0129\360\u0133\362\237\367\250\370\u012d\371\244\372\241" +
    "\376\253\377\223\u0101\226\001\001\000\002\001\001\000" +
    "\004\132\u013c\001\001\000\016\u010b\u0215\u010c\u021a\u010d\u0213" +
    "\u010e\u0219\u010f\u0216\u0111\u0212\001\001\000\002\001\001\000" +
    "\034\014\u0209\015\u020b\336\u020a\337\246\343\236\344\247" +
    "\362\237\367\250\371\244\372\241\376\253\377\223\u0101" +
    "\226\001\001\000\042\015\u0210\016\u020c\017\u020d\020\u020f" +
    "\336\u020a\337\246\343\236\344\247\362\237\367\250\371" +
    "\244\372\241\376\253\377\223\u0101\226\u0112\u020e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\u0211\u0112\u020e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\u010d\u021b\001\001\000\002\001\001" +
    "\000\004\235\u021e\001\001\000\002\001\001\000\006\236" +
    "\u0220\237\u0221\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\362\237\367\u0223\371\244\372" +
    "\241\376\253\377\223\u0101\226\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\362\237\367\u0106\371\244\372" +
    "\241\376\253\377\223\u0101\226\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\220\u024a\221\u0249\222\u0227\225" +
    "\u022b\226\u0235\227\u022e\230\u0230\231\u0234\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\u0101" +
    "\u0246\001\001\000\040\222\u0243\223\u0245\225\u022b\226\u0235" +
    "\227\u022e\230\u0230\231\u0234\362\237\367\u0238\371\244\372" +
    "\241\376\253\377\223\u0100\u0244\u0101\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\362\237\367\u0238\371\244\372\241\376\253" +
    "\377\223\u0100\u023e\u0101\226\001\001\000\040\344\u012e\350" +
    "\u023d\351\u012a\352\u0132\354\u0135\357\u0129\360\u0133\362\237" +
    "\367\250\370\u012d\371\244\372\241\376\253\377\223\u0101" +
    "\226\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\362\237\367\u0238\371\244\372\241\376\253\377\223\u0100" +
    "\u0237\u0101\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\362\237\367\u0238\371\244\372\241\376\253\377" +
    "\223\u0100\u023a\u0101\226\001\001\000\002\001\001\000\022" +
    "\362\237\367\u0238\371\244\372\241\376\253\377\223\u0100" +
    "\u023c\u0101\226\001\001\000\002\001\001\000\004\132\u013c" +
    "\001\001\000\002\001\001\000\022\362\237\367\u0238\371" +
    "\244\372\241\376\253\377\223\u0100\u0240\u0101\226\001\001" +
    "\000\002\001\001\000\022\362\237\367\u0238\371\244\372" +
    "\241\376\253\377\223\u0100\u0242\u0101\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\222\u0243\223\u0245\225\u022b\226\u0235\227\u022e\230" +
    "\u0230\231\u0234\362\237\367\u0238\371\244\372\241\376\253" +
    "\377\223\u0100\u0244\u0101\226\001\001\000\002\001\001\000" +
    "\030\336\u024c\337\246\343\236\344\247\362\237\367\250" +
    "\371\244\372\241\376\253\377\223\u0101\226\001\001\000" +
    "\002\001\001\000\014\373\u0162\374\u024e\376\336\377\223" +
    "\u0101\226\001\001\000\012\373\u0164\376\336\377\223\u0101" +
    "\226\001\001\000\004\023\u0250\001\001\000\014\024\u0255" +
    "\025\u0256\026\u0257\u0110\u0259\u0111\u0258\001\001\000\014\373" +
    "\u0162\374\u0254\376\336\377\223\u0101\226\001\001\000\022" +
    "\362\237\367\u0105\371\244\372\241\375\u0253\376\253\377" +
    "\223\u0101\226\001\001\000\020\362\237\367\u0106\371\244" +
    "\372\241\376\253\377\223\u0101\226\001\001\000\012\373" +
    "\u0164\376\336\377\223\u0101\226\001\001\000\002\001\001" +
    "\000\010\026\u025a\u0110\u0259\u0111\u0258\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\030\u025d\373\u0164\376\336\377\223\u0101\226\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\031\u0262" +
    "\032\u0264\371\u0263\372\241\376\u0260\377\223\u0101\226\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\032\u0265\371\u0263\372\241\376\u0260\377\223\u0101" +
    "\226\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\254\u026d\255\u0270\362\237\367\u026e\371" +
    "\244\372\241\376\253\377\223\u0101\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\255\u0275" +
    "\362\237\367\u026e\371\244\372\241\376\253\377\223\u0101" +
    "\226\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\041\u0277" +
    "\042\u01e8\043\u01e6\044\u01eb\045\u01e9\001\001\000\002\001" +
    "\001\000\010\135\u027e\136\u0281\137\u027f\001\001\000\002" +
    "\001\001\000\004\334\u027b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\137\u0282\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\362\237\367\u0105" +
    "\371\244\372\241\375\u0285\376\253\377\223\u0101\226\001" +
    "\001\000\020\362\237\367\u0106\371\244\372\241\376\253" +
    "\377\223\u0101\226\001\001\000\014\373\u0162\374\u0287\376" +
    "\336\377\223\u0101\226\001\001\000\026\010\u028c\011\u028d" +
    "\012\u0288\373\u0164\376\336\377\223\u0101\226\u010f\u028a\u0110" +
    "\u028b\u0111\u0289\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\012\u028e\u010f\u028a\u0110\u028b\u0111\u0289\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\362\237" +
    "\367\u02a1\371\244\372\241\376\253\377\223\u0101\226\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\162\u029e" +
    "\163\u029f\001\001\000\004\u011b\u029b\001\001\000\004\166" +
    "\u029a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ZCCode$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ZCCode$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ZCCode$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

  action_obj.initActionClass();

    }


   Module        module   = ModulesFactory.getDefaultModule();
   Summary       summary  = module.getSummary();
   Configuration cfg      = Configuration.getInstance();
   ParserInfo    info     = ParserInfo.getInstance();
             
   public void syntax_error(Symbol token) throws ParseException {
          info.syntax_error(token);
   }

   public void unrecovered_syntax_error(Symbol token) throws ParseException {
      info.unrecovered_syntax_error(token);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ZCCode$actions {


   Module          module   = null;
   Summary         summary  = null;
   Persistence     fichero  = null;
   ZCCCode         code     = null;
   Sections        sections = null;
   ParserInfo      info     = ParserInfo.getInstance();
      
   Variable  currVar  = null;
   StmtCobol lastStmt = null;  // Ultima instruccion
   StmtCobol currStmt = null;  // Instruccion en proceso
   
   boolean   hasEndProgram = false; // Hay STOPRUN o GOBACK?
    
   boolean master     = false;  // El fichero es el maestro?   
   int     numFillers = 0;
   
   // Pila para EVALUATE e IF
   Stack<StmtCobol> stack = new Stack<StmtCobol>();
          
   public void initActionClass() {
      module = ModulesFactory.getMainModule();
      summary = module.getSummary();
      sections = module.getSections();
      code = new ZCCCode(module);
   }

   public String getSymbolName(Symbol s)    { return (String) s.value; }
   public int    getSymbolLine(Symbol s)    { return (int)    s.left;  }
   
   public void debug(String txt) { 
      System.err.println(txt); 
   }
   public void print(String txt) { 
      System.out.println(txt); 
   }


  private final ZCCode parser;

  /** Constructor */
  CUP$ZCCode$actions(ZCCode parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ZCCode$do_action(
    int                        CUP$ZCCode$act_num,
    java_cup.runtime.lr_parser CUP$ZCCode$parser,
    java.util.Stack            CUP$ZCCode$stack,
    int                        CUP$ZCCode$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ZCCode$result;

      /* select the action based on the action number */
      switch (CUP$ZCCode$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 534: // opt_key ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("opt_key",279, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 533: // opt_key ::= KEY 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("opt_key",279, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 532: // opt_to ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("opt_to",280, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 531: // opt_to ::= TO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("opt_to",280, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 530: // opt_in ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("opt_in",278, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 529: // opt_in ::= IN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("opt_in",278, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 528: // opt_by ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("opt_by",277, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 527: // opt_by ::= BY 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("opt_by",277, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 526: // opt_all ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("opt_all",276, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 525: // opt_all ::= ALL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("opt_all",276, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 524: // constante ::= LOWVAL 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("constante",248, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 523: // constante ::= HIGHVAL 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("constante",248, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 522: // constante ::= ZERO 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("constante",248, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 521: // constante ::= SPACES 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("constante",248, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 520: // constante ::= DFHCICS 
            {
              SymbolExt RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(d); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("constante",248, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 519: // constante ::= NUMERO 
            {
              SymbolExt RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol n = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(n); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("constante",248, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 518: // constante ::= LITERAL 
            {
              SymbolExt RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol l = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(l); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("constante",248, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 517: // constantes ::= constante 
            {
              SymbolExt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt c = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("constantes",247, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 516: // padre ::= OF var_base 
            {
              SymbolExt RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("padre",264, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 515: // padre ::= IN var_base 
            {
              SymbolExt RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("padre",264, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 514: // padres ::= padres padre 
            {
              SymbolExt RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("padres",263, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 513: // padres ::= padre 
            {
              SymbolExt RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("padres",263, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 512: // padres_opt ::= 
            {
              SymbolExt RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("padres_opt",262, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 511: // padres_opt ::= padres 
            {
              SymbolExt RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("padres_opt",262, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 510: // indice_item ::= expr_colon 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("indice_item",261, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 509: // indice_lst ::= indice_lst COMMA indice_item 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("indice_lst",260, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 508: // indice_lst ::= indice_item 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("indice_lst",260, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 507: // indice ::= LPAR indice_lst RPAR 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("indice",259, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 506: // indices ::= indices indice 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("indices",258, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 505: // indices ::= indice 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("indices",258, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 504: // indices_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("indices_opt",257, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 503: // indices_opt ::= indices 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("indices_opt",257, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 502: // id ::= ID 
            {
              SymbolExt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("id",255, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 501: // var_int ::= rvalue 
            {
              SymbolExt RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("var_int",254, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 500: // var_base ::= id indices_opt 
            {
              SymbolExt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = i; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("var_base",253, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 499: // variable ::= var_base padres_opt 
            {
              SymbolExt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = i;    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("variable",252, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 498: // rvalue ::= function 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f);    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("rvalue",245, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 497: // rvalue ::= constantes 
            {
              SymbolExt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt c = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("rvalue",245, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 496: // rvalue ::= variable 
            {
              SymbolExt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = i;  code.setVarRead(i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("rvalue",245, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 495: // rvalue_list ::= rvalue_list rvalue 
            {
              SymbolExtList RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("rvalue_list",251, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 494: // rvalue_list ::= rvalue 
            {
              SymbolExtList RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("rvalue_list",251, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 493: // lvalue_list ::= lvalue_list lvalue 
            {
              SymbolExtList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		SymbolExtList l = (SymbolExtList)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l.add(i);       
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("lvalue_list",250, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 492: // lvalue_list ::= lvalue 
            {
              SymbolExtList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExtList(i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("lvalue_list",250, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 491: // lvalue ::= variable 
            {
              SymbolExt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = i; code.setVarWrite(i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("lvalue",249, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 490: // operator_arit ::= OP_POW 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("operator_arit",239, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // operator_arit ::= OP_DIV 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("operator_arit",239, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // operator_arit ::= OP_MUL 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("operator_arit",239, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // operator_arit ::= OP_SUB 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("operator_arit",239, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // operator_arit ::= OP_ADD 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("operator_arit",239, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // function_parm ::= literal 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("function_parm",244, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // function_parm ::= expr_colon 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("function_parm",244, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // function_parms_lst ::= function_parms_lst COMMA function_parm 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("function_parms_lst",243, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // function_parms_lst ::= function_parm 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("function_parms_lst",243, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // function_parms_lst_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("function_parms_lst_opt",242, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // function_parms_lst_opt ::= function_parms_lst 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("function_parms_lst_opt",242, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // function_parms ::= LPAR function_parms_lst_opt RPAR 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("function_parms",241, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // function ::= LENGTH OF rvalue 
            {
              Symbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol l = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		 RESULT = l; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("function",240, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // function ::= FUNCTION INTRINSIC function_parms 
            {
              Symbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = f; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("function",240, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // figurative ::= NULL 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",246, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // figurative ::= DCBS 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",246, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // figurative ::= KANJI 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",246, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // figurative ::= NUMERIC 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",246, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // figurative ::= ALPHANUMERIC 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",246, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // figurative ::= ALPHABETIC 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",246, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // figurative ::= NEGATIVE 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",246, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // figurative ::= POSITIVE 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",246, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // figurative ::= QUOTE 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",246, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // token ::= figurative 
            {
              Tokens RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt f = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("token",273, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // token ::= LPAR tokens RPAR 
            {
              Tokens RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new Tokens(t); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("token",273, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // token ::= NUMERO 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("token",273, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // token ::= LITERAL 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("token",273, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // token ::= ID 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("token",273, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // tokens ::= tokens token 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l.add(t); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("tokens",274, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // tokens ::= token 
            {
              Tokens RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = t;        
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("tokens",274, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // optTokens ::= 
            {
              Tokens RESULT =null;
		 RESULT = new Tokens();    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("optTokens",275, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // optTokens ::= tokens 
            {
              Tokens RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = t;               
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("optTokens",275, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // logical_figurative ::= LESS 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_figurative",235, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // logical_figurative ::= GREATER 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_figurative",235, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // logical_figurative ::= EQUAL opt_to 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_figurative",235, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // logical_rel ::= logical_rel OR logical_figurative 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_rel",236, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // logical_rel ::= logical_figurative 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_rel",236, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // logical_op ::= logical_rel 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_op",227, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // logical_op ::= REL_LE 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_op",227, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // logical_op ::= REL_LT 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_op",227, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // logical_op ::= REL_GE 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_op",227, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // logical_op ::= REL_GT 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_op",227, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // logical_op ::= REL_EQ 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_op",227, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // logical_not ::= logical_op 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_not",229, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // logical_not ::= NOT logical_op 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_not",229, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // logical_oper ::= logical_not 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_oper",228, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // logical_operand ::= expr_primary 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_operand",238, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // logical_expr ::= logical_expr operator_arit logical_operand 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_expr",237, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // logical_expr ::= logical_operand 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_expr",237, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // logical_unary ::= LPAR logical_condition RPAR 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_unary",234, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // logical_unary ::= figurative 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_unary",234, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // logical_unary ::= logical_expr 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_unary",234, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // logical_class_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_class_opt",233, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // logical_class_opt ::= figurative 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_class_opt",233, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // logical_class ::= logical_unary logical_class_opt 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_class",232, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // logical_expression ::= logical_expression logical_oper logical_class 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_expression",231, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // logical_expression ::= logical_class 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_expression",231, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // logical_condition ::= logical_condition option_and_or logical_expression 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_condition",230, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // logical_condition ::= logical_expression 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_condition",230, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // expr_primary ::= rvalue 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("expr_primary",226, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // expr_operand ::= LPAR expr_colon RPAR 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("expr_operand",225, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // expr_operand ::= expr_primary 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("expr_operand",225, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // expr_colon_value ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("expr_colon_value",224, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // expr_colon_value ::= expr_primary 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("expr_colon_value",224, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // expr_colon_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("expr_colon_opt",223, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // expr_colon_opt ::= OP_COL expr_colon_value 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("expr_colon_opt",223, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // expr_colon ::= expression expr_colon_opt 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("expr_colon",222, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // expression_arit ::= expression_arit operator_arit expr_operand 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("expression_arit",221, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // expression_arit ::= expr_operand 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("expression_arit",221, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // expression ::= expression_arit 
            {
              SymbolExt RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("expression",220, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // eatWriteItem ::= AFTER 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteItem",96, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // eatWriteItem ::= PAGE 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteItem",96, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // eatWriteItem ::= LINE 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteItem",96, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // eatWriteItem ::= NO 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteItem",96, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // eatWriteItem ::= LOCK 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteItem",96, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // eatWriteItem ::= WITH 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteItem",96, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // eatWriteItem ::= token 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens s = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteItem",96, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // eatWriteLst ::= eatWriteLst eatWriteItem 
            {
              Tokens RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens x = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens i = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = x.add(i);      
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteLst",95, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // eatWriteLst ::= eatWriteItem 
            {
              Tokens RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens e = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(e); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteLst",95, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // eatWrite ::= 
            {
              Tokens RESULT =null;
		 RESULT = new Tokens(); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWrite",94, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // eatWrite ::= eatWriteLst 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l;            
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWrite",94, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // eatCloseItem ::= FOR 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatCloseItem",93, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // eatCloseItem ::= NO 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatCloseItem",93, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // eatCloseItem ::= WITH 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatCloseItem",93, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // eatCloseLst ::= eatCloseLst eatCloseItem 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens i = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l.add(i);      
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatCloseLst",92, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // eatCloseLst ::= eatCloseItem 
            {
              Tokens RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens i = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatCloseLst",92, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // eatClose ::= 
            {
              Tokens RESULT =null;
		 RESULT = new Tokens(); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatClose",91, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // eatClose ::= eatCloseLst 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l;            
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatClose",91, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // stmtEndVerb ::= ENDVERB 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEndVerb",201, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // stmtEndEvaluate ::= ENDEVAL 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEndEvaluate",198, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // stmtEndPerform ::= ENDPERFORM 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEndPerform",197, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // stmtEndIf ::= ENDIF 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEndIf",196, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // stmtElse ::= ELSE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtElse",195, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // stmtEndP ::= ENDP 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEndP",181, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // option_order ::= DESCENDING 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_order",90, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // option_order ::= ASCENDING 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_order",90, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // option_and_or ::= ALSO 
            {
              Symbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol a = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = a; code.incComplexity(); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_and_or",88, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // option_and_or ::= OR 
            {
              Symbol RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = o; code.incComplexity(); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_and_or",88, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // option_and_or ::= AND 
            {
              Symbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol a = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = a; code.incComplexity(); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_and_or",88, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // option_position ::= AFTER 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_position",89, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // option_position ::= BEFORE 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_position",89, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // option_size_error ::= SIZE_ERROR 
            {
              Option RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 code.setImperative(); 
                                   RESULT = new Option(i); 
                                
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_size_error",272, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // optionOverflow ::= OVERFLOW 
            {
              StmtCobol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 code.setImperative(); 
                                   RESULT = new StmtCobol(i); 
                                
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("optionOverflow",190, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // optionOverflow_opt ::= 
            {
              StmtCobol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("optionOverflow_opt",189, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // optionOverflow_opt ::= optionOverflow 
            {
              StmtCobol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("optionOverflow_opt",189, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // option_rounded ::= ROUNDED 
            {
              Option RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol r = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 currStmt.addOption(new Option(r)); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_rounded",271, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // option_giving ::= GIVING lvalue_list 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new Option(o); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_giving",270, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // option_corr ::= CORR 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Option(o); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_corr",269, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // option_all ::= ALL 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Option(o); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_all",268, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // rvalue_options ::= option_rounded 
            {
              Option RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("rvalue_options",266, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // rvalue_options ::= option_corr 
            {
              Option RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("rvalue_options",266, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // rvalue_options ::= option_all 
            {
              Option RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("rvalue_options",266, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // rvalue_options ::= rvalue_options rvalue_option 
            {
              Option RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("rvalue_options",266, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // rvalue_options ::= rvalue_option 
            {
              Option RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("rvalue_options",266, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // rvalue_options_opt ::= 
            {
              Option RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("rvalue_options_opt",265, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // rvalue_options_opt ::= rvalue_options 
            {
              Option RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("rvalue_options_opt",265, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // stmtException ::= EXCEPTION 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtException",193, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // stmtInvalid ::= INVALID opt_key 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 StmtCobol stmt = new StmtCobol(s);
                                              RESULT = code.setAtEnd(stmt); 
                                           
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInvalid",192, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // stmtAtEnd ::= ATEND 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s);
                             RESULT = code.setAtEnd(stmt); 
                          
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAtEnd",191, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // closeFile ::= ID eatClose 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens e = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 Tokens t = new Tokens(s);
                                         RESULT = t.add(e); 
                                      
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("closeFile",218, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // closeLstFiles ::= closeLstFiles closeFile 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens c = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l.add(c);  
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("closeLstFiles",219, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // closeLstFiles ::= closeFile 
            {
              Tokens RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens c = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = c;         
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("closeLstFiles",219, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // stmtClose ::= CLOSE closeLstFiles 
            {
              StmtCobol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.fileAction(TRAP.ACC_CLOSE, c, l); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtClose",121, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // stmtSet ::= SET stmtSet_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSet",188, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // stmtStop ::= STOPRUN optTokens 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtStop",186, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // stmtDelete ::= DELETE ID 
            {
              StmtCobol RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.fileAccess(TRAP.ACC_DELETE, d, i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDelete",124, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // stmtRelease ::= RELEASE ID eatWrite 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens e = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s);
                     RESULT = stmt.addLValue(i);
                  
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRelease",153, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // stmtWrite_eop ::= EOP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 code.setImperative(); 
                                   RESULT = new StmtCobol(s); 
                                
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_eop",87, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // stmtWrite_after ::= AFTER 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_after",86, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // stmtWrite_position ::= option_position rvalue 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_position",85, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // stmtWrite_from ::= FROM rvalue 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_from",84, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // stmtWrite_option ::= stmtWrite_eop 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_option",83, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // stmtWrite_option ::= stmtWrite_after 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_option",83, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // stmtWrite_option ::= stmtWrite_position 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_option",83, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // stmtWrite_option ::= stmtWrite_from 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_option",83, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // stmtWrite_options ::= stmtWrite_options stmtWrite_option 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_options",82, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // stmtWrite_options ::= stmtWrite_option 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_options",82, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // stmtWrite_detail ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_detail",81, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // stmtWrite_detail ::= stmtWrite_options 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_detail",81, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // stmtRewrite ::= REWRITE ID stmtWrite_detail 
            {
              StmtCobol RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol r = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = code.fileAccess(TRAP.ACC_UPDATE, r, i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRewrite",158, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // stmtWrite ::= WRITE ID stmtWrite_detail 
            {
              StmtCobol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol w = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = code.fileAccess(TRAP.ACC_INSERT, w, i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite",166, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // stmtUnstring_option ::= optionOverflow 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_option",80, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // stmtUnstring_option ::= TALLYING opt_in lvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_option",80, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // stmtUnstring_option ::= POINTER lvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_option",80, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // stmtUnstring_options ::= stmtUnstring_options stmtUnstring_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_options",79, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // stmtUnstring_options ::= stmtUnstring_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_options",79, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // stmtUnstring_options_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_options_opt",78, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // stmtUnstring_options_opt ::= stmtUnstring_options 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_options_opt",78, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // stmtUnstring_delimiter ::= COUNT opt_in lvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiter",77, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // stmtUnstring_delimiter ::= DELIMITER opt_in lvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiter",77, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // stmtUnstring_delimiters ::= stmtUnstring_delimiters stmtUnstring_delimiter 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiters",76, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // stmtUnstring_delimiters ::= stmtUnstring_delimiter 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiters",76, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // stmtUnstring_delimiters_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiters_opt",75, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // stmtUnstring_delimiters_opt ::= stmtUnstring_delimiters 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiters_opt",75, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // stmtUnstring_target ::= lvalue stmtUnstring_delimiters_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_target",71, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // stmtUnstring_targets ::= stmtUnstring_targets stmtUnstring_target 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_targets",70, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // stmtUnstring_targets ::= stmtUnstring_target 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_targets",70, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // stmtUnstring_to ::= INTO stmtUnstring_targets 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_to",69, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // stmtUnstring_delimited_token ::= OR 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimited_token",74, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // stmtUnstring_delimited_token ::= rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimited_token",74, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // stmtUnstring_delimiteds ::= stmtUnstring_delimiteds stmtUnstring_delimited_token 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiteds",73, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // stmtUnstring_delimiteds ::= stmtUnstring_delimited_token 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiteds",73, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // stmtUnstring_delimited ::= DELIMITED opt_by opt_all stmtUnstring_delimiteds 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimited",72, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // stmtUnstring_delimited_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimited_opt",68, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // stmtUnstring_delimited_opt ::= stmtUnstring_delimited 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimited_opt",68, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // stmtUnstring_detail ::= rvalue stmtUnstring_delimited_opt stmtUnstring_to stmtUnstring_options_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_detail",67, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // stmtUnstring ::= UNSTRING stmtUnstring_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring",120, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // stmtSubtract_option ::= option_size_error 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSubtract_option",66, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // stmtSubtract_option ::= option_giving 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSubtract_option",66, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // stmtSubtract_option ::= FROM rvalue_list 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSubtract_option",66, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // stmtSubtract_options ::= stmtSubtract_options stmtSubtract_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSubtract_options",65, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // stmtSubtract_options ::= stmtSubtract_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSubtract_options",65, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // stmtSubtract_detail ::= rvalue_list stmtSubtract_options 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSubtract_detail",64, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // stmtSubtract ::= SUBTRACT stmtSubtract_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSubtract",63, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // stmtString_pointer ::= POINTER lvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_pointer",62, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // stmtString_pointer_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_pointer_opt",61, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // stmtString_pointer_opt ::= stmtString_pointer 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_pointer_opt",61, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // stmtString_into ::= INTO lvalue stmtString_pointer_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_into",56, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // stmtString_from_delim ::= SIZE 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_from_delim",60, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // stmtString_from_delim ::= rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_from_delim",60, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // stmtString_from_delimiter ::= DELIMITED opt_by stmtString_from_delim 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_from_delimiter",59, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // stmtString_from_tokens ::= stmtString_from_tokens rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_from_tokens",58, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // stmtString_from_tokens ::= rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_from_tokens",58, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // stmtString_from_string ::= stmtString_from_tokens stmtString_from_delimiter 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_from_string",57, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // stmtString_from ::= stmtString_from stmtString_from_string 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_from",55, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // stmtString_from ::= stmtString_from_string 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_from",55, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // stmtString_detail ::= stmtString_from stmtString_into optionOverflow_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_detail",54, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // stmtStart_key ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtStart_key",53, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // stmtStart_key ::= KEY logical_oper rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtStart_key",53, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // stmtStart ::= START ID stmtStart_key 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtStart",52, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // stmtSort_procedure ::= OUTPUT ID 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_procedure",51, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // stmtSort_procedure ::= INPUT ID 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_procedure",51, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // stmtSort_giving ::= GIVING rvalue_list 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_giving",50, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // stmtSort_using ::= USING rvalue_list 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_using",49, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // stmtSort_duplicates ::= DUPLICATES 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_duplicates",48, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // stmtSort_order ::= option_order opt_key rvalue_list 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_order",47, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // stmtSort_option ::= stmtSort_procedure 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_option",46, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // stmtSort_option ::= stmtSort_giving 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_option",46, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // stmtSort_option ::= stmtSort_using 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_option",46, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // stmtSort_option ::= stmtSort_duplicates 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_option",46, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // stmtSort_option ::= stmtSort_order 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_option",46, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // stmtSort_detail ::= stmtSort_detail stmtSort_option 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_detail",45, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // stmtSort_detail ::= stmtSort_option 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_detail",45, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // stmtSort ::= SORT NT$3 ID stmtSort_detail 
            {
              StmtCobol RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (StmtCobol) ((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).value;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort",44, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // NT$3 ::= 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
 RESULT = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("NT$3",284, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // stmtSet_resto ::= BY rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSet_resto",43, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // stmtSet_resto ::= TO rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSet_resto",43, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // stmtSet_detail ::= lvalue_list stmtSet_resto 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSet_detail",42, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // stmtSearch_varying ::= VARYING rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSearch_varying",41, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // stmtSearch_opt ::= stmtSearch_varying 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSearch_opt",40, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // stmtSearch_option ::= stmtSearch_option stmtSearch_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSearch_option",39, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // stmtSearch_option ::= stmtSearch_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSearch_option",39, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // stmtSearch_options ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSearch_options",38, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // stmtSearch_options ::= stmtSearch_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSearch_options",38, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // stmtSearch_detail ::= rvalue stmtSearch_options 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSearch_detail",37, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // stmtSearch ::= SEARCH opt_all stmtSearch_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSearch",36, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // stmtRead_key ::= KEY rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead_key",35, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // stmtRead_into ::= INTO lvalue 
            {
              Tokens RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt d = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 Tokens t = new Tokens(i); RESULT = t.add(d); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead_into",34, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // stmtRead_option ::= stmtRead_key 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead_option",33, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // stmtRead_option ::= stmtRead_into 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead_option",33, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // stmtRead_options ::= stmtRead_options stmtRead_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead_options",32, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // stmtRead_options ::= stmtRead_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead_options",32, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // stmtRead_detail ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead_detail",31, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // stmtRead_detail ::= stmtRead_options 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead_detail",31, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // stmtRead ::= READ ID stmtRead_detail 
            {
              StmtCobol RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol r = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens s = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = code.fileAccess(TRAP.ACC_READ, r, i);
                     RESULT = stmt; 
                  
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead",30, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // perform_after ::= AFTER var_int FROM var_int BY var_int 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-5)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-5)).value;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_after",151, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-5)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // perform_varying ::= VARYING var_int FROM var_int BY var_int 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-5)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-5)).value;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_varying",150, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-5)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // perform_until ::= UNTIL logical_condition 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Option(o); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_until",148, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // perform_thru ::= THRU id 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Option(o, i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_thru",149, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // perform_test ::= TEST AFTER 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new Option(o);    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_test",147, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // perform_test ::= TEST BEFORE 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new Option(o);    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_test",147, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // perform_option_second ::= var_int 
            {
              Option RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt v = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Option(v); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_option_second",145, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // perform_option_second ::= perform_option_first 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = o;                
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_option_second",145, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // perform_option_first ::= perform_test 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_option_first",144, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // perform_option_first ::= perform_after 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_option_first",144, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // perform_option_first ::= perform_varying 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_option_first",144, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // perform_option_first ::= perform_thru 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_option_first",144, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // perform_option_first ::= perform_until 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_option_first",144, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // perform_option_first ::= TIMES 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 currStmt.replaceOption(new Option(o)); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_option_first",144, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // perform_option_first ::= FOREVER 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Option(o); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_option_first",144, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // perform_options ::= perform_options perform_option_second 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 currStmt.addOption(o); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_options",143, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // perform_options ::= perform_option_first 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 currStmt.addOption(o); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_options",143, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // perform_options_opt ::= 
            {
              Option RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_options_opt",142, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // perform_options_opt ::= perform_options 
            {
              Option RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_options_opt",142, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // perform_label ::= variable 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt v = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 currStmt.addOption(new Option(v)); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_label",146, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // stmtPerform_from ::= 
            {
              Option RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_from",141, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // stmtPerform_from ::= perform_options 
            {
              Option RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_from",141, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // stmtPerform_from ::= perform_label perform_options_opt 
            {
              Option RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_from",141, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // perform_verb ::= PERFORM 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 currStmt = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_verb",140, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // stmtPerform ::= perform_verb stmtPerform_from 
            {
              StmtCobol RESULT =null;
		 RESULT = code.processPerform(currStmt, lastStmt); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform",139, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // stmtOpen_files ::= stmtOpen_files ID 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l.add(s);      
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_files",214, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // stmtOpen_files ::= ID 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_files",214, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // stmtOpen_mode ::= EXTEND 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s);
                               stmt.setId(Persistence.EXTEND);
                               RESULT = stmt;
                            
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_mode",217, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // stmtOpen_mode ::= IO 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s);
                               stmt.setId(Persistence.IO);
                               RESULT = stmt;
                            
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_mode",217, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // stmtOpen_mode ::= OUTPUT 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s);
                               stmt.setId(Persistence.OUTPUT);
                               RESULT = stmt;
                            
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_mode",217, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // stmtOpen_mode ::= INPUT 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s);
                               stmt.setId(Persistence.INPUT);
                               RESULT = stmt; 
                            
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_mode",217, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // stmtOpen_group ::= stmtOpen_mode stmtOpen_files 
            {
              Tokens RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		StmtCobol o = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 Persistence f;
                 /*JGG
                    for (Symbol s : l.getTokens()) {
                        f = module.getFile(getSymbolName(s));
                        f.setAccess(o.getId());
                    }
                    */
                    RESULT = l;
                 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_group",216, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // stmtOpen_list ::= stmtOpen_list stmtOpen_group 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens s = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l.add(s);  
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_list",215, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // stmtOpen_list ::= stmtOpen_group 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens s = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;         
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_list",215, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // stmtOpen ::= OPEN stmtOpen_list 
            {
              StmtCobol RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.fileAction(TRAP.ACC_OPEN, o, l); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen",167, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // multiply_option ::= option_size_error 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("multiply_option",29, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // multiply_option ::= option_giving 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("multiply_option",29, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // multiply_options ::= multiply_options multiply_option 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("multiply_options",28, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // multiply_options ::= multiply_option 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("multiply_options",28, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // multiply_options_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("multiply_options_opt",27, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // multiply_options_opt ::= multiply_options 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("multiply_options_opt",27, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // stmtMultiply_by ::= rvalue BY rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtMultiply_by",26, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // stmtMultiply_detail ::= stmtMultiply_by multiply_options_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtMultiply_detail",25, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // stmtMultiply ::= MULTIPLY stmtMultiply_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtMultiply",161, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // stmtMove ::= MOVE rvalue_options_opt expression TO lvalue_list 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-4)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		SymbolExt r = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExtList l = (SymbolExtList)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 code.checkCall(l, r);
                      StmtCobol stmt = new StmtCobol(s, code.getStmts());
                      stmt.addRValue(r);
                      stmt.addLValue(l);
                      RESULT = stmt; 
                   
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtMove",160, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-4)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // stmtInspect_token ::= rvalue 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",171, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // stmtInspect_token ::= CONVERTING 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",171, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // stmtInspect_token ::= REPLACING 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",171, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // stmtInspect_token ::= TALLYING 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",171, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // stmtInspect_token ::= TO 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",171, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // stmtInspect_token ::= CHARACTER 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",171, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // stmtInspect_token ::= FIRST 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",171, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // stmtInspect_token ::= LEADING 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",171, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // stmtInspect_token ::= AFTER 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",171, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // stmtInspect_token ::= BEFORE 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",171, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // stmtInspect_token ::= BY 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",171, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // stmtInspect_token ::= ALL 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",171, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // stmtInspect_detail ::= stmtInspect_detail stmtInspect_token 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_detail",170, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // stmtInspect_detail ::= stmtInspect_token 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_detail",170, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // stmtInspect ::= INSPECT rvalue stmtInspect_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		SymbolExt l = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect",169, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // stmtInitialize_tokens ::= ALL 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_tokens",24, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // stmtInitialize_tokens ::= BY 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_tokens",24, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // stmtInitialize_tokens ::= constantes 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_tokens",24, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // stmtInitialize_tokens ::= variable 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_tokens",24, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // stmtInitialize_resto ::= stmtInitialize_resto stmtInitialize_tokens 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_resto",23, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // stmtInitialize_resto ::= stmtInitialize_tokens 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_resto",23, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // stmtInitialize_replacing_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_replacing_opt",22, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // stmtInitialize_replacing_opt ::= REPLACING stmtInitialize_resto 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_replacing_opt",22, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // stmtInitialize_detail ::= lvalue_list stmtInitialize_replacing_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_detail",21, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // stmtInitialize ::= INITIALIZE stmtInitialize_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize",117, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // stmtIf ::= IF logical_condition 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 StmtCobol stmt = new StmtCobol(s, code.getStmts());      
                                 RESULT = code.processIf(stmt);
                              
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIf",194, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // stmtGoto_depending ::= DEPENDING rvalue 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtGoto_depending",157, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // stmtGoto_depending_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtGoto_depending_opt",156, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // stmtGoto_depending_opt ::= stmtGoto_depending 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtGoto_depending_opt",156, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // stmtGoto_procs ::= stmtGoto_procs ID 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtGoto_procs",155, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // stmtGoto_procs ::= ID 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtGoto_procs",155, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // stmtGoTo ::= GOTO opt_to stmtGoto_procs stmtGoto_depending_opt 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtGoTo",154, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // stmtWhen_thru ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWhen_thru",200, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // stmtWhen_thru ::= THRU logical_condition 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWhen_thru",200, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // stmtEvaluate_other ::= OTHER 
            {
              Symbol RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEvaluate_other",138, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // stmtEvaluate_item ::= logical_condition stmtWhen_thru 
            {
              StmtCobol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEvaluate_item",137, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // stmtEvaluate_condition ::= stmtEvaluate_other 
            {
              StmtCobol RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 stack.peek().addOption(new Option(o)); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEvaluate_condition",136, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // stmtEvaluate_condition ::= stmtEvaluate_item 
            {
              StmtCobol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEvaluate_condition",136, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // stmtWhen ::= WHEN NT$2 stmtEvaluate_condition 
            {
              StmtCobol RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (StmtCobol) ((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWhen",199, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // NT$2 ::= 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
 stack.peek().addOption(new Option(s)); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("NT$2",283, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // stmtEvaluate_object ::= logical_condition 
            {
              StmtCobol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEvaluate_object",135, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // stmtEvaluate ::= EVALUATE NT$1 stmtEvaluate_object 
            {
              StmtCobol RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (StmtCobol) ((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEvaluate",134, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // NT$1 ::= 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
 currStmt = new StmtCobol(s); 
                                stack.push(currStmt);
                             
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("NT$1",282, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // divide_option ::= option_rounded 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 currStmt.addOption(o); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("divide_option",20, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // divide_option ::= option_giving 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 currStmt.addOption(o); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("divide_option",20, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // divide_options ::= divide_options divide_option 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("divide_options",19, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // divide_options ::= divide_option 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("divide_options",19, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // divide_options_opt ::= 
            {
              Option RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("divide_options_opt",18, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // divide_options_opt ::= divide_options 
            {
              Option RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("divide_options_opt",18, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // divide_mode ::= BY rvalue_list 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("divide_mode",17, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // divide_mode ::= INTO lvalue_list 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("divide_mode",17, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // divide_verb ::= DIVIDE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, currStmt); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("divide_verb",16, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // stmtDivide ::= divide_verb rvalue divide_mode divide_options_opt 
            {
              StmtCobol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDivide",15, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // stmtDisplay ::= DISPLAY rvalue_list 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDisplay",126, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // compute_option ::= option_size_error 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("compute_option",14, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // compute_options ::= compute_options compute_option 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("compute_options",13, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // compute_options ::= compute_option 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("compute_options",13, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // compute_options_opt ::= 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("compute_options_opt",12, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // compute_options_opt ::= compute_options 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("compute_options_opt",12, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // compute_rvalue ::= expression 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("compute_rvalue",11, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // compute_rvalues ::= compute_rvalues compute_rvalue 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("compute_rvalues",10, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // compute_rvalues ::= compute_rvalue 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("compute_rvalues",10, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // compute_lvalue ::= lvalue rvalue_options_opt 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("compute_lvalue",9, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // stmtCompute ::= COMPUTE compute_lvalue REL_EQ compute_rvalues compute_options_opt 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-4)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-4)).value;
		 StmtCobol stmt = new StmtCobol(s, code.getStmts());
//                      stmt.addSymbol(i);
                      RESULT = stmt; 
                   
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCompute",123, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-4)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // stmtCancel ::= CANCEL rvalue 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCancel",165, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // stmtCall_returning ::= RETURNING lvalue 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_returning",176, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // stmtCall_returning_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_returning_opt",175, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // stmtCall_returning_opt ::= stmtCall_returning 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_returning_opt",175, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // stmtCall_parm_type ::= REFERENCE 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_parm_type",179, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // stmtCall_parm_type ::= VALUE 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_parm_type",179, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // stmtCall_parm ::= BY stmtCall_parm_type 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_parm",178, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // stmtCall_parm ::= rvalue 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_parm",178, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // stmtCall_parm_list ::= stmtCall_parm_list stmtCall_parm 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_parm_list",177, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // stmtCall_parm_list ::= stmtCall_parm 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_parm_list",177, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // stmtCall_using ::= USING stmtCall_parm_list 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_using",174, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // stmtCall_using_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_using_opt",173, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // stmtCall_using_opt ::= stmtCall_using 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_using_opt",173, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // stmtCall ::= CALL moduloCall stmtCall_using_opt stmtCall_returning_opt 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		 RESULT = code.processCall(s, i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall",172, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // add_option ::= option_corr 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("add_option",8, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // add_option ::= option_rounded 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("add_option",8, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // add_option ::= option_giving 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("add_option",8, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // add_options ::= add_options add_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("add_options",7, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // add_options ::= add_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("add_options",7, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // add_options_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("add_options_opt",6, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // add_options_opt ::= add_options 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("add_options_opt",6, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // add_verb ::= ADD 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 currStmt = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("add_verb",5, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // stmtAdd ::= add_verb rvalue_options_opt rvalue_list TO lvalue_list add_options_opt 
            {
              StmtCobol RESULT =null;
		 RESULT = currStmt; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAdd",187, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-5)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // stmtAccept_detail ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAccept_detail",4, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // stmtAccept_detail ::= FROM rvalue stmtAcceptOpt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAccept_detail",4, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // stmtEndExec ::= END_EXEC 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEndExec",183, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // stmtExec ::= SQLCODE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 module.incStmtSql();  RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtExec",182, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // stmtExec ::= CICSCODE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 module.incStmtCics(); RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtExec",182, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // stmtReturn ::= RETURN ID stmtRead_detail 
            {
              StmtCobol RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol r = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens j = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = code.fileAccess(TRAP.ACC_READ, r, i);
                     RESULT = stmt; // .addTokens(j); 
                  
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtReturn",185, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // stmtNext ::= NEXT 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtNext",164, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // stmtRollback ::= ROLLBACK 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRollback",184, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // stmtFree ::= FREE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtFree",152, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // exitType ::= 
            {
              Symbol RESULT =null;
		 RESULT = code.makeSymbol(ZCCSym.PARAGRAPH, -1, -1, ""); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("exitType",106, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // exitType ::= SECTION 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("exitType",106, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // exitType ::= PARAGRAPH 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("exitType",106, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // exitType ::= PROGRAM 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("exitType",106, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // stmtExitPgm ::= EXITPGM 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s, code.getStmts());
                               RESULT = stmt.addRValue(s); 
                            
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtExitPgm",132, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // stmtExitP ::= EXITP 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s, code.getStmts());
                           RESULT = stmt.addRValue(code.makeSymbol(ZCCSym.PERFORM, -1, -1, "PERFORM")); 
                        
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtExitP",130, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // stmtExitG ::= EXIT exitType 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s, code.getStmts());
                                       RESULT = stmt.addRValue(t); 
                                    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtExitG",131, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // exitTypes ::= stmtExitPgm 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("exitTypes",133, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // exitTypes ::= stmtExitP 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("exitTypes",133, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // exitTypes ::= stmtExitG 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("exitTypes",133, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // stmtExit ::= exitTypes 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtExit",129, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // moduloCall ::= LITERAL 
            {
              Symbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol l = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("moduloCall",180, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // moduloCall ::= variable 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = i; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("moduloCall",180, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // stmtAcceptOpt ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAcceptOpt",168, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // stmtAcceptOpt ::= ID 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAcceptOpt",168, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // stmtAccept ::= ACCEPT lvalue stmtAccept_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAccept",162, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // stmtMerge ::= MERGE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtMerge",119, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // stmtUnlock ::= UNLOCK 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnlock",163, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // stmtGoback ::= GOBACK 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtGoback",128, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // stmtCommit ::= COMMIT 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCommit",118, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // stmtString ::= STRING stmtString_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString",159, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // stmtContinue ::= CONTINUE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtContinue",127, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // stmtAllocate ::= ALLOCATE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAllocate",125, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // stmtTransform ::= TRANSFORM 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtTransform",122, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // stmtLang ::= stmtFree 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtLang",213, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // stmtLang ::= stmtCancel 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtLang",213, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // stmtLang ::= stmtAllocate 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtLang",213, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // stmtArit ::= stmtSubtract 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtArit",212, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // stmtArit ::= stmtDivide 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtArit",212, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // stmtArit ::= stmtAdd 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtArit",212, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // stmtArit ::= stmtCompute 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtArit",212, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // stmtArit ::= stmtMultiply 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtArit",212, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // stmtIO2 ::= stmtSort 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",207, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // stmtIO2 ::= stmtRewrite 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",207, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // stmtIO2 ::= stmtDelete 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",207, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // stmtIO2 ::= stmtWrite 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",207, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // stmtIO2 ::= stmtReturn 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",207, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // stmtIO2 ::= stmtRelease 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",207, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // stmtIO2 ::= stmtRead 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",207, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // stmtIO2 ::= stmtClose 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",207, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // stmtIO2 ::= stmtOpen 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",207, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // stmtIO2 ::= stmtDisplay 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",207, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // stmtIO2 ::= stmtAccept 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",207, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // stmtIO1 ::= stmtRollback 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO1",206, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // stmtIO1 ::= stmtStart 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO1",206, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // stmtIO1 ::= stmtMerge 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO1",206, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // stmtIO1 ::= stmtUnlock 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO1",206, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // stmtIO1 ::= stmtCommit 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO1",206, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // stmtIO ::= stmtIO2 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO",205, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // stmtIO ::= stmtIO1 optTokens 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO",205, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // stmtDatos2 ::= stmtSet 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos2",204, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // stmtDatos2 ::= stmtInitialize 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos2",204, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // stmtDatos2 ::= stmtUnstring 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos2",204, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // stmtDatos2 ::= stmtSearch 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos2",204, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // stmtDatos2 ::= stmtInspect 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos2",204, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // stmtDatos2 ::= stmtString 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos2",204, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // stmtDatos2 ::= stmtMove 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos2",204, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // stmtDatos1 ::= stmtTransform 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos1",203, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // stmtDatos ::= stmtDatos2 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos",202, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // stmtDatos ::= stmtDatos1 optTokens 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos",202, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // stmtFlujo ::= stmtContinue 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtFlujo",211, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // stmtFlujo ::= stmtGoTo 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtFlujo",211, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // stmtFlujo ::= stmtEvaluate 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.processEvaluate(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtFlujo",211, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // stmtFlujo ::= stmtIf 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtFlujo",211, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // stmtFlujo ::= stmtCall 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtFlujo",211, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // stmtFlujo ::= stmtPerform 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtFlujo",211, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // stmtControl2 ::= stmtGoback 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		  hasEndProgram = true;
                                      code.trapEndModule();
                                      RESULT = s; 
                                   
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtControl2",210, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // stmtControl2 ::= stmtStop 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 hasEndProgram = true;
                                       RESULT = s; 
                                       code.trapEndModule(); 
                                   
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtControl2",210, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // stmtControl1 ::= stmtNext 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtControl1",209, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // stmtControl ::= stmtControl2 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 hasEndProgram = true; RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtControl",208, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // stmtControl ::= stmtExit 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT =  code.processExit(s);    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtControl",208, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // stmtControl ::= stmtControl1 optTokens 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;          
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtControl",208, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // noverbos ::= stmtEndEvaluate 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.endEvaluate(s);  
                                  stack.pop();     
                               
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",110, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // noverbos ::= stmtEndExec 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;                         
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",110, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // noverbos ::= stmtException 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;                         
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",110, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // noverbos ::= stmtInvalid 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;                         
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",110, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // noverbos ::= stmtAtEnd 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;                         
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",110, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // noverbos ::= stmtElse 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.processElse(s);       
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",110, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // noverbos ::= stmtWhen 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.processWhen(stack.peek());       
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",110, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // noverbos ::= stmtEndVerb 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;                         
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",110, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // noverbos ::= stmtEndPerform 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.endPerform(s);        
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",110, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // noverbos ::= stmtEndIf 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.endIf(s);              
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",110, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // noverbos ::= stmtEndP 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.checkFlujo( s, lastStmt);
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",110, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // verbos ::= stmtExec 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;                         
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("verbos",109, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // verbos ::= stmtLang 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; module.incStmtLang();    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("verbos",109, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // verbos ::= stmtIO 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; module.incStmtIO();      
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("verbos",109, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // verbos ::= stmtArit 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; module.incStmtArit();    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("verbos",109, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // verbos ::= stmtDatos 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; module.incStmtDatos();   
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("verbos",109, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // verbos ::= stmtFlujo 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; module.incStmtFlujo();   
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("verbos",109, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // verbos ::= stmtControl 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; module.incStmtControl(); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("verbos",109, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= noverbos 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmt",108, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= verbos 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; code.incStmt(); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmt",108, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lista_stmt ::= lista_stmt stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 lastStmt = code.processStatement(s, lastStmt); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("lista_stmt",107, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lista_stmt ::= stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 lastStmt = code.processStatement(s, lastStmt); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("lista_stmt",107, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parr_section ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("parr_section",105, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parr_section ::= SECTION 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = true;  
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("parr_section",105, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parrafo_name ::= PARRAFO parr_section ENDP 
            {
              Symbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 // if (b == true) code.notSupportedSection(p); 
                        RESULT = code.processParrafo(p, lastStmt); 
                     
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("parrafo_name",104, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bloque_sentences ::= 
            {
              Integer RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("bloque_sentences",103, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bloque_sentences ::= lista_stmt 
            {
              Integer RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("bloque_sentences",103, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bloque_parrafo ::= parrafo_name bloque_sentences 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("bloque_parrafo",101, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bloque_parrafos ::= bloque_parrafos bloque_parrafo 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("bloque_parrafos",100, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bloque_parrafos ::= bloque_parrafo 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("bloque_parrafos",100, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lista_parrafos ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("lista_parrafos",99, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lista_parrafos ::= bloque_parrafos 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("lista_parrafos",99, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bloque_inicial ::= bloque_sentences 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("bloque_inicial",102, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bloque_procedure ::= bloque_inicial lista_parrafos 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("bloque_procedure",3, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // list_parms ::= list_parms ID 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l.add(s);      
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("list_parms",113, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // list_parms ::= ID 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("list_parms",113, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // list_parms_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("list_parms_opt",112, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // list_parms_opt ::= list_parms 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("list_parms_opt",112, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // proc_parm ::= RETURNING rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("proc_parm",116, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // proc_parm ::= USING list_parms_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("proc_parm",116, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // proc_parms ::= proc_parms proc_parm 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("proc_parms",115, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // proc_parms ::= proc_parm 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("proc_parms",115, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // proc_parms_list ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("proc_parms_list",114, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // proc_parms_list ::= proc_parms 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("proc_parms_list",114, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // resto_call ::= proc_parms_list NT$0 ENDP 
            {
              Tokens RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Tokens) ((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Tokens p = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 code.parrafoVirtual(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("resto_call",111, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              Tokens RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens p = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
 RESULT = p; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("NT$0",281, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // proc_div_header ::= DIV_PROC resto_call 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens p = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 code.beginCode(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("proc_div_header",2, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // procedure_division ::= proc_div_header bloque_procedure 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("procedure_division",0, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // end_program ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("end_program",1, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // end_program ::= END_PGM ID ENDP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		 hasEndProgram = true; 
                                      StmtCobol stmt = new StmtCobol(s); 
                                      code.endProgram(stmt);
                                      lastStmt = stmt;
                                   
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("end_program",1, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // module ::= procedure_division end_program 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("module",98, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= cobolCode EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		StmtCobol start_val = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		RESULT = start_val;
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ZCCode$parser.done_parsing();
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // cobolCode ::= module 
            {
              StmtCobol RESULT =null;
		 code.EndOfFile(lastStmt, hasEndProgram);
                         RESULT = null;  
                      
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("cobolCode",97, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

