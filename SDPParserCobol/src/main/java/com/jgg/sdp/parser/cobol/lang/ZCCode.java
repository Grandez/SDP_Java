
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Mar 25 21:31:37 CET 2017
//----------------------------------------------------

package com.jgg.sdp.parser.cobol.lang;

import java.util.*;
import java_cup.runtime.*;
import com.jgg.sdp.module.base.*;
import com.jgg.sdp.module.items.*;
import com.jgg.sdp.module.factorias.*;
import com.jgg.sdp.core.ctes.*;
import com.jgg.sdp.core.config.*;
import com.jgg.sdp.parser.base.*;
import com.jgg.sdp.parser.base.stmt.*;
import com.jgg.sdp.parser.base.symbol.*;
import com.jgg.sdp.parser.cobol.base.*;
import com.jgg.sdp.parser.cobol.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Mar 25 21:31:37 CET 2017
  */
public class ZCCode extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ZCCode() {super();}

  /** Constructor which sets the default scanner. */
  public ZCCode(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ZCCode(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u01f9\000\002\141\003\000\002\002\004\000\002\142" +
    "\004\000\002\003\005\000\002\003\002\000\002\002\004" +
    "\000\002\004\004\000\002\u0108\002\000\002\162\005\000" +
    "\002\165\003\000\002\165\002\000\002\166\003\000\002" +
    "\166\004\000\002\167\004\000\002\167\004\000\002\163" +
    "\003\000\002\163\002\000\002\164\003\000\002\164\004" +
    "\000\002\005\004\000\002\146\003\000\002\143\003\000" +
    "\002\143\002\000\002\144\003\000\002\144\004\000\002" +
    "\145\004\000\002\147\003\000\002\147\002\000\002\150" +
    "\005\000\002\151\003\000\002\151\002\000\002\153\003" +
    "\000\002\153\004\000\002\154\003\000\002\154\003\000" +
    "\002\155\003\000\002\155\003\000\002\155\003\000\002" +
    "\155\003\000\002\155\003\000\002\155\003\000\002\155" +
    "\003\000\002\156\003\000\002\156\003\000\002\156\003" +
    "\000\002\156\003\000\002\156\003\000\002\156\003\000" +
    "\002\156\003\000\002\156\003\000\002\156\003\000\002" +
    "\156\003\000\002\156\003\000\002\321\004\000\002\321" +
    "\003\000\002\321\003\000\002\322\003\000\002\323\003" +
    "\000\002\323\003\000\002\324\003\000\002\324\003\000" +
    "\002\324\003\000\002\324\003\000\002\324\003\000\002" +
    "\324\003\000\002\313\004\000\002\313\003\000\002\314" +
    "\003\000\002\315\003\000\002\315\003\000\002\315\003" +
    "\000\002\315\003\000\002\315\003\000\002\315\003\000" +
    "\002\315\003\000\002\316\004\000\002\316\003\000\002" +
    "\317\003\000\002\317\003\000\002\317\003\000\002\317" +
    "\003\000\002\317\003\000\002\320\003\000\002\320\003" +
    "\000\002\320\003\000\002\320\003\000\002\320\003\000" +
    "\002\320\003\000\002\320\003\000\002\320\003\000\002" +
    "\320\003\000\002\320\003\000\002\320\003\000\002\325" +
    "\003\000\002\325\003\000\002\325\003\000\002\325\003" +
    "\000\002\325\003\000\002\326\003\000\002\326\003\000" +
    "\002\326\003\000\002\175\003\000\002\200\003\000\002" +
    "\202\003\000\002\236\004\000\002\171\003\000\002\203" +
    "\003\000\002\242\003\000\002\172\003\000\002\241\005" +
    "\000\002\247\003\000\002\247\002\000\002\263\003\000" +
    "\002\263\003\000\002\204\003\000\002\210\003\000\002" +
    "\210\003\000\002\210\003\000\002\206\004\000\002\205" +
    "\003\000\002\207\003\000\002\152\003\000\002\152\003" +
    "\000\002\152\003\000\002\152\002\000\002\227\003\000" +
    "\002\267\003\000\002\243\003\000\002\270\005\000\002" +
    "\265\003\000\002\265\003\000\002\266\003\000\002\006" +
    "\005\000\002\006\002\000\002\272\004\000\002\007\004" +
    "\000\002\010\003\000\002\010\004\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\253\006\000\002" +
    "\254\003\000\002\254\002\000\002\255\004\000\002\260" +
    "\003\000\002\260\004\000\002\261\003\000\002\261\004" +
    "\000\002\262\003\000\002\262\003\000\002\256\003\000" +
    "\002\256\002\000\002\257\004\000\002\244\004\000\002" +
    "\176\004\000\002\012\006\000\002\013\003\000\002\013" +
    "\004\000\002\014\003\000\002\015\003\000\002\015\002" +
    "\000\002\016\003\000\002\016\004\000\002\017\003\000" +
    "\002\201\004\000\002\020\004\000\002\021\005\000\002" +
    "\022\003\000\002\022\004\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\u0109\002\000\002\211\005\000\002\212\003\000" +
    "\002\u010a\002\000\002\310\005\000\002\213\003\000\002" +
    "\213\003\000\002\214\004\000\002\215\003\000\002\311" +
    "\004\000\002\311\002\000\002\231\006\000\002\232\003" +
    "\000\002\232\004\000\002\233\003\000\002\233\002\000" +
    "\002\234\004\000\002\303\004\000\002\024\003\000\002" +
    "\170\004\000\002\025\004\000\002\026\004\000\002\026" +
    "\002\000\002\027\003\000\002\027\004\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\250\005\000\002\251\003\000\002\251\004\000\002" +
    "\252\003\000\002\252\003\000\002\252\003\000\002\252" +
    "\003\000\002\252\003\000\002\252\003\000\002\252\003" +
    "\000\002\252\003\000\002\252\003\000\002\252\003\000" +
    "\002\252\003\000\002\252\003\000\002\237\007\000\002" +
    "\240\004\000\002\031\005\000\002\032\005\000\002\246" +
    "\004\000\002\330\003\000\002\330\004\000\002\331\004" +
    "\000\002\332\003\000\002\332\003\000\002\332\003\000" +
    "\002\332\003\000\002\327\003\000\002\327\004\000\002" +
    "\216\006\000\002\217\003\000\002\220\003\000\002\220" +
    "\002\000\002\221\003\000\002\221\004\000\002\222\003" +
    "\000\002\222\002\000\002\223\004\000\002\223\004\000" +
    "\002\224\003\000\002\224\002\000\002\225\003\000\002" +
    "\225\004\000\002\226\003\000\002\226\003\000\002\226" +
    "\004\000\002\226\004\000\002\226\004\000\002\226\004" +
    "\000\002\157\003\000\002\157\003\000\002\160\003\000" +
    "\002\160\004\000\002\161\003\000\002\161\003\000\002" +
    "\161\003\000\002\033\005\000\002\034\003\000\002\034" +
    "\002\000\002\035\003\000\002\035\004\000\002\036\003" +
    "\000\002\036\003\000\002\037\004\000\002\040\004\000" +
    "\002\041\005\000\002\042\004\000\002\043\003\000\002" +
    "\043\002\000\002\044\003\000\002\044\004\000\002\045" +
    "\003\000\002\046\004\000\002\047\004\000\002\050\004" +
    "\000\002\050\004\000\002\u010b\002\000\002\051\006\000" +
    "\002\052\003\000\002\052\004\000\002\053\003\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\053" +
    "\003\000\002\054\005\000\002\055\003\000\002\056\004" +
    "\000\002\057\004\000\002\060\004\000\002\060\004\000" +
    "\002\061\005\000\002\062\005\000\002\062\002\000\002" +
    "\063\005\000\002\064\003\000\002\064\004\000\002\066" +
    "\004\000\002\067\003\000\002\067\004\000\002\070\005" +
    "\000\002\071\003\000\002\071\003\000\002\065\005\000" +
    "\002\072\003\000\002\072\002\000\002\073\004\000\002" +
    "\074\004\000\002\075\004\000\002\076\003\000\002\076" +
    "\004\000\002\077\004\000\002\077\003\000\002\077\003" +
    "\000\002\173\004\000\002\100\006\000\002\101\003\000" +
    "\002\101\002\000\002\105\006\000\002\106\003\000\002" +
    "\106\004\000\002\107\003\000\002\107\003\000\002\102" +
    "\004\000\002\103\003\000\002\103\004\000\002\104\004" +
    "\000\002\110\003\000\002\110\002\000\002\111\003\000" +
    "\002\111\004\000\002\112\005\000\002\112\005\000\002" +
    "\113\003\000\002\113\002\000\002\114\003\000\002\114" +
    "\004\000\002\115\004\000\002\115\005\000\002\115\003" +
    "\000\002\245\005\000\002\235\005\000\002\116\003\000" +
    "\002\116\002\000\002\117\003\000\002\117\004\000\002" +
    "\120\003\000\002\120\003\000\002\120\003\000\002\120" +
    "\003\000\002\121\004\000\002\122\004\000\002\123\003" +
    "\000\002\124\003\000\002\230\005\000\002\177\004\000" +
    "\002\271\004\000\002\273\004\000\002\174\004\000\002" +
    "\334\003\000\002\334\004\000\002\333\004\000\002\300" +
    "\003\000\002\301\004\000\002\302\003\000\002\274\003" +
    "\000\002\274\002\000\002\275\003\000\002\276\003\000" +
    "\002\276\002\000\002\277\003\000\002\130\003\000\002" +
    "\130\002\000\002\131\004\000\002\132\004\000\002\126" +
    "\003\000\002\126\003\000\002\125\003\000\002\125\003" +
    "\000\002\125\003\000\002\127\003\000\002\127\003\000" +
    "\002\264\003\000\002\304\003\000\002\305\003\000\002" +
    "\306\003\000\002\307\003\000\002\312\003\000\002\133" +
    "\003\000\002\133\002\000\002\134\003\000\002\134\004" +
    "\000\002\135\003\000\002\135\003\000\002\135\003\000" +
    "\002\136\003\000\002\136\002\000\002\137\003\000\002" +
    "\137\004\000\002\140\003\000\002\140\003\000\002\140" +
    "\003\000\002\140\003\000\002\140\003\000\002\140\003" +
    "\000\002\140\003\000\002\335\003\000\002\336\003\000" +
    "\002\336\005\000\002\337\003\000\002\337\005\000\002" +
    "\340\003\000\002\u0100\003\000\002\u0100\005\000\002\u0101" +
    "\003\000\002\u0101\004\000\002\u0102\003\000\002\u0102\003" +
    "\000\002\u0102\003\000\002\u0102\003\000\002\377\003\000" +
    "\002\377\002\000\002\376\003\000\002\376\004\000\002" +
    "\375\003\000\002\375\003\000\002\375\003\000\002\375" +
    "\005\000\002\375\003\000\002\354\003\000\002\354\003" +
    "\000\002\354\003\000\002\354\003\000\002\354\003\000" +
    "\002\354\003\000\002\354\003\000\002\354\003\000\002" +
    "\354\003\000\002\354\003\000\002\354\003\000\002\354" +
    "\003\000\002\354\003\000\002\346\005\000\002\346\004" +
    "\000\002\347\005\000\002\350\003\000\002\350\002\000" +
    "\002\351\003\000\002\351\005\000\002\352\003\000\002" +
    "\352\003\000\002\341\003\000\002\341\003\000\002\341" +
    "\003\000\002\341\003\000\002\341\003\000\002\342\003" +
    "\000\002\343\003\000\002\343\003\000\002\344\004\000" +
    "\002\345\003\000\002\345\003\000\002\345\003\000\002" +
    "\345\003\000\002\345\003\000\002\345\003\000\002\345" +
    "\003\000\002\345\004\000\002\361\003\000\002\362\003" +
    "\000\002\362\004\000\002\363\003\000\002\363\004\000" +
    "\002\353\003\000\002\353\003\000\002\353\003\000\002" +
    "\364\004\000\002\365\004\000\002\367\005\000\002\370" +
    "\003\000\002\370\005\000\002\371\003\000\002\372\003" +
    "\000\002\372\004\000\002\373\004\000\002\374\003\000" +
    "\002\374\003\000\002\355\003\000\002\355\003\000\002" +
    "\356\003\000\002\356\003\000\002\u0103\003\000\002\u0103" +
    "\002\000\002\u0104\003\000\002\u0104\002\000\002\u0105\003" +
    "\000\002\u0105\002\000\002\u0107\003\000\002\u0107\002\000" +
    "\002\u0106\003\000\002\u0106\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0273\000\004\004\004\001\002\000\006\203\u0268\213" +
    "\u026b\001\ufff7\000\004\011\u0265\001\ufffd\000\002\001\001" +
    "\000\004\002\u0263\001\002\000\164\042\153\043\114\044" +
    "\075\045\216\046\122\047\016\050\207\051\061\052\162" +
    "\053\110\054\051\055\105\056\176\057\100\060\212\061" +
    "\155\062\143\063\136\064\062\065\163\066\031\067\024" +
    "\070\170\071\041\072\073\073\032\074\211\075\125\076" +
    "\022\077\166\100\115\101\131\102\026\103\165\104\156" +
    "\105\210\106\157\107\150\110\204\111\167\112\047\113" +
    "\161\114\140\115\102\123\160\135\117\136\043\137\137" +
    "\140\076\141\201\142\107\144\200\156\012\216\070\230" +
    "\174\231\213\232\103\001\uffe6\000\002\001\uffc6\000\004" +
    "\161\u0107\001\ufe09\000\002\001\uffda\000\002\001\uffb2\000" +
    "\002\001\uffa6\000\004\005\u0257\001\002\000\002\001\uffd4" +
    "\000\002\001\uffe2\000\002\001\uffc8\000\004\005\u0255\001" +
    "\002\000\002\001\uffd6\000\046\005\240\006\251\010\237" +
    "\025\257\026\253\027\231\030\261\031\243\032\227\033" +
    "\242\034\256\035\252\036\230\037\236\040\260\163\247" +
    "\226\234\233\254\001\002\000\002\001\uffce\000\002\001" +
    "\uff83\000\002\001\uffcf\000\002\001\uffb0\000\002\001\002" +
    "\000\002\001\uff82\000\002\001\uffd3\000\002\001\uffaa\000" +
    "\002\001\uffa1\000\002\001\uffdc\000\002\001\uffa7\000\002" +
    "\001\uffdf\000\004\117\u0163\001\ufe11\000\002\001\uffa2\000" +
    "\002\001\ufe7b\000\002\001\uffed\000\002\001\ufffc\000\002" +
    "\001\uffac\000\002\001\uff9c\000\002\001\uffd8\000\046\005" +
    "\240\006\251\010\237\025\257\026\253\027\231\030\261" +
    "\031\243\032\227\033\242\034\256\035\252\036\230\037" +
    "\236\040\260\163\247\226\234\233\254\001\002\000\002" +
    "\001\uffd5\000\002\001\uffbf\000\044\005\u0156\006\u0159\010" +
    "\u0154\025\257\026\253\027\231\030\261\031\243\032\227" +
    "\033\242\034\256\035\252\036\230\037\236\040\260\217" +
    "\u015d\233\254\001\ufe58\000\002\001\uffb8\000\002\001\uffc2" +
    "\000\002\001\uff9e\000\002\001\uff8d\000\002\001\002\000" +
    "\004\221\u0138\001\ufe0b\000\046\005\240\006\251\010\237" +
    "\025\257\026\253\027\231\030\261\031\243\032\227\033" +
    "\242\034\256\035\252\036\230\037\236\040\260\163\247" +
    "\226\234\233\254\001\uff15\000\002\001\uffd2\000\002\001" +
    "\uff8e\000\002\001\uffc7\000\002\001\uffa9\000\002\001\uff4f" +
    "\000\002\001\uffb7\000\002\001\uffd0\000\046\005\240\006" +
    "\251\010\237\025\257\026\253\027\231\030\261\031\243" +
    "\032\227\033\242\034\256\035\252\036\230\037\236\040" +
    "\260\163\247\226\234\233\254\001\002\000\002\001\uffa4" +
    "\000\002\001\uff9b\000\002\001\ufe7c\000\002\001\uff9f\000" +
    "\002\001\uff89\000\002\001\uffaf\000\004\005\u01ef\001\002" +
    "\000\002\001\uff7e\000\002\001\uff9d\000\046\005\240\006" +
    "\251\010\237\025\257\026\253\027\231\030\261\031\243" +
    "\032\227\033\242\034\256\035\252\036\230\037\236\040" +
    "\260\163\247\226\234\233\254\001\002\000\002\001\uffbb" +
    "\000\002\001\ufe7a\000\004\005\u01e2\001\002\000\002\001" +
    "\uff8f\000\002\001\uffde\000\002\001\uffcb\000\046\005\240" +
    "\006\251\010\237\025\257\026\253\027\231\030\261\031" +
    "\243\032\227\033\242\034\256\035\252\036\230\037\236" +
    "\040\260\163\247\226\234\233\254\001\002\000\004\005" +
    "\u01cd\001\002\000\164\042\153\043\114\044\075\045\216" +
    "\046\122\047\016\050\207\051\061\052\162\053\110\054" +
    "\051\055\105\056\176\057\100\060\212\061\155\062\143" +
    "\063\136\064\062\065\163\066\031\067\024\070\170\071" +
    "\041\072\073\073\032\074\211\075\125\076\022\077\166" +
    "\100\115\101\131\102\026\103\165\104\156\105\210\106" +
    "\157\107\150\110\204\111\167\112\047\113\161\114\140" +
    "\115\102\123\160\135\117\136\043\137\137\140\076\141" +
    "\201\142\107\144\200\156\012\216\070\230\174\231\213" +
    "\232\103\001\uffe7\000\002\001\ufe7e\000\002\001\uffbe\000" +
    "\002\001\uffb3\000\046\005\240\006\251\010\237\025\257" +
    "\026\253\027\231\030\261\031\243\032\227\033\242\034" +
    "\256\035\252\036\230\037\236\040\260\163\247\226\234" +
    "\233\254\001\002\000\002\001\uffdb\000\002\001\uffba\000" +
    "\002\001\uff17\000\002\001\uffb5\000\044\005\u0156\006\u0159" +
    "\010\u0154\025\257\026\253\027\231\030\261\031\243\032" +
    "\227\033\242\034\256\035\252\036\230\037\236\040\260" +
    "\217\u015d\233\254\001\ufe58\000\002\001\uffb4\000\004\005" +
    "\u01ba\001\002\000\004\007\u01b4\001\uffeb\000\002\001\uffae" +
    "\000\002\001\uffa8\000\002\001\uffe0\000\002\001\uff97\000" +
    "\002\001\ufe7d\000\046\005\240\006\251\010\237\025\257" +
    "\026\253\027\231\030\261\031\243\032\227\033\242\034" +
    "\256\035\252\036\230\037\236\040\260\163\247\226\234" +
    "\233\254\001\002\000\002\001\uffd9\000\002\001\uffb9\000" +
    "\002\001\uff84\000\002\001\uffa5\000\002\001\uffca\000\002" +
    "\001\uffa3\000\002\001\uffad\000\044\005\u0156\006\u0159\010" +
    "\u0154\025\257\026\253\027\231\030\261\031\243\032\227" +
    "\033\242\034\256\035\252\036\230\037\236\040\260\217" +
    "\u015d\233\254\001\ufe58\000\044\005\u0156\006\u0159\010\u0154" +
    "\025\257\026\253\027\231\030\261\031\243\032\227\033" +
    "\242\034\256\035\252\036\230\037\236\040\260\217\u015d" +
    "\233\254\001\ufe58\000\002\001\uffbc\000\002\001\002\000" +
    "\002\001\uffc5\000\010\176\u017e\200\u017f\204\u017c\001\uff85" +
    "\000\002\001\002\000\004\005\u0170\001\002\000\002\001" +
    "\ufe93\000\002\001\uff96\000\002\001\uff9a\000\064\006\251" +
    "\010\237\020\u0130\021\u0125\022\u012d\023\u0136\024\u0129\025" +
    "\257\026\253\027\231\030\261\031\243\032\227\033\242" +
    "\034\256\035\252\036\230\037\236\040\260\117\u0134\153" +
    "\u0127\166\u012a\223\u012b\224\u0128\233\254\001\002\000\002" +
    "\001\uffc1\000\004\117\u0163\001\ufe11\000\004\005\u014e\001" +
    "\002\000\046\005\240\006\251\010\237\025\257\026\253" +
    "\027\231\030\261\031\243\032\227\033\242\034\256\035" +
    "\252\036\230\037\236\040\260\163\247\226\234\233\254" +
    "\001\002\000\002\001\uff95\000\002\001\uffa0\000\002\001" +
    "\uffd7\000\002\001\uffab\000\002\001\uff80\000\002\001\uff8c" +
    "\000\002\001\uff52\000\002\001\uffc3\000\002\001\ufe91\000" +
    "\002\001\ufe7f\000\002\001\uffdd\000\002\001\uffcd\000\046" +
    "\005\240\006\251\010\237\025\257\026\253\027\231\030" +
    "\261\031\243\032\227\033\242\034\256\035\252\036\230" +
    "\037\236\040\260\163\247\226\234\233\254\001\002\000" +
    "\002\001\uffc4\000\002\001\uffc9\000\002\001\uff98\000\002" +
    "\001\ufee9\000\012\145\351\154\346\160\344\173\345\001" +
    "\002\000\002\001\uff8a\000\002\001\uff7f\000\002\001\uffb1" +
    "\000\002\001\uffd1\000\004\010\220\001\002\000\002\001" +
    "\uffbd\000\002\001\uff90\000\002\001\uff91\000\004\213\225" +
    "\001\uff72\000\002\001\uff73\000\004\203\337\001\uff69\000" +
    "\050\005\240\006\251\010\237\025\257\026\253\027\231" +
    "\030\261\031\243\032\227\033\242\034\256\035\252\036" +
    "\230\037\236\040\260\125\245\163\247\226\234\233\254" +
    "\001\002\000\002\001\uff70\000\002\001\ufe49\000\002\001" +
    "\ufe4b\000\002\001\ufe4e\000\002\001\ufe22\000\002\001\ufe16" +
    "\000\004\227\324\001\002\000\002\001\ufe15\000\002\001" +
    "\ufe4a\000\002\001\ufe14\000\004\217\276\001\002\000\050" +
    "\005\240\006\251\010\237\025\257\026\253\027\231\030" +
    "\261\031\243\032\227\033\242\034\256\035\252\036\230" +
    "\037\236\040\260\125\245\163\247\226\234\233\254\001" +
    "\uff71\000\002\001\ufe48\000\002\001\ufe4c\000\002\001\ufe23" +
    "\000\006\201\274\214\273\001\002\000\002\001\ufe24\000" +
    "\046\005\240\006\251\010\237\025\257\026\253\027\231" +
    "\030\261\031\243\032\227\033\242\034\256\035\252\036" +
    "\230\037\236\040\260\163\247\226\234\233\254\001\002" +
    "\000\002\001\uff6e\000\002\001\ufe13\000\002\001\ufe46\000" +
    "\002\001\ufe4f\000\002\001\ufe44\000\006\157\263\170\266" +
    "\001\002\000\002\001\ufe47\000\002\001\ufe50\000\002\001" +
    "\ufe45\000\002\001\ufe4d\000\006\157\263\170\266\001\ufe21" +
    "\000\002\001\ufe17\000\002\001\ufe1b\000\004\005\240\001" +
    "\002\000\002\001\ufe18\000\002\001\ufe19\000\002\001\ufe1a" +
    "\000\002\001\ufe42\000\002\001\uff6d\000\002\001\uff6c\000" +
    "\002\001\uff6b\000\002\001\uff6f\000\050\005\240\006\251" +
    "\010\237\025\257\026\253\027\231\030\261\031\243\032" +
    "\227\033\242\034\256\035\252\036\230\037\236\040\260" +
    "\163\247\217\307\226\234\233\254\001\002\000\002\001" +
    "\ufe20\000\006\012\321\220\322\001\002\000\002\001\ufe1e" +
    "\000\002\001\ufe66\000\014\013\311\014\312\015\314\016" +
    "\317\017\313\001\ufe67\000\002\001\ufe1c\000\002\001\ufe64" +
    "\000\002\001\ufe62\000\050\005\240\006\251\010\237\025" +
    "\257\026\253\027\231\030\261\031\243\032\227\033\242" +
    "\034\256\035\252\036\230\037\236\040\260\163\247\217" +
    "\307\226\234\233\254\001\002\000\016\013\311\014\312" +
    "\015\314\016\317\017\313\220\316\001\002\000\002\001" +
    "\ufe36\000\002\001\ufe38\000\002\001\ufe3a\000\002\001\ufe37" +
    "\000\050\005\240\006\251\010\237\025\257\026\253\027" +
    "\231\030\261\031\243\032\227\033\242\034\256\035\252" +
    "\036\230\037\236\040\260\163\247\217\307\226\234\233" +
    "\254\001\002\000\002\001\ufe63\000\002\001\ufe39\000\002" +
    "\001\ufe65\000\050\005\240\006\251\010\237\025\257\026" +
    "\253\027\231\030\261\031\243\032\227\033\242\034\256" +
    "\035\252\036\230\037\236\040\260\163\247\217\307\226" +
    "\234\233\254\001\002\000\002\001\ufe1f\000\002\001\ufe1d" +
    "\000\004\217\325\001\002\000\050\005\240\006\251\010" +
    "\237\025\257\026\253\027\231\030\261\031\243\032\227" +
    "\033\242\034\256\035\252\036\230\037\236\040\260\163" +
    "\247\217\307\226\234\233\254\001\ufe3f\000\002\001\ufe43" +
    "\000\002\001\ufe3e\000\004\220\336\001\002\000\002\001" +
    "\ufe3c\000\002\001\ufe3b\000\004\012\334\001\ufe40\000\050" +
    "\005\240\006\251\010\237\025\257\026\253\027\231\030" +
    "\261\031\243\032\227\033\242\034\256\035\252\036\230" +
    "\037\236\040\260\163\247\217\307\226\234\233\254\001" +
    "\002\000\002\001\ufe3d\000\002\001\ufe41\000\002\001\002" +
    "\000\002\001\uff6a\000\002\001\uff74\000\002\001\uff68\000" +
    "\002\001\ufe29\000\002\001\uff1c\000\002\001\uff1d\000\002" +
    "\001\uff1e\000\012\145\351\154\346\160\344\173\345\001" +
    "\uff22\000\004\005\353\001\002\000\002\001\uff1b\000\002" +
    "\001\uff21\000\002\001\uff1a\000\004\005\355\001\uff1f\000" +
    "\002\001\uff19\000\002\001\uff20\000\004\005\360\001\002" +
    "\000\020\041\374\122\375\134\366\152\370\154\367\173" +
    "\363\213\371\001\002\000\002\001\ufee3\000\004\161\u0107" +
    "\001\ufe09\000\004\005\u0106\001\002\000\002\001\ufee2\000" +
    "\002\001\ufee5\000\002\001\ufe80\000\004\005\u0105\001\002" +
    "\000\046\005\240\006\251\010\237\025\257\026\253\027" +
    "\231\030\261\031\243\032\227\033\242\034\256\035\252" +
    "\036\230\037\236\040\260\163\247\226\234\233\254\001" +
    "\002\000\046\005\240\006\251\010\237\025\257\026\253" +
    "\027\231\030\261\031\243\032\227\033\242\034\256\035" +
    "\252\036\230\037\236\040\260\163\247\226\234\233\254" +
    "\001\002\000\002\001\ufee4\000\002\001\ufee1\000\002\001" +
    "\ufedf\000\002\001\ufe81\000\002\001\ufee7\000\020\041\374" +
    "\122\375\134\366\152\370\154\367\173\363\213\371\001" +
    "\ufee8\000\002\001\ufee6\000\046\005\240\006\251\010\237" +
    "\025\257\026\253\027\231\030\261\031\243\032\227\033" +
    "\242\034\256\035\252\036\230\037\236\040\260\163\247" +
    "\226\234\233\254\001\ufede\000\002\001\ufe26\000\002\001" +
    "\ufe25\000\046\005\240\006\251\010\237\025\257\026\253" +
    "\027\231\030\261\031\243\032\227\033\242\034\256\035" +
    "\252\036\230\037\236\040\260\163\247\226\234\233\254" +
    "\001\ufedd\000\002\001\ufedc\000\002\001\ufedb\000\002\001" +
    "\ufe0a\000\046\005\240\006\251\010\237\025\257\026\253" +
    "\027\231\030\261\031\243\032\227\033\242\034\256\035" +
    "\252\036\230\037\236\040\260\163\247\226\234\233\254" +
    "\001\002\000\046\005\240\006\251\010\237\025\257\026" +
    "\253\027\231\030\261\031\243\032\227\033\242\034\256" +
    "\035\252\036\230\037\236\040\260\163\247\226\234\233" +
    "\254\001\ufee0\000\002\001\uff99\000\050\005\240\006\251" +
    "\010\237\025\257\026\253\027\231\030\261\031\243\032" +
    "\227\033\242\034\256\035\252\036\230\037\236\040\260" +
    "\132\u011a\163\247\226\234\233\254\001\002\000\002\001" +
    "\ufed6\000\002\001\ufed3\000\050\005\240\006\251\010\237" +
    "\025\257\026\253\027\231\030\261\031\243\032\227\033" +
    "\242\034\256\035\252\036\230\037\236\040\260\155\u0111" +
    "\163\247\226\234\233\254\001\002\000\002\001\ufed5\000" +
    "\004\174\u0119\001\ufe8f\000\002\001\002\000\004\177\u0115" +
    "\001\ufecc\000\002\001\ufecd\000\002\001\ufece\000\002\001" +
    "\002\000\002\001\ufecb\000\002\001\ufed7\000\002\001\ufe90" +
    "\000\002\001\ufe8e\000\004\125\u011e\001\ufe0f\000\002\001" +
    "\ufed2\000\002\001\ufed4\000\050\005\240\006\251\010\237" +
    "\025\257\026\253\027\231\030\261\031\243\032\227\033" +
    "\242\034\256\035\252\036\230\037\236\040\260\163\247" +
    "\205\u0121\226\234\233\254\001\002\000\002\001\ufe10\000" +
    "\002\001\ufed1\000\002\001\ufed0\000\002\001\ufecf\000\064" +
    "\006\251\010\237\020\u0130\021\u0125\022\u012d\023\u0136\024" +
    "\u0129\025\257\026\253\027\231\030\261\031\243\032\227" +
    "\033\242\034\256\035\252\036\230\037\236\040\260\117" +
    "\u0134\153\u0127\166\u012a\223\u012b\224\u0128\233\254\001\002" +
    "\000\002\001\ufe35\000\010\120\u013c\121\u013b\171\u013e\001" +
    "\uff50\000\002\001\ufe2e\000\002\001\ufe33\000\002\001\ufe2c" +
    "\000\002\001\ufe2b\000\002\001\ufe2d\000\022\020\u0130\021" +
    "\u0125\022\u012d\023\u0136\024\u0129\153\u0127\223\u012b\224\u0128" +
    "\001\002\000\004\221\u0138\001\ufe0b\000\002\001\uff51\000" +
    "\002\001\ufe31\000\002\001\ufe5c\000\002\001\ufe5f\000\002" +
    "\001\ufe30\000\002\001\ufe34\000\064\006\251\010\237\020" +
    "\u0130\021\u0125\022\u012d\023\u0136\024\u0129\025\257\026\253" +
    "\027\231\030\261\031\243\032\227\033\242\034\256\035" +
    "\252\036\230\037\236\040\260\117\u0134\153\u0127\166\u012a" +
    "\223\u012b\224\u0128\233\254\001\ufe61\000\002\001\ufe5d\000" +
    "\002\001\ufe5b\000\002\001\ufe5a\000\002\001\ufe2f\000\002" +
    "\001\ufe5e\000\002\001\ufe0c\000\002\001\ufe2a\000\002\001" +
    "\ufe32\000\002\001\ufe84\000\002\001\ufe82\000\064\006\251" +
    "\010\237\020\u0130\021\u0125\022\u012d\023\u0136\024\u0129\025" +
    "\257\026\253\027\231\030\261\031\243\032\227\033\242" +
    "\034\256\035\252\036\230\037\236\040\260\117\u0134\153" +
    "\u0127\166\u012a\223\u012b\224\u0128\233\254\001\002\000\002" +
    "\001\ufe83\000\064\006\251\010\237\020\u0130\021\u0125\022" +
    "\u012d\023\u0136\024\u0129\025\257\026\253\027\231\030\261" +
    "\031\243\032\227\033\242\034\256\035\252\036\230\037" +
    "\236\040\260\117\u0134\153\u0127\166\u012a\223\u012b\224\u0128" +
    "\233\254\001\ufe60\000\002\001\ufeca\000\054\005\240\006" +
    "\251\010\237\025\257\026\253\027\231\030\261\031\243" +
    "\032\227\033\242\034\256\035\252\036\230\037\236\040" +
    "\260\151\u0142\152\u0143\163\247\225\u0148\226\234\233\254" +
    "\001\002\000\046\005\240\006\251\010\237\025\257\026" +
    "\253\027\231\030\261\031\243\032\227\033\242\034\256" +
    "\035\252\036\230\037\236\040\260\163\247\226\234\233" +
    "\254\001\002\000\002\001\002\000\002\001\ufec4\000\002" +
    "\001\ufec5\000\002\001\ufec8\000\010\151\u0142\152\u0143\225" +
    "\u0148\001\ufec9\000\002\001\ufe8b\000\002\001\ufec7\000\002" +
    "\001\ufe28\000\002\001\ufe88\000\002\001\ufe27\000\046\005" +
    "\240\006\251\010\237\025\257\026\253\027\231\030\261" +
    "\031\243\032\227\033\242\034\256\035\252\036\230\037" +
    "\236\040\260\163\247\226\234\233\254\001\ufec6\000\060" +
    "\005\u0156\006\u0159\010\u0154\025\257\026\253\027\231\030" +
    "\261\031\243\032\227\033\242\034\256\035\252\036\230" +
    "\037\236\040\260\116\u015a\164\u015b\165\u0150\167\u015c\175" +
    "\u0157\217\u015d\222\u0155\233\254\001\ufe71\000\002\001\ufe9b" +
    "\000\002\001\ufe6c\000\002\001\ufe70\000\002\001\ufe6e\000" +
    "\002\001\ufe51\000\002\001\ufe54\000\002\001\ufe6d\000\002" +
    "\001\ufe55\000\002\001\ufe69\000\060\005\u0156\006\u0159\010" +
    "\u0154\025\257\026\253\027\231\030\261\031\243\032\227" +
    "\033\242\034\256\035\252\036\230\037\236\040\260\116" +
    "\u015a\164\u015b\165\u0150\167\u015c\175\u0157\217\u015d\222\u0155" +
    "\233\254\001\ufe72\000\002\001\ufe53\000\002\001\ufe68\000" +
    "\002\001\ufe6a\000\002\001\ufe6b\000\044\005\u0156\006\u0159" +
    "\010\u0154\025\257\026\253\027\231\030\261\031\243\032" +
    "\227\033\242\034\256\035\252\036\230\037\236\040\260" +
    "\217\u015d\233\254\001\002\000\002\001\ufe57\000\046\005" +
    "\u0156\006\u0159\010\u0154\025\257\026\253\027\231\030\261" +
    "\031\243\032\227\033\242\034\256\035\252\036\230\037" +
    "\236\040\260\217\u015d\220\u0161\233\254\001\002\000\002" +
    "\001\ufe56\000\002\001\ufe52\000\002\001\ufe6f\000\002\001" +
    "\ufe12\000\046\005\240\006\251\010\237\025\257\026\253" +
    "\027\231\030\261\031\243\032\227\033\242\034\256\035" +
    "\252\036\230\037\236\040\260\163\247\226\234\233\254" +
    "\001\002\000\004\215\u016b\001\ufef1\000\002\001\ufef4\000" +
    "\002\001\ufeee\000\002\001\ufef0\000\002\001\ufef3\000\004" +
    "\215\u016b\001\ufef2\000\046\005\240\006\251\010\237\025" +
    "\257\026\253\027\231\030\261\031\243\032\227\033\242" +
    "\034\256\035\252\036\230\037\236\040\260\163\247\226" +
    "\234\233\254\001\002\000\002\001\ufeed\000\002\001\ufeef" +
    "\000\002\001\uff41\000\010\120\u013c\121\u013b\171\u013e\001" +
    "\uff40\000\004\161\u0171\001\ufed8\000\024\020\u0130\021\u0125" +
    "\022\u012d\023\u0136\024\u0129\153\u0127\166\u012a\223\u012b\224" +
    "\u0128\001\002\000\002\001\ufeda\000\046\005\240\006\251" +
    "\010\237\025\257\026\253\027\231\030\261\031\243\032" +
    "\227\033\242\034\256\035\252\036\230\037\236\040\260" +
    "\163\247\226\234\233\254\001\002\000\002\001\ufed9\000" +
    "\006\125\u0179\221\u0177\001\002\000\002\001\ufe98\000\046" +
    "\005\240\006\251\010\237\025\257\026\253\027\231\030" +
    "\261\031\243\032\227\033\242\034\256\035\252\036\230" +
    "\037\236\040\260\163\247\226\234\233\254\001\002\000" +
    "\002\001\ufeec\000\046\005\240\006\251\010\237\025\257" +
    "\026\253\027\231\030\261\031\243\032\227\033\242\034" +
    "\256\035\252\036\230\037\236\040\260\163\247\226\234" +
    "\233\254\001\002\000\002\001\ufeea\000\002\001\ufeeb\000" +
    "\002\001\uff86\000\002\001\uff8b\000\002\001\uff87\000\002" +
    "\001\uff88\000\004\151\u0181\001\uff7c\000\046\005\240\006" +
    "\251\010\237\025\257\026\253\027\231\030\261\031\243" +
    "\032\227\033\242\034\256\035\252\036\230\037\236\040" +
    "\260\163\247\226\234\233\254\001\002\000\002\001\uff94" +
    "\000\004\005\u0184\001\uff92\000\002\001\uff93\000\002\001" +
    "\uff7d\000\002\001\uffcc\000\044\005\u0156\006\u0159\010\u0154" +
    "\025\257\026\253\027\231\030\261\031\243\032\227\033" +
    "\242\034\256\035\252\036\230\037\236\040\260\217\u015d" +
    "\233\254\001\ufe59\000\002\001\ufe99\000\004\132\u018c\001" +
    "\ufec0\000\002\001\ufec3\000\002\001\ufec1\000\004\125\u011e" +
    "\001\ufe0f\000\004\155\u018f\001\002\000\010\174\u0119\177" +
    "\u01a3\206\u01a0\001\ufeaf\000\002\001\002\000\006\130\u0197" +
    "\133\u0194\001\ufeb5\000\002\001\ufeb9\000\002\001\ufeba\000" +
    "\002\001\ufeb8\000\004\157\u019a\001\002\000\002\001\ufeb7" +
    "\000\006\130\u0197\133\u0194\001\ufeb6\000\004\157\u019a\001" +
    "\002\000\002\001\ufeb4\000\002\001\002\000\002\001\002" +
    "\000\002\001\ufeb1\000\002\001\ufeb3\000\002\001\002\000" +
    "\002\001\ufeb2\000\002\001\ufeaa\000\004\157\u019a\001\002" +
    "\000\002\001\ufec2\000\010\174\u0119\177\u01a3\206\u01a0\001" +
    "\ufeb0\000\002\001\002\000\002\001\ufeae\000\002\001\ufeac" +
    "\000\002\001\ufead\000\002\001\002\000\002\001\ufeab\000" +
    "\004\117\u0163\001\ufe11\000\050\005\240\006\251\010\237" +
    "\025\257\026\253\027\231\030\261\031\243\032\227\033" +
    "\242\034\256\035\252\036\230\037\236\040\260\163\247" +
    "\171\u01ab\226\234\233\254\001\002\000\002\001\ufebb\000" +
    "\002\001\ufebe\000\050\005\240\006\251\010\237\025\257" +
    "\026\253\027\231\030\261\031\243\032\227\033\242\034" +
    "\256\035\252\036\230\037\236\040\260\163\247\171\u01ab" +
    "\226\234\233\254\001\ufebf\000\002\001\ufebc\000\002\001" +
    "\ufebd\000\002\001\uffea\000\002\001\uffee\000\164\042\153" +
    "\043\114\044\075\045\216\046\122\047\016\050\207\051" +
    "\061\052\162\053\110\054\051\055\105\056\176\057\100" +
    "\060\212\061\155\062\143\063\136\064\062\065\163\066" +
    "\031\067\024\070\170\071\041\072\073\073\032\074\211" +
    "\075\125\076\022\077\166\100\115\101\131\102\026\103" +
    "\165\104\156\105\210\106\157\107\150\110\204\111\167" +
    "\112\047\113\161\114\140\115\102\123\160\135\117\136" +
    "\043\137\137\140\076\141\201\142\107\144\200\156\012" +
    "\216\070\230\174\231\213\232\103\001\uffe6\000\004\007" +
    "\u01b4\001\uffec\000\004\204\u01b6\001\uffe3\000\004\141\u01b7" +
    "\001\002\000\002\001\uffe4\000\002\001\uffe5\000\002\001" +
    "\uffe9\000\002\001\uffe8\000\012\116\u01c6\124\u01c0\143\u01bb" +
    "\151\u01c3\001\ufea6\000\002\001\ufe9c\000\002\001\ufea3\000" +
    "\002\001\ufea0\000\046\005\240\006\251\010\237\025\257" +
    "\026\253\027\231\030\261\031\243\032\227\033\242\034" +
    "\256\035\252\036\230\037\236\040\260\163\247\226\234" +
    "\233\254\001\002\000\002\001\ufea1\000\002\001\ufe86\000" +
    "\002\001\ufea5\000\002\001\ufea8\000\046\005\240\006\251" +
    "\010\237\025\257\026\253\027\231\030\261\031\243\032" +
    "\227\033\242\034\256\035\252\036\230\037\236\040\260" +
    "\163\247\226\234\233\254\001\002\000\012\116\u01c6\124" +
    "\u01c0\143\u01bb\151\u01c3\001\ufea7\000\002\001\ufea2\000\046" +
    "\005\ufe85\006\ufe85\010\ufe85\025\ufe85\026\ufe85\027\ufe85\030" +
    "\ufe85\031\ufe85\032\ufe85\033\ufe85\034\ufe85\035\ufe85\036\ufe85" +
    "\037\ufe85\040\ufe85\163\ufe85\226\ufe85\233\ufe85\001\ufe9d\000" +
    "\002\001\ufea4\000\002\001\ufe9f\000\002\001\ufe9e\000\002" +
    "\001\uffb6\000\002\001\uff67\000\002\001\uffe1\000\006\155" +
    "\u01d3\161\u01ce\001\ufefb\000\046\005\240\006\251\010\237" +
    "\025\257\026\253\027\231\030\261\031\243\032\227\033" +
    "\242\034\256\035\252\036\230\037\236\040\260\163\247" +
    "\226\234\233\254\001\002\000\002\001\ufefa\000\002\001" +
    "\uff81\000\006\155\u01d3\161\u01ce\001\ufefc\000\002\001\ufef7" +
    "\000\002\001\002\000\002\001\ufef8\000\002\001\ufef6\000" +
    "\002\001\ufef9\000\002\001\ufef5\000\054\005\240\006\251" +
    "\010\237\025\257\026\253\027\231\030\261\031\243\032" +
    "\227\033\242\034\256\035\252\036\230\037\236\040\260" +
    "\152\u0143\163\247\221\u01df\225\u0148\226\234\233\254\001" +
    "\002\000\002\001\uff7b\000\010\152\u0143\221\u01df\225\u0148" +
    "\001\uff7a\000\002\001\uff79\000\002\001\uff75\000\002\001" +
    "\uff77\000\002\001\uff76\000\046\005\240\006\251\010\237" +
    "\025\257\026\253\027\231\030\261\031\243\032\227\033" +
    "\242\034\256\035\252\036\230\037\236\040\260\163\247" +
    "\226\234\233\254\001\002\000\046\005\240\006\251\010" +
    "\237\025\257\026\253\027\231\030\261\031\243\032\227" +
    "\033\242\034\256\035\252\036\230\037\236\040\260\163" +
    "\247\226\234\233\254\001\ufe87\000\002\001\uff78\000\002" +
    "\001\ufe9a\000\002\001\uff5b\000\012\006\u01e5\125\u01ea\152" +
    "\u01e6\155\u01e9\001\002\000\002\001\uff56\000\002\001\uff55" +
    "\000\002\001\uff59\000\002\001\uff57\000\002\001\uff54\000" +
    "\002\001\uff53\000\014\006\u01e5\125\u01ea\152\u01e6\155\u01e9" +
    "\225\u0148\001\ufe8c\000\002\001\uff5a\000\002\001\ufe8d\000" +
    "\002\001\uff58\000\012\116\u01c6\124\u01c0\143\u01bb\151\u01c3" +
    "\001\ufea6\000\002\001\ufea9\000\004\125\u01f7\001\002\000" +
    "\002\001\uff25\000\004\152\u0143\001\ufe89\000\004\225\u0148" +
    "\001\ufe8c\000\002\001\ufe8a\000\002\001\uff24\000\046\005" +
    "\240\006\251\010\237\025\257\026\253\027\231\030\261" +
    "\031\243\032\227\033\242\034\256\035\252\036\230\037" +
    "\236\040\260\163\247\226\234\233\254\001\002\000\002" +
    "\001\uff23\000\066\006\251\010\237\020\u0130\021\u0125\022" +
    "\u012d\023\u0136\024\u0129\025\257\026\253\027\231\030\261" +
    "\031\243\032\227\033\242\034\256\035\252\036\230\037" +
    "\236\040\260\117\u0134\153\u0127\166\u012a\172\u01fb\223\u012b" +
    "\224\u0128\233\254\001\002\000\012\120\u013c\121\u013b\171" +
    "\u013e\210\u01ff\001\uff48\000\002\001\uff4a\000\002\001\uff4e" +
    "\000\002\001\uff4d\000\002\001\uff4c\000\064\006\251\010" +
    "\237\020\u0130\021\u0125\022\u012d\023\u0136\024\u0129\025\257" +
    "\026\253\027\231\030\261\031\243\032\227\033\242\034" +
    "\256\035\252\036\230\037\236\040\260\117\u0134\153\u0127" +
    "\166\u012a\223\u012b\224\u0128\233\254\001\002\000\002\001" +
    "\uff4b\000\010\120\u013c\121\u013b\171\u013e\001\uff49\000\046" +
    "\005\240\006\251\010\237\025\257\026\253\027\231\030" +
    "\261\031\243\032\227\033\242\034\256\035\252\036\230" +
    "\037\236\040\260\163\247\226\234\233\254\001\uff16\000" +
    "\004\210\u0205\001\uff11\000\002\001\uff14\000\004\005\u021e" +
    "\001\002\000\016\116\u020e\147\u020c\207\u020d\211\u020f\212" +
    "\u0210\215\u0211\001\uff0d\000\046\005\240\006\251\010\237" +
    "\025\257\026\253\027\231\030\261\031\243\032\227\033" +
    "\242\034\256\035\252\036\230\037\236\040\260\163\247" +
    "\226\234\233\254\001\uff12\000\002\001\uff0f\000\002\001" +
    "\uff0c\000\002\001\uff18\000\016\116\u020e\147\u020c\207\u020d" +
    "\211\u020f\212\u0210\215\u0211\001\uff0e\000\002\001\uff0a\000" +
    "\006\116\u021c\124\u021b\001\002\000\052\005\240\006\251" +
    "\010\237\025\257\026\253\027\231\030\261\031\243\032" +
    "\227\033\242\034\256\035\252\036\230\037\236\040\260" +
    "\125\u0214\151\u0213\163\247\226\234\233\254\001\002\000" +
    "\002\001\uff09\000\064\006\251\010\237\020\u0130\021\u0125" +
    "\022\u012d\023\u0136\024\u0129\025\257\026\253\027\231\030" +
    "\261\031\243\032\227\033\242\034\256\035\252\036\230" +
    "\037\236\040\260\117\u0134\153\u0127\166\u012a\223\u012b\224" +
    "\u0128\233\254\001\002\000\052\005\240\006\251\010\237" +
    "\025\257\026\253\027\231\030\261\031\243\032\227\033" +
    "\242\034\256\035\252\036\230\037\236\040\260\125\u0214" +
    "\151\u0213\163\247\226\234\233\254\001\002\000\002\001" +
    "\uff02\000\002\001\ufeff\000\002\001\ufefe\000\002\001\uff00" +
    "\000\052\005\240\006\251\010\237\025\257\026\253\027" +
    "\231\030\261\031\243\032\227\033\242\034\256\035\252" +
    "\036\230\037\236\040\260\125\u0214\151\u0213\163\247\226" +
    "\234\233\254\001\uff07\000\002\001\uff01\000\010\120\u013c" +
    "\121\u013b\171\u013e\001\uff08\000\052\005\240\006\251\010" +
    "\237\025\257\026\253\027\231\030\261\031\243\032\227" +
    "\033\242\034\256\035\252\036\230\037\236\040\260\125" +
    "\u0214\151\u0213\163\247\226\234\233\254\001\uff06\000\002" +
    "\001\uff05\000\002\001\uff04\000\002\001\uff03\000\002\001" +
    "\uff0b\000\002\001\uff10\000\002\001\uff13\000\004\005\u0221" +
    "\001\002\000\002\001\uff46\000\006\005\u0223\131\u0226\001" +
    "\uff43\000\002\001\uff45\000\002\001\uff44\000\002\001\uff47" +
    "\000\046\005\240\006\251\010\237\025\257\026\253\027" +
    "\231\030\261\031\243\032\227\033\242\034\256\035\252" +
    "\036\230\037\236\040\260\163\247\226\234\233\254\001" +
    "\002\000\002\001\uff42\000\004\223\u022a\001\002\000\002" +
    "\001\uff66\000\046\005\240\006\251\010\237\025\257\026" +
    "\253\027\231\030\261\031\243\032\227\033\242\034\256" +
    "\035\252\036\230\037\236\040\260\163\247\226\234\233" +
    "\254\001\002\000\050\005\240\006\251\010\237\025\257" +
    "\026\253\027\231\030\261\031\243\032\227\033\242\034" +
    "\256\035\252\036\230\037\236\040\260\163\247\225\u0148" +
    "\226\234\233\254\001\uff60\000\002\001\uff64\000\002\001" +
    "\uff62\000\002\001\uff5f\000\002\001\uff63\000\002\001\uff5d" +
    "\000\004\225\u0148\001\uff61\000\002\001\uff65\000\002\001" +
    "\uff5e\000\002\001\uffc0\000\046\005\240\006\251\010\237" +
    "\025\257\026\253\027\231\030\261\031\243\032\227\033" +
    "\242\034\256\035\252\036\230\037\236\040\260\163\247" +
    "\226\234\233\254\001\uff5c\000\046\005\240\006\251\010" +
    "\237\025\257\026\253\027\231\030\261\031\243\032\227" +
    "\033\242\034\256\035\252\036\230\037\236\040\260\163" +
    "\247\226\234\233\254\001\002\000\004\221\u0238\001\002" +
    "\000\002\001\002\000\002\001\uff26\000\004\202\u023d\001" +
    "\uff3c\000\002\001\uff3f\000\002\001\uff3e\000\044\006\251" +
    "\010\237\025\257\026\253\027\231\030\261\031\243\032" +
    "\227\033\242\034\256\035\252\036\230\037\236\040\260" +
    "\117\u023e\125\u0242\233\254\001\002\000\002\001\uff36\000" +
    "\002\001\uff3b\000\002\001\uff38\000\002\001\uff39\000\002" +
    "\001\uff37\000\044\006\251\010\237\025\257\026\253\027" +
    "\231\030\261\031\243\032\227\033\242\034\256\035\252" +
    "\036\230\037\236\040\260\117\u023e\125\u0242\233\254\001" +
    "\uff3d\000\002\001\uff3a\000\074\005\240\006\251\010\237" +
    "\025\257\026\253\027\231\030\261\031\243\032\227\033" +
    "\242\034\256\035\252\036\230\037\236\040\260\116\u0251" +
    "\117\u0252\124\u0248\125\u024c\126\u024a\127\u0253\146\u024b\162" +
    "\u0249\163\247\202\u0250\206\u0246\221\u024f\226\234\233\254" +
    "\001\002\000\002\001\uff2a\000\074\005\240\006\251\010" +
    "\237\025\257\026\253\027\231\030\261\031\243\032\227" +
    "\033\242\034\256\035\252\036\230\037\236\040\260\116" +
    "\u0251\117\u0252\124\u0248\125\u024c\126\u024a\127\u0253\146\u024b" +
    "\162\u0249\163\247\202\u0250\206\u0246\221\u024f\226\234\233" +
    "\254\001\uff35\000\002\001\uff30\000\002\001\uff2e\000\002" +
    "\001\uff2c\000\002\001\uff2d\000\002\001\uff31\000\002\001" +
    "\uff27\000\002\001\uff34\000\002\001\uff2b\000\002\001\uff29" +
    "\000\002\001\uff2f\000\002\001\uff32\000\002\001\uff28\000" +
    "\002\001\uff33\000\006\155\u01d3\161\u01ce\001\ufefb\000\002" +
    "\001\ufefd\000\010\150\u025c\167\u025f\222\u025b\001\ufe78\000" +
    "\002\001\ufe96\000\004\005\u0257\001\ufe97\000\002\001\ufe95" +
    "\000\002\001\ufe75\000\002\001\ufe73\000\002\001\ufe77\000" +
    "\002\001\ufe94\000\002\001\ufe74\000\010\150\u025c\167\u025f" +
    "\222\u025b\001\ufe79\000\002\001\ufe76\000\002\001\ufe92\000" +
    "\002\001\000\000\002\001\uffff\000\004\005\u0266\001\002" +
    "\000\004\141\u0267\001\002\000\002\001\ufffe\000\046\005" +
    "\240\006\251\010\237\025\257\026\253\027\231\030\261" +
    "\031\243\032\227\033\242\034\256\035\252\036\230\037" +
    "\236\040\260\163\247\226\234\233\254\001\002\000\002" +
    "\001\ufffb\000\002\001\ufff6\000\004\005\u0271\001\ufff1\000" +
    "\002\001\ufffa\000\006\203\u0268\213\u026b\001\ufff8\000\002" +
    "\001\ufff5\000\004\141\u0270\001\002\000\002\001\ufff9\000" +
    "\002\001\ufff0\000\002\001\ufff4\000\004\005\u0274\001\ufff2" +
    "\000\002\001\uffef\000\002\001\ufff3" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0273\000\012\002\004\004\007\141\006\142\005\001" +
    "\001\000\012\162\u0268\165\u026b\166\u026c\167\u0269\001\001" +
    "\000\004\003\u0263\001\001\000\002\001\001\000\002\001" +
    "\001\000\236\005\044\020\034\033\172\041\123\051\143" +
    "\061\213\074\170\146\131\147\043\153\115\154\017\155" +
    "\134\156\037\170\054\171\127\172\013\173\141\174\045" +
    "\175\117\176\145\177\036\200\076\201\132\202\163\203" +
    "\065\204\112\205\057\206\064\207\174\210\110\211\176" +
    "\216\010\217\062\227\103\230\033\231\055\235\014\236" +
    "\151\237\216\240\073\241\100\242\120\243\205\244\056" +
    "\245\133\246\146\250\105\253\153\264\171\265\047\266" +
    "\024\267\027\270\066\271\020\272\041\273\070\300\214" +
    "\301\071\302\026\303\204\304\063\305\022\306\051\307" +
    "\202\310\032\312\016\313\035\314\053\315\052\316\012" +
    "\317\126\320\125\321\111\322\150\323\144\324\201\325" +
    "\122\326\140\001\001\000\002\001\001\000\004\u0106\u0261" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\333\u0257\334\u0258\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\346\231\353\u0244\354\234\355\243" +
    "\356\232\364\245\365\254\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\025\u023a\357\342\361\u0149\362\u0239\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\u0103\u0235\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\346\231\353\u0101" +
    "\354\234\355\243\356\232\363\u0234\364\245\365\254\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\354\u0152" +
    "\375\u015d\376\u0186\377\u0233\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\u0228\357\342\361\u0227\001\001\000\004\u0107\u021f\001" +
    "\001\000\024\220\u0202\221\u0201\346\231\353\u0203\354\234" +
    "\355\243\356\232\364\245\365\254\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\u010a\u01f8\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\031\u01f1\032\u01f2\346\231\353\u01f0\354\234" +
    "\355\243\356\232\364\245\365\254\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\021\u01e2\346\231" +
    "\353\u01e3\354\234\355\243\356\232\364\245\365\254\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\007\u01d8\346\231\353\u0101\354\234\355\243\356\232" +
    "\363\u01d7\364\245\365\254\001\001\000\002\001\001\000" +
    "\226\020\034\033\172\041\123\051\143\061\213\074\170" +
    "\154\u01cb\155\134\156\037\170\054\171\127\172\013\173" +
    "\141\174\045\175\117\176\145\177\036\200\076\201\132" +
    "\202\163\203\065\204\112\205\057\206\064\207\174\210" +
    "\110\211\176\216\010\217\062\227\103\230\033\231\055" +
    "\235\014\236\151\237\216\240\073\241\100\242\120\243" +
    "\205\244\056\245\133\246\146\250\105\253\153\264\171" +
    "\265\047\266\024\267\027\270\066\271\020\272\041\273" +
    "\070\300\214\301\071\302\026\303\204\304\063\305\022" +
    "\306\051\307\202\310\032\312\016\313\035\314\053\315" +
    "\052\316\012\317\126\320\125\321\111\322\150\323\144" +
    "\324\201\325\122\326\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\346\231\353\u01ca" +
    "\354\234\355\243\356\232\364\245\365\254\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\354\u0152\375\u015d\376\u0186\377\u01c9\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\143\u01b0" +
    "\144\u01b2\145\u01af\150\u01b1\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\100\u0189\346\231\353\u0188\354\234\355" +
    "\243\356\232\364\245\365\254\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\354\u0152\375\u015d\376\u0186\377\u0187\001\001\000\012\354" +
    "\u0152\375\u015d\376\u0186\377\u0185\001\001\000\002\001\001" +
    "\000\006\357\342\361\u017f\001\001\000\002\001\001\000" +
    "\004\152\u017c\001\001\000\012\047\u0175\357\342\361\u0149" +
    "\362\u0174\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\024\u016d\342\u0134" +
    "\343\u0122\344\u0130\345\u0125\354\234\355\u012d\356\232\360" +
    "\u0132\u0100\u016e\u0101\u0131\u0102\u012e\001\001\000\002\001\001" +
    "\000\004\u0103\u0163\001\001\000\002\001\001\000\024\075" +
    "\u013f\346\231\353\u0101\354\234\355\243\356\232\363\u0140" +
    "\364\245\365\254\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\u0109\u0121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\063\u0109\064\u010d\066\u010b\067" +
    "\u010a\346\231\353\u010c\354\234\355\243\356\232\364\245" +
    "\365\254\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\u010b\356\001\001\000\010\330\346" +
    "\331\351\332\347\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\263\221" +
    "\357\220\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\254\223\255\222\001\001\000\002" +
    "\001\001\000\006\256\340\257\337\001\001\000\024\260" +
    "\240\261\225\346\231\353\247\354\234\355\243\356\232" +
    "\364\245\365\254\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\367\276\001\001" +
    "\000\022\261\274\346\231\353\247\354\234\355\243\356" +
    "\232\364\245\365\254\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\262\271\001\001\000" +
    "\002\001\001\000\020\346\231\353\270\354\234\355\243" +
    "\356\232\364\245\365\254\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\372\261\373\263\374\264\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\373\267\374\264\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\365\266\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\335\303\336\302\337\301\340" +
    "\304\346\231\353\305\354\234\355\243\356\232\364\245" +
    "\365\254\370\277\371\300\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\341\314\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\336\307\337\301\340\304\346\231" +
    "\353\305\354\234\355\243\356\232\364\245\365\254\001" +
    "\001\000\004\341\314\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\337" +
    "\317\340\304\346\231\353\305\354\234\355\243\356\232" +
    "\364\245\365\254\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\335\303\336\302\337\301" +
    "\340\304\346\231\353\305\354\234\355\243\356\232\364" +
    "\245\365\254\371\322\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\347\325\001\001\000\040\335\330\336" +
    "\302\337\301\340\304\346\231\350\327\351\332\352\326" +
    "\353\305\354\234\355\243\356\232\364\245\365\254\366" +
    "\331\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\335\330\336\302\337\301\340\304\346\231" +
    "\352\334\353\305\354\234\355\243\356\232\364\245\365" +
    "\254\366\331\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\357\342\361\341\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\331" +
    "\355\332\347\001\001\000\004\327\353\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\052\376\053\375\054\364\055\371\056\360\057" +
    "\363\060\372\127\361\001\001\000\002\001\001\000\004" +
    "\u0106\u0107\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\346\231\353\u0101\354\234\355\243\356\232\363\u0103\364" +
    "\245\365\254\001\001\000\022\346\231\353\u0101\354\234" +
    "\355\243\356\232\363\u0100\364\245\365\254\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\053\377\054\364\055" +
    "\371\056\360\057\363\060\372\127\361\001\001\000\002" +
    "\001\001\000\020\346\231\353\u0102\354\234\355\243\356" +
    "\232\364\245\365\254\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\346\231\353\u0102\354\234\355\243\356" +
    "\232\364\245\365\254\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\346\231\353\u0101\354" +
    "\234\355\243\356\232\363\u0108\364\245\365\254\001\001" +
    "\000\020\346\231\353\u0102\354\234\355\243\356\232\364" +
    "\245\365\254\001\001\000\002\001\001\000\022\070\u011b" +
    "\346\231\353\u011a\354\234\355\243\356\232\364\245\365" +
    "\254\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\065\u010f\066\u010e\067\u010a\346\231\353\u010c\354\234\355" +
    "\243\356\232\364\245\365\254\001\001\000\002\001\001" +
    "\000\006\274\u0116\275\u0117\001\001\000\006\357\342\361" +
    "\u0111\001\001\000\006\072\u0113\073\u0112\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\357\342\361\u0115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\u0104\u011c\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\071\u011e\346\231\353\u011f" +
    "\354\234\355\243\356\232\364\245\365\254\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\212\u012b\342\u0134\343\u0122\344\u0130\345" +
    "\u0125\354\234\355\u012d\356\232\360\u0132\u0100\u0123\u0101\u0131" +
    "\u0102\u012e\001\001\000\002\001\001\000\004\125\u013c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\345\u0139\001" +
    "\001\000\004\u0107\u0138\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\342\u0134\343\u0122\344\u0130" +
    "\345\u0125\354\234\355\u012d\356\232\360\u0132\u0102\u0136\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\342\u0134\343\u0122\344\u0130\345\u0125\354" +
    "\234\355\u012d\356\232\360\u0132\u0101\u013e\u0102\u012e\001\001" +
    "\000\002\001\001\000\024\342\u0134\343\u0122\344\u0130\345" +
    "\u0125\354\234\355\u012d\356\232\360\u0132\u0102\u0136\001\001" +
    "\000\002\001\001\000\030\076\u0146\077\u0145\131\u0144\277" +
    "\u0143\346\231\353\u0102\354\234\355\243\356\232\364\245" +
    "\365\254\001\001\000\022\346\231\353\u0101\354\234\355" +
    "\243\356\232\363\u014c\364\245\365\254\001\001\000\010" +
    "\357\342\361\u0149\362\u014a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\077\u0148\131\u0144" +
    "\277\u0143\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\357\342\361\u014b\001\001\000\002" +
    "\001\001\000\020\346\231\353\u0102\354\234\355\243\356" +
    "\232\364\245\365\254\001\001\000\014\136\u014e\137\u0157" +
    "\140\u0150\354\u0152\375\u0151\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\140\u0161\354\u0152\375\u0151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\354\u0152\375\u015d\376\u015e" +
    "\001\001\000\002\001\001\000\006\354\u0152\375\u015f\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\042\u0165\346\231\353\u0164\354" +
    "\234\355\243\356\232\364\245\365\254\001\001\000\012" +
    "\043\u0168\044\u0169\045\u0167\046\u0166\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\045\u016c\046\u0166\001\001\000\020\346\231\353" +
    "\u016b\354\234\355\243\356\232\364\245\365\254\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\125\u013c\001\001\000\004\062\u0171\001\001\000\012" +
    "\342\u0172\343\u0122\344\u0130\345\u0125\001\001\000\002\001" +
    "\001\000\020\346\231\353\u0173\354\234\355\243\356\232" +
    "\364\245\365\254\001\001\000\002\001\001\000\010\050" +
    "\u0177\357\342\361\u014b\001\001\000\002\001\001\000\020" +
    "\346\231\353\u017a\354\234\355\243\356\232\364\245\365" +
    "\254\001\001\000\002\001\001\000\020\346\231\353\u0179" +
    "\354\234\355\243\356\232\364\245\365\254\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\u0181\001\001\000\020\346\231\353\u0182\354\234\355\243" +
    "\356\232\364\245\365\254\001\001\000\002\001\001\000" +
    "\004\247\u0184\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\354\u0152\375\u015f\001\001\000" +
    "\002\001\001\000\006\101\u018c\105\u018a\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\u0104\u01a8\001\001\000" +
    "\004\102\u018d\001\001\000\012\113\u01a0\114\u01a1\115\u01a3" +
    "\275\u019e\001\001\000\012\103\u0191\104\u0190\357\342\361" +
    "\u018f\001\001\000\010\110\u0194\111\u0195\112\u0197\001\001" +
    "\000\002\001\001\000\010\104\u0192\357\342\361\u018f\001" +
    "\001\000\002\001\001\000\004\u0105\u019c\001\001\000\002" +
    "\001\001\000\004\112\u019b\001\001\000\004\u0105\u0198\001" +
    "\001\000\002\001\001\000\006\357\342\361\u019a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\357\342\361\u019d\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\u0105\u01a6\001\001\000\002\001\001\000" +
    "\006\115\u01a5\275\u019e\001\001\000\006\357\342\361\u01a4" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\357\342\361\u01a7\001\001\000\002\001\001" +
    "\000\004\u0103\u01a9\001\001\000\024\106\u01ac\107\u01ab\346" +
    "\231\353\u01ad\354\234\355\243\356\232\364\245\365\254" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\107" +
    "\u01ae\346\231\353\u01ad\354\234\355\243\356\232\364\245" +
    "\365\254\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\232\020\034\033\172" +
    "\041\123\051\143\061\213\074\170\147\u01b8\153\115\154" +
    "\017\155\134\156\037\170\054\171\127\172\013\173\141" +
    "\174\045\175\117\176\145\177\036\200\076\201\132\202" +
    "\163\203\065\204\112\205\057\206\064\207\174\210\110" +
    "\211\176\216\010\217\062\227\103\230\033\231\055\235" +
    "\014\236\151\237\216\240\073\241\100\242\120\243\205" +
    "\244\056\245\133\246\146\250\105\253\153\264\171\265" +
    "\047\266\024\267\027\270\066\271\020\272\041\273\070" +
    "\300\214\301\071\302\026\303\204\304\063\305\022\306" +
    "\051\307\202\310\032\312\016\313\035\314\053\315\052" +
    "\316\012\317\126\320\125\321\111\322\150\323\144\324" +
    "\201\325\122\326\140\001\001\000\006\145\u01b7\150\u01b1" +
    "\001\001\000\004\151\u01b4\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\116\u01c1\117\u01c3\120\u01c0\121\u01bb\122" +
    "\u01c4\123\u01be\124\u01bc\126\u01bd\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\346\231\353" +
    "\u01c8\354\234\355\243\356\232\364\245\365\254\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\346\231\353\u01c7\354\234\355\243" +
    "\356\232\364\245\365\254\001\001\000\016\120\u01c6\121" +
    "\u01bb\122\u01c4\123\u01be\124\u01bc\126\u01bd\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\034\u01cf\035\u01d0\036\u01ce\037" +
    "\u01d3\040\u01d1\001\001\000\020\346\231\353\u01d6\354\234" +
    "\355\243\356\232\364\245\365\254\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\036\u01d5\037\u01d3\040\u01d1" +
    "\001\001\000\002\001\001\000\006\357\342\361\u01d4\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\010\u01d9\011\u01da\131\u01dc\132" +
    "\u01dd\277\u01db\346\231\353\u0102\354\234\355\243\356\232" +
    "\364\245\365\254\001\001\000\002\001\001\000\012\011" +
    "\u01e0\131\u01dc\132\u01dd\277\u01db\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\346\231\353\u0101\354\234\355\243\356\232\363\u01df" +
    "\364\245\365\254\001\001\000\020\346\231\353\u0102\354" +
    "\234\355\243\356\232\364\245\365\254\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\022" +
    "\u01ea\023\u01e6\357\u01e7\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\023\u01ed\276\u01eb\277\u01ec" +
    "\357\u01e7\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\116\u01ef\117\u01c3\120\u01c0\121\u01bb" +
    "\122\u01c4\123\u01be\124\u01bc\126\u01bd\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\130\u01f3" +
    "\131\u01f4\001\001\000\006\276\u01f5\277\u01ec\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\346\231\353\u01f7" +
    "\354\234\355\243\356\232\364\245\365\254\001\001\000" +
    "\002\001\001\000\036\213\u01fb\214\u01fc\215\u01fd\342\u0134" +
    "\343\u0122\344\u0130\345\u0125\354\234\355\u012d\356\232\360" +
    "\u0132\u0100\u01f9\u0101\u0131\u0102\u012e\001\001\000\006\125\u013c" +
    "\311\u01ff\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\342\u0134\343\u0122" +
    "\344\u0130\345\u0125\354\234\355\u012d\356\232\360\u0132\u0100" +
    "\u0200\u0101\u0131\u0102\u012e\001\001\000\002\001\001\000\004" +
    "\125\u013c\001\001\000\020\346\231\353\u021e\354\234\355" +
    "\243\356\232\364\245\365\254\001\001\000\006\222\u0205" +
    "\223\u0206\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\224\u0209\225\u020a\226\u0208\001\001\000\020\346\231" +
    "\353\u0207\354\234\355\243\356\232\364\245\365\254\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\226\u021c\001\001\000\002\001\001\000\004\157" +
    "\u0219\001\001\000\024\160\u0218\161\u0211\346\231\353\u0214" +
    "\354\234\355\243\356\232\364\245\365\254\001\001\000" +
    "\002\001\001\000\030\342\u0134\343\u0122\344\u0130\345\u0125" +
    "\354\234\355\u012d\356\232\360\u0132\u0100\u0217\u0101\u0131\u0102" +
    "\u012e\001\001\000\024\160\u0215\161\u0211\346\231\353\u0214" +
    "\354\234\355\243\356\232\364\245\365\254\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\161\u0216\346\231\353\u0214\354\234\355" +
    "\243\356\232\364\245\365\254\001\001\000\002\001\001" +
    "\000\004\125\u013c\001\001\000\022\161\u0216\346\231\353" +
    "\u0214\354\234\355\243\356\232\364\245\365\254\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\232\u0221\001\001\000\002\001\001\000\006\233\u0224\234" +
    "\u0223\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\346\231\353\u0226\354\234\355\243\356" +
    "\232\364\245\365\254\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\013\u022a\014\u022b\346" +
    "\231\353\u022c\354\234\355\243\356\232\364\245\365\254" +
    "\001\001\000\032\014\u022e\015\u0231\016\u0230\017\u022d\277" +
    "\u022f\346\231\353\u022c\354\234\355\243\356\232\364\245" +
    "\365\254\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\u0232\277\u022f\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\346\231\353\u0102\354\234" +
    "\355\243\356\232\364\245\365\254\001\001\000\020\346" +
    "\231\353\u0236\354\234\355\243\356\232\364\245\365\254" +
    "\001\001\000\002\001\001\000\010\357\342\361\u0149\362" +
    "\u0238\001\001\000\006\357\342\361\u014b\001\001\000\010" +
    "\026\u023b\357\342\361\u014b\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\027\u0242\030\u023e\354\234\355\u023f" +
    "\356\232\357\u0240\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\030\u0243\354\234\355\u023f\356\232\357\u0240\001" +
    "\001\000\002\001\001\000\024\251\u0246\252\u024d\346\231" +
    "\353\u024c\354\234\355\243\356\232\364\245\365\254\001" +
    "\001\000\002\001\001\000\022\252\u0253\346\231\353\u024c" +
    "\354\234\355\243\356\232\364\245\365\254\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\034\u0255\035\u01d0\036\u01ce\037\u01d3\040\u01d1\001\001" +
    "\000\002\001\001\000\010\133\u025d\134\u025f\135\u025c\001" +
    "\001\000\002\001\001\000\004\333\u0259\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\135\u0260" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\346\231\353\u0274\354\234\355" +
    "\243\356\232\364\245\365\254\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\163\u0271\164\u0272\001\001\000" +
    "\004\u0108\u026e\001\001\000\004\167\u026d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ZCCode$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ZCCode$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ZCCode$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

  action_obj.initActionClass();

    }


   Module        module   = ModulesFactory.getDefaultModule();
   Summary       summary  = module.getSummary();
   Configuration cfg      = Configuration.getInstance();
   ParserInfo    info     = ParserInfo.getInstance();
             
   public void syntax_error(Symbol token) throws ParseException {
          info.syntax_error(token);
   }

   public void unrecovered_syntax_error(Symbol token) throws ParseException {
      info.unrecovered_syntax_error(token);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ZCCode$actions {


   Module          module   = null;
   Summary         summary  = null;
   Persistence     fichero  = null;
   ZCCCode         code     = null;
   Sections        sections = null;
   ParserInfo      info     = ParserInfo.getInstance();
      
   Variable    currVar  = null;
   StmtCobol lastStmt = null;  // Ultima instruccion
   StmtCobol currStmt = null;  // Instruccion en proceso
   
   boolean   hasEndProgram = false; // Hay STOPRUN o GOBACK?
    
   boolean master     = false;  // El fichero es el maestro?   
   int     numFillers = 0;
   
   // Pila para EVALUATE e IF
   Stack<StmtCobol> stack = new Stack<StmtCobol>();
          
   public void initActionClass() {
      module = ModulesFactory.getMainModule();
      summary = module.getSummary();
      sections = module.getSections();
      code = new ZCCCode(module);
   }

   public String getSymbolName(Symbol s)    { return (String) s.value; }
   public int    getSymbolLine(Symbol s)    { return (int)    s.left;  }
   
   public void debug(String txt) { 
      System.err.println(txt); 
   }
   public void print(String txt) { 
      System.out.println(txt); 
   }


  private final ZCCode parser;

  /** Constructor */
  CUP$ZCCode$actions(ZCCode parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ZCCode$do_action(
    int                        CUP$ZCCode$act_num,
    java_cup.runtime.lr_parser CUP$ZCCode$parser,
    java.util.Stack            CUP$ZCCode$stack,
    int                        CUP$ZCCode$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ZCCode$result;

      /* select the action based on the action number */
      switch (CUP$ZCCode$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 504: // opt_key ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("opt_key",260, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 503: // opt_key ::= KEY 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("opt_key",260, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 502: // opt_to ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("opt_to",261, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 501: // opt_to ::= TO 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("opt_to",261, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 500: // opt_in ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("opt_in",259, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 499: // opt_in ::= IN 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("opt_in",259, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 498: // opt_by ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("opt_by",258, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 497: // opt_by ::= BY 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("opt_by",258, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 496: // opt_all ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("opt_all",257, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 495: // opt_all ::= ALL 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("opt_all",257, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 494: // constante ::= NUMERO 
            {
              SymbolExt RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol n = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(n); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("constante",236, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 493: // constante ::= LITERAL 
            {
              SymbolExt RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol l = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(l); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("constante",236, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 492: // constantes ::= figurative 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt f = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 f.setId(ZCZSym.FIGURATIVE); RESULT = f; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("constantes",235, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 491: // constantes ::= constante 
            {
              SymbolExt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt c = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("constantes",235, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 490: // padre_indicator ::= IN 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("padre_indicator",250, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // padre_indicator ::= OF 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("padre_indicator",250, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // padre ::= padre_indicator id_base 
            {
              SymbolExt RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("padre",249, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // padres ::= padres padre 
            {
              SymbolExt RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("padres",248, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // padres ::= padre 
            {
              SymbolExt RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("padres",248, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // indice_item ::= expression 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("indice_item",247, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // indice_lst ::= indice_lst COMMA indice_item 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("indice_lst",246, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // indice_lst ::= indice_item 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("indice_lst",246, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // indice ::= LPAR indice_lst RPAR 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("indice",245, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // id_base ::= ID indice 
            {
              SymbolExt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("id_base",243, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // id ::= id_base padres 
            {
              SymbolExt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = i;    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("id",242, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // rvalue ::= function 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f);    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("rvalue",233, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // rvalue ::= constantes 
            {
              SymbolExt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt c = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("rvalue",233, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // rvalue ::= id 
            {
              SymbolExt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = i;  code.setVarRead(i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("rvalue",233, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // rvalue_list ::= rvalue_list rvalue 
            {
              SymbolExtList RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("rvalue_list",241, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // rvalue_list ::= rvalue 
            {
              SymbolExtList RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("rvalue_list",241, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // lvalue_list ::= lvalue_list lvalue 
            {
              SymbolExtList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		SymbolExtList l = (SymbolExtList)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l.add(i);       
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("lvalue_list",240, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // lvalue_list ::= lvalue 
            {
              SymbolExtList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExtList(i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("lvalue_list",240, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // lvalue ::= ident 
            {
              SymbolExt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = i; code.setVarWrite(i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("lvalue",239, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // operator_rel_pos ::= EQUAL opt_to 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("operator_rel_pos",227, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // operator_rel_pos ::= LESS 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("operator_rel_pos",227, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // operator_rel_pos ::= GREATER 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("operator_rel_pos",227, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // operator_rel_pos ::= REL_EQ 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("operator_rel_pos",227, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // operator_rel_pos ::= REL_LE 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("operator_rel_pos",227, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // operator_rel_pos ::= REL_LT 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("operator_rel_pos",227, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // operator_rel_pos ::= REL_GE 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("operator_rel_pos",227, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // operator_rel_pos ::= REL_GT 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("operator_rel_pos",227, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // operator_rel_neg ::= NOT operator_rel_pos 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("operator_rel_neg",226, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // operator_rel_type ::= operator_rel_pos 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("operator_rel_type",225, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // operator_rel_type ::= operator_rel_neg 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("operator_rel_type",225, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // operator_rel ::= operator_rel_type 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("operator_rel",224, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // operator_arit ::= OP_POW 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("operator_arit",223, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // operator_arit ::= OP_DIV 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("operator_arit",223, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // operator_arit ::= OP_MUL 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("operator_arit",223, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // operator_arit ::= OP_SUB 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("operator_arit",223, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // operator_arit ::= OP_ADD 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("operator_arit",223, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // function_parm ::= literal 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("function_parm",232, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // function_parm ::= expression 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("function_parm",232, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // function_parms_lst ::= function_parms_lst COMMA function_parm 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("function_parms_lst",231, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // function_parms_lst ::= function_parm 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("function_parms_lst",231, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // function_parms_lst_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("function_parms_lst_opt",230, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // function_parms_lst_opt ::= function_parms_lst 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("function_parms_lst_opt",230, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // function_parms ::= LPAR function_parms_lst_opt RPAR 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("function_parms",229, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // function ::= LENGTH rvalue 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("function",228, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // function ::= FUNCTION INTRINSIC function_parms 
            {
              Symbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = f; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("function",228, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // figurative ::= DFHCICS 
            {
              SymbolExt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",234, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // figurative ::= NULL 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",234, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // figurative ::= KANJI 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",234, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // figurative ::= NUMERIC 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",234, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // figurative ::= ALPHANUMERIC 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",234, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // figurative ::= ALPHABETIC 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",234, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // figurative ::= NEGATIVE 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",234, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // figurative ::= POSITIVE 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",234, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // figurative ::= QUOTE 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",234, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // figurative ::= LOWVAL 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",234, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // figurative ::= HIGHVAL 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",234, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // figurative ::= ZERO 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",234, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // figurative ::= SPACES 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",234, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // token ::= figurative 
            {
              Tokens RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt f = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("token",251, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // token ::= LPAR tokens RPAR 
            {
              Tokens RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new Tokens(t); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("token",251, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // token ::= NUMERO 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("token",251, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // token ::= LITERAL 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("token",251, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // token ::= ID 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("token",251, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // tokens ::= tokens token 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l.add(t); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("tokens",252, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // tokens ::= token 
            {
              Tokens RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = t;        
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("tokens",252, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // optTokens ::= 
            {
              Tokens RESULT =null;
		 RESULT = new Tokens();    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("optTokens",253, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // optTokens ::= tokens 
            {
              Tokens RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = t;               
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("optTokens",253, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // cond_operando ::= operator_rel 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("cond_operando",256, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // cond_operando ::= ALL 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("cond_operando",256, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // cond_operando ::= constantes 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("cond_operando",256, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // cond_operando ::= ident_base 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("cond_operando",256, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // cond_tokens ::= cond_tokens cond_operando 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("cond_tokens",255, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // cond_tokens ::= cond_operando 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("cond_tokens",255, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // condition ::= condition option_and_or cond_tokens 
            {
              StmtCobol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("condition",254, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // condition ::= cond_tokens 
            {
              StmtCobol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("condition",254, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // expr_primary ::= rvalue 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("expr_primary",222, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // expr_operand ::= LPAR expression_arit RPAR 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("expr_operand",221, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // expr_operand ::= expr_primary 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("expr_operand",221, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // expression_arit ::= expression_arit operator_arit expr_operand 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("expression_arit",220, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // expression_arit ::= expr_operand 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("expression_arit",220, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // expression ::= expression_arit 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("expression",219, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // eatWriteItem ::= AFTER 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteItem",94, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // eatWriteItem ::= PAGE 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteItem",94, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // eatWriteItem ::= LINE 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteItem",94, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // eatWriteItem ::= NO 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteItem",94, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // eatWriteItem ::= LOCK 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteItem",94, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // eatWriteItem ::= WITH 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteItem",94, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // eatWriteItem ::= token 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens s = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteItem",94, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // eatWriteLst ::= eatWriteLst eatWriteItem 
            {
              Tokens RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens x = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens i = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = x.add(i);      
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteLst",93, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // eatWriteLst ::= eatWriteItem 
            {
              Tokens RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens e = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(e); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteLst",93, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // eatWrite ::= 
            {
              Tokens RESULT =null;
		 RESULT = new Tokens(); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWrite",92, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // eatWrite ::= eatWriteLst 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l;            
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWrite",92, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // eatCloseItem ::= FOR 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatCloseItem",91, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // eatCloseItem ::= NO 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatCloseItem",91, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // eatCloseItem ::= WITH 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatCloseItem",91, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // eatCloseLst ::= eatCloseLst eatCloseItem 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens i = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l.add(i);      
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatCloseLst",90, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // eatCloseLst ::= eatCloseItem 
            {
              Tokens RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens i = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatCloseLst",90, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // eatClose ::= 
            {
              Tokens RESULT =null;
		 RESULT = new Tokens(); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatClose",89, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // eatClose ::= eatCloseLst 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l;            
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatClose",89, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // stmtEndVerb ::= ENDVERB 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEndVerb",200, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // stmtEndEvaluate ::= ENDEVAL 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEndEvaluate",197, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // stmtEndPerform ::= ENDPERFORM 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEndPerform",196, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // stmtEndIf ::= ENDIF 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEndIf",195, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // stmtElse ::= ELSE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtElse",194, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // stmtEndP ::= ENDP 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEndP",178, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // option_order ::= DESCENDING 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_order",85, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // option_order ::= ASCENDING 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_order",85, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // option_and_or ::= ALSO 
            {
              Symbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol a = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = a; code.incComplexity(); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_and_or",83, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // option_and_or ::= OR 
            {
              Symbol RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = o; code.incComplexity(); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_and_or",83, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // option_and_or ::= AND 
            {
              Symbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol a = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = a; code.incComplexity(); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_and_or",83, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // option_position ::= AFTER 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_position",84, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // option_position ::= BEFORE 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_position",84, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // option_to_multiple ::= TO rvalue_list 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_to_multiple",88, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // option_giving ::= GIVING lvalue_list 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_giving",87, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // option_giving_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_giving_opt",86, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // option_giving_opt ::= option_giving 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_giving_opt",86, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // option_size_error ::= SIZE_ERROR 
            {
              StmtCobol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 code.setImperative(); 
                                   RESULT = new StmtCobol(i); 
                                
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_size_error",189, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // option_size_error_opt ::= 
            {
              StmtCobol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_size_error_opt",188, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // option_size_error_opt ::= option_size_error 
            {
              StmtCobol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_size_error_opt",188, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // optionOverflow ::= OVERFLOW 
            {
              StmtCobol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 code.setImperative(); 
                                   RESULT = new StmtCobol(i); 
                                
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("optionOverflow",187, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // optionOverflow_opt ::= 
            {
              StmtCobol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("optionOverflow_opt",186, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // optionOverflow_opt ::= optionOverflow 
            {
              StmtCobol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("optionOverflow_opt",186, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // stmtException ::= EXCEPTION 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtException",192, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // stmtInvalid ::= INVALID opt_key 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 StmtCobol stmt = new StmtCobol(s);
                                              RESULT = code.setAtEnd(stmt); 
                                           
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInvalid",191, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // stmtAtEnd ::= ATEND 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s);
                             RESULT = code.setAtEnd(stmt); 
                          
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAtEnd",190, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // closeFile ::= ID eatClose 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens e = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 Tokens t = new Tokens(s);
                                         RESULT = t.add(e); 
                                      
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("closeFile",217, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // closeLstFiles ::= closeLstFiles closeFile 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens c = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l.add(c);  
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("closeLstFiles",218, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // closeLstFiles ::= closeFile 
            {
              Tokens RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens c = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = c;         
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("closeLstFiles",218, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // stmtClose ::= CLOSE closeLstFiles 
            {
              StmtCobol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.fileAction(TRAP.ACC_CLOSE, c, l); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtClose",122, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // stmtSet ::= SET stmtSet_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSet",185, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // stmtStop ::= STOPRUN optTokens 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtStop",183, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // stmtDelete ::= DELETE ID 
            {
              StmtCobol RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.fileAccess(TRAP.ACC_DELETE, d, i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDelete",125, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // stmtRelease ::= RELEASE ID eatWrite 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens e = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s);
                     stmt.addSymbol(i);
                     RESULT = stmt.addTokens(e);
                  
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRelease",150, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // stmtWrite_eop ::= EOP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 code.setImperative(); 
                                   RESULT = new StmtCobol(s); 
                                
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_eop",82, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // stmtWrite_after ::= AFTER 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_after",81, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // stmtWrite_position ::= option_position rvalue 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_position",80, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // stmtWrite_from ::= FROM rvalue 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_from",79, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // stmtWrite_option ::= stmtWrite_eop 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_option",78, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // stmtWrite_option ::= stmtWrite_after 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_option",78, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // stmtWrite_option ::= stmtWrite_position 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_option",78, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // stmtWrite_option ::= stmtWrite_from 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_option",78, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // stmtWrite_options ::= stmtWrite_options stmtWrite_option 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_options",77, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // stmtWrite_options ::= stmtWrite_option 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_options",77, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // stmtWrite_detail ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_detail",76, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // stmtWrite_detail ::= stmtWrite_options 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_detail",76, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // stmtRewrite ::= REWRITE ID stmtWrite_detail 
            {
              StmtCobol RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol r = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = code.fileAccess(TRAP.ACC_UPDATE, r, i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRewrite",155, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // stmtWrite ::= WRITE ID stmtWrite_detail 
            {
              StmtCobol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol w = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = code.fileAccess(TRAP.ACC_INSERT, w, i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite",163, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // stmtUnstring_option ::= optionOverflow 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_option",75, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // stmtUnstring_option ::= TALLYING opt_in lvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_option",75, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // stmtUnstring_option ::= POINTER lvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_option",75, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // stmtUnstring_options ::= stmtUnstring_options stmtUnstring_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_options",74, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // stmtUnstring_options ::= stmtUnstring_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_options",74, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // stmtUnstring_options_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_options_opt",73, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // stmtUnstring_options_opt ::= stmtUnstring_options 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_options_opt",73, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // stmtUnstring_delimiter ::= COUNT opt_in lvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiter",72, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // stmtUnstring_delimiter ::= DELIMITER opt_in lvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiter",72, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // stmtUnstring_delimiters ::= stmtUnstring_delimiters stmtUnstring_delimiter 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiters",71, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // stmtUnstring_delimiters ::= stmtUnstring_delimiter 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiters",71, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // stmtUnstring_delimiters_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiters_opt",70, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // stmtUnstring_delimiters_opt ::= stmtUnstring_delimiters 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiters_opt",70, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // stmtUnstring_target ::= lvalue stmtUnstring_delimiters_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_target",66, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // stmtUnstring_targets ::= stmtUnstring_targets stmtUnstring_target 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_targets",65, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // stmtUnstring_targets ::= stmtUnstring_target 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_targets",65, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // stmtUnstring_to ::= INTO stmtUnstring_targets 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_to",64, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // stmtUnstring_delimited_token ::= OR 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimited_token",69, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // stmtUnstring_delimited_token ::= rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimited_token",69, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // stmtUnstring_delimiteds ::= stmtUnstring_delimiteds stmtUnstring_delimited_token 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiteds",68, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // stmtUnstring_delimiteds ::= stmtUnstring_delimited_token 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiteds",68, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // stmtUnstring_delimited ::= DELIMITED opt_by opt_all stmtUnstring_delimiteds 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimited",67, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // stmtUnstring_delimited_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimited_opt",63, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // stmtUnstring_delimited_opt ::= stmtUnstring_delimited 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimited_opt",63, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // stmtUnstring_detail ::= rvalue stmtUnstring_delimited_opt stmtUnstring_to stmtUnstring_options_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_detail",62, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // stmtUnstring ::= UNSTRING stmtUnstring_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring",121, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // stmtSubtract_option ::= option_size_error 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSubtract_option",61, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // stmtSubtract_option ::= option_giving 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSubtract_option",61, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // stmtSubtract_option ::= FROM rvalue_list 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSubtract_option",61, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // stmtSubtract_options ::= stmtSubtract_options stmtSubtract_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSubtract_options",60, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // stmtSubtract_options ::= stmtSubtract_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSubtract_options",60, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // stmtSubtract_detail ::= rvalue_list stmtSubtract_options 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSubtract_detail",59, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // stmtSubtract ::= SUBTRACT stmtSubtract_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSubtract",58, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // stmtString_pointer ::= POINTER lvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_pointer",57, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // stmtString_pointer_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_pointer_opt",56, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // stmtString_pointer_opt ::= stmtString_pointer 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_pointer_opt",56, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // stmtString_into ::= INTO lvalue stmtString_pointer_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_into",51, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // stmtString_from_delim ::= SIZE 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_from_delim",55, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // stmtString_from_delim ::= rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_from_delim",55, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // stmtString_from_delimiter ::= DELIMITED opt_by stmtString_from_delim 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_from_delimiter",54, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // stmtString_from_tokens ::= stmtString_from_tokens rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_from_tokens",53, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // stmtString_from_tokens ::= rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_from_tokens",53, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // stmtString_from_string ::= stmtString_from_tokens stmtString_from_delimiter 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_from_string",52, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // stmtString_from ::= stmtString_from stmtString_from_string 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_from",50, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // stmtString_from ::= stmtString_from_string 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_from",50, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // stmtString_detail ::= stmtString_from stmtString_into optionOverflow_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_detail",49, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // stmtStart_key ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtStart_key",48, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // stmtStart_key ::= KEY operator_rel rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtStart_key",48, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // stmtStart ::= START ID stmtStart_key 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtStart",47, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // stmtSort_procedure ::= OUTPUT ID 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_procedure",46, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // stmtSort_procedure ::= INPUT ID 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_procedure",46, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // stmtSort_giving ::= GIVING rvalue_list 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_giving",45, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // stmtSort_using ::= USING rvalue_list 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_using",44, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // stmtSort_duplicates ::= DUPLICATES 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_duplicates",43, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // stmtSort_order ::= option_order opt_key rvalue_list 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_order",42, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // stmtSort_option ::= stmtSort_procedure 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_option",41, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // stmtSort_option ::= stmtSort_giving 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_option",41, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // stmtSort_option ::= stmtSort_using 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_option",41, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // stmtSort_option ::= stmtSort_duplicates 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_option",41, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // stmtSort_option ::= stmtSort_order 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_option",41, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // stmtSort_detail ::= stmtSort_detail stmtSort_option 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_detail",40, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // stmtSort_detail ::= stmtSort_option 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_detail",40, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // stmtSort ::= SORT NT$3 ID stmtSort_detail 
            {
              StmtCobol RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (StmtCobol) ((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).value;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort",39, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // NT$3 ::= 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
 RESULT = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("NT$3",265, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // stmtSet_resto ::= BY rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSet_resto",38, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // stmtSet_resto ::= TO rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSet_resto",38, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // stmtSet_detail ::= lvalue_list stmtSet_resto 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSet_detail",37, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // stmtSearch_varying ::= VARYING rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSearch_varying",36, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // stmtSearch_opt ::= stmtSearch_varying 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSearch_opt",35, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // stmtSearch_option ::= stmtSearch_option stmtSearch_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSearch_option",34, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // stmtSearch_option ::= stmtSearch_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSearch_option",34, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // stmtSearch_options ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSearch_options",33, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // stmtSearch_options ::= stmtSearch_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSearch_options",33, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // stmtSearch_detail ::= rvalue stmtSearch_options 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSearch_detail",32, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // stmtSearch ::= SEARCH opt_all stmtSearch_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSearch",31, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // stmtRead_key ::= KEY rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead_key",30, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // stmtRead_into ::= INTO lvalue 
            {
              Tokens RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt d = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 Tokens t = new Tokens(i); RESULT = t.add(d); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead_into",29, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // stmtRead_option ::= stmtRead_key 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead_option",28, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // stmtRead_option ::= stmtRead_into 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead_option",28, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // stmtRead_options ::= stmtRead_options stmtRead_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead_options",27, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // stmtRead_options ::= stmtRead_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead_options",27, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // stmtRead_detail ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead_detail",26, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // stmtRead_detail ::= stmtRead_options 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead_detail",26, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // stmtRead ::= READ ID stmtRead_detail 
            {
              StmtCobol RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol r = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens s = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = code.fileAccess(TRAP.ACC_READ, r, i);
                     RESULT = stmt.addTokens(s); 
                  
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead",25, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // perform_token ::= BY 
            {
              Tokens RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_token",111, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // perform_token ::= FROM 
            {
              Tokens RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_token",111, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // perform_token ::= rvalue 
            {
              Tokens RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt t = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(t); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_token",111, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // perform_tokens ::= perform_tokens perform_token 
            {
              Tokens RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens v = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 v.add(t); RESULT = v; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_tokens",110, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // perform_tokens ::= perform_token 
            {
              Tokens RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = t; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_tokens",110, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // perform_test ::= AFTER 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_test",109, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // perform_test ::= BEFORE 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_test",109, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // stmtPerform_option ::= TEST perform_test 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Option(o);    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_option",148, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // stmtPerform_option ::= AFTER perform_tokens 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Option(o, t); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_option",148, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // stmtPerform_option ::= VARYING perform_tokens 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Option(o, t); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_option",148, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // stmtPerform_option ::= UNTIL condition 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol t = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Option(o, t); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_option",148, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // stmtPerform_option ::= TIMES 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = currStmt.mergeOption(new Option(o)); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_option",148, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // stmtPerform_option ::= FOREVER 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Option(o); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_option",148, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // stmtPerform_options ::= stmtPerform_options stmtPerform_option 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = currStmt.addOption(o); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_options",147, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // stmtPerform_options ::= stmtPerform_option 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = currStmt.addOption(o); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_options",147, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // stmtPerform_options_opt ::= 
            {
              StmtCobol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_options_opt",146, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // stmtPerform_options_opt ::= stmtPerform_options 
            {
              StmtCobol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_options_opt",146, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // stmtPerform_thru ::= stmtPerform_thru rvalue 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt o = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = currStmt.addOption(new Option(o));    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_thru",145, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // stmtPerform_thru ::= THRU ID 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = currStmt.addOption(new Option(o, i)); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_thru",145, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // stmtPerform_thru_opt ::= 
            {
              StmtCobol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_thru_opt",144, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // stmtPerform_thru_opt ::= stmtPerform_thru 
            {
              StmtCobol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_thru_opt",144, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // stmtPerform_from ::= stmtPerform_from rvalue 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt o = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = currStmt.addOption(new Option(o)); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_from",143, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // stmtPerform_from ::= rvalue 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt o = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = currStmt.addOption(new Option(o)); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_from",143, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // stmtPerform_from_opt ::= 
            {
              StmtCobol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_from_opt",142, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // stmtPerform_from_opt ::= stmtPerform_from 
            {
              StmtCobol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_from_opt",142, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // stmtPerform_verb ::= PERFORM 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 currStmt = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_verb",141, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // stmtPerform ::= stmtPerform_verb stmtPerform_from_opt stmtPerform_thru_opt stmtPerform_options_opt 
            {
              StmtCobol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol p = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.processPerform(currStmt, lastStmt); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform",140, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // stmtOpen_files ::= stmtOpen_files ID 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l.add(s);      
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_files",213, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // stmtOpen_files ::= ID 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_files",213, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // stmtOpen_mode ::= EXTEND 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s);
                               stmt.setId(Persistence.EXTEND);
                               RESULT = stmt;
                            
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_mode",216, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // stmtOpen_mode ::= IO 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s);
                               stmt.setId(Persistence.IO);
                               RESULT = stmt;
                            
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_mode",216, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // stmtOpen_mode ::= OUTPUT 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s);
                               stmt.setId(Persistence.OUTPUT);
                               RESULT = stmt;
                            
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_mode",216, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // stmtOpen_mode ::= INPUT 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s);
                               stmt.setId(Persistence.INPUT);
                               RESULT = stmt; 
                            
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_mode",216, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // stmtOpen_group ::= stmtOpen_mode stmtOpen_files 
            {
              Tokens RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		StmtCobol o = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 Persistence f;
                 /*JGG
                    for (Symbol s : l.getTokens()) {
                        f = module.getFile(getSymbolName(s));
                        f.setAccess(o.getId());
                    }
                    */
                    RESULT = l;
                 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_group",215, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // stmtOpen_list ::= stmtOpen_list stmtOpen_group 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens s = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l.add(s);  
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_list",214, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // stmtOpen_list ::= stmtOpen_group 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens s = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;         
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_list",214, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // stmtOpen ::= OPEN stmtOpen_list 
            {
              StmtCobol RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.fileAction(TRAP.ACC_OPEN, o, l); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen",164, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // stmtMultiply_by ::= rvalue BY rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtMultiply_by",24, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // stmtMultiply_detail ::= stmtMultiply_by option_giving_opt option_size_error_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtMultiply_detail",23, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // stmtMultiply ::= MULTIPLY stmtMultiply_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtMultiply",158, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // stmtMove ::= MOVE opt_all rvalue TO lvalue_list 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-4)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		SymbolExt r = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExtList l = (SymbolExtList)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 code.checkCall(l, r);
                      StmtCobol stmt = new StmtCobol(s, code.getStmts());
                      stmt.addSymbol(r);
                      stmt.addVariables(l);
                      RESULT = stmt; 
                   
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtMove",157, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-4)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // stmtInspect_token ::= rvalue 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",168, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // stmtInspect_token ::= CONVERTING 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",168, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // stmtInspect_token ::= REPLACING 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",168, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // stmtInspect_token ::= TALLYING 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",168, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // stmtInspect_token ::= TO 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",168, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // stmtInspect_token ::= CHARACTER 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",168, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // stmtInspect_token ::= FIRST 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",168, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // stmtInspect_token ::= LEADING 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",168, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // stmtInspect_token ::= AFTER 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",168, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // stmtInspect_token ::= BEFORE 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",168, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // stmtInspect_token ::= BY 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",168, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // stmtInspect_token ::= ALL 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",168, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // stmtInspect_detail ::= stmtInspect_detail stmtInspect_token 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_detail",167, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // stmtInspect_detail ::= stmtInspect_token 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_detail",167, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // stmtInspect ::= INSPECT rvalue stmtInspect_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		SymbolExt l = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect",166, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // stmtInitialize_tokens ::= ALL 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_tokens",22, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // stmtInitialize_tokens ::= BY 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_tokens",22, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // stmtInitialize_tokens ::= constantes 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_tokens",22, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // stmtInitialize_tokens ::= ident 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_tokens",22, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // stmtInitialize_resto ::= stmtInitialize_resto stmtInitialize_tokens 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_resto",21, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // stmtInitialize_resto ::= stmtInitialize_tokens 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_resto",21, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // stmtInitialize_replacing_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_replacing_opt",20, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // stmtInitialize_replacing_opt ::= REPLACING stmtInitialize_resto 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_replacing_opt",20, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // stmtInitialize_detail ::= lvalue_list stmtInitialize_replacing_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_detail",19, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // stmtInitialize ::= INITIALIZE stmtInitialize_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize",118, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // stmtIf_detail ::= condition 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIf_detail",18, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // stmtIf ::= IF stmtIf_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 StmtCobol stmt = new StmtCobol(s, code.getStmts());      
                                 RESULT = code.processIf(stmt);
                              
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIf",193, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // stmtGoto_depending ::= DEPENDING rvalue 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtGoto_depending",154, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // stmtGoto_depending_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtGoto_depending_opt",153, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // stmtGoto_depending_opt ::= stmtGoto_depending 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtGoto_depending_opt",153, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // stmtGoto_procs ::= stmtGoto_procs ID 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtGoto_procs",152, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // stmtGoto_procs ::= ID 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtGoto_procs",152, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // stmtGoTo ::= GOTO opt_to stmtGoto_procs stmtGoto_depending_opt 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtGoTo",151, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // stmtWhen_thru ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWhen_thru",199, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // stmtWhen_thru ::= THRU condition 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWhen_thru",199, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // stmtEvaluate_other ::= OTHER 
            {
              Symbol RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEvaluate_other",139, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // stmtEvaluate_item ::= condition stmtWhen_thru 
            {
              StmtCobol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		StmtCobol t = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEvaluate_item",138, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // stmtEvaluate_condition ::= stmtEvaluate_other 
            {
              StmtCobol RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 stack.peek().addOption(new Option(o)); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEvaluate_condition",137, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // stmtEvaluate_condition ::= stmtEvaluate_item 
            {
              StmtCobol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEvaluate_condition",137, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // stmtWhen ::= WHEN NT$2 stmtEvaluate_condition 
            {
              StmtCobol RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (StmtCobol) ((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWhen",198, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // NT$2 ::= 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
 stack.peek().addOption(new Option(s)); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("NT$2",264, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // stmtEvaluate_object ::= condition 
            {
              StmtCobol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEvaluate_object",136, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // stmtEvaluate ::= EVALUATE NT$1 stmtEvaluate_object 
            {
              StmtCobol RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (StmtCobol) ((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEvaluate",135, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // NT$1 ::= 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
 currStmt = new StmtCobol(s); 
                                stack.push(currStmt);
                             
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("NT$1",263, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // stmtDivide_field ::= BY 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDivide_field",17, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // stmtDivide_field ::= INTO 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDivide_field",17, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // stmtDivide_field ::= GIVING 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDivide_field",17, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // stmtDivide_field ::= NUMERO 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDivide_field",17, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // stmtDivide_field ::= ident 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDivide_field",17, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // stmtDivide_fields ::= stmtDivide_fields stmtDivide_field 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDivide_fields",16, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // stmtDivide_fields ::= stmtDivide_field 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDivide_fields",16, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // stmtDivide_detail ::= rvalue stmtDivide_fields option_size_error_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDivide_detail",15, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // stmtDivide ::= DIVIDE stmtDivide_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDivide",14, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // stmtDisplay ::= DISPLAY rvalue_list 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDisplay",127, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // stmtCompute_option ::= option_size_error 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCompute_option",13, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // stmtCompute_options ::= stmtCompute_options stmtCompute_option 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCompute_options",12, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // stmtCompute_options ::= stmtCompute_option 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCompute_options",12, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // stmtCompute_options_opt ::= 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCompute_options_opt",11, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // stmtCompute_options_opt ::= stmtCompute_options 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCompute_options_opt",11, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // stmtCompute_rvalue ::= rvalue 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCompute_rvalue",10, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // stmtCompute_rvalues ::= stmtCompute_rvalues stmtCompute_rvalue 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCompute_rvalues",9, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // stmtCompute_rvalues ::= stmtCompute_rvalue 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCompute_rvalues",9, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // stmtCompute_detail ::= lvalue EQUAL stmtCompute_rvalues stmtCompute_options_opt 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).value;
		 RESULT = i; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCompute_detail",8, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // stmtCompute ::= COMPUTE stmtCompute_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s, code.getStmts());
                      stmt.addSymbol(i);
                      RESULT = stmt; 
                   
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCompute",124, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // stmtCancel ::= CANCEL rvalue 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCancel",162, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // stmtCall_returning ::= RETURNING lvalue 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_returning",173, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // stmtCall_returning_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_returning_opt",172, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // stmtCall_returning_opt ::= stmtCall_returning 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_returning_opt",172, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // stmtCall_parm_type ::= REFERENCE 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_parm_type",176, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // stmtCall_parm_type ::= VALUE 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_parm_type",176, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // stmtCall_parm ::= BY stmtCall_parm_type 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_parm",175, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // stmtCall_parm ::= rvalue 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_parm",175, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // stmtCall_parm_list ::= stmtCall_parm_list stmtCall_parm 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_parm_list",174, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // stmtCall_parm_list ::= stmtCall_parm 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_parm_list",174, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // stmtCall_using ::= USING stmtCall_parm_list 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_using",171, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // stmtCall_using_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_using_opt",170, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // stmtCall_using_opt ::= stmtCall_using 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_using_opt",170, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // stmtCall ::= CALL moduloCall stmtCall_using_opt stmtCall_returning_opt 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		 RESULT = code.processCall(s, i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall",169, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // stmtAdd_option ::= option_size_error 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAdd_option",7, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // stmtAdd_option ::= option_to_multiple 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAdd_option",7, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // stmtAdd_option ::= option_giving 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAdd_option",7, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // stmtAdd_options ::= stmtAdd_options stmtAdd_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAdd_options",6, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // stmtAdd_options ::= stmtAdd_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAdd_options",6, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // stmtAdd_detail ::= rvalue_list stmtAdd_options 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAdd_detail",5, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // stmtAdd ::= ADD stmtAdd_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAdd",184, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // stmtAccept_detail ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAccept_detail",4, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // stmtAccept_detail ::= FROM rvalue stmtAcceptOpt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAccept_detail",4, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // stmtEndExec ::= END_EXEC 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEndExec",180, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // stmtExec ::= EXEC_SQL 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 module.incStmtSql();  RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtExec",179, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // stmtExec ::= EXEC_CICS 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 module.incStmtCics(); RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtExec",179, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // stmtReturn ::= RETURN ID stmtRead_detail 
            {
              StmtCobol RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol r = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens j = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = code.fileAccess(TRAP.ACC_READ, r, i);
                     RESULT = stmt.addTokens(j); 
                  
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtReturn",182, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // stmtNext ::= NEXT 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtNext",161, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // stmtRollback ::= ROLLBACK 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRollback",181, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // stmtFree ::= FREE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtFree",149, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // exitType ::= 
            {
              Symbol RESULT =null;
		 RESULT = code.makeSymbol(ZCCSym.PARAGRAPH, -1, -1, ""); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("exitType",104, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // exitType ::= SECTION 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("exitType",104, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // exitType ::= PARAGRAPH 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("exitType",104, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // exitType ::= PROGRAM 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("exitType",104, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // stmtExitPgm ::= EXITPGM 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s, code.getStmts());
                               RESULT = stmt.addSymbol(s); 
                            
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtExitPgm",133, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // stmtExitP ::= EXITP 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s, code.getStmts());
                           RESULT = stmt.addSymbol(code.makeSymbol(ZCCSym.PERFORM, -1, -1, "PERFORM")); 
                        
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtExitP",131, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // stmtExitG ::= EXIT exitType 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s, code.getStmts());
                                       RESULT = stmt.addSymbol(t); 
                                    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtExitG",132, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // exitTypes ::= stmtExitPgm 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("exitTypes",134, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // exitTypes ::= stmtExitP 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("exitTypes",134, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // exitTypes ::= stmtExitG 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("exitTypes",134, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // stmtExit ::= exitTypes 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtExit",130, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // moduloCall ::= LITERAL 
            {
              Symbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol l = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("moduloCall",177, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // moduloCall ::= ident 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = i; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("moduloCall",177, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // stmtAcceptOpt ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAcceptOpt",165, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // stmtAcceptOpt ::= ID 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAcceptOpt",165, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // stmtAccept ::= ACCEPT lvalue stmtAccept_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAccept",159, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // stmtMerge ::= MERGE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtMerge",120, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // stmtUnlock ::= UNLOCK 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnlock",160, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // stmtGoback ::= GOBACK 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtGoback",129, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // stmtCommit ::= COMMIT 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCommit",119, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // stmtString ::= STRING stmtString_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString",156, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // stmtContinue ::= CONTINUE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtContinue",128, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // stmtAllocate ::= ALLOCATE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAllocate",126, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // stmtTransform ::= TRANSFORM 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtTransform",123, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // stmtLang ::= stmtFree 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtLang",212, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // stmtLang ::= stmtCancel 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtLang",212, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // stmtLang ::= stmtAllocate 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtLang",212, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // stmtArit ::= stmtSubtract 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtArit",211, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // stmtArit ::= stmtDivide 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtArit",211, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // stmtArit ::= stmtAdd 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtArit",211, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // stmtArit ::= stmtCompute 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtArit",211, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // stmtArit ::= stmtMultiply 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtArit",211, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // stmtIO2 ::= stmtSort 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",206, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // stmtIO2 ::= stmtRewrite 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",206, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // stmtIO2 ::= stmtDelete 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",206, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // stmtIO2 ::= stmtWrite 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",206, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // stmtIO2 ::= stmtReturn 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",206, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // stmtIO2 ::= stmtRelease 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",206, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // stmtIO2 ::= stmtRead 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",206, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // stmtIO2 ::= stmtClose 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",206, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // stmtIO2 ::= stmtOpen 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",206, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // stmtIO2 ::= stmtDisplay 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",206, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // stmtIO2 ::= stmtAccept 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",206, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // stmtIO1 ::= stmtRollback 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO1",205, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // stmtIO1 ::= stmtStart 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO1",205, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // stmtIO1 ::= stmtMerge 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO1",205, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // stmtIO1 ::= stmtUnlock 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO1",205, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // stmtIO1 ::= stmtCommit 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO1",205, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // stmtIO ::= stmtIO2 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;              
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO",204, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // stmtIO ::= stmtIO1 optTokens 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s.addTokens(t); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO",204, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // stmtDatos2 ::= stmtSet 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos2",203, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // stmtDatos2 ::= stmtInitialize 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos2",203, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // stmtDatos2 ::= stmtUnstring 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos2",203, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // stmtDatos2 ::= stmtSearch 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos2",203, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // stmtDatos2 ::= stmtInspect 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos2",203, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // stmtDatos2 ::= stmtString 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos2",203, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // stmtDatos2 ::= stmtMove 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos2",203, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // stmtDatos1 ::= stmtTransform 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos1",202, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // stmtDatos ::= stmtDatos2 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;              
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos",201, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // stmtDatos ::= stmtDatos1 optTokens 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s.addTokens(t); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos",201, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // stmtFlujo ::= stmtContinue 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtFlujo",210, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // stmtFlujo ::= stmtGoTo 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtFlujo",210, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // stmtFlujo ::= stmtEvaluate 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.processEvaluate(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtFlujo",210, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // stmtFlujo ::= stmtIf 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtFlujo",210, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // stmtFlujo ::= stmtCall 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtFlujo",210, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // stmtFlujo ::= stmtPerform 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtFlujo",210, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // stmtControl2 ::= stmtGoback 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		  hasEndProgram = true;
                                      code.trapEndModule();
                                      RESULT = s; 
                                   
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtControl2",209, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // stmtControl2 ::= stmtStop 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 hasEndProgram = true;
                                       RESULT = s; 
                                       code.trapEndModule(); 
                                   
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtControl2",209, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // stmtControl1 ::= stmtNext 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtControl1",208, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // stmtControl ::= stmtControl2 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 hasEndProgram = true; RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtControl",207, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // stmtControl ::= stmtExit 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT =  code.processExit(s);    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtControl",207, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // stmtControl ::= stmtControl1 optTokens 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s.addTokens(t);          
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtControl",207, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // noverbos ::= stmtEndEvaluate 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.endEvaluate(s);  
                                  stack.pop();     
                               
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",108, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // noverbos ::= stmtEndExec 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;                         
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",108, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // noverbos ::= stmtException 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;                         
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",108, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // noverbos ::= stmtInvalid 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;                         
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",108, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // noverbos ::= stmtAtEnd 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;                         
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",108, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // noverbos ::= stmtElse 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.processElse(s);       
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",108, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // noverbos ::= stmtWhen 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.processWhen(stack.peek());       
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",108, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // noverbos ::= stmtEndVerb 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;                         
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",108, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // noverbos ::= stmtEndPerform 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.endPerform(s);        
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",108, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // noverbos ::= stmtEndIf 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.endIf(s);              
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",108, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // noverbos ::= stmtEndP 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.checkFlujo( s, lastStmt);
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",108, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // verbos ::= stmtExec 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;                         
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("verbos",107, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // verbos ::= stmtLang 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; module.incStmtLang();    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("verbos",107, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // verbos ::= stmtIO 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; module.incStmtIO();      
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("verbos",107, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // verbos ::= stmtArit 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; module.incStmtArit();    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("verbos",107, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // verbos ::= stmtDatos 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; module.incStmtDatos();   
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("verbos",107, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // verbos ::= stmtFlujo 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; module.incStmtFlujo();   
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("verbos",107, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // verbos ::= stmtControl 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; module.incStmtControl(); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("verbos",107, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= noverbos 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmt",106, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= verbos 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; code.incStmt(); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmt",106, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lista_stmt ::= lista_stmt stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 lastStmt = code.processStatement(s, lastStmt); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("lista_stmt",105, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lista_stmt ::= stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 lastStmt = code.processStatement(s, lastStmt); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("lista_stmt",105, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parr_section ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("parr_section",103, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parr_section ::= SECTION 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = true;  
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("parr_section",103, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parrafo_name ::= PARRAFO parr_section ENDP 
            {
              Symbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 // if (b == true) code.notSupportedSection(p); 
                        RESULT = code.processParrafo(p, lastStmt); 
                     
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("parrafo_name",102, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bloque_sentences ::= 
            {
              Integer RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("bloque_sentences",101, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bloque_sentences ::= lista_stmt 
            {
              Integer RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("bloque_sentences",101, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bloque_parrafo ::= parrafo_name bloque_sentences 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("bloque_parrafo",99, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bloque_parrafos ::= bloque_parrafos bloque_parrafo 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("bloque_parrafos",98, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bloque_parrafos ::= bloque_parrafo 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("bloque_parrafos",98, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lista_parrafos ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("lista_parrafos",97, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lista_parrafos ::= bloque_parrafos 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("lista_parrafos",97, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bloque_inicial ::= bloque_sentences 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("bloque_inicial",100, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bloque_procedure ::= bloque_inicial lista_parrafos 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("bloque_procedure",3, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // list_parms ::= list_parms ID 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l.add(s);      
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("list_parms",114, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // list_parms ::= ID 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("list_parms",114, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // list_parms_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("list_parms_opt",113, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // list_parms_opt ::= list_parms 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("list_parms_opt",113, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // proc_parm ::= RETURNING rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("proc_parm",117, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // proc_parm ::= USING list_parms_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("proc_parm",117, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // proc_parms ::= proc_parms proc_parm 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("proc_parms",116, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // proc_parms ::= proc_parm 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("proc_parms",116, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // proc_parms_list ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("proc_parms_list",115, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // proc_parms_list ::= proc_parms 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("proc_parms_list",115, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // resto_call ::= proc_parms_list NT$0 ENDP 
            {
              Tokens RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Tokens) ((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Tokens p = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 code.parrafoVirtual(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("resto_call",112, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              Tokens RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens p = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
 RESULT = p; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("NT$0",262, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // proc_div_header ::= DIV_PROC resto_call 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens p = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 code.beginCode(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("proc_div_header",2, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // procedure_division ::= proc_div_header bloque_procedure 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("procedure_division",0, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // end_program ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("end_program",1, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // end_program ::= END_PGM ID ENDP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		 hasEndProgram = true; 
                                      StmtCobol stmt = new StmtCobol(s); 
                                      code.endProgram(stmt);
                                      lastStmt = stmt;
                                   
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("end_program",1, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // module ::= procedure_division end_program 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("module",96, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= cobolCode EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		StmtCobol start_val = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		RESULT = start_val;
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ZCCode$parser.done_parsing();
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // cobolCode ::= module 
            {
              StmtCobol RESULT =null;
		 code.EndOfFile(lastStmt, hasEndProgram);
                         RESULT = null;  
                      
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("cobolCode",95, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

