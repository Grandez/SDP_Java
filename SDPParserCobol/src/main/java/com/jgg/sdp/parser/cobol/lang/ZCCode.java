
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Mar 30 17:13:43 CEST 2017
//----------------------------------------------------

package com.jgg.sdp.parser.cobol.lang;

import java.util.*;
import java_cup.runtime.*;
import com.jgg.sdp.module.base.*;
import com.jgg.sdp.module.items.*;
import com.jgg.sdp.module.factorias.*;
import com.jgg.sdp.core.ctes.*;
import com.jgg.sdp.core.config.*;
import com.jgg.sdp.parser.base.*;
import com.jgg.sdp.parser.base.stmt.*;
import com.jgg.sdp.parser.base.symbol.*;
import com.jgg.sdp.parser.cobol.base.*;
import com.jgg.sdp.parser.cobol.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Mar 30 17:13:43 CEST 2017
  */
public class ZCCode extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ZCCode() {super();}

  /** Constructor which sets the default scanner. */
  public ZCCode(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ZCCode(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0205\000\002\142\003\000\002\002\004\000\002\143" +
    "\004\000\002\003\005\000\002\003\002\000\002\002\004" +
    "\000\002\004\004\000\002\u0113\002\000\002\160\005\000" +
    "\002\163\003\000\002\163\002\000\002\164\003\000\002" +
    "\164\004\000\002\165\004\000\002\165\004\000\002\161" +
    "\003\000\002\161\002\000\002\162\003\000\002\162\004" +
    "\000\002\005\004\000\002\147\003\000\002\144\003\000" +
    "\002\144\002\000\002\145\003\000\002\145\004\000\002" +
    "\146\004\000\002\150\003\000\002\150\002\000\002\151" +
    "\005\000\002\152\003\000\002\152\002\000\002\154\003" +
    "\000\002\154\004\000\002\155\003\000\002\155\003\000" +
    "\002\156\003\000\002\156\003\000\002\156\003\000\002" +
    "\156\003\000\002\156\003\000\002\156\003\000\002\156" +
    "\003\000\002\157\003\000\002\157\003\000\002\157\003" +
    "\000\002\157\003\000\002\157\003\000\002\157\003\000" +
    "\002\157\003\000\002\157\003\000\002\157\003\000\002" +
    "\157\003\000\002\157\003\000\002\323\004\000\002\323" +
    "\003\000\002\323\003\000\002\324\003\000\002\325\003" +
    "\000\002\325\003\000\002\326\003\000\002\326\003\000" +
    "\002\326\003\000\002\326\003\000\002\326\003\000\002" +
    "\326\003\000\002\315\004\000\002\315\003\000\002\316" +
    "\003\000\002\317\003\000\002\317\003\000\002\317\003" +
    "\000\002\317\003\000\002\317\003\000\002\317\003\000" +
    "\002\317\003\000\002\320\004\000\002\320\003\000\002" +
    "\321\003\000\002\321\003\000\002\321\003\000\002\321" +
    "\003\000\002\321\003\000\002\322\003\000\002\322\003" +
    "\000\002\322\003\000\002\322\003\000\002\322\003\000" +
    "\002\322\003\000\002\322\003\000\002\322\003\000\002" +
    "\322\003\000\002\322\003\000\002\322\003\000\002\327" +
    "\003\000\002\327\003\000\002\327\003\000\002\327\003" +
    "\000\002\327\003\000\002\330\003\000\002\330\003\000" +
    "\002\330\003\000\002\173\003\000\002\176\003\000\002" +
    "\200\003\000\002\240\004\000\002\167\003\000\002\201" +
    "\003\000\002\244\003\000\002\170\003\000\002\243\005" +
    "\000\002\251\003\000\002\251\002\000\002\265\003\000" +
    "\002\265\003\000\002\202\003\000\002\206\003\000\002" +
    "\206\003\000\002\206\003\000\002\204\004\000\002\203" +
    "\003\000\002\205\003\000\002\153\003\000\002\153\003" +
    "\000\002\153\003\000\002\153\002\000\002\231\003\000" +
    "\002\271\003\000\002\245\003\000\002\272\005\000\002" +
    "\267\003\000\002\267\003\000\002\270\003\000\002\006" +
    "\005\000\002\006\002\000\002\274\010\000\002\007\003" +
    "\000\002\010\003\000\002\010\002\000\002\011\003\000" +
    "\002\011\004\000\002\012\003\000\002\012\003\000\002" +
    "\255\006\000\002\256\003\000\002\256\002\000\002\257" +
    "\004\000\002\262\003\000\002\262\004\000\002\263\003" +
    "\000\002\263\004\000\002\264\003\000\002\264\003\000" +
    "\002\260\003\000\002\260\002\000\002\261\004\000\002" +
    "\246\004\000\002\174\004\000\002\013\006\000\002\014" +
    "\003\000\002\014\004\000\002\015\003\000\002\016\003" +
    "\000\002\016\002\000\002\017\003\000\002\017\004\000" +
    "\002\020\003\000\002\177\004\000\002\021\007\000\002" +
    "\022\003\000\002\023\003\000\002\023\003\000\002\024" +
    "\003\000\002\024\002\000\002\025\003\000\002\025\004" +
    "\000\002\026\003\000\002\026\003\000\002\u0114\002\000" +
    "\002\207\005\000\002\210\003\000\002\u0115\002\000\002" +
    "\312\005\000\002\211\003\000\002\211\003\000\002\212" +
    "\004\000\002\213\003\000\002\313\004\000\002\313\002" +
    "\000\002\233\006\000\002\234\003\000\002\234\004\000" +
    "\002\235\003\000\002\235\002\000\002\236\004\000\002" +
    "\305\004\000\002\027\003\000\002\166\004\000\002\030" +
    "\004\000\002\031\004\000\002\031\002\000\002\032\003" +
    "\000\002\032\004\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\252\005\000\002" +
    "\253\003\000\002\253\004\000\002\254\003\000\002\254" +
    "\003\000\002\254\003\000\002\254\003\000\002\254\003" +
    "\000\002\254\003\000\002\254\003\000\002\254\003\000" +
    "\002\254\003\000\002\254\003\000\002\254\003\000\002" +
    "\254\003\000\002\241\007\000\002\242\004\000\002\034" +
    "\005\000\002\035\005\000\002\250\004\000\002\332\003" +
    "\000\002\332\004\000\002\333\004\000\002\334\003\000" +
    "\002\334\003\000\002\334\003\000\002\334\003\000\002" +
    "\331\003\000\002\331\004\000\002\214\004\000\002\215" +
    "\003\000\002\216\004\000\002\216\003\000\002\216\002" +
    "\000\002\223\003\000\002\217\003\000\002\217\002\000" +
    "\002\220\003\000\002\220\004\000\002\221\003\000\002" +
    "\221\003\000\002\221\003\000\002\221\003\000\002\221" +
    "\003\000\002\221\003\000\002\221\003\000\002\222\003" +
    "\000\002\222\003\000\002\224\004\000\002\224\004\000" +
    "\002\226\004\000\002\225\004\000\002\227\010\000\002" +
    "\230\010\000\002\036\005\000\002\037\003\000\002\037" +
    "\002\000\002\040\003\000\002\040\004\000\002\041\003" +
    "\000\002\041\003\000\002\042\004\000\002\043\004\000" +
    "\002\044\005\000\002\045\004\000\002\046\003\000\002" +
    "\046\002\000\002\047\003\000\002\047\004\000\002\050" +
    "\003\000\002\051\004\000\002\052\004\000\002\053\004" +
    "\000\002\053\004\000\002\u0116\002\000\002\054\006\000" +
    "\002\055\003\000\002\055\004\000\002\056\003\000\002" +
    "\056\003\000\002\056\003\000\002\056\003\000\002\056" +
    "\003\000\002\057\005\000\002\060\003\000\002\061\004" +
    "\000\002\062\004\000\002\063\004\000\002\063\004\000" +
    "\002\064\005\000\002\065\005\000\002\065\002\000\002" +
    "\066\005\000\002\067\003\000\002\067\004\000\002\071" +
    "\004\000\002\072\003\000\002\072\004\000\002\073\005" +
    "\000\002\074\003\000\002\074\003\000\002\070\005\000" +
    "\002\075\003\000\002\075\002\000\002\076\004\000\002" +
    "\077\004\000\002\100\004\000\002\101\003\000\002\101" +
    "\004\000\002\102\004\000\002\102\003\000\002\102\003" +
    "\000\002\171\004\000\002\103\006\000\002\104\003\000" +
    "\002\104\002\000\002\110\006\000\002\111\003\000\002" +
    "\111\004\000\002\112\003\000\002\112\003\000\002\105" +
    "\004\000\002\106\003\000\002\106\004\000\002\107\004" +
    "\000\002\113\003\000\002\113\002\000\002\114\003\000" +
    "\002\114\004\000\002\115\005\000\002\115\005\000\002" +
    "\116\003\000\002\116\002\000\002\117\003\000\002\117" +
    "\004\000\002\120\004\000\002\120\005\000\002\120\003" +
    "\000\002\247\005\000\002\237\005\000\002\121\003\000" +
    "\002\121\002\000\002\122\003\000\002\122\004\000\002" +
    "\123\003\000\002\123\003\000\002\123\003\000\002\123" +
    "\003\000\002\124\004\000\002\125\004\000\002\126\003" +
    "\000\002\127\003\000\002\232\005\000\002\175\004\000" +
    "\002\273\004\000\002\275\004\000\002\172\004\000\002" +
    "\336\003\000\002\336\004\000\002\335\004\000\002\302" +
    "\003\000\002\303\004\000\002\304\003\000\002\u0108\003" +
    "\000\002\u0108\002\000\002\133\003\000\002\133\002\000" +
    "\002\u0109\004\000\002\u010a\003\000\002\276\003\000\002" +
    "\276\002\000\002\277\003\000\002\300\003\000\002\300" +
    "\002\000\002\301\003\000\002\131\003\000\002\131\003" +
    "\000\002\130\003\000\002\130\003\000\002\130\003\000" +
    "\002\132\003\000\002\132\003\000\002\266\003\000\002" +
    "\306\003\000\002\307\003\000\002\310\003\000\002\311" +
    "\003\000\002\314\003\000\002\134\003\000\002\134\002" +
    "\000\002\135\003\000\002\135\004\000\002\136\003\000" +
    "\002\136\003\000\002\136\003\000\002\137\003\000\002" +
    "\137\002\000\002\140\003\000\002\140\004\000\002\141" +
    "\003\000\002\141\003\000\002\141\003\000\002\141\003" +
    "\000\002\141\003\000\002\141\003\000\002\141\003\000" +
    "\002\337\003\000\002\340\003\000\002\340\005\000\002" +
    "\341\003\000\002\341\005\000\002\342\003\000\002\346" +
    "\003\000\002\346\005\000\002\347\003\000\002\347\005" +
    "\000\002\350\004\000\002\351\003\000\002\351\002\000" +
    "\002\352\003\000\002\352\003\000\002\352\005\000\002" +
    "\u010d\003\000\002\u010d\002\000\002\u010c\003\000\002\u010c" +
    "\004\000\002\u010b\003\000\002\u010b\003\000\002\u010b\003" +
    "\000\002\u010b\005\000\002\u010b\003\000\002\362\003\000" +
    "\002\362\003\000\002\362\003\000\002\362\003\000\002" +
    "\362\003\000\002\362\003\000\002\362\003\000\002\362" +
    "\003\000\002\362\003\000\002\354\005\000\002\354\004" +
    "\000\002\355\005\000\002\356\003\000\002\356\002\000" +
    "\002\357\003\000\002\357\005\000\002\360\003\000\002" +
    "\360\003\000\002\353\003\000\002\353\003\000\002\353" +
    "\003\000\002\353\003\000\002\353\003\000\002\353\003" +
    "\000\002\344\003\000\002\345\004\000\002\345\003\000" +
    "\002\343\003\000\002\343\003\000\002\343\003\000\002" +
    "\343\003\000\002\343\003\000\002\343\004\000\002\343" +
    "\003\000\002\343\003\000\002\366\003\000\002\367\003" +
    "\000\002\367\004\000\002\370\003\000\002\370\004\000" +
    "\002\361\003\000\002\361\003\000\002\361\003\000\002" +
    "\371\004\000\002\372\004\000\002\373\003\000\002\374" +
    "\003\000\002\377\003\000\002\377\002\000\002\u0100\003" +
    "\000\002\u0100\004\000\002\u0101\005\000\002\u0102\003\000" +
    "\002\u0102\005\000\002\u0103\003\000\002\u0104\003\000\002" +
    "\u0104\002\000\002\u0106\003\000\002\u0106\004\000\002\u0107" +
    "\004\000\002\u0105\003\000\002\u0105\003\000\002\363\003" +
    "\000\002\364\003\000\002\364\003\000\002\364\003\000" +
    "\002\364\003\000\002\364\003\000\002\364\003\000\002" +
    "\364\003\000\002\u010e\003\000\002\u010e\002\000\002\u010f" +
    "\003\000\002\u010f\002\000\002\u0110\003\000\002\u0110\002" +
    "\000\002\u0112\003\000\002\u0112\002\000\002\u0111\003\000" +
    "\002\u0111\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0289\000\004\004\004\001\002\000\006\207\u027e\220" +
    "\u0281\001\ufff7\000\004\011\u027b\001\ufffd\000\002\001\001" +
    "\000\004\002\u0279\001\002\000\164\044\156\045\117\046" +
    "\100\047\220\050\125\051\017\052\212\053\064\054\165" +
    "\055\113\056\054\057\110\060\200\061\103\062\215\063" +
    "\160\064\146\065\141\066\065\067\166\070\032\071\025" +
    "\072\173\073\043\074\076\075\033\076\214\077\130\100" +
    "\023\101\171\102\120\103\134\104\027\105\170\106\161" +
    "\107\213\110\162\111\153\112\206\113\172\114\052\115" +
    "\164\116\143\117\105\125\163\140\122\141\045\142\142" +
    "\143\102\144\203\145\112\150\202\162\013\223\073\234" +
    "\211\235\070\236\106\001\uffe6\000\004\132\u026e\001\ufe8f" +
    "\000\002\001\uffc6\000\004\165\u0106\001\ufdfd\000\002\001" +
    "\uffda\000\002\001\uffb2\000\002\001\uffa6\000\004\005\u0262" +
    "\001\002\000\002\001\uffd4\000\002\001\uffe2\000\002\001" +
    "\uffc8\000\004\005\u0260\001\002\000\002\001\uffd6\000\026" +
    "\005\236\006\246\010\235\026\252\027\247\030\232\031" +
    "\253\167\245\232\234\237\250\001\002\000\002\001\uffce" +
    "\000\002\001\uff83\000\002\001\uffcf\000\002\001\uffb0\000" +
    "\004\005\236\001\002\000\002\001\uff82\000\002\001\uffd3" +
    "\000\002\001\uffaa\000\002\001\uffa1\000\002\001\uffdc\000" +
    "\026\005\236\006\246\010\235\026\252\027\247\030\232" +
    "\031\253\167\245\232\234\237\250\001\002\000\002\001" +
    "\uffa7\000\002\001\uffdf\000\004\121\u0170\001\ufe05\000\002" +
    "\001\uffa2\000\002\001\ufe79\000\002\001\uffed\000\002\001" +
    "\ufffc\000\022\005\236\120\u021b\153\u0219\214\u0214\215\u0216" +
    "\216\u0210\217\u021c\222\u0220\001\uff12\000\002\001\uffac\000" +
    "\002\001\uff9c\000\002\001\uffd8\000\026\005\236\006\246" +
    "\010\235\026\252\027\247\030\232\031\253\167\245\232" +
    "\234\237\250\001\002\000\002\001\uffd5\000\002\001\uffbf" +
    "\000\034\005\u0163\006\u0166\010\u0161\032\u0127\033\u0131\034" +
    "\u0132\035\u0124\036\u0123\037\u012a\040\u0126\041\u012b\042\u012e" +
    "\224\u016a\001\ufe54\000\002\001\uffb8\000\002\001\uffc2\000" +
    "\002\001\uff9e\000\002\001\uff8d\000\004\005\236\001\002" +
    "\000\004\226\u0148\001\ufdff\000\002\001\uffd2\000\002\001" +
    "\uff8e\000\002\001\uff7f\000\002\001\uffc7\000\002\001\uffa9" +
    "\000\002\001\uff4d\000\002\001\uffb7\000\002\001\uffd0\000" +
    "\026\005\236\006\246\010\235\026\252\027\247\030\232" +
    "\031\253\167\245\232\234\237\250\001\002\000\002\001" +
    "\uffa4\000\002\001\uff9b\000\002\001\uff9f\000\002\001\ufe7a" +
    "\000\002\001\uff89\000\002\001\uffaf\000\004\005\u01e6\001" +
    "\002\000\002\001\uff7e\000\002\001\uff9d\000\002\001\uff59" +
    "\000\002\001\uffbb\000\002\001\ufe78\000\004\005\u01e5\001" +
    "\002\000\002\001\uff8f\000\002\001\uffde\000\002\001\uffcb" +
    "\000\002\001\uff7a\000\004\005\u01da\001\002\000\164\044" +
    "\156\045\117\046\100\047\220\050\125\051\017\052\212" +
    "\053\064\054\165\055\113\056\054\057\110\060\200\061" +
    "\103\062\215\063\160\064\146\065\141\066\065\067\166" +
    "\070\032\071\025\072\173\073\043\074\076\075\033\076" +
    "\214\077\130\100\023\101\171\102\120\103\134\104\027" +
    "\105\170\106\161\107\213\110\162\111\153\112\206\113" +
    "\172\114\052\115\164\116\143\117\105\125\163\140\122" +
    "\141\045\142\142\143\102\144\203\145\112\150\202\162" +
    "\013\223\073\234\211\235\070\236\106\001\uffe7\000\002" +
    "\001\ufe7c\000\002\001\uffbe\000\002\001\uffb3\000\026\005" +
    "\236\006\246\010\235\026\252\027\247\030\232\031\253" +
    "\167\245\232\234\237\250\001\002\000\002\001\uffdb\000" +
    "\002\001\uffba\000\002\001\uff15\000\002\001\uffb5\000\034" +
    "\005\u0163\006\u0166\010\u0161\032\u0127\033\u0131\034\u0132\035" +
    "\u0124\036\u0123\037\u012a\040\u0126\041\u012b\042\u012e\224\u016a" +
    "\001\ufe54\000\002\001\uffb4\000\004\005\u01c7\001\002\000" +
    "\004\007\u01c1\001\uffeb\000\002\001\uffae\000\002\001\uffa8" +
    "\000\002\001\uffe0\000\002\001\uff97\000\002\001\ufe7b\000" +
    "\026\005\236\006\246\010\235\026\252\027\247\030\232" +
    "\031\253\167\245\232\234\237\250\001\002\000\002\001" +
    "\uffd9\000\002\001\uffb9\000\002\001\uff84\000\002\001\uffa5" +
    "\000\002\001\uffca\000\002\001\uffa3\000\002\001\uffad\000" +
    "\034\005\u0163\006\u0166\010\u0161\032\u0127\033\u0131\034\u0132" +
    "\035\u0124\036\u0123\037\u012a\040\u0126\041\u012b\042\u012e\224" +
    "\u016a\001\ufe54\000\034\005\u0163\006\u0166\010\u0161\032\u0127" +
    "\033\u0131\034\u0132\035\u0124\036\u0123\037\u012a\040\u0126\041" +
    "\u012b\042\u012e\224\u016a\001\ufe54\000\002\001\uffbc\000\004" +
    "\005\236\001\002\000\002\001\uffc5\000\010\202\u018b\204" +
    "\u018c\211\u0189\001\uff85\000\004\005\236\001\002\000\004" +
    "\005\u017d\001\002\000\002\001\ufe93\000\002\001\uff96\000" +
    "\002\001\uff9a\000\052\005\236\006\246\010\235\026\252" +
    "\027\247\030\232\031\253\032\u0127\033\u0131\034\u0132\035" +
    "\u0124\036\u0123\037\u012a\040\u0126\041\u012b\042\u012e\167\245" +
    "\224\u0130\232\234\237\250\001\002\000\002\001\uffc1\000" +
    "\004\121\u0170\001\ufe05\000\004\005\u015b\001\002\000\026" +
    "\005\236\006\246\010\235\026\252\027\247\030\232\031" +
    "\253\167\245\232\234\237\250\001\002\000\002\001\uff95" +
    "\000\002\001\uffa0\000\002\001\uffd7\000\002\001\uffab\000" +
    "\002\001\uff8c\000\002\001\uff50\000\002\001\uffc3\000\002" +
    "\001\ufe91\000\002\001\ufe7d\000\002\001\uffdd\000\002\001" +
    "\uffcd\000\026\005\236\006\246\010\235\026\252\027\247" +
    "\030\232\031\253\167\245\232\234\237\250\001\002\000" +
    "\002\001\uffc4\000\002\001\uffc9\000\002\001\uff80\000\002" +
    "\001\uff98\000\002\001\ufee9\000\012\151\350\160\345\164" +
    "\343\177\344\001\002\000\002\001\uff8a\000\002\001\uffb1" +
    "\000\002\001\uffd1\000\004\010\222\001\002\000\002\001" +
    "\uffbd\000\002\001\uff90\000\002\001\uff91\000\004\220\227" +
    "\001\uff71\000\002\001\uff72\000\004\207\336\001\uff68\000" +
    "\030\005\236\006\246\010\235\026\252\027\247\030\232" +
    "\031\253\127\242\167\245\232\234\237\250\001\002\000" +
    "\002\001\uff6f\000\002\001\ufe22\000\002\001\ufe08\000\002" +
    "\001\ufe0e\000\004\233\323\001\002\000\002\001\ufe0d\000" +
    "\002\001\ufe1e\000\030\005\236\006\246\010\235\026\252" +
    "\027\247\030\232\031\253\127\242\167\245\232\234\237" +
    "\250\001\uff70\000\002\001\ufe23\000\006\163\313\174\317" +
    "\001\ufe14\000\006\205\311\221\310\001\002\000\004\224" +
    "\255\001\ufe1c\000\002\001\uff6d\000\026\005\236\006\246" +
    "\010\235\026\252\027\247\030\232\031\253\167\245\232" +
    "\234\237\250\001\002\000\002\001\ufe0c\000\002\001\ufe09" +
    "\000\002\001\ufe0b\000\002\001\ufe24\000\002\001\ufe0a\000" +
    "\002\001\ufe07\000\002\001\ufe42\000\030\005\236\006\246" +
    "\010\235\026\252\027\247\030\232\031\253\167\245\224" +
    "\271\232\234\237\250\001\002\000\002\001\ufe20\000\004" +
    "\224\255\001\ufe1d\000\002\001\ufe1b\000\002\001\ufe1a\000" +
    "\006\012\304\225\305\001\002\000\002\001\ufe18\000\002" +
    "\001\ufe64\000\002\001\ufe16\000\016\013\273\014\274\015" +
    "\276\016\302\017\275\020\300\001\ufe65\000\002\001\ufe62" +
    "\000\002\001\ufe60\000\030\005\236\006\246\010\235\026" +
    "\252\027\247\030\232\031\253\167\245\224\271\232\234" +
    "\237\250\001\002\000\020\013\273\014\274\015\276\016" +
    "\302\017\275\020\300\225\301\001\002\000\002\001\ufe36" +
    "\000\002\001\ufe38\000\002\001\ufe3a\000\002\001\ufe37\000" +
    "\030\005\236\006\246\010\235\026\252\027\247\030\232" +
    "\031\253\167\245\224\271\232\234\237\250\001\002\000" +
    "\002\001\ufe35\000\002\001\ufe61\000\002\001\ufe39\000\002" +
    "\001\ufe63\000\030\005\236\006\246\010\235\026\252\027" +
    "\247\030\232\031\253\167\245\224\271\232\234\237\250" +
    "\001\002\000\002\001\ufe19\000\002\001\ufe17\000\002\001" +
    "\uff6c\000\002\001\uff6b\000\002\001\uff6a\000\006\163\313" +
    "\174\317\001\ufe15\000\002\001\002\000\002\001\ufe21\000" +
    "\002\001\ufe13\000\002\001\002\000\002\001\002\000\002" +
    "\001\ufe11\000\002\001\ufe12\000\002\001\uff6e\000\004\224" +
    "\324\001\002\000\030\005\236\006\246\010\235\026\252" +
    "\027\247\030\232\031\253\167\245\224\271\232\234\237" +
    "\250\001\ufe3f\000\002\001\ufe43\000\002\001\ufe3e\000\004" +
    "\225\335\001\002\000\002\001\ufe3c\000\002\001\ufe3b\000" +
    "\004\012\333\001\ufe40\000\030\005\236\006\246\010\235" +
    "\026\252\027\247\030\232\031\253\167\245\224\271\232" +
    "\234\237\250\001\002\000\002\001\ufe3d\000\002\001\ufe41" +
    "\000\004\005\236\001\002\000\002\001\uff69\000\002\001" +
    "\uff73\000\002\001\uff67\000\002\001\ufe29\000\002\001\uff1a" +
    "\000\002\001\uff1b\000\002\001\uff1c\000\012\151\350\160" +
    "\345\164\343\177\344\001\uff20\000\004\005\352\001\002" +
    "\000\002\001\uff19\000\002\001\uff1f\000\002\001\uff18\000" +
    "\004\005\354\001\uff1d\000\002\001\uff17\000\002\001\uff1e" +
    "\000\004\005\357\001\002\000\020\043\373\124\374\137" +
    "\365\156\367\160\366\177\362\220\370\001\002\000\002" +
    "\001\ufee3\000\004\165\u0106\001\ufdfd\000\004\005\u0105\001" +
    "\002\000\002\001\ufee2\000\002\001\ufee5\000\002\001\ufe7e" +
    "\000\004\005\u0104\001\002\000\026\005\236\006\246\010" +
    "\235\026\252\027\247\030\232\031\253\167\245\232\234" +
    "\237\250\001\002\000\026\005\236\006\246\010\235\026" +
    "\252\027\247\030\232\031\253\167\245\232\234\237\250" +
    "\001\002\000\002\001\ufee4\000\002\001\ufee1\000\002\001" +
    "\ufedf\000\002\001\ufe7f\000\002\001\ufee7\000\020\043\373" +
    "\124\374\137\365\156\367\160\366\177\362\220\370\001" +
    "\ufee8\000\002\001\ufee6\000\026\005\236\006\246\010\235" +
    "\026\252\027\247\030\232\031\253\167\245\232\234\237" +
    "\250\001\ufede\000\002\001\ufe26\000\002\001\ufe25\000\026" +
    "\005\236\006\246\010\235\026\252\027\247\030\232\031" +
    "\253\167\245\232\234\237\250\001\ufedd\000\002\001\ufedc" +
    "\000\002\001\ufedb\000\002\001\ufdfe\000\026\005\236\006" +
    "\246\010\235\026\252\027\247\030\232\031\253\167\245" +
    "\232\234\237\250\001\002\000\026\005\236\006\246\010" +
    "\235\026\252\027\247\030\232\031\253\167\245\232\234" +
    "\237\250\001\ufee0\000\002\001\uff99\000\030\005\236\006" +
    "\246\010\235\026\252\027\247\030\232\031\253\135\u0119" +
    "\167\245\232\234\237\250\001\002\000\002\001\ufed6\000" +
    "\002\001\ufed3\000\030\005\236\006\246\010\235\026\252" +
    "\027\247\030\232\031\253\161\u0110\167\245\232\234\237" +
    "\250\001\002\000\002\001\ufed5\000\004\200\u0118\001\ufe89" +
    "\000\004\005\236\001\002\000\004\203\u0114\001\ufecc\000" +
    "\002\001\ufecd\000\002\001\ufece\000\004\005\236\001\002" +
    "\000\002\001\ufecb\000\002\001\ufed7\000\002\001\ufe8a\000" +
    "\002\001\ufe88\000\004\127\u011d\001\ufe03\000\002\001\ufed2" +
    "\000\002\001\ufed4\000\030\005\236\006\246\010\235\026" +
    "\252\027\247\030\232\031\253\167\245\212\u0120\232\234" +
    "\237\250\001\002\000\002\001\ufe04\000\002\001\ufed1\000" +
    "\002\001\ufed0\000\002\001\ufecf\000\052\005\236\006\246" +
    "\010\235\026\252\027\247\030\232\031\253\032\u0127\033" +
    "\u0131\034\u0132\035\u0124\036\u0123\037\u012a\040\u0126\041\u012b" +
    "\042\u012e\167\245\224\u0130\232\234\237\250\001\002\000" +
    "\010\122\u0136\123\u0135\175\u0139\001\uff4e\000\002\001\ufe46" +
    "\000\002\001\ufe47\000\024\021\u013c\022\u0140\023\u0143\024" +
    "\u0146\025\u013f\147\u013e\157\u013d\172\u0144\230\u0142\001\ufe5f" +
    "\000\002\001\ufe4a\000\002\001\ufe4c\000\002\001\ufe57\000" +
    "\002\001\ufe58\000\002\001\ufe4b\000\002\001\ufe44\000\002" +
    "\001\uff4f\000\002\001\ufe5d\000\002\001\ufe45\000\024\032" +
    "\u0127\033\u0131\034\u0132\035\u0124\036\u0123\037\u012a\040\u0126" +
    "\041\u012b\042\u012e\001\ufe59\000\052\005\236\006\246\010" +
    "\235\026\252\027\247\030\232\031\253\032\u0127\033\u0131" +
    "\034\u0132\035\u0124\036\u0123\037\u012a\040\u0126\041\u012b\042" +
    "\u012e\167\245\224\u0130\232\234\237\250\001\002\000\002" +
    "\001\ufe49\000\002\001\ufe48\000\012\122\u0136\123\u0135\175" +
    "\u0139\225\u0138\001\002\000\020\013\273\014\274\015\276" +
    "\016\302\017\275\020\300\225\301\001\ufe65\000\002\001" +
    "\ufe82\000\002\001\ufe80\000\052\005\236\006\246\010\235" +
    "\026\252\027\247\030\232\031\253\032\u0127\033\u0131\034" +
    "\u0132\035\u0124\036\u0123\037\u012a\040\u0126\041\u012b\042\u012e" +
    "\167\245\224\u0130\232\234\237\250\001\002\000\002\001" +
    "\ufe56\000\002\001\ufe81\000\024\021\u013c\022\u0140\023\u0143" +
    "\024\u0146\025\u013f\147\u013e\157\u013d\172\u0144\230\u0142\001" +
    "\ufe5e\000\052\005\236\006\246\010\235\026\252\027\247" +
    "\030\232\031\253\032\u0127\033\u0131\034\u0132\035\u0124\036" +
    "\u0123\037\u012a\040\u0126\041\u012b\042\u012e\167\245\224\u0130" +
    "\232\234\237\250\001\002\000\002\001\ufe2f\000\002\001" +
    "\ufe2b\000\004\226\u0148\001\ufdff\000\002\001\ufe31\000\002" +
    "\001\ufe2d\000\002\001\ufe34\000\002\001\ufe2a\000\002\001" +
    "\ufe30\000\022\021\u013c\022\u0140\023\u0143\024\u0146\025\u013f" +
    "\147\u013e\157\u013d\230\u0142\001\002\000\002\001\ufe32\000" +
    "\002\001\ufe2e\000\002\001\ufe33\000\002\001\ufe00\000\002" +
    "\001\ufe2c\000\002\001\ufe5c\000\002\001\ufe5b\000\002\001" +
    "\ufe5a\000\002\001\ufeca\000\034\005\236\006\246\010\235" +
    "\026\252\027\247\030\232\031\253\155\u014f\156\u0150\167" +
    "\245\231\u0155\232\234\237\250\001\002\000\026\005\236" +
    "\006\246\010\235\026\252\027\247\030\232\031\253\167" +
    "\245\232\234\237\250\001\002\000\004\005\236\001\002" +
    "\000\002\001\ufec4\000\002\001\ufec5\000\002\001\ufec8\000" +
    "\010\155\u014f\156\u0150\231\u0155\001\ufec9\000\002\001\ufe85" +
    "\000\002\001\ufec7\000\002\001\ufe28\000\004\005\236\001" +
    "\ufe8c\000\002\001\ufe27\000\026\005\236\006\246\010\235" +
    "\026\252\027\247\030\232\031\253\167\245\232\234\237" +
    "\250\001\ufec6\000\050\005\u0163\006\u0166\010\u0161\032\u0127" +
    "\033\u0131\034\u0132\035\u0124\036\u0123\037\u012a\040\u0126\041" +
    "\u012b\042\u012e\120\u0167\170\u0168\171\u015e\173\u0169\201\u0164" +
    "\224\u016a\227\u0162\001\ufe6f\000\002\001\ufe9b\000\002\001" +
    "\ufe6e\000\002\001\ufe6a\000\002\001\ufe6c\000\002\001\ufe4d" +
    "\000\002\001\ufe50\000\002\001\ufe6b\000\002\001\ufe51\000" +
    "\002\001\ufe67\000\050\005\u0163\006\u0166\010\u0161\032\u0127" +
    "\033\u0131\034\u0132\035\u0124\036\u0123\037\u012a\040\u0126\041" +
    "\u012b\042\u012e\120\u0167\170\u0168\171\u015e\173\u0169\201\u0164" +
    "\224\u016a\227\u0162\001\ufe70\000\002\001\ufe4f\000\002\001" +
    "\ufe66\000\002\001\ufe68\000\002\001\ufe69\000\034\005\u0163" +
    "\006\u0166\010\u0161\032\u0127\033\u0131\034\u0132\035\u0124\036" +
    "\u0123\037\u012a\040\u0126\041\u012b\042\u012e\224\u016a\001\002" +
    "\000\002\001\ufe53\000\036\005\u0163\006\u0166\010\u0161\032" +
    "\u0127\033\u0131\034\u0132\035\u0124\036\u0123\037\u012a\040\u0126" +
    "\041\u012b\042\u012e\224\u016a\225\u016e\001\002\000\002\001" +
    "\ufe52\000\002\001\ufe4e\000\002\001\ufe6d\000\002\001\ufe06" +
    "\000\026\005\236\006\246\010\235\026\252\027\247\030" +
    "\232\031\253\167\245\232\234\237\250\001\002\000\004" +
    "\222\u0178\001\ufef1\000\002\001\ufef4\000\002\001\ufeee\000" +
    "\002\001\ufef0\000\002\001\ufef3\000\004\222\u0178\001\ufef2" +
    "\000\026\005\236\006\246\010\235\026\252\027\247\030" +
    "\232\031\253\167\245\232\234\237\250\001\002\000\002" +
    "\001\ufeed\000\002\001\ufeef\000\010\122\u0136\123\u0135\175" +
    "\u0139\001\uff3e\000\002\001\uff3f\000\004\165\u017e\001\ufed8" +
    "\000\024\021\u013c\022\u0140\023\u0143\024\u0146\025\u013f\147" +
    "\u013e\157\u013d\172\u0144\230\u0142\001\002\000\002\001\ufeda" +
    "\000\026\005\236\006\246\010\235\026\252\027\247\030" +
    "\232\031\253\167\245\232\234\237\250\001\002\000\002" +
    "\001\ufed9\000\010\005\236\127\u0186\226\u0184\001\002\000" +
    "\002\001\ufe98\000\026\005\236\006\246\010\235\026\252" +
    "\027\247\030\232\031\253\167\245\232\234\237\250\001" +
    "\002\000\002\001\ufeec\000\026\005\236\006\246\010\235" +
    "\026\252\027\247\030\232\031\253\167\245\232\234\237" +
    "\250\001\002\000\002\001\ufeea\000\002\001\ufeeb\000\002" +
    "\001\uff86\000\002\001\uff8b\000\002\001\uff87\000\002\001" +
    "\uff88\000\004\155\u018e\001\uff7c\000\026\005\236\006\246" +
    "\010\235\026\252\027\247\030\232\031\253\167\245\232" +
    "\234\237\250\001\002\000\002\001\uff94\000\004\005\u0191" +
    "\001\uff92\000\002\001\uff93\000\002\001\uff7d\000\034\005" +
    "\u0163\006\u0166\010\u0161\032\u0127\033\u0131\034\u0132\035\u0124" +
    "\036\u0123\037\u012a\040\u0126\041\u012b\042\u012e\224\u016a\001" +
    "\ufe55\000\002\001\uffcc\000\002\001\ufe99\000\004\135\u0199" +
    "\001\ufec0\000\002\001\ufec3\000\002\001\ufec1\000\004\127" +
    "\u011d\001\ufe03\000\004\161\u019c\001\002\000\010\200\u0118" +
    "\203\u01b0\213\u01ad\001\ufeaf\000\004\005\236\001\002\000" +
    "\006\133\u01a4\136\u01a1\001\ufeb5\000\002\001\ufeb9\000\004" +
    "\005\236\001\ufeba\000\002\001\ufeb8\000\004\163\u01a7\001" +
    "\ufe01\000\002\001\ufeb7\000\006\133\u01a4\136\u01a1\001\ufeb6" +
    "\000\004\163\u01a7\001\ufe01\000\002\001\ufeb4\000\004\005" +
    "\236\001\002\000\002\001\ufe02\000\002\001\ufeb1\000\002" +
    "\001\ufeb3\000\004\005\236\001\002\000\002\001\ufeb2\000" +
    "\002\001\ufeaa\000\004\163\u01a7\001\ufe01\000\002\001\ufec2" +
    "\000\010\200\u0118\203\u01b0\213\u01ad\001\ufeb0\000\004\005" +
    "\236\001\002\000\002\001\ufeae\000\002\001\ufeac\000\002" +
    "\001\ufead\000\004\005\236\001\002\000\002\001\ufeab\000" +
    "\004\121\u0170\001\ufe05\000\030\005\236\006\246\010\235" +
    "\026\252\027\247\030\232\031\253\167\245\175\u01b8\232" +
    "\234\237\250\001\002\000\002\001\ufebb\000\002\001\ufebe" +
    "\000\030\005\236\006\246\010\235\026\252\027\247\030" +
    "\232\031\253\167\245\175\u01b8\232\234\237\250\001\ufebf" +
    "\000\002\001\ufebc\000\002\001\ufebd\000\002\001\uffea\000" +
    "\002\001\uffee\000\164\044\156\045\117\046\100\047\220" +
    "\050\125\051\017\052\212\053\064\054\165\055\113\056" +
    "\054\057\110\060\200\061\103\062\215\063\160\064\146" +
    "\065\141\066\065\067\166\070\032\071\025\072\173\073" +
    "\043\074\076\075\033\076\214\077\130\100\023\101\171" +
    "\102\120\103\134\104\027\105\170\106\161\107\213\110" +
    "\162\111\153\112\206\113\172\114\052\115\164\116\143" +
    "\117\105\125\163\140\122\141\045\142\142\143\102\144" +
    "\203\145\112\150\202\162\013\223\073\234\211\235\070" +
    "\236\106\001\uffe6\000\004\007\u01c1\001\uffec\000\004\211" +
    "\u01c3\001\uffe3\000\004\144\u01c4\001\002\000\002\001\uffe4" +
    "\000\002\001\uffe5\000\002\001\uffe9\000\002\001\uffe8\000" +
    "\012\120\u01d3\126\u01cd\146\u01c8\155\u01d0\001\ufea6\000\002" +
    "\001\ufe9c\000\002\001\ufea3\000\002\001\ufea0\000\026\005" +
    "\236\006\246\010\235\026\252\027\247\030\232\031\253" +
    "\167\245\232\234\237\250\001\002\000\002\001\ufea1\000" +
    "\002\001\ufe84\000\002\001\ufea5\000\002\001\ufea8\000\026" +
    "\005\236\006\246\010\235\026\252\027\247\030\232\031" +
    "\253\167\245\232\234\237\250\001\002\000\012\120\u01d3" +
    "\126\u01cd\146\u01c8\155\u01d0\001\ufea7\000\002\001\ufea2\000" +
    "\026\005\ufe83\006\ufe83\010\ufe83\026\ufe83\027\ufe83\030\ufe83" +
    "\031\ufe83\167\ufe83\232\ufe83\237\ufe83\001\ufe9d\000\002\001" +
    "\ufea4\000\002\001\ufe9f\000\002\001\ufe9e\000\002\001\uffb6" +
    "\000\002\001\uff66\000\002\001\uffe1\000\006\161\u01e0\165" +
    "\u01db\001\ufefb\000\026\005\236\006\246\010\235\026\252" +
    "\027\247\030\232\031\253\167\245\232\234\237\250\001" +
    "\002\000\002\001\ufefa\000\002\001\uff81\000\006\161\u01e0" +
    "\165\u01db\001\ufefc\000\002\001\ufef7\000\004\005\236\001" +
    "\002\000\002\001\ufef8\000\002\001\ufef6\000\002\001\ufef9" +
    "\000\002\001\ufef5\000\002\001\ufe9a\000\012\120\u01d3\126" +
    "\u01cd\146\u01c8\155\u01d0\001\ufea6\000\002\001\ufea9\000\004" +
    "\127\u01ef\001\002\000\002\001\uff23\000\004\156\u0150\001" +
    "\ufe8d\000\004\231\u0155\001\ufe86\000\002\001\ufe8e\000\002" +
    "\001\ufe87\000\002\001\uff22\000\026\005\236\006\246\010" +
    "\235\026\252\027\247\030\232\031\253\167\245\232\234" +
    "\237\250\001\002\000\002\001\uff21\000\054\005\236\006" +
    "\246\010\235\026\252\027\247\030\232\031\253\032\u0127" +
    "\033\u0131\034\u0132\035\u0124\036\u0123\037\u012a\040\u0126\041" +
    "\u012b\042\u012e\167\245\176\u01f3\224\u0130\232\234\237\250" +
    "\001\002\000\012\122\u0136\123\u0135\175\u0139\215\u01f7\001" +
    "\uff46\000\002\001\uff48\000\002\001\uff4c\000\002\001\uff4b" +
    "\000\002\001\uff4a\000\052\005\236\006\246\010\235\026" +
    "\252\027\247\030\232\031\253\032\u0127\033\u0131\034\u0132" +
    "\035\u0124\036\u0123\037\u012a\040\u0126\041\u012b\042\u012e\167" +
    "\245\224\u0130\232\234\237\250\001\002\000\002\001\uff49" +
    "\000\010\122\u0136\123\u0135\175\u0139\001\uff47\000\004\005" +
    "\u01fb\001\002\000\002\001\uff44\000\006\005\u01fd\134\u0200" +
    "\001\uff41\000\002\001\uff43\000\002\001\uff42\000\002\001" +
    "\uff45\000\026\005\236\006\246\010\235\026\252\027\247" +
    "\030\232\031\253\167\245\232\234\237\250\001\002\000" +
    "\002\001\uff40\000\004\025\u0204\001\002\000\002\001\uff65" +
    "\000\030\005\236\006\246\010\235\026\252\027\247\030" +
    "\232\031\253\167\245\224\271\232\234\237\250\001\002" +
    "\000\032\005\236\006\246\010\235\026\252\027\247\030" +
    "\232\031\253\167\245\224\271\231\u0155\232\234\237\250" +
    "\001\uff5f\000\002\001\uff63\000\002\001\uff61\000\002\001" +
    "\uff5e\000\002\001\uff62\000\002\001\uff5c\000\004\231\u0155" +
    "\001\uff60\000\002\001\uff64\000\002\001\uff5d\000\002\001" +
    "\uffc0\000\026\005\236\006\246\010\235\026\252\027\247" +
    "\030\232\031\253\167\245\232\234\237\250\001\uff5b\000" +
    "\002\001\uff0b\000\002\001\uff16\000\002\001\uff0e\000\020" +
    "\120\u021b\153\u0219\214\u0214\215\u0216\216\u0210\217\u021c\222" +
    "\u0220\001\uff0f\000\006\120\u0232\126\u0231\001\002\000\002" +
    "\001\uff06\000\004\005\236\001\002\000\044\005\236\006" +
    "\246\010\235\026\252\027\247\030\232\031\253\120\u021b" +
    "\153\u0219\167\245\214\u0214\215\u0216\216\u0210\217\u021c\222" +
    "\u0220\232\234\237\250\001\uff13\000\002\001\uff09\000\002" +
    "\001\uff0c\000\002\001\uff08\000\026\005\236\006\246\010" +
    "\235\026\252\027\247\030\232\031\253\167\245\232\234" +
    "\237\250\001\002\000\052\005\236\006\246\010\235\026" +
    "\252\027\247\030\232\031\253\032\u0127\033\u0131\034\u0132" +
    "\035\u0124\036\u0123\037\u012a\040\u0126\041\u012b\042\u012e\167" +
    "\245\224\u0130\232\234\237\250\001\002\000\002\001\uff07" +
    "\000\002\001\uff0a\000\002\001\uff11\000\026\005\236\006" +
    "\246\010\235\026\252\027\247\030\232\031\253\167\245" +
    "\232\234\237\250\001\002\000\004\155\u0223\001\002\000" +
    "\002\001\ufe1f\000\026\005\236\006\246\010\235\026\252" +
    "\027\247\030\232\031\253\167\245\232\234\237\250\001" +
    "\002\000\004\127\u0225\001\002\000\026\005\236\006\246" +
    "\010\235\026\252\027\247\030\232\031\253\167\245\232" +
    "\234\237\250\001\002\000\002\001\ufeff\000\010\122\u0136" +
    "\123\u0135\175\u0139\001\uff00\000\004\155\u0229\001\002\000" +
    "\026\005\236\006\246\010\235\026\252\027\247\030\232" +
    "\031\253\167\245\232\234\237\250\001\002\000\004\127" +
    "\u022b\001\002\000\026\005\236\006\246\010\235\026\252" +
    "\027\247\030\232\031\253\167\245\232\234\237\250\001" +
    "\002\000\002\001\ufefe\000\002\001\uff05\000\002\001\uff04" +
    "\000\002\001\uff0d\000\002\001\uff01\000\002\001\uff03\000" +
    "\002\001\uff02\000\044\005\236\006\246\010\235\026\252" +
    "\027\247\030\232\031\253\120\u021b\153\u0219\167\245\214" +
    "\u0214\215\u0216\216\u0210\217\u021c\222\u0220\232\234\237\250" +
    "\001\uff10\000\002\001\uff14\000\026\005\236\006\246\010" +
    "\235\026\252\027\247\030\232\031\253\167\245\232\234" +
    "\237\250\001\002\000\004\226\u0237\001\002\000\004\005" +
    "\236\001\002\000\004\005\236\001\uff24\000\006\127\u023c" +
    "\161\u023b\001\002\000\004\005\236\001\002\000\002\001" +
    "\uff58\000\002\001\uff57\000\010\005\236\156\u0150\210\u0242" +
    "\001\uff55\000\002\001\uff51\000\006\156\u0150\210\u0242\001" +
    "\uff56\000\002\001\uff54\000\002\001\uff5a\000\002\001\ufe8b" +
    "\000\002\001\uff52\000\002\001\uff53\000\006\005\236\206" +
    "\u0248\001\uff3a\000\002\001\uff3d\000\002\001\uff3c\000\024" +
    "\006\246\010\235\026\252\027\247\030\232\031\253\121" +
    "\u024a\127\u0249\237\250\001\002\000\002\001\uff35\000\002" +
    "\001\uff34\000\002\001\uff37\000\024\006\246\010\235\026" +
    "\252\027\247\030\232\031\253\121\u024a\127\u0249\237\250" +
    "\001\uff3b\000\002\001\uff36\000\002\001\uff39\000\002\001" +
    "\uff38\000\054\005\236\006\246\010\235\026\252\027\247" +
    "\030\232\031\253\120\u0259\121\u0253\126\u0256\127\u0255\130" +
    "\u0252\131\u0251\152\u025c\166\u0254\167\245\206\u025b\213\u025e" +
    "\226\u025d\232\234\237\250\001\002\000\002\001\uff26\000" +
    "\002\001\uff2a\000\002\001\uff30\000\002\001\uff2c\000\002" +
    "\001\uff2f\000\002\001\uff2e\000\054\005\236\006\246\010" +
    "\235\026\252\027\247\030\232\031\253\120\u0259\121\u0253" +
    "\126\u0256\127\u0255\130\u0252\131\u0251\152\u025c\166\u0254\167" +
    "\245\206\u025b\213\u025e\226\u025d\232\234\237\250\001\uff33" +
    "\000\002\001\uff25\000\002\001\uff2d\000\002\001\uff32\000" +
    "\002\001\uff27\000\002\001\uff2b\000\002\001\uff29\000\002" +
    "\001\uff28\000\002\001\uff31\000\006\161\u01e0\165\u01db\001" +
    "\ufefb\000\002\001\ufefd\000\010\154\u0266\173\u026a\227\u0267" +
    "\001\ufe76\000\002\001\ufe96\000\004\005\u0262\001\ufe97\000" +
    "\002\001\ufe95\000\002\001\ufe71\000\002\001\ufe73\000\002" +
    "\001\ufe75\000\002\001\ufe94\000\002\001\ufe72\000\010\154" +
    "\u0266\173\u026a\227\u0267\001\ufe77\000\002\001\ufe74\000\002" +
    "\001\ufe92\000\002\001\ufe90\000\026\005\236\006\246\010" +
    "\235\026\252\027\247\030\232\031\253\167\245\232\234" +
    "\237\250\001\002\000\030\005\236\006\246\010\235\026" +
    "\252\027\247\030\232\031\253\167\245\226\u0271\232\234" +
    "\237\250\001\002\000\004\005\236\001\002\000\010\005" +
    "\236\156\u0150\210\u0242\001\uff78\000\002\001\uff77\000\002" +
    "\001\uff74\000\002\001\uff75\000\002\001\uff7b\000\006\156" +
    "\u0150\210\u0242\001\uff79\000\002\001\uff76\000\002\001\000" +
    "\000\002\001\uffff\000\004\005\u027c\001\002\000\004\144" +
    "\u027d\001\002\000\002\001\ufffe\000\026\005\236\006\246" +
    "\010\235\026\252\027\247\030\232\031\253\167\245\232" +
    "\234\237\250\001\002\000\002\001\ufffb\000\002\001\ufff6" +
    "\000\004\005\u0287\001\ufff1\000\002\001\ufffa\000\006\207" +
    "\u027e\220\u0281\001\ufff8\000\002\001\ufff5\000\004\144\u0286" +
    "\001\002\000\002\001\ufff9\000\002\001\ufff0\000\002\001" +
    "\ufff4\000\004\005\u028a\001\ufff2\000\002\001\uffef\000\002" +
    "\001\ufff3" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0289\000\012\002\004\004\007\142\006\143\005\001" +
    "\001\000\012\160\u027e\163\u0281\164\u0282\165\u027f\001\001" +
    "\000\004\003\u0279\001\001\000\002\001\001\000\002\001" +
    "\001\000\242\005\046\007\010\021\035\022\037\036\175" +
    "\044\126\054\146\064\215\077\173\147\134\150\045\154" +
    "\120\155\020\156\137\157\041\166\057\167\132\170\014" +
    "\171\144\172\050\173\122\174\150\175\040\176\100\177" +
    "\135\200\166\201\070\202\115\203\062\204\066\205\176" +
    "\206\113\207\200\214\011\215\047\231\106\232\034\233" +
    "\060\237\015\240\154\241\220\242\076\243\103\244\123" +
    "\245\207\246\061\247\136\250\151\252\110\255\156\266" +
    "\174\267\052\270\025\271\030\272\071\273\021\274\043" +
    "\275\073\302\216\303\074\304\027\305\206\306\065\307" +
    "\023\310\054\311\204\312\033\314\017\315\036\316\056" +
    "\317\055\320\013\321\131\322\130\323\114\324\153\325" +
    "\147\326\203\327\125\330\143\001\001\000\004\u0108\u026e" +
    "\001\001\000\002\001\001\000\004\u0111\u026c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\335\u0262\336\u0263\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\354\230\361\u024f\363\237\364\232\371\250\372" +
    "\240\374\242\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\030\u0245\366" +
    "\u0156\367\u0244\371\341\372\240\374\242\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\354\230\361\u0238\363\237" +
    "\364\232\371\250\372\240\374\242\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\u010e\u0234\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\216\u0210\220\u0216\221\u0211\223\u0212\224\u0214" +
    "\225\u021d\226\u0217\227\u0219\230\u021c\371\u021e\372\240\374" +
    "\242\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\354\230\361\u0100\363\237\364\232\370" +
    "\u020e\371\250\372\240\374\242\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\362\u015f\u010b\u016a\u010c\u0192\u010d" +
    "\u020d\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\013\u0202\366\u0201\371" +
    "\341\372\240\374\242\001\001\000\004\u0112\u01f9\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\u0115\u01f0\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\034\u01e8\035" +
    "\u01e9\354\230\361\u01e7\363\237\364\232\371\250\372\240" +
    "\374\242\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\232" +
    "\007\010\021\035\022\037\036\175\044\126\054\146\064" +
    "\215\077\173\155\u01d8\156\137\157\041\166\057\167\132" +
    "\170\014\171\144\172\050\173\122\174\150\175\040\176" +
    "\100\177\135\200\166\201\070\202\115\203\062\204\066" +
    "\205\176\206\113\207\200\214\011\215\047\231\106\232" +
    "\034\233\060\237\015\240\154\241\220\242\076\243\103" +
    "\244\123\245\207\246\061\247\136\250\151\252\110\255" +
    "\156\266\174\267\052\270\025\271\030\272\071\273\021" +
    "\274\043\275\073\302\216\303\074\304\027\305\206\306" +
    "\065\307\023\310\054\311\204\312\033\314\017\315\036" +
    "\316\056\317\055\320\013\321\131\322\130\323\114\324" +
    "\153\325\147\326\203\327\125\330\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\354" +
    "\230\361\u01d7\363\237\364\232\371\250\372\240\374\242" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\362\u015f\u010b\u016a\u010c\u0192" +
    "\u010d\u01d6\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\144\u01bd\145\u01bf\146\u01bc\151\u01be\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\103\u0196\354\230\361\u0195" +
    "\363\237\364\232\371\250\372\240\374\242\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\362\u015f\u010b\u016a\u010c\u0192\u010d\u0194\001\001" +
    "\000\012\362\u015f\u010b\u016a\u010c\u0192\u010d\u0193\001\001\000" +
    "\002\001\001\000\012\366\u018c\371\341\372\240\374\242" +
    "\001\001\000\002\001\001\000\004\153\u0189\001\001\000" +
    "\016\052\u0182\366\u0156\367\u0181\371\341\372\240\374\242" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\027\u017b\337\u0128\340\265" +
    "\341\263\342\266\346\u017a\347\u0124\350\u012c\352\u012e\354" +
    "\230\361\267\362\u0127\363\237\364\232\371\250\372\240" +
    "\374\242\001\001\000\002\001\001\000\004\u010e\u0170\001" +
    "\001\000\002\001\001\000\024\100\u014c\354\230\361\u0100" +
    "\363\237\364\232\370\u014d\371\250\372\240\374\242\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\u0114\u0120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\066\u0108\067" +
    "\u010c\071\u010a\072\u0109\354\230\361\u010b\363\237\364\232" +
    "\371\250\372\240\374\242\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\u0116\355\001\001\000\010\332\345\333\350\334\346\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\265\223\365\222\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\256\225\257\224" +
    "\001\001\000\002\001\001\000\006\260\337\261\336\001" +
    "\001\000\024\262\236\263\227\354\230\361\243\363\237" +
    "\364\232\371\250\372\240\374\242\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\263\321\354\230\361\243\363\237\364\232\371\250" +
    "\372\240\374\242\001\001\000\002\001\001\000\012\u0104" +
    "\313\u0105\315\u0106\311\u0107\314\001\001\000\004\264\306" +
    "\001\001\000\010\377\255\u0100\256\u0101\257\001\001\000" +
    "\002\001\001\000\020\354\230\361\253\363\237\364\232" +
    "\371\250\372\240\374\242\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\337" +
    "\264\340\265\341\263\342\266\354\230\361\267\363\237" +
    "\364\232\371\250\372\240\374\242\u0102\261\u0103\262\001" +
    "\001\000\002\001\001\000\004\u0101\260\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\353\276" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\340" +
    "\271\341\263\342\266\354\230\361\267\363\237\364\232" +
    "\371\250\372\240\374\242\001\001\000\004\353\276\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\341\302\342\266\354\230\361" +
    "\267\363\237\364\232\371\250\372\240\374\242\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\337\264\340\265\341\263\342\266" +
    "\354\230\361\267\363\237\364\232\371\250\372\240\374" +
    "\242\u0103\305\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\u0105\315\u0107\320\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\375\317\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\355\324\001\001\000\040\337\327\340" +
    "\265\341\263\342\266\354\230\356\326\357\331\360\325" +
    "\361\267\363\237\364\232\371\250\372\240\374\242\376" +
    "\330\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\337\327\340\265\341\263\342\266\354\230" +
    "\360\333\361\267\363\237\364\232\371\250\372\240\374" +
    "\242\376\330\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\366\340\371\341\372\240\374\242\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\333\354\334\346\001\001\000\004\331\352" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\055\375\056\374\057\363\060" +
    "\370\061\357\062\362\063\371\132\360\001\001\000\002" +
    "\001\001\000\004\u0111\u0106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\354\230\361\u0100\363\237\364\232\370" +
    "\u0102\371\250\372\240\374\242\001\001\000\022\354\230" +
    "\361\u0100\363\237\364\232\370\377\371\250\372\240\374" +
    "\242\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\056" +
    "\376\057\363\060\370\061\357\062\362\063\371\132\360" +
    "\001\001\000\002\001\001\000\020\354\230\361\u0101\363" +
    "\237\364\232\371\250\372\240\374\242\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\354\230\361\u0101\363" +
    "\237\364\232\371\250\372\240\374\242\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\354" +
    "\230\361\u0100\363\237\364\232\370\u0107\371\250\372\240" +
    "\374\242\001\001\000\020\354\230\361\u0101\363\237\364" +
    "\232\371\250\372\240\374\242\001\001\000\002\001\001" +
    "\000\022\073\u011a\354\230\361\u0119\363\237\364\232\371" +
    "\250\372\240\374\242\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\070\u010e\071\u010d\072\u0109\354\230\361" +
    "\u010b\363\237\364\232\371\250\372\240\374\242\001\001" +
    "\000\002\001\001\000\006\276\u0115\277\u0116\001\001\000" +
    "\012\366\u0110\371\341\372\240\374\242\001\001\000\006" +
    "\075\u0112\076\u0111\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\366\u0114\371\341\372\240\374\242\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\u010f\u011b\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\074\u011d\354\230\361\u011e\363" +
    "\237\364\232\371\250\372\240\374\242\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\210\u012b\337\u0128\340\265\341\263\342\266" +
    "\346\u0121\347\u0124\350\u012c\352\u012e\354\230\361\267\362" +
    "\u0127\363\237\364\232\371\250\372\240\374\242\001\001" +
    "\000\004\130\u0136\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\343\u0144\344\u013a\345\u0140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\351\u014a\362" +
    "\u014b\001\001\000\042\337\u0128\340\u0133\341\263\342\266" +
    "\346\u0132\347\u0124\350\u012c\352\u012e\354\230\361\267\362" +
    "\u0127\363\237\364\232\371\250\372\240\374\242\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\130\u0136\001" +
    "\001\000\004\353\276\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\337\u0128\340\265\341\263\342\266\347" +
    "\u0139\350\u012c\352\u012e\354\230\361\267\362\u0127\363\237" +
    "\364\232\371\250\372\240\374\242\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\343\u0144\344\u013a\345\u0140" +
    "\001\001\000\036\337\u0128\340\265\341\263\342\266\350" +
    "\u0149\352\u012e\354\230\361\267\362\u0127\363\237\364\232" +
    "\371\250\372\240\374\242\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\u0112\u0148\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\343\u0146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\101\u0153\102\u0152\301" +
    "\u0150\354\230\361\u0101\363\237\364\232\371\250\372\240" +
    "\374\242\u0109\u0151\001\001\000\022\354\230\361\u0100\363" +
    "\237\364\232\370\u0159\371\250\372\240\374\242\001\001" +
    "\000\014\366\u0156\367\u0157\371\341\372\240\374\242\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\102\u0155\301\u0150\u0109\u0151\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\366\u0158" +
    "\371\341\372\240\374\242\001\001\000\002\001\001\000" +
    "\020\354\230\361\u0101\363\237\364\232\371\250\372\240" +
    "\374\242\001\001\000\014\137\u015b\140\u0164\141\u015c\362" +
    "\u015f\u010b\u015e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\141\u016e\362\u015f\u010b\u015e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\362\u015f\u010b\u016a\u010c\u016b\001\001\000" +
    "\002\001\001\000\006\362\u015f\u010b\u016c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\045\u0172\354\230\361\u0171\363\237\364\232" +
    "\371\250\372\240\374\242\001\001\000\012\046\u0175\047" +
    "\u0176\050\u0174\051\u0173\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\050" +
    "\u0179\051\u0173\001\001\000\020\354\230\361\u0178\363\237" +
    "\364\232\371\250\372\240\374\242\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\130\u0136\001\001\000\002" +
    "\001\001\000\004\065\u017e\001\001\000\010\343\u0144\344" +
    "\u017f\345\u0140\001\001\000\002\001\001\000\020\354\230" +
    "\361\u0180\363\237\364\232\371\250\372\240\374\242\001" +
    "\001\000\002\001\001\000\014\053\u0184\366\u0158\371\341" +
    "\372\240\374\242\001\001\000\002\001\001\000\020\354" +
    "\230\361\u0187\363\237\364\232\371\250\372\240\374\242" +
    "\001\001\000\002\001\001\000\020\354\230\361\u0186\363" +
    "\237\364\232\371\250\372\240\374\242\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\u018e" +
    "\001\001\000\020\354\230\361\u018f\363\237\364\232\371" +
    "\250\372\240\374\242\001\001\000\002\001\001\000\004" +
    "\251\u0191\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\362\u015f\u010b\u016c\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\104\u0199\110\u0197\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\u010f\u01b5\001\001\000\004" +
    "\105\u019a\001\001\000\012\116\u01ad\117\u01ae\120\u01b0\277" +
    "\u01ab\001\001\000\016\106\u019e\107\u019d\366\u019c\371\341" +
    "\372\240\374\242\001\001\000\010\113\u01a1\114\u01a2\115" +
    "\u01a4\001\001\000\002\001\001\000\014\107\u019f\366\u019c" +
    "\371\341\372\240\374\242\001\001\000\002\001\001\000" +
    "\004\u0110\u01a9\001\001\000\002\001\001\000\004\115\u01a8" +
    "\001\001\000\004\u0110\u01a5\001\001\000\002\001\001\000" +
    "\012\366\u01a7\371\341\372\240\374\242\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\366" +
    "\u01aa\371\341\372\240\374\242\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\u0110\u01b3\001\001\000\002\001" +
    "\001\000\006\120\u01b2\277\u01ab\001\001\000\012\366\u01b1" +
    "\371\341\372\240\374\242\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\366\u01b4\371\341" +
    "\372\240\374\242\001\001\000\002\001\001\000\004\u010e" +
    "\u01b6\001\001\000\024\111\u01b9\112\u01b8\354\230\361\u01ba" +
    "\363\237\364\232\371\250\372\240\374\242\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\112\u01bb\354\230" +
    "\361\u01ba\363\237\364\232\371\250\372\240\374\242\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\236\007\010\021\035\022\037\036" +
    "\175\044\126\054\146\064\215\077\173\150\u01c5\154\120" +
    "\155\020\156\137\157\041\166\057\167\132\170\014\171" +
    "\144\172\050\173\122\174\150\175\040\176\100\177\135" +
    "\200\166\201\070\202\115\203\062\204\066\205\176\206" +
    "\113\207\200\214\011\215\047\231\106\232\034\233\060" +
    "\237\015\240\154\241\220\242\076\243\103\244\123\245" +
    "\207\246\061\247\136\250\151\252\110\255\156\266\174" +
    "\267\052\270\025\271\030\272\071\273\021\274\043\275" +
    "\073\302\216\303\074\304\027\305\206\306\065\307\023" +
    "\310\054\311\204\312\033\314\017\315\036\316\056\317" +
    "\055\320\013\321\131\322\130\323\114\324\153\325\147" +
    "\326\203\327\125\330\143\001\001\000\006\146\u01c4\151" +
    "\u01be\001\001\000\004\152\u01c1\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\121\u01ce\122\u01d0\123\u01cd\124\u01c8" +
    "\125\u01d1\126\u01cb\127\u01c9\131\u01ca\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\354\230" +
    "\361\u01d5\363\237\364\232\371\250\372\240\374\242\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\354\230\361\u01d4\363\237\364" +
    "\232\371\250\372\240\374\242\001\001\000\016\123\u01d3" +
    "\124\u01c8\125\u01d1\126\u01cb\127\u01c9\131\u01ca\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\037\u01dc\040\u01dd\041\u01db" +
    "\042\u01e0\043\u01de\001\001\000\020\354\230\361\u01e3\363" +
    "\237\364\232\371\250\372\240\374\242\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\041\u01e2\042\u01e0\043" +
    "\u01de\001\001\000\002\001\001\000\012\366\u01e1\371\341" +
    "\372\240\374\242\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\121\u01e6\122\u01d0\123\u01cd\124\u01c8\125\u01d1\126" +
    "\u01cb\127\u01c9\131\u01ca\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\133\u01ea\u0109\u01eb\001" +
    "\001\000\006\300\u01ed\301\u01ec\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\354\230\361" +
    "\u01ef\363\237\364\232\371\250\372\240\374\242\001\001" +
    "\000\002\001\001\000\050\211\u01f3\212\u01f4\213\u01f5\337" +
    "\u0128\340\265\341\263\342\266\346\u01f1\347\u0124\350\u012c" +
    "\352\u012e\354\230\361\267\362\u0127\363\237\364\232\371" +
    "\250\372\240\374\242\001\001\000\006\130\u0136\313\u01f7" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\337\u0128\340\265\341\263" +
    "\342\266\346\u01f8\347\u0124\350\u012c\352\u012e\354\230\361" +
    "\267\362\u0127\363\237\364\232\371\250\372\240\374\242" +
    "\001\001\000\002\001\001\000\004\130\u0136\001\001\000" +
    "\004\234\u01fb\001\001\000\002\001\001\000\006\235\u01fe" +
    "\236\u01fd\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\354\230\361\u0200\363\237\364\232" +
    "\371\250\372\240\374\242\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\014\u0204\015\u0205" +
    "\337\u0206\340\265\341\263\342\266\354\230\361\267\363" +
    "\237\364\232\371\250\372\240\374\242\001\001\000\042" +
    "\015\u0208\016\u020b\017\u020a\020\u0207\301\u0209\337\u0206\340" +
    "\265\341\263\342\266\354\230\361\267\363\237\364\232" +
    "\371\250\372\240\374\242\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\u020c\301\u0209\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\354\230" +
    "\361\u0101\363\237\364\232\371\250\372\240\374\242\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\217\u0233\220\u0232\221\u0211\224\u0214\225\u021d\226" +
    "\u0217\227\u0219\230\u021c\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\374\u022f\001\001\000\040\221\u022c\222" +
    "\u022e\224\u0214\225\u021d\226\u0217\227\u0219\230\u021c\354\230" +
    "\361\u0221\363\237\364\232\371\250\372\240\373\u022d\374" +
    "\242\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\354\230\361\u0221\363\237\364\232\371" +
    "\250\372\240\373\u0227\374\242\001\001\000\042\337\u0128" +
    "\340\265\341\263\342\266\346\u0226\347\u0124\350\u012c\352" +
    "\u012e\354\230\361\267\362\u0127\363\237\364\232\371\250" +
    "\372\240\374\242\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\354\230\361\u0221\363\237" +
    "\364\232\371\250\372\240\373\u0220\374\242\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\354\230\361\u0221" +
    "\363\237\364\232\371\250\372\240\373\u0223\374\242\001" +
    "\001\000\002\001\001\000\022\354\230\361\u0221\363\237" +
    "\364\232\371\250\372\240\373\u0225\374\242\001\001\000" +
    "\002\001\001\000\004\130\u0136\001\001\000\002\001\001" +
    "\000\022\354\230\361\u0221\363\237\364\232\371\250\372" +
    "\240\373\u0229\374\242\001\001\000\002\001\001\000\022" +
    "\354\230\361\u0221\363\237\364\232\371\250\372\240\373" +
    "\u022b\374\242\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\221\u022c\222\u022e" +
    "\224\u0214\225\u021d\226\u0217\227\u0219\230\u021c\354\230\361" +
    "\u0221\363\237\364\232\371\250\372\240\373\u022d\374\242" +
    "\001\001\000\002\001\001\000\020\354\230\361\u0235\363" +
    "\237\364\232\371\250\372\240\374\242\001\001\000\002" +
    "\001\001\000\014\366\u0156\367\u0237\371\341\372\240\374" +
    "\242\001\001\000\012\366\u0158\371\341\372\240\374\242" +
    "\001\001\000\004\023\u0239\001\001\000\014\366\u0156\367" +
    "\u023c\371\341\372\240\374\242\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\024\u0240\025\u023e\026\u023f\366" +
    "\u0158\371\341\372\240\374\242\u0109\u0242\u010a\u023d\001\001" +
    "\000\002\001\001\000\010\026\u0243\u0109\u0242\u010a\u023d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\031\u0246\366" +
    "\u0158\371\341\372\240\374\242\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\032\u024b\033\u024d\363\u024c\364" +
    "\232\365\u024a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\033\u024e\363\u024c\364\232\365" +
    "\u024a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\253\u0256\254\u0259\354\230\361\u0257\363" +
    "\237\364\232\371\250\372\240\374\242\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\254\u025e" +
    "\354\230\361\u0257\363\237\364\232\371\250\372\240\374" +
    "\242\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\037\u0260" +
    "\040\u01dd\041\u01db\042\u01e0\043\u01de\001\001\000\002\001" +
    "\001\000\010\134\u0268\135\u026a\136\u0267\001\001\000\002" +
    "\001\001\000\004\335\u0264\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\136\u026b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\354\230\361\u0100\363\237\364\232\370\u026f\371\250\372" +
    "\240\374\242\001\001\000\020\354\230\361\u0101\363\237" +
    "\364\232\371\250\372\240\374\242\001\001\000\014\366" +
    "\u0156\367\u0271\371\341\372\240\374\242\001\001\000\024" +
    "\010\u0275\011\u0276\012\u0272\366\u0158\371\341\372\240\374" +
    "\242\u0109\u0274\u010a\u0273\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\u0277\u0109\u0274\u010a\u0273\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\354\230\361\u028a\363\237" +
    "\364\232\371\250\372\240\374\242\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\161\u0287\162\u0288\001\001" +
    "\000\004\u0113\u0284\001\001\000\004\165\u0283\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ZCCode$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ZCCode$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ZCCode$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

  action_obj.initActionClass();

    }


   Module        module   = ModulesFactory.getDefaultModule();
   Summary       summary  = module.getSummary();
   Configuration cfg      = Configuration.getInstance();
   ParserInfo    info     = ParserInfo.getInstance();
             
   public void syntax_error(Symbol token) throws ParseException {
          info.syntax_error(token);
   }

   public void unrecovered_syntax_error(Symbol token) throws ParseException {
      info.unrecovered_syntax_error(token);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ZCCode$actions {


   Module          module   = null;
   Summary         summary  = null;
   Persistence     fichero  = null;
   ZCCCode         code     = null;
   Sections        sections = null;
   ParserInfo      info     = ParserInfo.getInstance();
      
   Variable  currVar  = null;
   StmtCobol lastStmt = null;  // Ultima instruccion
   StmtCobol currStmt = null;  // Instruccion en proceso
   
   boolean   hasEndProgram = false; // Hay STOPRUN o GOBACK?
    
   boolean master     = false;  // El fichero es el maestro?   
   int     numFillers = 0;
   
   // Pila para EVALUATE e IF
   Stack<StmtCobol> stack = new Stack<StmtCobol>();
          
   public void initActionClass() {
      module = ModulesFactory.getMainModule();
      summary = module.getSummary();
      sections = module.getSections();
      code = new ZCCCode(module);
   }

   public String getSymbolName(Symbol s)    { return (String) s.value; }
   public int    getSymbolLine(Symbol s)    { return (int)    s.left;  }
   
   public void debug(String txt) { 
      System.err.println(txt); 
   }
   public void print(String txt) { 
      System.out.println(txt); 
   }


  private final ZCCode parser;

  /** Constructor */
  CUP$ZCCode$actions(ZCCode parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ZCCode$do_action(
    int                        CUP$ZCCode$act_num,
    java_cup.runtime.lr_parser CUP$ZCCode$parser,
    java.util.Stack            CUP$ZCCode$stack,
    int                        CUP$ZCCode$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ZCCode$result;

      /* select the action based on the action number */
      switch (CUP$ZCCode$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 516: // opt_key ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("opt_key",271, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 515: // opt_key ::= KEY 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("opt_key",271, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 514: // opt_to ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("opt_to",272, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 513: // opt_to ::= TO 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("opt_to",272, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 512: // opt_in ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("opt_in",270, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 511: // opt_in ::= IN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("opt_in",270, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 510: // opt_by ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("opt_by",269, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 509: // opt_by ::= BY 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("opt_by",269, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 508: // opt_all ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("opt_all",268, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 507: // opt_all ::= ALL 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("opt_all",268, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 506: // constante ::= LOWVAL 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("constante",242, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 505: // constante ::= HIGHVAL 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("constante",242, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 504: // constante ::= ZERO 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("constante",242, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 503: // constante ::= SPACES 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("constante",242, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 502: // constante ::= DFHCICS 
            {
              SymbolExt RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(d); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("constante",242, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 501: // constante ::= NUMERO 
            {
              SymbolExt RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol n = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(n); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("constante",242, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 500: // constante ::= LITERAL 
            {
              SymbolExt RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol l = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(l); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("constante",242, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 499: // constantes ::= constante 
            {
              SymbolExt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt c = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("constantes",241, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 498: // padre_indicator ::= IN 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("padre_indicator",259, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 497: // padre_indicator ::= OF 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("padre_indicator",259, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 496: // padre ::= padre_indicator id_base 
            {
              SymbolExt RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("padre",261, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 495: // padres ::= padres padre 
            {
              SymbolExt RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("padres",260, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 494: // padres ::= padre 
            {
              SymbolExt RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("padres",260, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 493: // padres_opt ::= 
            {
              SymbolExt RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("padres_opt",258, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 492: // padres_opt ::= padres 
            {
              SymbolExt RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("padres_opt",258, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 491: // indice_item ::= expression 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("indice_item",257, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 490: // indice_lst ::= indice_lst COMMA indice_item 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("indice_lst",256, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // indice_lst ::= indice_item 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("indice_lst",256, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // indice ::= LPAR indice_lst RPAR 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("indice",255, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // indices ::= indices indice 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("indices",254, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // indices ::= indice 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("indices",254, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // indices_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("indices_opt",253, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // indices_opt ::= indices 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("indices_opt",253, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // id ::= ID 
            {
              SymbolExt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("id",250, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // var_int ::= rvalue 
            {
              SymbolExt RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("var_int",249, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // var_base ::= id indices_opt 
            {
              SymbolExt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = i; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("var_base",248, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // var ::= var_base padres_opt 
            {
              SymbolExt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = i;    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("var",247, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // rvalue ::= function 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f);    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("rvalue",239, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // rvalue ::= constantes 
            {
              SymbolExt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt c = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = c; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("rvalue",239, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // rvalue ::= var 
            {
              SymbolExt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = i;  code.setVarRead(i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("rvalue",239, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // rvalue_list ::= rvalue_list rvalue 
            {
              SymbolExtList RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("rvalue_list",246, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // rvalue_list ::= rvalue 
            {
              SymbolExtList RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("rvalue_list",246, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // lvalue_list ::= lvalue_list lvalue 
            {
              SymbolExtList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		SymbolExtList l = (SymbolExtList)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l.add(i);       
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("lvalue_list",245, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // lvalue_list ::= lvalue 
            {
              SymbolExtList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExtList(i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("lvalue_list",245, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // lvalue ::= var 
            {
              SymbolExt RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = i; code.setVarWrite(i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("lvalue",244, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // logical_op ::= LESS 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_op",225, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // logical_op ::= GREATER 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_op",225, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // logical_op ::= EQUAL opt_to 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_op",225, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // logical_op ::= REL_LE 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_op",225, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // logical_op ::= REL_LT 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_op",225, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // logical_op ::= REL_GE 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_op",225, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // logical_op ::= REL_GT 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_op",225, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // logical_op ::= REL_EQ 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_op",225, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // logical_not ::= logical_op 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_not",227, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // logical_not ::= NOT logical_op 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_not",227, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // logical_oper ::= logical_not 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_oper",226, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // operator_arit ::= OP_COL 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("operator_arit",233, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // operator_arit ::= OP_POW 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("operator_arit",233, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // operator_arit ::= OP_DIV 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("operator_arit",233, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // operator_arit ::= OP_MUL 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("operator_arit",233, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // operator_arit ::= OP_SUB 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("operator_arit",233, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // operator_arit ::= OP_ADD 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("operator_arit",233, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // function_parm ::= literal 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("function_parm",238, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // function_parm ::= expression 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("function_parm",238, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // function_parms_lst ::= function_parms_lst COMMA function_parm 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("function_parms_lst",237, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // function_parms_lst ::= function_parm 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("function_parms_lst",237, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // function_parms_lst_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("function_parms_lst_opt",236, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // function_parms_lst_opt ::= function_parms_lst 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("function_parms_lst_opt",236, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // function_parms ::= LPAR function_parms_lst_opt RPAR 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("function_parms",235, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // function ::= LENGTH rvalue 
            {
              Symbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol l = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = l; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("function",234, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // function ::= FUNCTION INTRINSIC function_parms 
            {
              Symbol RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = f; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("function",234, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // figurative ::= NULL 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",240, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // figurative ::= DCBS 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",240, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // figurative ::= KANJI 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",240, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // figurative ::= NUMERIC 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",240, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // figurative ::= ALPHANUMERIC 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",240, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // figurative ::= ALPHABETIC 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",240, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // figurative ::= NEGATIVE 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",240, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // figurative ::= POSITIVE 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",240, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // figurative ::= QUOTE 
            {
              SymbolExt RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol f = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new SymbolExt(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("figurative",240, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // token ::= figurative 
            {
              Tokens RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt f = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(f); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("token",265, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // token ::= LPAR tokens RPAR 
            {
              Tokens RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new Tokens(t); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("token",265, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // token ::= NUMERO 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("token",265, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // token ::= LITERAL 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("token",265, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // token ::= ID 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("token",265, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // tokens ::= tokens token 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l.add(t); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("tokens",266, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // tokens ::= token 
            {
              Tokens RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = t;        
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("tokens",266, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // optTokens ::= 
            {
              Tokens RESULT =null;
		 RESULT = new Tokens();    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("optTokens",267, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // optTokens ::= tokens 
            {
              Tokens RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = t;               
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("optTokens",267, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // logical_unary ::= LPAR logical_condition RPAR 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_unary",232, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // logical_unary ::= figurative 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_unary",232, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // logical_unary ::= expression 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_unary",232, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // logical_class_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_class_opt",231, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // logical_class_opt ::= figurative 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_class_opt",231, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // logical_class ::= logical_unary logical_class_opt 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_class",230, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // logical_expression ::= logical_expression logical_oper logical_class 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_expression",229, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // logical_expression ::= logical_class 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_expression",229, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // logical_condition ::= logical_condition option_and_or logical_expression 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_condition",228, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // logical_condition ::= logical_expression 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("logical_condition",228, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // expr_primary ::= rvalue 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("expr_primary",224, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // expr_operand ::= LPAR expression_arit RPAR 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("expr_operand",223, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // expr_operand ::= expr_primary 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("expr_operand",223, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // expression_arit ::= expression_arit operator_arit expr_operand 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("expression_arit",222, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // expression_arit ::= expr_operand 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("expression_arit",222, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // expression ::= expression_arit 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("expression",221, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // eatWriteItem ::= AFTER 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteItem",95, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // eatWriteItem ::= PAGE 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteItem",95, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // eatWriteItem ::= LINE 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteItem",95, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // eatWriteItem ::= NO 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteItem",95, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // eatWriteItem ::= LOCK 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteItem",95, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // eatWriteItem ::= WITH 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteItem",95, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // eatWriteItem ::= token 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens s = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteItem",95, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // eatWriteLst ::= eatWriteLst eatWriteItem 
            {
              Tokens RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens x = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens i = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = x.add(i);      
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteLst",94, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // eatWriteLst ::= eatWriteItem 
            {
              Tokens RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens e = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(e); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWriteLst",94, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // eatWrite ::= 
            {
              Tokens RESULT =null;
		 RESULT = new Tokens(); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWrite",93, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // eatWrite ::= eatWriteLst 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l;            
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatWrite",93, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // eatCloseItem ::= FOR 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatCloseItem",92, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // eatCloseItem ::= NO 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatCloseItem",92, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // eatCloseItem ::= WITH 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatCloseItem",92, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // eatCloseLst ::= eatCloseLst eatCloseItem 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens i = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l.add(i);      
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatCloseLst",91, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // eatCloseLst ::= eatCloseItem 
            {
              Tokens RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens i = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatCloseLst",91, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // eatClose ::= 
            {
              Tokens RESULT =null;
		 RESULT = new Tokens(); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatClose",90, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // eatClose ::= eatCloseLst 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l;            
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("eatClose",90, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // stmtEndVerb ::= ENDVERB 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEndVerb",202, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // stmtEndEvaluate ::= ENDEVAL 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEndEvaluate",199, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // stmtEndPerform ::= ENDPERFORM 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEndPerform",198, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // stmtEndIf ::= ENDIF 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEndIf",197, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // stmtElse ::= ELSE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtElse",196, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // stmtEndP ::= ENDP 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEndP",180, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // option_order ::= DESCENDING 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_order",88, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // option_order ::= ASCENDING 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_order",88, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // option_and_or ::= ALSO 
            {
              Symbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol a = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = a; code.incComplexity(); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_and_or",86, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // option_and_or ::= OR 
            {
              Symbol RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = o; code.incComplexity(); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_and_or",86, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // option_and_or ::= AND 
            {
              Symbol RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol a = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = a; code.incComplexity(); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_and_or",86, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // option_position ::= AFTER 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_position",87, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // option_position ::= BEFORE 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_position",87, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // option_size_error ::= SIZE_ERROR 
            {
              StmtCobol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 code.setImperative(); 
                                   RESULT = new StmtCobol(i); 
                                
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_size_error",191, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // option_size_error_opt ::= 
            {
              StmtCobol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_size_error_opt",190, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // option_size_error_opt ::= option_size_error 
            {
              StmtCobol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_size_error_opt",190, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // optionOverflow ::= OVERFLOW 
            {
              StmtCobol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 code.setImperative(); 
                                   RESULT = new StmtCobol(i); 
                                
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("optionOverflow",189, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // optionOverflow_opt ::= 
            {
              StmtCobol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("optionOverflow_opt",188, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // optionOverflow_opt ::= optionOverflow 
            {
              StmtCobol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("optionOverflow_opt",188, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // option_rounded ::= ROUNDED 
            {
              Option RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol r = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Option(r); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_rounded",264, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // option_giving ::= GIVING lvalue_list 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new Option(o); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_giving",263, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // option_giving_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_giving_opt",89, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // option_giving_opt ::= option_giving 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_giving_opt",89, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // option_corr ::= 
            {
              Option RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_corr",262, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // option_corr ::= CORR 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Option(o); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("option_corr",262, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // stmtException ::= EXCEPTION 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtException",194, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // stmtInvalid ::= INVALID opt_key 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 StmtCobol stmt = new StmtCobol(s);
                                              RESULT = code.setAtEnd(stmt); 
                                           
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInvalid",193, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // stmtAtEnd ::= ATEND 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s);
                             RESULT = code.setAtEnd(stmt); 
                          
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAtEnd",192, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // closeFile ::= ID eatClose 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens e = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 Tokens t = new Tokens(s);
                                         RESULT = t.add(e); 
                                      
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("closeFile",219, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // closeLstFiles ::= closeLstFiles closeFile 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens c = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l.add(c);  
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("closeLstFiles",220, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // closeLstFiles ::= closeFile 
            {
              Tokens RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens c = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = c;         
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("closeLstFiles",220, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // stmtClose ::= CLOSE closeLstFiles 
            {
              StmtCobol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.fileAction(TRAP.ACC_CLOSE, c, l); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtClose",120, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // stmtSet ::= SET stmtSet_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSet",187, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // stmtStop ::= STOPRUN optTokens 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtStop",185, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // stmtDelete ::= DELETE ID 
            {
              StmtCobol RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.fileAccess(TRAP.ACC_DELETE, d, i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDelete",123, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // stmtRelease ::= RELEASE ID eatWrite 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens e = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s);
                     RESULT = stmt.addLValue(i);
                  
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRelease",152, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // stmtWrite_eop ::= EOP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 code.setImperative(); 
                                   RESULT = new StmtCobol(s); 
                                
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_eop",85, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // stmtWrite_after ::= AFTER 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_after",84, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // stmtWrite_position ::= option_position rvalue 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_position",83, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // stmtWrite_from ::= FROM rvalue 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_from",82, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // stmtWrite_option ::= stmtWrite_eop 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_option",81, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // stmtWrite_option ::= stmtWrite_after 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_option",81, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // stmtWrite_option ::= stmtWrite_position 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_option",81, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // stmtWrite_option ::= stmtWrite_from 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_option",81, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // stmtWrite_options ::= stmtWrite_options stmtWrite_option 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_options",80, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // stmtWrite_options ::= stmtWrite_option 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_options",80, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // stmtWrite_detail ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_detail",79, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // stmtWrite_detail ::= stmtWrite_options 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite_detail",79, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // stmtRewrite ::= REWRITE ID stmtWrite_detail 
            {
              StmtCobol RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol r = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = code.fileAccess(TRAP.ACC_UPDATE, r, i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRewrite",157, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // stmtWrite ::= WRITE ID stmtWrite_detail 
            {
              StmtCobol RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol w = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = code.fileAccess(TRAP.ACC_INSERT, w, i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWrite",165, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // stmtUnstring_option ::= optionOverflow 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_option",78, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // stmtUnstring_option ::= TALLYING opt_in lvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_option",78, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // stmtUnstring_option ::= POINTER lvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_option",78, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // stmtUnstring_options ::= stmtUnstring_options stmtUnstring_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_options",77, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // stmtUnstring_options ::= stmtUnstring_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_options",77, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // stmtUnstring_options_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_options_opt",76, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // stmtUnstring_options_opt ::= stmtUnstring_options 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_options_opt",76, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // stmtUnstring_delimiter ::= COUNT opt_in lvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiter",75, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // stmtUnstring_delimiter ::= DELIMITER opt_in lvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiter",75, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // stmtUnstring_delimiters ::= stmtUnstring_delimiters stmtUnstring_delimiter 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiters",74, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // stmtUnstring_delimiters ::= stmtUnstring_delimiter 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiters",74, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // stmtUnstring_delimiters_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiters_opt",73, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // stmtUnstring_delimiters_opt ::= stmtUnstring_delimiters 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiters_opt",73, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // stmtUnstring_target ::= lvalue stmtUnstring_delimiters_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_target",69, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // stmtUnstring_targets ::= stmtUnstring_targets stmtUnstring_target 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_targets",68, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // stmtUnstring_targets ::= stmtUnstring_target 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_targets",68, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // stmtUnstring_to ::= INTO stmtUnstring_targets 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_to",67, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // stmtUnstring_delimited_token ::= OR 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimited_token",72, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // stmtUnstring_delimited_token ::= rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimited_token",72, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // stmtUnstring_delimiteds ::= stmtUnstring_delimiteds stmtUnstring_delimited_token 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiteds",71, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // stmtUnstring_delimiteds ::= stmtUnstring_delimited_token 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimiteds",71, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // stmtUnstring_delimited ::= DELIMITED opt_by opt_all stmtUnstring_delimiteds 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimited",70, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // stmtUnstring_delimited_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimited_opt",66, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // stmtUnstring_delimited_opt ::= stmtUnstring_delimited 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_delimited_opt",66, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // stmtUnstring_detail ::= rvalue stmtUnstring_delimited_opt stmtUnstring_to stmtUnstring_options_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring_detail",65, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // stmtUnstring ::= UNSTRING stmtUnstring_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnstring",119, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // stmtSubtract_option ::= option_size_error 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSubtract_option",64, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // stmtSubtract_option ::= option_giving 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSubtract_option",64, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // stmtSubtract_option ::= FROM rvalue_list 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSubtract_option",64, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // stmtSubtract_options ::= stmtSubtract_options stmtSubtract_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSubtract_options",63, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // stmtSubtract_options ::= stmtSubtract_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSubtract_options",63, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // stmtSubtract_detail ::= rvalue_list stmtSubtract_options 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSubtract_detail",62, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // stmtSubtract ::= SUBTRACT stmtSubtract_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSubtract",61, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // stmtString_pointer ::= POINTER lvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_pointer",60, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // stmtString_pointer_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_pointer_opt",59, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // stmtString_pointer_opt ::= stmtString_pointer 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_pointer_opt",59, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // stmtString_into ::= INTO lvalue stmtString_pointer_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_into",54, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // stmtString_from_delim ::= SIZE 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_from_delim",58, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // stmtString_from_delim ::= rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_from_delim",58, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // stmtString_from_delimiter ::= DELIMITED opt_by stmtString_from_delim 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_from_delimiter",57, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // stmtString_from_tokens ::= stmtString_from_tokens rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_from_tokens",56, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // stmtString_from_tokens ::= rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_from_tokens",56, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // stmtString_from_string ::= stmtString_from_tokens stmtString_from_delimiter 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_from_string",55, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // stmtString_from ::= stmtString_from stmtString_from_string 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_from",53, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // stmtString_from ::= stmtString_from_string 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_from",53, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // stmtString_detail ::= stmtString_from stmtString_into optionOverflow_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString_detail",52, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // stmtStart_key ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtStart_key",51, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // stmtStart_key ::= KEY logical_oper rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtStart_key",51, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // stmtStart ::= START ID stmtStart_key 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtStart",50, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // stmtSort_procedure ::= OUTPUT ID 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_procedure",49, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // stmtSort_procedure ::= INPUT ID 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_procedure",49, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // stmtSort_giving ::= GIVING rvalue_list 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_giving",48, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // stmtSort_using ::= USING rvalue_list 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_using",47, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // stmtSort_duplicates ::= DUPLICATES 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_duplicates",46, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // stmtSort_order ::= option_order opt_key rvalue_list 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_order",45, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // stmtSort_option ::= stmtSort_procedure 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_option",44, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // stmtSort_option ::= stmtSort_giving 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_option",44, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // stmtSort_option ::= stmtSort_using 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_option",44, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // stmtSort_option ::= stmtSort_duplicates 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_option",44, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // stmtSort_option ::= stmtSort_order 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_option",44, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // stmtSort_detail ::= stmtSort_detail stmtSort_option 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_detail",43, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // stmtSort_detail ::= stmtSort_option 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort_detail",43, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // stmtSort ::= SORT NT$3 ID stmtSort_detail 
            {
              StmtCobol RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (StmtCobol) ((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).value;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSort",42, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // NT$3 ::= 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
 RESULT = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("NT$3",276, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // stmtSet_resto ::= BY rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSet_resto",41, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // stmtSet_resto ::= TO rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSet_resto",41, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // stmtSet_detail ::= lvalue_list stmtSet_resto 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSet_detail",40, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // stmtSearch_varying ::= VARYING rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSearch_varying",39, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // stmtSearch_opt ::= stmtSearch_varying 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSearch_opt",38, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // stmtSearch_option ::= stmtSearch_option stmtSearch_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSearch_option",37, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // stmtSearch_option ::= stmtSearch_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSearch_option",37, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // stmtSearch_options ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSearch_options",36, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // stmtSearch_options ::= stmtSearch_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSearch_options",36, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // stmtSearch_detail ::= rvalue stmtSearch_options 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSearch_detail",35, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // stmtSearch ::= SEARCH opt_all stmtSearch_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtSearch",34, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // stmtRead_key ::= KEY rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead_key",33, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // stmtRead_into ::= INTO lvalue 
            {
              Tokens RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt d = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 Tokens t = new Tokens(i); RESULT = t.add(d); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead_into",32, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // stmtRead_option ::= stmtRead_key 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead_option",31, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // stmtRead_option ::= stmtRead_into 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead_option",31, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // stmtRead_options ::= stmtRead_options stmtRead_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead_options",30, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // stmtRead_options ::= stmtRead_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead_options",30, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // stmtRead_detail ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead_detail",29, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // stmtRead_detail ::= stmtRead_options 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead_detail",29, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // stmtRead ::= READ ID stmtRead_detail 
            {
              StmtCobol RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol r = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens s = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = code.fileAccess(TRAP.ACC_READ, r, i);
                     RESULT = stmt; 
                  
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRead",28, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // perform_after ::= AFTER var_int FROM var_int BY var_int 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-5)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-5)).value;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_after",150, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-5)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // perform_varying ::= VARYING var_int FROM var_int BY var_int 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-5)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-5)).value;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_varying",149, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-5)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // perform_until ::= UNTIL logical_condition 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Option(o); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_until",147, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // perform_thru ::= THRU id 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Option(o, i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_thru",148, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // perform_test ::= TEST AFTER 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new Option(o);    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_test",146, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // perform_test ::= TEST BEFORE 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new Option(o);    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_test",146, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // perform_option_second ::= var_int 
            {
              Option RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt v = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Option(v); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_option_second",144, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // perform_option_second ::= perform_option_first 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = o;                
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_option_second",144, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // perform_option_first ::= perform_test 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_option_first",143, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // perform_option_first ::= perform_after 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_option_first",143, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // perform_option_first ::= perform_varying 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_option_first",143, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // perform_option_first ::= perform_thru 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_option_first",143, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // perform_option_first ::= perform_until 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_option_first",143, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // perform_option_first ::= TIMES 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 currStmt.replaceOption(new Option(o)); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_option_first",143, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // perform_option_first ::= FOREVER 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Option(o); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_option_first",143, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // perform_options ::= perform_options perform_option_second 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 currStmt.addOption(o); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_options",142, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // perform_options ::= perform_option_first 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 currStmt.addOption(o); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_options",142, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // perform_options_opt ::= 
            {
              Option RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_options_opt",141, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // perform_options_opt ::= perform_options 
            {
              Option RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_options_opt",141, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // perform_label ::= var 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt v = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 currStmt.addOption(new Option(v)); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_label",145, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // stmtPerform_from ::= 
            {
              Option RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_from",140, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // stmtPerform_from ::= perform_options 
            {
              Option RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_from",140, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // stmtPerform_from ::= perform_label perform_options_opt 
            {
              Option RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform_from",140, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // perform_verb ::= PERFORM 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 currStmt = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("perform_verb",139, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // stmtPerform ::= perform_verb stmtPerform_from 
            {
              StmtCobol RESULT =null;
		 RESULT = code.processPerform(currStmt, lastStmt); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtPerform",138, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // stmtOpen_files ::= stmtOpen_files ID 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l.add(s);      
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_files",215, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // stmtOpen_files ::= ID 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_files",215, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // stmtOpen_mode ::= EXTEND 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s);
                               stmt.setId(Persistence.EXTEND);
                               RESULT = stmt;
                            
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_mode",218, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // stmtOpen_mode ::= IO 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s);
                               stmt.setId(Persistence.IO);
                               RESULT = stmt;
                            
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_mode",218, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // stmtOpen_mode ::= OUTPUT 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s);
                               stmt.setId(Persistence.OUTPUT);
                               RESULT = stmt;
                            
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_mode",218, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // stmtOpen_mode ::= INPUT 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s);
                               stmt.setId(Persistence.INPUT);
                               RESULT = stmt; 
                            
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_mode",218, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // stmtOpen_group ::= stmtOpen_mode stmtOpen_files 
            {
              Tokens RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		StmtCobol o = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 Persistence f;
                 /*JGG
                    for (Symbol s : l.getTokens()) {
                        f = module.getFile(getSymbolName(s));
                        f.setAccess(o.getId());
                    }
                    */
                    RESULT = l;
                 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_group",217, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // stmtOpen_list ::= stmtOpen_list stmtOpen_group 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens s = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l.add(s);  
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_list",216, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // stmtOpen_list ::= stmtOpen_group 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens s = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;         
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen_list",216, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // stmtOpen ::= OPEN stmtOpen_list 
            {
              StmtCobol RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.fileAction(TRAP.ACC_OPEN, o, l); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtOpen",166, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // stmtMultiply_by ::= rvalue BY rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtMultiply_by",27, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // stmtMultiply_detail ::= stmtMultiply_by option_giving_opt option_size_error_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtMultiply_detail",26, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // stmtMultiply ::= MULTIPLY stmtMultiply_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtMultiply",160, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // stmtMove ::= MOVE opt_all rvalue TO lvalue_list 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-4)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		SymbolExt r = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExtList l = (SymbolExtList)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 code.checkCall(l, r);
                      StmtCobol stmt = new StmtCobol(s, code.getStmts());
                      stmt.addRValue(r);
                      stmt.addLValue(l);
                      RESULT = stmt; 
                   
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtMove",159, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-4)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // stmtInspect_token ::= rvalue 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",170, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // stmtInspect_token ::= CONVERTING 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",170, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // stmtInspect_token ::= REPLACING 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",170, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // stmtInspect_token ::= TALLYING 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",170, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // stmtInspect_token ::= TO 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",170, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // stmtInspect_token ::= CHARACTER 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",170, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // stmtInspect_token ::= FIRST 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",170, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // stmtInspect_token ::= LEADING 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",170, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // stmtInspect_token ::= AFTER 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",170, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // stmtInspect_token ::= BEFORE 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",170, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // stmtInspect_token ::= BY 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",170, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // stmtInspect_token ::= ALL 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_token",170, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // stmtInspect_detail ::= stmtInspect_detail stmtInspect_token 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_detail",169, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // stmtInspect_detail ::= stmtInspect_token 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect_detail",169, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // stmtInspect ::= INSPECT rvalue stmtInspect_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		SymbolExt l = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInspect",168, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // stmtInitialize_tokens ::= ALL 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_tokens",25, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // stmtInitialize_tokens ::= BY 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_tokens",25, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // stmtInitialize_tokens ::= constantes 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_tokens",25, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // stmtInitialize_tokens ::= ident 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_tokens",25, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // stmtInitialize_resto ::= stmtInitialize_resto stmtInitialize_tokens 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_resto",24, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // stmtInitialize_resto ::= stmtInitialize_tokens 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_resto",24, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // stmtInitialize_replacing_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_replacing_opt",23, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // stmtInitialize_replacing_opt ::= REPLACING stmtInitialize_resto 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_replacing_opt",23, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // stmtInitialize_detail ::= lvalue_list stmtInitialize_replacing_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize_detail",22, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // stmtInitialize ::= INITIALIZE stmtInitialize_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtInitialize",116, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // stmtIf_detail ::= logical_condition 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIf_detail",21, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // stmtIf ::= IF stmtIf_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 StmtCobol stmt = new StmtCobol(s, code.getStmts());      
                                 RESULT = code.processIf(stmt);
                              
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIf",195, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // stmtGoto_depending ::= DEPENDING rvalue 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtGoto_depending",156, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // stmtGoto_depending_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtGoto_depending_opt",155, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // stmtGoto_depending_opt ::= stmtGoto_depending 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtGoto_depending_opt",155, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // stmtGoto_procs ::= stmtGoto_procs ID 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtGoto_procs",154, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // stmtGoto_procs ::= ID 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtGoto_procs",154, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // stmtGoTo ::= GOTO opt_to stmtGoto_procs stmtGoto_depending_opt 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtGoTo",153, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // stmtWhen_thru ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWhen_thru",201, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // stmtWhen_thru ::= THRU logical_condition 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWhen_thru",201, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // stmtEvaluate_other ::= OTHER 
            {
              Symbol RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = o; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEvaluate_other",137, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // stmtEvaluate_item ::= logical_condition stmtWhen_thru 
            {
              StmtCobol RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEvaluate_item",136, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // stmtEvaluate_condition ::= stmtEvaluate_other 
            {
              StmtCobol RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol o = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 stack.peek().addOption(new Option(o)); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEvaluate_condition",135, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // stmtEvaluate_condition ::= stmtEvaluate_item 
            {
              StmtCobol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEvaluate_condition",135, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // stmtWhen ::= WHEN NT$2 stmtEvaluate_condition 
            {
              StmtCobol RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (StmtCobol) ((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtWhen",200, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // NT$2 ::= 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
 stack.peek().addOption(new Option(s)); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("NT$2",275, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // stmtEvaluate_object ::= logical_condition 
            {
              StmtCobol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEvaluate_object",134, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // stmtEvaluate ::= EVALUATE NT$1 stmtEvaluate_object 
            {
              StmtCobol RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (StmtCobol) ((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEvaluate",133, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // NT$1 ::= 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
 currStmt = new StmtCobol(s); 
                                stack.push(currStmt);
                             
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("NT$1",274, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // divide_option ::= option_rounded 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 currStmt.addOption(o); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("divide_option",20, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // divide_option ::= option_giving 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 currStmt.addOption(o); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("divide_option",20, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // divide_options ::= divide_options divide_option 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("divide_options",19, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // divide_options ::= divide_option 
            {
              Option RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Option o = (Option)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("divide_options",19, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // divide_options_opt ::= 
            {
              Option RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("divide_options_opt",18, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // divide_options_opt ::= divide_options 
            {
              Option RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("divide_options_opt",18, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // divide_mode ::= BY 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("divide_mode",17, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // divide_mode ::= INTO 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("divide_mode",17, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // divide_verb ::= DIVIDE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, currStmt); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("divide_verb",16, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // stmtDivide ::= divide_verb rvalue divide_mode lvalue_list divide_options_opt 
            {
              StmtCobol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDivide",15, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-4)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // stmtDisplay ::= DISPLAY rvalue_list 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDisplay",125, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // stmtCompute_option ::= option_size_error 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCompute_option",14, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // stmtCompute_options ::= stmtCompute_options stmtCompute_option 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCompute_options",13, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // stmtCompute_options ::= stmtCompute_option 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCompute_options",13, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // stmtCompute_options_opt ::= 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCompute_options_opt",12, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // stmtCompute_options_opt ::= stmtCompute_options 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCompute_options_opt",12, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // stmtCompute_rvalue ::= expression 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCompute_rvalue",11, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // stmtCompute_rvalues ::= stmtCompute_rvalues stmtCompute_rvalue 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCompute_rvalues",10, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // stmtCompute_rvalues ::= stmtCompute_rvalue 
            {
              Symbol RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCompute_rvalues",10, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // stmtCompute_detail ::= lvalue REL_EQ stmtCompute_rvalues stmtCompute_options_opt 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).value;
		 RESULT = i; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCompute_detail",9, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // stmtCompute ::= COMPUTE stmtCompute_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s, code.getStmts());
//                      stmt.addSymbol(i);
                      RESULT = stmt; 
                   
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCompute",122, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // stmtCancel ::= CANCEL rvalue 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCancel",164, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // stmtCall_returning ::= RETURNING lvalue 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_returning",175, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // stmtCall_returning_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_returning_opt",174, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // stmtCall_returning_opt ::= stmtCall_returning 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_returning_opt",174, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // stmtCall_parm_type ::= REFERENCE 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_parm_type",178, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // stmtCall_parm_type ::= VALUE 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_parm_type",178, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // stmtCall_parm ::= BY stmtCall_parm_type 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_parm",177, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // stmtCall_parm ::= rvalue 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_parm",177, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // stmtCall_parm_list ::= stmtCall_parm_list stmtCall_parm 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_parm_list",176, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // stmtCall_parm_list ::= stmtCall_parm 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_parm_list",176, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // stmtCall_using ::= USING stmtCall_parm_list 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_using",173, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // stmtCall_using_opt ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_using_opt",172, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // stmtCall_using_opt ::= stmtCall_using 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall_using_opt",172, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // stmtCall ::= CALL moduloCall stmtCall_using_opt stmtCall_returning_opt 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		 RESULT = code.processCall(s, i); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCall",171, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-3)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // add_option ::= option_rounded 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("add_option",8, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // add_option ::= option_giving 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("add_option",8, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // add_options ::= add_options add_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("add_options",7, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // add_options ::= add_option 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("add_options",7, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // add_options_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("add_options_opt",6, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // add_options_opt ::= add_options 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("add_options_opt",6, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // add_verb ::= ADD 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 currStmt = new StmtCobol(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("add_verb",5, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // stmtAdd ::= add_verb option_corr rvalue_list TO lvalue_list add_options_opt 
            {
              StmtCobol RESULT =null;
		 RESULT = currStmt; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAdd",186, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-5)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // stmtAccept_detail ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAccept_detail",4, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // stmtAccept_detail ::= FROM rvalue stmtAcceptOpt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAccept_detail",4, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // stmtEndExec ::= END_EXEC 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtEndExec",182, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // stmtExec ::= SQLCODE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 module.incStmtSql();  RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtExec",181, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // stmtExec ::= CICSCODE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 module.incStmtCics(); RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtExec",181, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // stmtReturn ::= RETURN ID stmtRead_detail 
            {
              StmtCobol RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol r = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int jleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens j = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = code.fileAccess(TRAP.ACC_READ, r, i);
                     RESULT = stmt; // .addTokens(j); 
                  
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtReturn",184, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // stmtNext ::= NEXT 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtNext",163, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // stmtRollback ::= ROLLBACK 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtRollback",183, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // stmtFree ::= FREE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtFree",151, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // exitType ::= 
            {
              Symbol RESULT =null;
		 RESULT = code.makeSymbol(ZCCSym.PARAGRAPH, -1, -1, ""); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("exitType",105, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // exitType ::= SECTION 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("exitType",105, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // exitType ::= PARAGRAPH 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("exitType",105, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // exitType ::= PROGRAM 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("exitType",105, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // stmtExitPgm ::= EXITPGM 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s, code.getStmts());
                               RESULT = stmt.addRValue(s); 
                            
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtExitPgm",131, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // stmtExitP ::= EXITP 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s, code.getStmts());
                           RESULT = stmt.addRValue(code.makeSymbol(ZCCSym.PERFORM, -1, -1, "PERFORM")); 
                        
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtExitP",129, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // stmtExitG ::= EXIT exitType 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 StmtCobol stmt = new StmtCobol(s, code.getStmts());
                                       RESULT = stmt.addRValue(t); 
                                    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtExitG",130, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // exitTypes ::= stmtExitPgm 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("exitTypes",132, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // exitTypes ::= stmtExitP 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("exitTypes",132, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // exitTypes ::= stmtExitG 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("exitTypes",132, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // stmtExit ::= exitTypes 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtExit",128, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // moduloCall ::= LITERAL 
            {
              Symbol RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol l = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("moduloCall",179, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // moduloCall ::= ident 
            {
              Symbol RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		SymbolExt i = (SymbolExt)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = i; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("moduloCall",179, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // stmtAcceptOpt ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAcceptOpt",167, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // stmtAcceptOpt ::= ID 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAcceptOpt",167, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // stmtAccept ::= ACCEPT lvalue stmtAccept_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAccept",161, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // stmtMerge ::= MERGE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtMerge",118, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // stmtUnlock ::= UNLOCK 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtUnlock",162, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // stmtGoback ::= GOBACK 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtGoback",127, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // stmtCommit ::= COMMIT 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtCommit",117, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // stmtString ::= STRING stmtString_detail 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtString",158, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // stmtContinue ::= CONTINUE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtContinue",126, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // stmtAllocate ::= ALLOCATE 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtAllocate",124, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // stmtTransform ::= TRANSFORM 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new StmtCobol(s, code.getStmts()); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtTransform",121, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // stmtLang ::= stmtFree 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtLang",214, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // stmtLang ::= stmtCancel 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtLang",214, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // stmtLang ::= stmtAllocate 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtLang",214, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // stmtArit ::= stmtSubtract 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtArit",213, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // stmtArit ::= stmtDivide 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtArit",213, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // stmtArit ::= stmtAdd 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtArit",213, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // stmtArit ::= stmtCompute 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtArit",213, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // stmtArit ::= stmtMultiply 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtArit",213, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // stmtIO2 ::= stmtSort 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",208, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // stmtIO2 ::= stmtRewrite 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",208, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // stmtIO2 ::= stmtDelete 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",208, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // stmtIO2 ::= stmtWrite 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",208, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // stmtIO2 ::= stmtReturn 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",208, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // stmtIO2 ::= stmtRelease 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",208, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // stmtIO2 ::= stmtRead 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",208, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // stmtIO2 ::= stmtClose 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",208, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // stmtIO2 ::= stmtOpen 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",208, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // stmtIO2 ::= stmtDisplay 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",208, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // stmtIO2 ::= stmtAccept 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO2",208, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // stmtIO1 ::= stmtRollback 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO1",207, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // stmtIO1 ::= stmtStart 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO1",207, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // stmtIO1 ::= stmtMerge 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO1",207, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // stmtIO1 ::= stmtUnlock 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO1",207, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // stmtIO1 ::= stmtCommit 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO1",207, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // stmtIO ::= stmtIO2 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO",206, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // stmtIO ::= stmtIO1 optTokens 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtIO",206, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // stmtDatos2 ::= stmtSet 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos2",205, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // stmtDatos2 ::= stmtInitialize 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos2",205, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // stmtDatos2 ::= stmtUnstring 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos2",205, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // stmtDatos2 ::= stmtSearch 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos2",205, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // stmtDatos2 ::= stmtInspect 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos2",205, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // stmtDatos2 ::= stmtString 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos2",205, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // stmtDatos2 ::= stmtMove 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos2",205, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // stmtDatos1 ::= stmtTransform 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos1",204, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // stmtDatos ::= stmtDatos2 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;              
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos",203, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // stmtDatos ::= stmtDatos1 optTokens 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtDatos",203, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // stmtFlujo ::= stmtContinue 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtFlujo",212, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // stmtFlujo ::= stmtGoTo 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtFlujo",212, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // stmtFlujo ::= stmtEvaluate 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.processEvaluate(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtFlujo",212, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // stmtFlujo ::= stmtIf 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtFlujo",212, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // stmtFlujo ::= stmtCall 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtFlujo",212, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // stmtFlujo ::= stmtPerform 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtFlujo",212, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // stmtControl2 ::= stmtGoback 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		  hasEndProgram = true;
                                      code.trapEndModule();
                                      RESULT = s; 
                                   
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtControl2",211, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // stmtControl2 ::= stmtStop 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 hasEndProgram = true;
                                       RESULT = s; 
                                       code.trapEndModule(); 
                                   
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtControl2",211, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // stmtControl1 ::= stmtNext 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtControl1",210, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // stmtControl ::= stmtControl2 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 hasEndProgram = true; RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtControl",209, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // stmtControl ::= stmtExit 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT =  code.processExit(s);    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtControl",209, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // stmtControl ::= stmtControl1 optTokens 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens t = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;          
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmtControl",209, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // noverbos ::= stmtEndEvaluate 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.endEvaluate(s);  
                                  stack.pop();     
                               
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",109, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // noverbos ::= stmtEndExec 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;                         
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",109, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // noverbos ::= stmtException 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;                         
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",109, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // noverbos ::= stmtInvalid 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;                         
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",109, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // noverbos ::= stmtAtEnd 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;                         
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",109, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // noverbos ::= stmtElse 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.processElse(s);       
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",109, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // noverbos ::= stmtWhen 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.processWhen(stack.peek());       
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",109, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // noverbos ::= stmtEndVerb 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;                         
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",109, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // noverbos ::= stmtEndPerform 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.endPerform(s);        
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",109, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // noverbos ::= stmtEndIf 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.endIf(s);              
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",109, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // noverbos ::= stmtEndP 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = code.checkFlujo( s, lastStmt);
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("noverbos",109, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // verbos ::= stmtExec 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s;                         
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("verbos",108, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // verbos ::= stmtLang 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; module.incStmtLang();    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("verbos",108, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // verbos ::= stmtIO 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; module.incStmtIO();      
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("verbos",108, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // verbos ::= stmtArit 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; module.incStmtArit();    
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("verbos",108, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // verbos ::= stmtDatos 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; module.incStmtDatos();   
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("verbos",108, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // verbos ::= stmtFlujo 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; module.incStmtFlujo();   
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("verbos",108, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // verbos ::= stmtControl 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; module.incStmtControl(); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("verbos",108, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= noverbos 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmt",107, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= verbos 
            {
              StmtCobol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = s; code.incStmt(); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("stmt",107, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lista_stmt ::= lista_stmt stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 lastStmt = code.processStatement(s, lastStmt); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("lista_stmt",106, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lista_stmt ::= stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		StmtCobol s = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 lastStmt = code.processStatement(s, lastStmt); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("lista_stmt",106, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parr_section ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("parr_section",104, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parr_section ::= SECTION 
            {
              Boolean RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = true;  
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("parr_section",104, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parrafo_name ::= PARRAFO parr_section ENDP 
            {
              Symbol RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		 // if (b == true) code.notSupportedSection(p); 
                        RESULT = code.processParrafo(p, lastStmt); 
                     
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("parrafo_name",103, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bloque_sentences ::= 
            {
              Integer RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("bloque_sentences",102, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bloque_sentences ::= lista_stmt 
            {
              Integer RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("bloque_sentences",102, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bloque_parrafo ::= parrafo_name bloque_sentences 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("bloque_parrafo",100, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bloque_parrafos ::= bloque_parrafos bloque_parrafo 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("bloque_parrafos",99, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bloque_parrafos ::= bloque_parrafo 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("bloque_parrafos",99, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lista_parrafos ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("lista_parrafos",98, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lista_parrafos ::= bloque_parrafos 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("lista_parrafos",98, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bloque_inicial ::= bloque_sentences 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("bloque_inicial",101, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bloque_procedure ::= bloque_inicial lista_parrafos 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("bloque_procedure",3, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // list_parms ::= list_parms ID 
            {
              Tokens RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Tokens l = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = l.add(s);      
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("list_parms",112, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // list_parms ::= ID 
            {
              Tokens RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 RESULT = new Tokens(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("list_parms",112, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // list_parms_opt ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("list_parms_opt",111, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // list_parms_opt ::= list_parms 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("list_parms_opt",111, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // proc_parm ::= RETURNING rvalue 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("proc_parm",115, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // proc_parm ::= USING list_parms_opt 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("proc_parm",115, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // proc_parms ::= proc_parms proc_parm 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("proc_parms",114, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // proc_parms ::= proc_parm 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("proc_parms",114, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // proc_parms_list ::= 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("proc_parms_list",113, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // proc_parms_list ::= proc_parms 
            {
              Tokens RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("proc_parms_list",113, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // resto_call ::= proc_parms_list NT$0 ENDP 
            {
              Tokens RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Tokens) ((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Tokens p = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 code.parrafoVirtual(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("resto_call",110, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              Tokens RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens p = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
 RESULT = p; 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("NT$0",273, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // proc_div_header ::= DIV_PROC resto_call 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()).right;
		Tokens p = (Tokens)((java_cup.runtime.Symbol) CUP$ZCCode$stack.peek()).value;
		 code.beginCode(s); 
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("proc_div_header",2, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // procedure_division ::= proc_div_header bloque_procedure 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("procedure_division",0, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // end_program ::= 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("end_program",1, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // end_program ::= END_PGM ID ENDP 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)).value;
		 hasEndProgram = true; 
                                      StmtCobol stmt = new StmtCobol(s); 
                                      code.endProgram(stmt);
                                      lastStmt = stmt;
                                   
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("end_program",1, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-2)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // module ::= procedure_division end_program 
            {
              Object RESULT =null;

              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("module",97, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= cobolCode EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).right;
		StmtCobol start_val = (StmtCobol)((java_cup.runtime.Symbol) CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)).value;
		RESULT = start_val;
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.elementAt(CUP$ZCCode$top-1)), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ZCCode$parser.done_parsing();
          return CUP$ZCCode$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // cobolCode ::= module 
            {
              StmtCobol RESULT =null;
		 code.EndOfFile(lastStmt, hasEndProgram);
                         RESULT = null;  
                      
              CUP$ZCCode$result = parser.getSymbolFactory().newSymbol("cobolCode",96, ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), ((java_cup.runtime.Symbol)CUP$ZCCode$stack.peek()), RESULT);
            }
          return CUP$ZCCode$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

