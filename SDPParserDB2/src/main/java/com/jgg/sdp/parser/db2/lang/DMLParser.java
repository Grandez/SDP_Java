
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 13 12:15:07 CET 2017
//----------------------------------------------------

package com.jgg.sdp.parser.db2.lang;

import java_cup.runtime.*;
import com.jgg.sdp.core.config.*;
import com.jgg.sdp.core.ctes.*;
import com.jgg.sdp.parser.base.*;
import com.jgg.sdp.parser.db2.base.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 13 12:15:07 CET 2017
  */
public class DMLParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public DMLParser() {super();}

  /** Constructor which sets the default scanner. */
  public DMLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public DMLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u02f5\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\u0153\002\000\002\004\005\000\002\016\004\000\002\016" +
    "\006\000\002\017\003\000\002\020\004\000\002\020\003" +
    "\000\002\020\004\000\002\020\004\000\002\020\004\000" +
    "\002\022\005\000\002\023\003\000\002\023\004\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\026\003\000\002\026\002\000\002\027\003\000" +
    "\002\027\004\000\002\030\004\000\002\031\003\000\002" +
    "\031\004\000\002\031\004\000\002\025\003\000\002\025" +
    "\003\000\002\005\011\000\002\u0154\002\000\002\352\005" +
    "\000\002\353\004\000\002\353\003\000\002\u0155\002\000" +
    "\002\006\012\000\002\007\007\000\002\u0156\002\000\002" +
    "\337\006\000\002\340\003\000\002\340\002\000\002\342" +
    "\005\000\002\341\003\000\002\341\005\000\002\343\005" +
    "\000\002\343\002\000\002\345\003\000\002\345\003\000" +
    "\002\346\006\000\002\347\003\000\002\350\003\000\002" +
    "\350\005\000\002\351\003\000\002\351\003\000\002\351" +
    "\003\000\002\010\004\000\002\u0157\002\000\002\354\006" +
    "\000\002\011\004\000\002\u0158\002\000\002\032\007\000" +
    "\002\u0159\002\000\002\013\005\000\002\u015a\002\000\002" +
    "\036\005\000\002\u015b\002\000\002\036\006\000\002\u015c" +
    "\002\000\002\036\006\000\002\u015d\002\000\002\036\006" +
    "\000\002\u015e\002\000\002\036\005\000\002\u015f\002\000" +
    "\002\u0160\002\000\002\036\010\000\002\u0161\002\000\002" +
    "\u0162\002\000\002\036\011\000\002\u0163\002\000\002\u0164" +
    "\002\000\002\036\010\000\002\036\003\000\002\037\003" +
    "\000\002\037\004\000\002\037\003\000\002\037\005\000" +
    "\002\037\003\000\002\037\003\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\u0165" +
    "\002\000\002\u0166\002\000\002\040\011\000\002\u0167\002" +
    "\000\002\u0168\002\000\002\040\010\000\002\u0169\002\000" +
    "\002\u016a\002\000\002\040\010\000\002\u016b\002\000\002" +
    "\u016c\002\000\002\040\010\000\002\u016d\002\000\002\u016e" +
    "\002\000\002\040\010\000\002\u016f\002\000\002\u0170\002" +
    "\000\002\040\010\000\002\u0171\002\000\002\u0172\002\000" +
    "\002\040\010\000\002\u0173\002\000\002\040\007\000\002" +
    "\u0174\002\000\002\040\010\000\002\u0175\002\000\002\040" +
    "\006\000\002\u0176\002\000\002\040\007\000\002\u0177\002" +
    "\000\002\040\006\000\002\u0178\002\000\002\040\007\000" +
    "\002\u0179\002\000\002\040\006\000\002\u017a\002\000\002" +
    "\040\011\000\002\u017b\002\000\002\040\006\000\002\u017c" +
    "\002\000\002\040\006\000\002\u017d\002\000\002\040\006" +
    "\000\002\u017e\002\000\002\040\006\000\002\u017f\002\000" +
    "\002\040\006\000\002\050\003\000\002\050\005\000\002" +
    "\051\003\000\002\051\003\000\002\051\003\000\002\051" +
    "\005\000\002\041\003\000\002\041\005\000\002\044\003" +
    "\000\002\044\003\000\002\043\005\000\002\042\011\000" +
    "\002\046\003\000\002\046\005\000\002\047\003\000\002" +
    "\047\003\000\002\047\003\000\002\052\003\000\002\052" +
    "\004\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\053\003\000\002\053\003\000\002\012\004\000" +
    "\002\034\003\000\002\034\005\000\002\035\006\000\002" +
    "\055\004\000\002\057\003\000\002\057\005\000\002\060" +
    "\003\000\002\056\003\000\002\056\002\000\002\061\003" +
    "\000\002\061\004\000\002\062\003\000\002\062\003\000" +
    "\002\062\003\000\002\062\003\000\002\062\003\000\002" +
    "\062\003\000\002\062\003\000\002\062\003\000\002\062" +
    "\003\000\002\062\003\000\002\u0180\002\000\002\015\012" +
    "\000\002\063\012\000\002\063\002\000\002\064\003\000" +
    "\002\064\002\000\002\065\003\000\002\065\002\000\002" +
    "\066\004\000\002\070\003\000\002\070\005\000\002\071" +
    "\005\000\002\072\003\000\002\072\005\000\002\074\003" +
    "\000\002\074\005\000\002\073\003\000\002\073\005\000" +
    "\002\076\003\000\002\076\003\000\002\077\003\000\002" +
    "\077\005\000\002\075\003\000\002\075\003\000\002\075" +
    "\003\000\002\100\003\000\002\100\002\000\002\067\003" +
    "\000\002\067\004\000\002\101\003\000\002\101\003\000" +
    "\002\101\003\000\002\133\005\000\002\134\003\000\002" +
    "\134\002\000\002\135\003\000\002\135\004\000\002\136" +
    "\003\000\002\136\003\000\002\136\003\000\002\136\003" +
    "\000\002\136\003\000\002\136\003\000\002\142\003\000" +
    "\002\142\003\000\002\142\003\000\002\142\003\000\002" +
    "\142\003\000\002\142\003\000\002\121\004\000\002\123" +
    "\003\000\002\124\003\000\002\124\002\000\002\132\003" +
    "\000\002\132\006\000\002\125\003\000\002\125\004\000" +
    "\002\126\004\000\002\127\003\000\002\127\002\000\002" +
    "\130\003\000\002\130\004\000\002\131\003\000\002\131" +
    "\003\000\002\137\004\000\002\256\003\000\002\256\005" +
    "\000\002\257\003\000\002\257\004\000\002\262\003\000" +
    "\002\262\003\000\002\262\003\000\002\262\003\000\002" +
    "\262\003\000\002\262\003\000\002\262\004\000\002\264" +
    "\003\000\002\260\006\000\002\261\003\000\002\261\003" +
    "\000\002\261\003\000\002\261\003\000\002\265\005\000" +
    "\002\270\005\000\002\271\003\000\002\271\005\000\002" +
    "\272\004\000\002\272\003\000\002\266\007\000\002\267" +
    "\003\000\002\267\003\000\002\267\003\000\002\267\003" +
    "\000\002\274\003\000\002\274\005\000\002\275\003\000" +
    "\002\275\003\000\002\275\003\000\002\277\005\000\002" +
    "\300\010\000\002\301\010\000\002\276\003\000\002\276" +
    "\003\000\002\276\003\000\002\302\003\000\002\302\005" +
    "\000\002\303\003\000\002\303\005\000\002\305\004\000" +
    "\002\304\004\000\002\304\002\000\002\306\003\000\002" +
    "\306\003\000\002\273\006\000\002\144\003\000\002\144" +
    "\003\000\002\144\003\000\002\144\003\000\002\145\005" +
    "\000\002\145\002\000\002\146\003\000\002\146\002\000" +
    "\002\147\004\000\002\150\004\000\002\150\002\000\002" +
    "\151\003\000\002\151\003\000\002\151\003\000\002\234" +
    "\004\000\002\207\004\000\002\244\003\000\002\244\002" +
    "\000\002\245\005\000\002\246\003\000\002\246\003\000" +
    "\002\247\005\000\002\247\006\000\002\247\006\000\002" +
    "\250\003\000\002\250\002\000\002\251\012\000\002\235" +
    "\003\000\002\235\003\000\002\235\003\000\002\241\004" +
    "\000\002\242\004\000\002\242\002\000\002\236\004\000" +
    "\002\236\004\000\002\152\005\000\002\156\003\000\002" +
    "\156\003\000\002\156\003\000\002\156\003\000\002\157" +
    "\003\000\002\157\003\000\002\160\003\000\002\160\003" +
    "\000\002\161\003\000\002\161\003\000\002\161\003\000" +
    "\002\162\005\000\002\163\003\000\002\164\003\000\002" +
    "\164\003\000\002\165\003\000\002\165\005\000\002\166" +
    "\003\000\002\166\003\000\002\167\004\000\002\170\003" +
    "\000\002\170\002\000\002\171\004\000\002\172\003\000" +
    "\002\172\003\000\002\174\003\000\002\201\003\000\002" +
    "\201\003\000\002\202\003\000\002\202\005\000\002\203" +
    "\005\000\002\204\004\000\002\204\004\000\002\204\003" +
    "\000\002\204\003\000\002\u0142\003\000\002\205\003\000" +
    "\002\205\002\000\002\206\004\000\002\175\004\000\002" +
    "\176\003\000\002\176\003\000\002\176\003\000\002\177" +
    "\004\000\002\200\003\000\002\200\005\000\002\254\003" +
    "\000\002\254\002\000\002\255\004\000\002\223\005\000" +
    "\002\224\004\000\002\224\005\000\002\224\003\000\002" +
    "\225\003\000\002\225\005\000\002\226\004\000\002\230" +
    "\003\000\002\230\002\000\002\227\003\000\002\231\003" +
    "\000\002\231\003\000\002\232\007\000\002\233\003\000" +
    "\002\233\002\000\002\237\005\000\002\240\003\000\002" +
    "\240\003\000\002\210\003\000\002\210\002\000\002\u0181" +
    "\002\000\002\211\005\000\002\212\003\000\002\212\005" +
    "\000\002\213\005\000\002\214\003\000\002\214\004\000" +
    "\002\215\003\000\002\215\005\000\002\216\004\000\002" +
    "\220\005\000\002\221\004\000\002\221\002\000\002\222" +
    "\003\000\002\222\005\000\002\153\003\000\002\153\002" +
    "\000\002\154\004\000\002\154\005\000\002\155\003\000" +
    "\002\155\003\000\002\155\003\000\002\155\003\000\002" +
    "\217\006\000\002\102\004\000\002\102\003\000\002\102" +
    "\003\000\002\107\003\000\002\107\003\000\002\107\003" +
    "\000\002\107\003\000\002\103\004\000\002\104\003\000" +
    "\002\110\005\000\002\111\003\000\002\111\002\000\002" +
    "\112\003\000\002\112\005\000\002\113\004\000\002\113" +
    "\003\000\002\114\003\000\002\114\003\000\002\114\002" +
    "\000\002\105\004\000\002\106\003\000\002\106\003\000" +
    "\002\106\003\000\002\106\003\000\002\106\003\000\002" +
    "\106\003\000\002\106\003\000\002\115\003\000\002\115" +
    "\004\000\002\116\003\000\002\116\003\000\002\116\003" +
    "\000\002\116\003\000\002\116\003\000\002\116\003\000" +
    "\002\117\005\000\002\117\003\000\002\117\003\000\002" +
    "\117\003\000\002\117\003\000\002\117\003\000\002\117" +
    "\004\000\002\117\005\000\002\117\003\000\002\117\004" +
    "\000\002\117\003\000\002\117\003\000\002\117\004\000" +
    "\002\117\003\000\002\117\004\000\002\117\004\000\002" +
    "\117\003\000\002\117\003\000\002\117\003\000\002\117" +
    "\004\000\002\117\004\000\002\117\004\000\002\117\003" +
    "\000\002\117\003\000\002\117\003\000\002\117\003\000" +
    "\002\117\003\000\002\117\004\000\002\117\004\000\002" +
    "\117\003\000\002\117\003\000\002\120\003\000\002\120" +
    "\002\000\002\355\003\000\002\356\003\000\002\356\004" +
    "\000\002\357\004\000\002\357\003\000\002\360\003\000" +
    "\002\360\003\000\002\360\003\000\002\360\003\000\002" +
    "\360\003\000\002\360\006\000\002\361\004\000\002\362" +
    "\003\000\002\362\003\000\002\362\003\000\002\363\003" +
    "\000\002\363\002\000\002\u0111\006\000\002\u0112\003\000" +
    "\002\u0112\003\000\002\u0114\003\000\002\u0115\003\000\002" +
    "\u0115\004\000\002\u0182\002\000\002\u0183\002\000\002\u0116" +
    "\010\000\002\u0117\004\000\002\u0118\003\000\002\u0118\004" +
    "\000\002\u0119\006\000\002\u0113\004\000\002\u0113\002\000" +
    "\002\u011a\003\000\002\307\003\000\002\307\003\000\002" +
    "\307\003\000\002\311\004\000\002\314\003\000\002\314" +
    "\003\000\002\316\005\000\002\317\003\000\002\317\005" +
    "\000\002\315\003\000\002\315\003\000\002\320\004\000" +
    "\002\322\003\000\002\322\004\000\002\322\005\000\002" +
    "\321\004\000\002\321\003\000\002\323\003\000\002\323" +
    "\003\000\002\323\003\000\002\323\003\000\002\323\003" +
    "\000\002\324\006\000\002\325\005\000\002\331\005\000" +
    "\002\331\003\000\002\326\006\000\002\332\003\000\002" +
    "\332\003\000\002\327\005\000\002\312\006\000\002\313" +
    "\006\000\002\334\003\000\002\334\005\000\002\335\004" +
    "\000\002\335\003\000\002\336\003\000\002\336\005\000" +
    "\002\310\004\000\002\333\004\000\002\333\002\000\002" +
    "\344\003\000\002\344\003\000\002\344\003\000\002\344" +
    "\003\000\002\344\003\000\002\344\003\000\002\344\003" +
    "\000\002\344\003\000\002\u0123\004\000\002\u0124\003\000" +
    "\002\u0124\003\000\002\u0124\003\000\002\u0124\003\000\002" +
    "\u0124\003\000\002\u0124\003\000\002\u0124\003\000\002\u0124" +
    "\003\000\002\u0124\003\000\002\u0124\003\000\002\u0124\003" +
    "\000\002\u0124\003\000\002\u0124\003\000\002\365\003\000" +
    "\002\366\003\000\002\366\003\000\002\366\003\000\002" +
    "\366\003\000\002\366\003\000\002\366\003\000\002\366" +
    "\003\000\002\366\003\000\002\366\003\000\002\364\003" +
    "\000\002\364\003\000\002\364\003\000\002\364\003\000" +
    "\002\364\003\000\002\376\003\000\002\377\003\000\002" +
    "\377\005\000\002\u0100\003\000\002\u0100\003\000\002\u0101" +
    "\005\000\002\u0108\003\000\002\u0109\003\000\002\u0109\005" +
    "\000\002\u010a\005\000\002\u0103\003\000\002\u0102\005\000" +
    "\002\u0104\005\000\002\u0105\005\000\002\u0106\003\000\002" +
    "\u0106\005\000\002\u0107\003\000\002\u0107\003\000\002\243" +
    "\007\000\002\243\002\000\002\u013d\003\000\002\u013d\005" +
    "\000\002\u013e\003\000\002\u013c\004\000\002\u0132\003\000" +
    "\002\u0132\003\000\002\u014e\003\000\002\u014e\003\000\002" +
    "\367\003\000\002\367\003\000\002\367\003\000\002\367" +
    "\003\000\002\370\003\000\002\371\004\000\002\372\003" +
    "\000\002\372\003\000\002\372\003\000\002\372\003\000" +
    "\002\373\003\000\002\374\003\000\002\375\003\000\002" +
    "\u010b\003\000\002\u010b\002\000\002\u010c\004\000\002\u011c" +
    "\003\000\002\u011c\002\000\002\u011e\004\000\002\u011d\003" +
    "\000\002\u011d\004\000\002\u011f\004\000\002\u010d\003\000" +
    "\002\u010d\002\000\002\u0184\002\000\002\u010e\005\000\002" +
    "\252\003\000\002\252\002\000\002\253\004\000\002\u014c" +
    "\003\000\002\u014c\003\000\002\u014d\003\000\002\u014d\003" +
    "\000\002\u014f\003\000\002\u014f\003\000\002\u0146\003\000" +
    "\002\u0147\003\000\002\u0128\004\000\002\u0128\002\000\002" +
    "\u0129\003\000\002\u0129\003\000\002\u0129\002\000\002\u0133" +
    "\003\000\002\u0133\002\000\002\u012d\003\000\002\u012d\002" +
    "\000\002\u013b\003\000\002\u013b\003\000\002\u0139\003\000" +
    "\002\u0139\002\000\002\u012e\003\000\002\u012e\002\000\002" +
    "\u0134\003\000\002\u0134\002\000\002\u012a\003\000\002\u012a" +
    "\002\000\002\u0136\003\000\002\u0136\002\000\002\u0130\004" +
    "\000\002\u0135\003\000\002\u0135\002\000\002\u0131\003\000" +
    "\002\u0131\002\000\002\u012b\003\000\002\u012b\002\000\002" +
    "\u012c\003\000\002\u012c\003\000\002\u012c\003\000\002\u0137" +
    "\004\000\002\u0137\004\000\002\u0137\002\000\002\u0138\003" +
    "\000\002\u0138\002\000\002\u012f\003\000\002\u012f\002\000" +
    "\002\u013a\003\000\002\u013a\003\000\002\u0148\003\000\002" +
    "\u0148\002\000\002\u0149\004\000\002\u014a\003\000\002\u014a" +
    "\003\000\002\u014a\004\000\002\u014b\005\000\002\u0145\003" +
    "\000\002\u0145\003\000\002\u0145\003\000\002\u0126\004\000" +
    "\002\u0126\003\000\002\021\003\000\002\021\005\000\002" +
    "\u013f\003\000\002\u0140\003\000\002\u0141\003\000\002\u0141" +
    "\005\000\002\u0143\003\000\002\u0143\003\000\002\u0144\003" +
    "\000\002\u0144\005\000\002\u0127\003\000\002\u0127\002\000" +
    "\002\u0121\003\000\002\u0151\003\000\002\u0151\002\000\002" +
    "\u0150\003\000\002\u0150\004\000\002\u0152\003\000\002\u0152" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0423\000\024\157\036\162\035\262\023\u0103\027\u0123" +
    "\025\u0141\034\u0151\016\u0160\011\u0163\033\001\ufe75\000\002" +
    "\001\ufffe\000\004\041\u03ed\001\uffcc\000\006\004\073\043" +
    "\075\001\002\000\004\u011f\135\001\002\000\002\001\ufffb" +
    "\000\002\001\uffd2\000\002\001\ufffc\000\002\001\ufff7\000" +
    "\006\004\073\043\075\001\002\000\002\001\001\000\002" +
    "\001\002\000\002\001\ufffd\000\004\002\u03b4\001\002\000" +
    "\002\001\ufe76\000\002\001\uffff\000\002\001\uffcf\000\002" +
    "\001\ufff6\000\002\001\uffb7\000\002\001\ufff8\000\004\u0137" +
    "\u02c5\001\002\000\002\001\ufffa\000\004\227\u0291\001\ufeaf" +
    "\000\002\001\ufff9\000\002\001\uffbc\000\002\001\uff3a\000" +
    "\002\001\uffd6\000\002\001\ufff5\000\010\004\040\237\043" +
    "\u0187\045\001\002\000\004\010\225\001\ufd14\000\002\001" +
    "\ufff4\000\030\066\063\151\062\175\067\261\071\327\057" +
    "\u0120\070\u012b\055\u012c\072\u0137\064\u0147\060\u0167\066\001" +
    "\002\000\004\u0169\052\001\002\000\004\043\050\001\ufff1" +
    "\000\002\001\ufd13\000\002\001\ufd20\000\002\001\ufd1f\000" +
    "\006\004\040\u0187\045\001\002\000\002\001\ufd1e\000\004" +
    "\u0137\053\001\002\000\006\004\040\u0187\045\001\002\000" +
    "\002\001\ufff2\000\002\001\uffe3\000\002\001\ufff3\000\002" +
    "\001\uffe8\000\006\004\073\043\075\001\ufd11\000\024\066" +
    "\063\175\067\261\071\327\057\u0120\070\u012b\055\u0151\103" +
    "\u0167\066\u018d\106\001\uffe0\000\006\u0151\103\u018d\106\001" +
    "\uffe0\000\002\001\uffe7\000\006\004\073\043\075\001\002" +
    "\000\002\001\uffea\000\002\001\uffe2\000\002\001\uffe4\000" +
    "\002\001\uffe6\000\002\001\uffe5\000\002\001\uffef\000\002" +
    "\001\ufd0e\000\002\001\ufd10\000\002\001\ufd0d\000\006\004" +
    "\073\043\075\001\uffee\000\002\001\ufd0f\000\002\001\ufff0" +
    "\000\004\227\121\001\002\000\002\001\uffdf\000\002\001" +
    "\ufd2d\000\010\247\111\u010c\112\u0114\113\001\002\000\006" +
    "\u0151\103\u018d\106\001\uffe1\000\002\001\ufd2c\000\002\001" +
    "\uffde\000\002\001\uffdd\000\002\001\uffdc\000\004\u0139\115" +
    "\001\ufd32\000\004\u0165\114\001\002\000\002\001\uffda\000" +
    "\006\u015a\117\u015b\120\001\002\000\002\001\uffdb\000\002" +
    "\001\ufd34\000\002\001\ufd33\000\010\004\040\u0151\016\u0187" +
    "\045\001\ufe75\000\002\001\uffd9\000\002\001\uffd8\000\002" +
    "\001\uffeb\000\006\041\130\u011f\135\001\002\000\002\001" +
    "\ufefa\000\010\213\u0245\263\u0248\u013e\u0249\001\uff06\000\006" +
    "\041\130\u011f\135\001\002\000\002\001\uff05\000\002\001" +
    "\uff08\000\006\060\u0234\167\u0233\001\ufd4f\000\004\231\137" +
    "\001\002\000\002\001\ufe98\000\026\223\201\227\u0207\243" +
    "\u0209\245\u0200\343\u0201\344\176\377\u01ff\u014f\u01f6\u0151\u01fd" +
    "\u0182\u020b\001\uff18\000\032\004\040\016\166\041\167\065" +
    "\145\232\160\257\154\302\152\u010e\150\u0137\147\u0156\140" +
    "\u016d\163\u0187\045\001\002\000\004\041\u01f2\001\002\000" +
    "\002\001\ufef2\000\002\001\ufef4\000\002\001\ufef1\000\002" +
    "\001\ufef3\000\006\004\040\u0187\045\001\002\000\002\001" +
    "\ufef7\000\004\041\u01d2\001\002\000\002\001\ufed3\000\032" +
    "\004\040\016\166\041\167\065\145\232\160\257\154\302" +
    "\152\u010e\150\u0137\147\u0156\140\u016d\163\u0187\045\001\ufef9" +
    "\000\002\001\ufed4\000\002\001\ufeee\000\002\001\ufed5\000" +
    "\002\001\ufedb\000\002\001\ufd1d\000\004\347\u01b9\001\ufd3c" +
    "\000\004\347\u01b9\001\ufd3c\000\002\001\ufed9\000\004\043" +
    "\u01b6\001\ufeb9\000\004\271\u01b4\001\002\000\002\001\ufeda" +
    "\000\002\001\ufef5\000\002\001\ufef0\000\020\041\173\232" +
    "\160\257\154\302\152\u010e\150\u011f\135\u016d\163\001\002" +
    "\000\002\001\ufedd\000\004\042\u01b3\001\002\000\004\042" +
    "\u01b2\001\002\000\020\041\173\232\160\257\154\302\152" +
    "\u010e\150\u011f\135\u016d\163\001\002\000\004\042\175\001" +
    "\002\000\006\223\201\344\176\001\ufeff\000\004\101\234" +
    "\001\002\000\002\001\ufefc\000\006\223\201\344\176\001" +
    "\uff00\000\004\226\205\001\002\000\002\001\ufefb\000\002" +
    "\001\uff04\000\002\001\ufefe\000\016\006\210\007\207\011" +
    "\213\045\217\u0179\ufe65\u017e\ufe65\001\ufd45\000\002\001\ufd59" +
    "\000\002\001\ufd27\000\002\001\ufd28\000\012\021\227\022" +
    "\226\023\231\024\230\001\002\000\004\010\225\001\ufd14" +
    "\000\004\004\223\001\002\000\002\001\ufe66\000\004\u017e" +
    "\221\001\ufd30\000\002\001\ufd58\000\002\001\ufd46\000\004" +
    "\u0179\222\001\002\000\002\001\ufd31\000\002\001\ufe67\000" +
    "\002\001\ufd26\000\002\001\ufd29\000\002\001\ufd15\000\002" +
    "\001\ufd6f\000\002\001\ufd72\000\002\001\ufd70\000\002\001" +
    "\ufd71\000\002\001\ufd73\000\002\001\ufefd\000\112\004\040" +
    "\006\210\007\207\011\213\013\302\014\304\015\303\017" +
    "\270\020\271\025\267\026\276\041\320\045\217\106\246" +
    "\141\323\142\260\143\325\144\254\145\242\146\256\147" +
    "\314\154\263\250\253\320\247\321\255\324\241\325\262" +
    "\326\252\344\310\u011b\315\u0146\321\u0157\313\u0175\245\u017a" +
    "\305\u017b\324\u0187\045\001\ufd45\000\002\001\ufe2c\000\002" +
    "\001\ufe02\000\002\001\ufdfd\000\002\001\ufe6f\000\002\001" +
    "\ufe32\000\002\001\ufe28\000\100\064\u0188\114\u0192\115\u0189" +
    "\116\u0187\117\u01a2\156\u018d\161\u018f\204\u019b\217\u0186\236" +
    "\u018c\277\u0195\315\u0184\317\u0196\342\u019c\351\u0194\352\u019e" +
    "\362\u01a1\366\u0193\u0100\u019f\u0103\u019d\u0113\u0190\u0115\u0183\u0118" +
    "\u018a\u0121\u018b\u0122\u0185\u0128\u019a\u0142\u0191\u015d\u0197\u016f\u018e" +
    "\u0186\u0198\u0187\u01a0\001\002\000\004\043\u0181\001\ufe70\000" +
    "\004\u011e\u0180\001\002\000\110\004\040\006\210\007\207" +
    "\011\213\013\302\014\304\015\303\017\270\020\271\025" +
    "\267\026\276\041\320\045\217\106\246\141\323\142\260" +
    "\143\325\144\254\145\242\146\256\147\314\154\263\250" +
    "\253\320\247\321\255\324\241\325\262\326\252\u011b\315" +
    "\u0146\321\u014e\u0107\u0157\313\u017a\305\u017b\324\u0187\045\001" +
    "\ufd45\000\002\001\ufe2d\000\002\001\ufdfc\000\002\001\ufd77" +
    "\000\002\001\ufe82\000\002\001\ufe30\000\002\001\ufe29\000" +
    "\002\001\ufe2f\000\002\001\ufe27\000\002\001\ufdfb\000\002" +
    "\001\ufe2a\000\002\001\ufdf7\000\004\u0145\u0106\001\002\000" +
    "\002\001\ufe31\000\002\001\ufe6a\000\002\001\ufe46\000\004" +
    "\u0174\u0103\001\ufd47\000\002\001\ufd6e\000\002\001\ufe42\000" +
    "\002\001\ufe41\000\002\001\ufdf5\000\016\022\372\040\376" +
    "\044\373\045\374\047\u0100\050\377\001\ufe03\000\002\001" +
    "\ufd75\000\004\041\330\001\002\000\002\001\ufd6d\000\002" +
    "\001\ufe45\000\004\227\362\001\002\000\002\001\ufdf6\000" +
    "\002\001\ufd74\000\002\001\ufe43\000\002\001\ufe44\000\004" +
    "\u0145\361\001\002\000\002\001\ufe73\000\006\u0159\356\u015e" +
    "\357\001\ufe6b\000\004\336\353\001\002\000\004\041\330" +
    "\001\002\000\020\154\263\250\253\320\247\321\255\324" +
    "\241\u011b\315\u0157\313\001\ufdf3\000\002\001\ufe33\000\002" +
    "\001\ufe26\000\002\001\ufe2e\000\002\001\ufd78\000\002\001" +
    "\ufd76\000\106\004\040\006\210\007\207\011\213\013\302" +
    "\014\304\015\303\017\270\020\271\025\267\026\276\041" +
    "\320\045\217\106\246\141\323\142\260\143\325\144\254" +
    "\145\242\146\256\147\314\154\263\250\253\320\247\321" +
    "\255\324\241\325\262\326\252\u011b\315\u0146\321\u0157\313" +
    "\u017a\305\u017b\324\u0187\045\001\ufd45\000\004\041\330\001" +
    "\002\000\002\001\ufdfa\000\002\001\ufd55\000\002\001\ufe83" +
    "\000\002\001\ufe25\000\002\001\ufdfe\000\002\001\ufe40\000" +
    "\012\042\ufe3c\047\340\060\334\167\332\001\ufe35\000\002" +
    "\001\ufe3f\000\002\001\ufe36\000\002\001\ufe3b\000\002\001" +
    "\ufe37\000\106\004\040\006\210\007\207\011\213\013\302" +
    "\014\304\015\303\017\270\020\271\025\267\026\276\041" +
    "\320\045\217\106\246\141\323\142\260\143\325\144\254" +
    "\145\242\146\256\147\314\154\263\250\253\320\247\321" +
    "\255\324\241\325\262\326\252\u011b\315\u0146\321\u0157\313" +
    "\u017a\305\u017b\324\u0187\045\001\ufd45\000\004\043\342\001" +
    "\ufe3d\000\004\042\341\001\002\000\002\001\ufe38\000\002" +
    "\001\ufe3e\000\010\047\340\060\334\167\332\001\ufe35\000" +
    "\002\001\ufe3a\000\002\001\ufe39\000\004\042\346\001\002" +
    "\000\020\154\263\250\253\320\247\321\255\324\241\u011b" +
    "\315\u0157\313\001\ufdf3\000\002\001\ufdf4\000\002\001\ufdf9" +
    "\000\002\001\ufdf8\000\002\001\ufe47\000\002\001\002\000" +
    "\002\001\ufe71\000\002\001\ufe6c\000\002\001\ufe69\000\002" +
    "\001\ufe68\000\002\001\ufe6d\000\002\001\ufe85\000\012\004" +
    "\040\013\363\021\364\u0187\045\001\002\000\002\001\ufd22" +
    "\000\002\001\ufd23\000\002\001\ufe86\000\002\001\ufe81\000" +
    "\002\001\ufd24\000\002\001\ufe34\000\106\004\040\006\210" +
    "\007\207\011\213\013\302\014\304\015\303\017\270\020" +
    "\271\025\267\026\276\041\320\045\217\106\246\141\323" +
    "\142\260\143\325\144\254\145\242\146\256\147\314\154" +
    "\263\250\253\320\247\321\255\324\241\325\262\326\252" +
    "\u011b\315\u0146\321\u0157\313\u017a\305\u017b\324\u0187\045\001" +
    "\ufd45\000\002\001\ufdff\000\002\001\ufd99\000\002\001\ufd98" +
    "\000\002\001\ufe01\000\002\001\ufd95\000\002\001\ufd97\000" +
    "\002\001\ufd96\000\002\001\ufe00\000\010\006\210\007\207" +
    "\011\213\001\ufd2a\000\002\001\ufd48\000\002\001\ufd2b\000" +
    "\002\001\ufd25\000\002\001\ufe84\000\002\001\ufdec\000\004" +
    "\u014e\u0116\001\002\000\002\001\ufdf1\000\002\001\ufdee\000" +
    "\004\u014e\u0107\001\ufdef\000\004\200\u010e\001\ufde4\000\002" +
    "\001\ufdf0\000\106\004\040\006\210\007\207\011\213\013" +
    "\302\014\304\015\303\017\270\020\271\025\267\026\276" +
    "\041\320\045\217\106\246\141\323\142\260\143\325\144" +
    "\254\145\242\146\256\147\314\154\263\250\253\320\247" +
    "\321\255\324\241\325\262\326\252\u011b\315\u0146\321\u0157" +
    "\313\u017a\305\u017b\324\u0187\045\001\ufd45\000\004\206\u0110" +
    "\001\002\000\002\001\ufdf2\000\002\001\ufde5\000\002\001" +
    "\ufde3\000\002\001\ufded\000\002\001\ufde8\000\004\u014e\u0116" +
    "\001\ufde9\000\106\004\040\006\210\007\207\011\213\013" +
    "\302\014\304\015\303\017\270\020\271\025\267\026\276" +
    "\041\320\045\217\106\246\141\323\142\260\143\325\144" +
    "\254\145\242\146\256\147\314\154\263\250\253\320\247" +
    "\321\255\324\241\325\262\326\252\u011b\315\u0146\321\u0157" +
    "\313\u017a\305\u017b\324\u0187\045\001\ufd45\000\004\u0138\u0118" +
    "\001\002\000\106\004\040\006\210\007\207\011\213\013" +
    "\302\014\304\015\303\017\270\020\271\025\267\026\276" +
    "\041\320\045\217\106\246\141\323\142\260\143\325\144" +
    "\254\145\242\146\256\147\314\154\263\250\253\320\247" +
    "\321\255\324\241\325\262\326\252\u011b\315\u0146\321\u0157" +
    "\313\u017a\305\u017b\324\u0187\045\001\ufd45\000\002\001\ufde6" +
    "\000\002\001\ufde7\000\114\004\040\006\210\007\207\011" +
    "\213\013\302\014\304\015\303\017\270\020\271\025\267" +
    "\026\276\041\u0124\045\217\106\246\141\323\142\260\143" +
    "\325\144\254\145\242\146\256\147\314\154\263\215\u0122" +
    "\250\253\320\247\321\255\324\241\325\262\326\252\331" +
    "\u011f\u011b\315\u0146\321\u0153\u011d\u0157\313\u017a\305\u017b\324" +
    "\u0187\045\001\ufd45\000\006\062\u0172\345\u0174\001\ufdeb\000" +
    "\004\041\u017a\001\002\000\002\001\ufdc2\000\112\004\040" +
    "\006\210\007\207\011\213\013\302\014\304\015\303\017" +
    "\270\020\271\025\267\026\276\041\u0124\045\217\106\246" +
    "\141\323\142\260\143\325\144\254\145\242\146\256\147" +
    "\314\154\263\215\u0122\250\253\320\247\321\255\324\241" +
    "\325\262\326\252\u011b\315\u0146\321\u0153\u011d\u0157\313\u017a" +
    "\305\u017b\324\u0187\045\001\ufd45\000\002\001\ufdbe\000\002" +
    "\001\ufddd\000\004\041\u0176\001\002\000\002\001\ufde2\000" +
    "\114\004\040\006\210\007\207\011\213\013\302\014\304" +
    "\015\303\017\270\020\271\025\267\026\276\041\u0124\045" +
    "\217\106\246\141\323\142\260\143\325\144\254\145\242" +
    "\146\256\147\314\154\263\215\u0122\250\253\320\247\321" +
    "\255\324\241\325\262\326\252\331\u011f\u011b\315\u0146\321" +
    "\u0153\u011d\u0157\313\u017a\305\u017b\324\u0187\045\001\ufd45\000" +
    "\004\u0181\u016d\001\ufdba\000\002\001\ufdbf\000\002\001\ufdde" +
    "\000\036\027\u0141\030\u0134\031\u012d\032\u012c\033\u0139\034" +
    "\u0138\035\u0130\036\u013c\037\u0136\077\u0133\253\u012f\266\u012b" +
    "\303\u0140\331\u0132\001\002\000\002\001\ufde0\000\002\001" +
    "\ufde1\000\004\331\u0165\001\ufd41\000\002\001\ufda1\000\002" +
    "\001\ufd9b\000\002\001\ufddf\000\004\041\u015f\001\002\000" +
    "\002\001\ufd9e\000\114\004\040\006\210\007\207\011\213" +
    "\013\302\014\304\015\303\017\270\020\271\025\267\026" +
    "\276\041\u0153\045\217\060\u0154\063\u014f\106\246\141\323" +
    "\142\260\143\325\144\254\145\242\146\256\147\314\154" +
    "\263\250\253\320\247\321\255\324\241\325\262\326\252" +
    "\u011b\315\u0126\u014e\u0146\321\u0157\313\u017a\305\u017b\324\u0187" +
    "\045\001\ufd45\000\012\077\u0133\253\u012f\266\u012b\303\u0140" +
    "\001\002\000\106\004\040\006\210\007\207\011\213\013" +
    "\302\014\304\015\303\017\270\020\271\025\267\026\276" +
    "\041\320\045\217\106\246\141\323\142\260\143\325\144" +
    "\254\145\242\146\256\147\314\154\263\250\253\320\247" +
    "\321\255\324\241\325\262\326\252\u011b\315\u0146\321\u0157" +
    "\313\u017a\305\u017b\324\u0187\045\001\ufd45\000\002\001\ufd9d" +
    "\000\002\001\ufdd9\000\002\001\ufd9a\000\002\001\ufdce\000" +
    "\002\001\ufd9f\000\002\001\ufda0\000\002\001\ufda3\000\002" +
    "\001\ufdd8\000\002\001\ufd9c\000\002\001\ufdd0\000\002\001" +
    "\ufdd2\000\002\001\ufdd1\000\012\006\210\007\207\011\213" +
    "\013\u0144\001\002\000\002\001\ufda2\000\002\001\ufdcd\000" +
    "\002\001\ufdcf\000\002\001\ufd7a\000\002\001\ufd79\000\004" +
    "\211\u0147\001\ufebe\000\012\006\210\007\207\011\213\013" +
    "\u0144\001\002\000\002\001\ufdc5\000\002\001\ufebf\000\004" +
    "\062\u014b\001\002\000\106\004\040\006\210\007\207\011" +
    "\213\013\302\014\304\015\303\017\270\020\271\025\267" +
    "\026\276\041\320\045\217\106\246\141\323\142\260\143" +
    "\325\144\254\145\242\146\256\147\314\154\263\250\253" +
    "\320\247\321\255\324\241\325\262\326\252\u011b\315\u0146" +
    "\321\u0157\313\u017a\305\u017b\324\u0187\045\001\ufd45\000\002" +
    "\001\ufdcc\000\002\001\ufdd3\000\002\001\ufd37\000\002\001" +
    "\ufd36\000\002\001\ufdd7\000\002\001\ufdd6\000\106\004\040" +
    "\006\210\007\207\011\213\013\302\014\304\015\303\017" +
    "\270\020\271\025\267\026\276\041\u015e\045\217\106\246" +
    "\141\323\142\260\143\325\144\254\145\242\146\256\147" +
    "\314\154\263\250\253\320\247\321\255\324\241\325\262" +
    "\326\252\u011b\315\u0146\321\u0157\313\u017a\305\u017b\324\u0187" +
    "\045\001\ufd45\000\110\004\040\006\210\007\207\011\213" +
    "\013\302\014\304\015\303\017\270\020\271\025\267\026" +
    "\276\041\u0158\045\217\106\246\141\323\142\260\143\325" +
    "\144\254\145\242\146\256\147\314\154\263\250\253\320" +
    "\247\321\255\324\241\325\262\326\252\u011b\315\u011f\135" +
    "\u0146\321\u0157\313\u017a\305\u017b\324\u0187\045\001\ufd45\000" +
    "\002\001\ufd35\000\004\042\346\001\ufddb\000\006\042\u015b" +
    "\043\u015a\001\002\000\004\042\u0159\001\002\000\110\004" +
    "\040\006\210\007\207\011\213\013\302\014\304\015\303" +
    "\017\270\020\271\025\267\026\276\041\u0158\045\217\106" +
    "\246\141\323\142\260\143\325\144\254\145\242\146\256" +
    "\147\314\154\263\250\253\320\247\321\255\324\241\325" +
    "\262\326\252\u011b\315\u011f\135\u0146\321\u0157\313\u017a\305" +
    "\u017b\324\u0187\045\001\ufd45\000\002\001\ufdd4\000\106\004" +
    "\040\006\210\007\207\011\213\013\302\014\304\015\303" +
    "\017\270\020\271\025\267\026\276\041\320\045\217\106" +
    "\246\141\323\142\260\143\325\144\254\145\242\146\256" +
    "\147\314\154\263\250\253\320\247\321\255\324\241\325" +
    "\262\326\252\u011b\315\u0146\321\u0157\313\u017a\305\u017b\324" +
    "\u0187\045\001\ufd45\000\002\001\ufddc\000\002\001\ufdda\000" +
    "\002\001\ufdd5\000\106\004\040\006\210\007\207\011\213" +
    "\013\302\014\304\015\303\017\270\020\271\025\267\026" +
    "\276\041\320\045\217\106\246\141\323\142\260\143\325" +
    "\144\254\145\242\146\256\147\314\154\263\250\253\320" +
    "\247\321\255\324\241\325\262\326\252\u011b\315\u0146\321" +
    "\u0157\313\u017a\305\u017b\324\u0187\045\001\ufd45\000\110\004" +
    "\040\006\210\007\207\011\213\013\302\014\304\015\303" +
    "\017\270\020\271\025\267\026\276\041\u0158\045\217\106" +
    "\246\141\323\142\260\143\325\144\254\145\242\146\256" +
    "\147\314\154\263\250\253\320\247\321\255\324\241\325" +
    "\262\326\252\u011b\315\u011f\135\u0146\321\u0157\313\u017a\305" +
    "\u017b\324\u0187\045\001\ufd45\000\002\001\ufddb\000\004\043" +
    "\u015a\001\ufdc7\000\002\001\ufdc6\000\004\042\u0164\001\002" +
    "\000\002\001\ufdc8\000\002\001\ufd42\000\006\167\u0167\333" +
    "\u0168\001\002\000\004\231\u016a\001\002\000\002\001\ufdc9" +
    "\000\002\001\ufdcb\000\106\004\040\006\210\007\207\011" +
    "\213\013\302\014\304\015\303\017\270\020\271\025\267" +
    "\026\276\041\u015e\045\217\106\246\141\323\142\260\143" +
    "\325\144\254\145\242\146\256\147\314\154\263\250\253" +
    "\320\247\321\255\324\241\325\262\326\252\u011b\315\u0146" +
    "\321\u0157\313\u017a\305\u017b\324\u0187\045\001\ufd45\000\002" +
    "\001\ufdca\000\002\001\ufdbc\000\012\006\210\007\207\011" +
    "\213\045\217\001\ufd45\000\002\001\ufdbb\000\010\042\u0173" +
    "\062\u0172\345\u0174\001\002\000\006\042\346\043\ufddb\001" +
    "\ufdde\000\114\004\040\006\210\007\207\011\213\013\302" +
    "\014\304\015\303\017\270\020\271\025\267\026\276\041" +
    "\u0124\045\217\106\246\141\323\142\260\143\325\144\254" +
    "\145\242\146\256\147\314\154\263\215\u0122\250\253\320" +
    "\247\321\255\324\241\325\262\326\252\331\u011f\u011b\315" +
    "\u0146\321\u0153\u011d\u0157\313\u017a\305\u017b\324\u0187\045\001" +
    "\ufd45\000\002\001\ufd7c\000\002\001\ufdbd\000\002\001\ufd7b" +
    "\000\002\001\ufdc1\000\006\041\130\u011f\135\001\002\000" +
    "\004\042\u0178\001\002\000\002\001\ufdc4\000\002\001\ufdc0" +
    "\000\006\004\073\043\075\001\002\000\010\004\073\042" +
    "\u017c\043\075\001\002\000\002\001\ufdc3\000\004\u0138\u017e" +
    "\001\002\000\106\004\040\006\210\007\207\011\213\013" +
    "\302\014\304\015\303\017\270\020\271\025\267\026\276" +
    "\041\320\045\217\106\246\141\323\142\260\143\325\144" +
    "\254\145\242\146\256\147\314\154\263\250\253\320\247" +
    "\321\255\324\241\325\262\326\252\u011b\315\u0146\321\u0157" +
    "\313\u017a\305\u017b\324\u0187\045\001\ufd45\000\002\001\ufdea" +
    "\000\002\001\ufe72\000\106\004\040\006\210\007\207\011" +
    "\213\013\302\014\304\015\303\017\270\020\271\025\267" +
    "\026\276\041\320\045\217\106\246\141\323\142\260\143" +
    "\325\144\254\145\242\146\256\147\314\154\263\250\253" +
    "\320\247\321\255\324\241\325\262\326\252\u011b\315\u0146" +
    "\321\u0157\313\u017a\305\u017b\324\u0187\045\001\ufd45\000\002" +
    "\001\ufe6e\000\002\001\ufe0e\000\004\u013c\u01b1\001\002\000" +
    "\002\001\ufe07\000\004\322\u01b0\001\002\000\002\001\ufe21" +
    "\000\004\203\u01ae\001\002\000\002\001\ufe23\000\002\001" +
    "\ufe0d\000\002\001\ufe0c\000\002\001\ufe1a\000\004\322\u01ad" +
    "\001\002\000\002\001\ufe1f\000\002\001\ufe1c\000\004\u018c" +
    "\u01ac\001\002\000\002\001\ufe06\000\002\001\ufe22\000\002" +
    "\001\ufe12\000\002\001\ufe14\000\002\001\ufe19\000\002\001" +
    "\ufe17\000\004\u0112\u01aa\001\002\000\004\u0158\u01a9\001\ufe04" +
    "\000\002\001\ufe2b\000\002\001\ufe0b\000\004\361\u01a7\001" +
    "\002\000\004\246\u01a6\001\002\000\004\055\u01a5\001\002" +
    "\000\004\362\u01a4\001\002\000\004\052\u01a3\001\002\000" +
    "\002\001\ufe0a\000\002\001\ufe13\000\002\001\ufe20\000\002" +
    "\001\ufe11\000\002\001\ufe15\000\002\001\ufe10\000\002\001" +
    "\ufe16\000\002\001\ufe08\000\002\001\ufe09\000\002\001\ufe05" +
    "\000\004\322\u01ab\001\002\000\002\001\ufe1d\000\002\001" +
    "\ufe0f\000\002\001\ufe1e\000\004\u0119\u01af\001\002\000\002" +
    "\001\ufe24\000\002\001\ufe1b\000\002\001\ufe18\000\002\001" +
    "\ufedc\000\002\001\ufee8\000\032\004\040\016\166\041\167" +
    "\065\145\232\160\257\154\302\152\u010e\150\u0137\147\u0156" +
    "\140\u016d\163\u0187\045\001\002\000\002\001\ufed8\000\032" +
    "\004\040\016\166\041\167\065\145\232\160\257\154\302" +
    "\152\u010e\150\u0137\147\u0156\140\u016d\163\u0187\045\001\002" +
    "\000\032\004\040\016\166\041\167\065\145\232\160\257" +
    "\154\302\152\u010e\150\u0137\147\u0156\140\u016d\163\u0187\045" +
    "\001\ufef8\000\002\001\ufef6\000\002\001\ufd3d\000\004\271" +
    "\u01bb\001\002\000\032\004\040\016\166\041\167\065\145" +
    "\232\160\257\154\302\152\u010e\150\u0137\147\u0156\140\u016d" +
    "\163\u0187\045\001\002\000\034\004\040\016\166\041\167" +
    "\065\145\232\160\257\154\302\152\340\u01bd\u010e\150\u0137" +
    "\147\u0156\140\u016d\163\u0187\045\001\002\000\012\004\040" +
    "\014\u01c5\041\u01c3\u0187\045\001\002\000\002\001\ufecb\000" +
    "\002\001\ufd1c\000\002\001\ufed2\000\002\001\ufed0\000\004" +
    "\027\u01ca\001\ufecc\000\012\004\040\014\u01c5\041\u01c3\u0187" +
    "\045\001\002\000\004\062\u01c6\001\ufed7\000\002\001\ufeca" +
    "\000\012\004\040\014\u01c5\041\u01c3\u0187\045\001\002\000" +
    "\002\001\ufed1\000\006\042\u01c9\062\u01c6\001\002\000\002" +
    "\001\ufecf\000\010\004\040\014\u01c5\u0187\045\001\002\000" +
    "\002\001\ufece\000\002\001\ufecd\000\004\271\u01ce\001\002" +
    "\000\032\004\040\016\166\041\167\065\145\232\160\257" +
    "\154\302\152\u010e\150\u0137\147\u0156\140\u016d\163\u0187\045" +
    "\001\002\000\034\004\040\016\166\041\167\065\145\232" +
    "\160\257\154\302\152\340\u01d0\u010e\150\u0137\147\u0156\140" +
    "\u016d\163\u0187\045\001\002\000\114\004\040\006\210\007" +
    "\207\011\213\013\302\014\304\015\303\017\270\020\271" +
    "\025\267\026\276\041\u0124\045\217\106\246\141\323\142" +
    "\260\143\325\144\254\145\242\146\256\147\314\154\263" +
    "\215\u0122\250\253\320\247\321\255\324\241\325\262\326" +
    "\252\331\u011f\u011b\315\u0146\321\u0153\u011d\u0157\313\u017a\305" +
    "\u017b\324\u0187\045\001\ufd45\000\006\062\u0172\345\u0174\001" +
    "\ufed6\000\016\004\040\041\130\225\u01db\337\u01d6\u011f\135" +
    "\u0187\045\001\002\000\004\u0137\u01e9\001\002\000\002\001" +
    "\ufeea\000\002\001\ufeec\000\002\001\ufd49\000\002\001\ufeeb" +
    "\000\004\042\u01e8\001\002\000\002\001\ufee9\000\110\004" +
    "\040\006\210\007\207\011\213\013\302\014\304\015\303" +
    "\017\270\020\271\025\267\026\276\041\320\045\217\106" +
    "\246\141\323\142\260\143\325\144\254\145\242\146\256" +
    "\147\314\154\263\250\253\320\247\321\255\324\241\325" +
    "\262\326\252\u011b\315\u0137\u01de\u0146\321\u0157\313\u017a\305" +
    "\u017b\324\u0187\045\001\ufd45\000\002\001\ufd4a\000\006\043" +
    "\u01e1\104\u01e2\001\ufec3\000\002\001\ufee3\000\006\004\040" +
    "\u0187\045\001\002\000\002\001\ufee6\000\002\001\ufee4\000" +
    "\110\004\040\006\210\007\207\011\213\013\302\014\304" +
    "\015\303\017\270\020\271\025\267\026\276\041\320\045" +
    "\217\106\246\141\323\142\260\143\325\144\254\145\242" +
    "\146\256\147\314\154\263\250\253\320\247\321\255\324" +
    "\241\325\262\326\252\u011b\315\u0137\u01de\u0146\321\u0157\313" +
    "\u017a\305\u017b\324\u0187\045\001\ufd45\000\004\046\u01e4\001" +
    "\ufd43\000\002\001\ufee7\000\002\001\ufd44\000\012\006\210" +
    "\007\207\011\213\045\217\001\ufd45\000\002\001\ufec4\000" +
    "\002\001\ufee5\000\002\001\ufeed\000\004\041\u01ea\001\002" +
    "\000\012\162\035\262\023\u0141\034\u0163\033\001\002\000" +
    "\002\001\ufee1\000\002\001\ufedf\000\004\042\u01f0\001\002" +
    "\000\002\001\ufee0\000\002\001\ufede\000\002\001\ufee2\000" +
    "\002\001\ufeef\000\006\004\073\043\075\001\002\000\010" +
    "\004\073\042\u01f4\043\075\001\002\000\002\001\ufec9\000" +
    "\002\001\uff1a\000\002\001\ufe5f\000\002\001\uff10\000\002" +
    "\001\uff0a\000\002\001\uff0c\000\002\001\uff0d\000\002\001" +
    "\uff11\000\002\001\uff13\000\012\u016e\u0228\u017f\u0227\u0180\u0226" +
    "\u0188\u022a\001\002\000\002\001\uff0b\000\004\021\u0225\001" +
    "\002\000\114\004\040\006\210\007\207\011\213\013\302" +
    "\014\304\015\303\017\270\020\271\025\267\026\276\041" +
    "\u0124\045\217\106\246\141\323\142\260\143\325\144\254" +
    "\145\242\146\256\147\314\154\263\215\u0122\250\253\320" +
    "\247\321\255\324\241\325\262\326\252\331\u011f\u011b\315" +
    "\u0146\321\u0153\u011d\u0157\313\u017a\305\u017b\324\u0187\045\001" +
    "\ufd45\000\004\227\u0221\001\002\000\026\223\201\227\u0207" +
    "\243\u0209\245\u0200\343\u0201\344\176\377\u01ff\u014f\u01f6\u0151" +
    "\u01fd\u0182\u020b\001\uff19\000\002\001\uff17\000\002\001\uff14" +
    "\000\002\001\uff0f\000\002\001\uff15\000\010\223\u0216\u0141" +
    "\u0217\u0166\u0215\001\002\000\002\001\uff0e\000\004\101\u020e" +
    "\001\002\000\002\001\uff12\000\004\u0162\u020c\001\002\000" +
    "\004\153\u020d\001\002\000\002\001\ufe4d\000\006\004\040" +
    "\u0187\045\001\002\000\006\004\040\u0187\045\001\ufe5b\000" +
    "\004\043\u0212\001\ufe5a\000\002\001\ufe58\000\006\004\040" +
    "\u0187\045\001\002\000\002\001\ufe57\000\004\043\u0212\001" +
    "\ufe59\000\002\001\ufe63\000\002\001\ufe62\000\004\336\u021b" +
    "\001\ufe53\000\004\u0179\u0219\001\002\000\002\001\ufe64\000" +
    "\002\001\ufe55\000\006\004\040\u0187\045\001\002\000\004" +
    "\043\u021e\001\ufe54\000\002\001\ufe52\000\006\004\040\u0187" +
    "\045\001\002\000\002\001\ufe51\000\002\001\uff16\000\004" +
    "\021\u0222\001\002\000\004\u017e\221\001\ufd30\000\002\001" +
    "\ufe48\000\006\062\u0172\345\u0174\001\ufe56\000\002\001\ufd5c" +
    "\000\002\001\ufe4b\000\002\001\ufe4c\000\002\001\ufe4a\000" +
    "\002\001\ufe4e\000\002\001\ufe49\000\114\004\040\006\210" +
    "\007\207\011\213\013\302\014\304\015\303\017\270\020" +
    "\271\025\267\026\276\041\u0124\045\217\106\246\141\323" +
    "\142\260\143\325\144\254\145\242\146\256\147\314\154" +
    "\263\215\u0122\250\253\320\247\321\255\324\241\325\262" +
    "\326\252\331\u011f\u011b\315\u0146\321\u0153\u011d\u0157\313\u017a" +
    "\305\u017b\324\u0187\045\001\ufd45\000\006\062\u0172\345\u0174" +
    "\001\ufe5d\000\002\001\ufe5e\000\102\064\u0188\114\u0192\115" +
    "\u0189\116\u0187\117\u01a2\156\u018d\161\u018f\204\u019b\217\u0186" +
    "\236\u018c\277\u0195\315\u0184\317\u0196\336\u0230\342\u019c\351" +
    "\u0194\352\u019e\362\u01a1\366\u0193\u0100\u019f\u0103\u019d\u0113\u0190" +
    "\u0115\u0183\u0118\u018a\u0121\u018b\u0122\u0185\u0128\u019a\u0142\u0191\u015d" +
    "\u0197\u016f\u018e\u0186\u0198\u0187\u01a0\001\002\000\006\004\040" +
    "\u0187\045\001\002\000\002\001\ufd54\000\002\001\ufe5c\000" +
    "\112\004\040\006\210\007\207\011\213\012\u0237\013\302" +
    "\014\304\015\303\017\270\020\271\025\267\026\276\041" +
    "\320\045\217\047\u0238\106\246\141\323\142\260\143\325" +
    "\144\254\145\242\146\256\147\314\154\263\250\253\320" +
    "\247\321\255\324\241\325\262\326\252\u011b\315\u0146\321" +
    "\u0157\313\u017a\305\u017b\324\u0187\045\001\ufd45\000\002\001" +
    "\ufd50\000\002\001\ufd51\000\002\001\ufe93\000\002\001\ufe99" +
    "\000\002\001\ufe92\000\002\001\ufe97\000\006\004\ufd4d\065" +
    "\u0240\001\ufe8f\000\004\043\u023c\001\ufe96\000\002\001\ufe95" +
    "\000\110\004\040\006\210\007\207\011\213\012\u0237\013" +
    "\302\014\304\015\303\017\270\020\271\025\267\026\276" +
    "\041\320\045\217\106\246\141\323\142\260\143\325\144" +
    "\254\145\242\146\256\147\314\154\263\250\253\320\247" +
    "\321\255\324\241\325\262\326\252\u011b\315\u0146\321\u0157" +
    "\313\u017a\305\u017b\324\u0187\045\001\ufd45\000\002\001\ufe94" +
    "\000\002\001\ufe90\000\004\004\u0242\001\002\000\002\001" +
    "\ufd4e\000\002\001\ufe91\000\002\001\ufe8e\000\010\213\u0245" +
    "\263\u0248\u013e\u0249\001\uff07\000\002\001\uff03\000\002\001" +
    "\ufe7b\000\010\060\u0154\063\u014f\u0126\u014e\001\ufd38\000\002" +
    "\001\uff09\000\002\001\ufe7a\000\002\001\ufe7c\000\006\041" +
    "\130\u011f\135\001\002\000\002\001\uff01\000\002\001\ufd39" +
    "\000\002\001\ufe7d\000\002\001\uff02\000\002\001\uffe9\000" +
    "\002\001\uffec\000\002\001\uffed\000\006\004\073\043\075" +
    "\001\ufd12\000\002\001\ufd21\000\006\004\u0255\231\u0257\001" +
    "\002\000\002\001\uffd3\000\002\001\uffd5\000\006\004\040" +
    "\u0187\045\001\002\000\002\001\uffd4\000\006\004\040\u0187" +
    "\045\001\002\000\004\227\u025b\001\uff37\000\004\u017c\u0285" +
    "\001\002\000\006\004\040\u0187\045\001\uff35\000\004\u0161" +
    "\u025f\001\uff33\000\002\001\uff36\000\002\001\uff34\000\004" +
    "\u0123\u0262\001\002\000\012\377\u01ff\u014f\u01f6\u0151\u01fd\u0182" +
    "\u020b\001\uff20\000\010\004\040\041\u0265\u0187\045\001\002" +
    "\000\002\001\uff31\000\004\043\u027c\001\uff32\000\006\004" +
    "\040\u0187\045\001\002\000\004\027\u0268\001\002\000\002" +
    "\001\uff2e\000\112\004\040\006\210\007\207\011\213\013" +
    "\302\014\304\015\303\017\270\020\271\025\267\026\276" +
    "\041\u026e\045\217\106\246\141\323\142\260\143\325\144" +
    "\254\145\242\146\256\147\314\154\263\160\u026d\250\253" +
    "\320\247\321\255\324\241\325\262\326\252\333\u026c\u011b" +
    "\315\u0146\321\u0157\313\u017a\305\u017b\324\u0187\045\001\ufd45" +
    "\000\002\001\uff2a\000\002\001\uff2f\000\002\001\uff24\000" +
    "\002\001\uff22\000\002\001\uff23\000\114\004\040\006\210" +
    "\007\207\011\213\013\302\014\304\015\303\017\270\020" +
    "\271\025\267\026\276\041\u0158\045\217\106\246\141\323" +
    "\142\260\143\325\144\254\145\242\146\256\147\314\154" +
    "\263\160\u026d\250\253\320\247\321\255\324\241\325\262" +
    "\326\252\333\u026c\u011b\315\u011f\135\u0146\321\u0157\313\u017a" +
    "\305\u017b\324\u0187\045\001\ufd45\000\002\001\uff27\000\002" +
    "\001\uff26\000\004\043\u0275\001\uff28\000\004\042\346\001" +
    "\uff24\000\004\042\u0274\001\002\000\002\001\uff29\000\112" +
    "\004\040\006\210\007\207\011\213\013\302\014\304\015" +
    "\303\017\270\020\271\025\267\026\276\041\320\045\217" +
    "\106\246\141\323\142\260\143\325\144\254\145\242\146" +
    "\256\147\314\154\263\160\u026d\250\253\320\247\321\255" +
    "\324\241\325\262\326\252\333\u026c\u011b\315\u0146\321\u0157" +
    "\313\u017a\305\u017b\324\u0187\045\001\ufd45\000\002\001\uff25" +
    "\000\006\042\u027a\043\u0279\001\002\000\002\001\uff2c\000" +
    "\006\004\040\u0187\045\001\002\000\002\001\uff2d\000\002" +
    "\001\uff2b\000\010\004\040\041\u0265\u0187\045\001\002\000" +
    "\002\001\uff30\000\012\377\u01ff\u014f\u01f6\u0151\u01fd\u0182\u020b" +
    "\001\uff21\000\002\001\uff1b\000\002\001\uff1c\000\002\001" +
    "\uff39\000\002\001\uff1d\000\002\001\uff1f\000\002\001\uff1e" +
    "\000\004\336\u0286\001\002\000\004\u016c\u0287\001\002\000" +
    "\004\231\u0288\001\002\000\012\006\210\007\207\011\213" +
    "\013\u0289\001\002\000\002\001\ufd57\000\002\001\ufd56\000" +
    "\004\u0139\u028c\001\002\000\012\006\210\007\207\011\213" +
    "\013\u0289\001\002\000\002\001\uff38\000\004\264\u028f\001" +
    "\002\000\006\004\040\u0187\045\001\002\000\002\001\uffbb" +
    "\000\004\u017c\u02be\001\002\000\010\004\ufd4d\065\u0240\u0187" +
    "\ufd4d\001\ufd6a\000\002\001\ufeb0\000\006\004\040\u0187\045" +
    "\001\002\000\004\u0123\u0298\001\ufd61\000\002\001\ufd6b\000" +
    "\004\u014f\u01f6\001\ufe60\000\002\001\ufd60\000\002\001\ufd62" +
    "\000\010\004\040\041\u029d\u0187\045\001\002\000\004\027" +
    "\u02b5\001\002\000\002\001\ufd91\000\006\004\040\u0187\045" +
    "\001\002\000\004\027\u02a5\001\002\000\004\043\u02a3\001" +
    "\ufd94\000\002\001\ufd93\000\002\001\ufd90\000\002\001\ufd5f" +
    "\000\010\004\040\041\u029d\u0187\045\001\002\000\002\001" +
    "\ufd92\000\004\041\u02a7\001\002\000\002\001\ufd89\000\106" +
    "\004\040\006\210\007\207\011\213\013\302\014\304\015" +
    "\303\017\270\020\271\025\267\026\276\041\320\045\217" +
    "\106\246\141\323\142\260\143\325\144\254\145\242\146" +
    "\256\147\314\154\263\250\253\320\247\321\255\324\241" +
    "\325\262\326\252\u011b\315\u0146\321\u0157\313\u017a\305\u017b" +
    "\324\u0187\045\001\ufd45\000\002\001\ufd83\000\006\042\u02ae" +
    "\043\u02ad\001\002\000\002\001\ufd84\000\002\001\ufd86\000" +
    "\002\001\ufd8a\000\106\004\040\006\210\007\207\011\213" +
    "\013\302\014\304\015\303\017\270\020\271\025\267\026" +
    "\276\041\320\045\217\106\246\141\323\142\260\143\325" +
    "\144\254\145\242\146\256\147\314\154\263\250\253\320" +
    "\247\321\255\324\241\325\262\326\252\u011b\315\u0146\321" +
    "\u0157\313\u017a\305\u017b\324\u0187\045\001\ufd45\000\002\001" +
    "\ufd87\000\002\001\ufd85\000\006\042\u02b3\043\u02b2\001\002" +
    "\000\002\001\ufd1b\000\006\004\040\u0187\045\001\002\000" +
    "\002\001\ufd88\000\002\001\ufd1a\000\106\004\040\006\210" +
    "\007\207\011\213\013\302\014\304\015\303\017\270\020" +
    "\271\025\267\026\276\041\320\045\217\106\246\141\323" +
    "\142\260\143\325\144\254\145\242\146\256\147\314\154" +
    "\263\250\253\320\247\321\255\324\241\325\262\326\252" +
    "\u011b\315\u0146\321\u0157\313\u017a\305\u017b\324\u0187\045\001" +
    "\ufd45\000\002\001\ufd8f\000\002\001\ufe61\000\006\u0151\u01fd" +
    "\u0182\u020b\001\ufe4f\000\002\001\ufe50\000\002\001\ufd5d\000" +
    "\002\001\ufd5e\000\002\001\uffd7\000\002\001\ufd69\000\004" +
    "\336\u02bf\001\002\000\004\u016c\u02c0\001\002\000\004\231" +
    "\u02c1\001\002\000\106\004\040\006\210\007\207\011\213" +
    "\013\302\014\304\015\303\017\270\020\271\025\267\026" +
    "\276\041\320\045\217\106\246\141\323\142\260\143\325" +
    "\144\254\145\242\146\256\147\314\154\263\250\253\320" +
    "\247\321\255\324\241\325\262\326\252\u011b\315\u0146\321" +
    "\u0157\313\u017a\305\u017b\324\u0187\045\001\ufd45\000\004\u0139" +
    "\u02c3\001\002\000\106\004\040\006\210\007\207\011\213" +
    "\013\302\014\304\015\303\017\270\020\271\025\267\026" +
    "\276\041\320\045\217\106\246\141\323\142\260\143\325" +
    "\144\254\145\242\146\256\147\314\154\263\250\253\320" +
    "\247\321\255\324\241\325\262\326\252\u011b\315\u0146\321" +
    "\u0157\313\u017a\305\u017b\324\u0187\045\001\ufd45\000\002\001" +
    "\ufeae\000\002\001\uffb9\000\006\004\040\u0187\045\001\002" +
    "\000\002\001\ufd5d\000\002\001\uffb8\000\032\006\210\007" +
    "\207\011\213\041\u02d8\132\u02d3\141\u02d0\145\u02cc\204\u02d5" +
    "\362\u02d7\u0118\u02ce\u0168\u02cd\u0186\u02d4\001\002\000\002\001" +
    "\uff60\000\002\001\uffb6\000\002\001\uffaf\000\004\u0186\u03a8" +
    "\001\002\000\002\001\uffb1\000\004\043\u039f\001\uffa2\000" +
    "\002\001\uffad\000\002\001\uff62\000\004\027\u0309\001\002" +
    "\000\002\001\uffb5\000\002\001\uffa5\000\002\001\uffab\000" +
    "\002\001\uff5f\000\002\001\uffb3\000\002\001\002\000\004" +
    "\042\u02da\001\002\000\004\027\u02db\001\002\000\004\041" +
    "\u02dc\001\002\000\112\004\040\006\210\007\207\011\213" +
    "\013\302\014\304\015\303\017\270\020\271\025\267\026" +
    "\276\041\320\045\217\106\246\141\323\142\260\143\325" +
    "\144\254\145\242\146\256\147\314\154\263\160\u02e0\250" +
    "\253\320\247\321\255\324\241\325\262\326\252\333\u02df" +
    "\u011b\315\u0146\321\u0157\313\u017a\305\u017b\324\u0187\045\001" +
    "\ufd45\000\002\001\uff5a\000\002\001\uff5c\000\002\001\uff59" +
    "\000\002\001\uff58\000\006\042\u02e3\043\u02e2\001\002\000" +
    "\112\004\040\006\210\007\207\011\213\013\302\014\304" +
    "\015\303\017\270\020\271\025\267\026\276\041\320\045" +
    "\217\106\246\141\323\142\260\143\325\144\254\145\242" +
    "\146\256\147\314\154\263\160\u02e0\250\253\320\247\321" +
    "\255\324\241\325\262\326\252\333\u02df\u011b\315\u0146\321" +
    "\u0157\313\u017a\305\u017b\324\u0187\045\001\ufd45\000\002\001" +
    "\uff5d\000\002\001\uff5b\000\004\027\u02e6\001\002\000\030" +
    "\004\040\006\210\007\207\011\213\013\u02eb\141\u02e9\362" +
    "\u02f1\u0122\u02e8\u0134\u02f0\u0142\u02ea\u0187\045\001\002\000\002" +
    "\001\uff9f\000\002\001\ufe8d\000\004\352\u02f4\001\ufd3a\000" +
    "\002\001\ufe8c\000\002\001\uff9c\000\002\001\uffb2\000\002" +
    "\001\uffa1\000\002\001\ufd5a\000\002\001\ufd5b\000\004\362" +
    "\u02f2\001\002\000\002\001\uff9d\000\002\001\uffa0\000\004" +
    "\362\u02f5\001\002\000\002\001\ufd3b\000\002\001\uff9e\000" +
    "\004\361\u02f7\001\002\000\002\001\uffaa\000\004\027\u02fa" +
    "\001\ufd4b\000\012\006\210\007\207\011\213\013\u0144\001" +
    "\002\000\002\001\ufd4c\000\002\001\uffa9\000\004\u0151\u02fe" +
    "\001\ufec1\000\002\001\ufec2\000\004\246\u0300\001\002\000" +
    "\002\001\ufec0\000\012\006\210\007\207\011\213\013\u0144" +
    "\001\002\000\002\001\ufea5\000\004\u0158\u0303\001\002\000" +
    "\002\001\uffa4\000\004\027\u02fa\001\ufd4b\000\012\006\210" +
    "\007\207\011\213\013\u0144\001\002\000\002\001\uffa3\000" +
    "\014\004\040\006\210\007\207\011\213\u0187\045\001\002" +
    "\000\002\001\uffb4\000\106\004\040\006\210\007\207\011" +
    "\213\013\302\014\304\015\303\017\270\020\271\025\267" +
    "\026\276\041\320\045\217\106\246\141\323\142\260\143" +
    "\325\144\254\145\242\146\256\147\314\154\263\250\253" +
    "\320\247\321\255\324\241\325\262\326\252\u011b\315\u0146" +
    "\321\u0157\313\u017a\305\u017b\324\u0187\045\001\ufd45\000\002" +
    "\001\uff5e\000\052\064\u0310\156\u0312\161\u0313\203\u0315\217" +
    "\u030e\236\u0311\300\u031c\304\u0316\315\u030d\342\u031a\351\u0318" +
    "\352\u031e\366\u0317\u0100\u031f\u0103\u031d\u0113\u0314\u0115\u030c\u0118" +
    "\u030f\u0128\u031b\u015d\u0319\001\002\000\002\001\uff6e\000\002" +
    "\001\uff74\000\002\001\uff7c\000\002\001\uff6a\000\004\203" +
    "\u037c\001\002\000\002\001\uff7a\000\002\001\uff82\000\002" +
    "\001\uff7e\000\002\001\uff88\000\002\001\uff94\000\004\300" +
    "\u035e\001\002\000\002\001\uff70\000\002\001\uff72\000\002" +
    "\001\uff80\000\002\001\uff91\000\002\001\uff6c\000\002\001" +
    "\uff76\000\002\001\uff85\000\002\001\uff8e\000\002\001\uff8b" +
    "\000\002\001\uffac\000\004\052\u0322\001\002\000\002\001" +
    "\uff8a\000\004\027\u02fa\001\ufd4b\000\020\006\210\007\207" +
    "\011\213\060\u0326\177\u032a\202\u0325\330\u0327\001\002\000" +
    "\004\u0151\u032b\001\ufd52\000\002\001\uff54\000\002\001\uff57" +
    "\000\002\001\uff89\000\002\001\uff53\000\002\001\uff55\000" +
    "\004\221\u032d\001\002\000\002\001\uff56\000\002\001\ufd53" +
    "\000\004\362\u032f\001\002\000\002\001\uff8d\000\004\027" +
    "\u02fa\001\ufd4b\000\020\006\210\007\207\011\213\013\u0144" +
    "\141\323\u0122\u0332\u0168\u0334\001\002\000\002\001\uff65\000" +
    "\004\043\u033a\001\uff8c\000\002\001\uff64\000\004\352\u02f4" +
    "\001\ufd3a\000\002\001\uff68\000\002\001\uff66\000\004\362" +
    "\u0339\001\002\000\002\001\uff63\000\020\006\210\007\207" +
    "\011\213\013\u0144\141\323\u0122\u0332\u0168\u0334\001\002\000" +
    "\002\001\uff67\000\004\055\u033d\001\002\000\002\001\uff84" +
    "\000\004\027\u02fa\001\ufd4b\000\014\006\210\007\207\011" +
    "\213\045\217\063\u0340\001\ufd45\000\002\001\uff51\000\002" +
    "\001\uff83\000\002\001\uff52\000\004\027\u02fa\001\ufd4b\000" +
    "\012\006\210\007\207\011\213\013\u0144\001\002\000\002" +
    "\001\uff75\000\004\027\u0347\001\002\000\016\006\210\007" +
    "\207\011\213\013\u0144\u0122\u02e8\u0142\u02ea\001\002\000\002" +
    "\001\ufe9f\000\002\001\uff6b\000\002\001\ufe8b\000\002\001" +
    "\ufea0\000\004\246\u034d\001\002\000\002\001\uff90\000\004" +
    "\027\u034f\001\002\000\012\006\210\007\207\011\213\013" +
    "\u0144\001\002\000\002\001\uff8f\000\004\u0112\u0352\001\002" +
    "\000\004\322\u0353\001\002\000\004\027\u02fa\001\ufd4b\000" +
    "\014\006\210\007\207\011\213\013\u0144\u0111\u0357\001\002" +
    "\000\002\001\uff7f\000\002\001\ufe9d\000\002\001\ufe9e\000" +
    "\004\027\u0359\001\002\000\016\006\210\007\207\011\213" +
    "\013\u0144\u0122\u02e8\u0142\u02ea\001\002\000\002\001\uff71\000" +
    "\004\027\u035c\001\002\000\012\006\210\007\207\011\213" +
    "\013\u0144\001\002\000\002\001\uff6f\000\002\001\uff78\000" +
    "\004\027\u02fa\001\ufd4b\000\012\006\210\007\207\011\213" +
    "\013\u0144\001\002\000\002\001\uff77\000\004\u0119\u0363\001" +
    "\002\000\002\001\uff93\000\004\027\u0365\001\002\000\012" +
    "\006\210\007\207\011\213\013\u0144\001\002\000\002\001" +
    "\uff92\000\004\u018c\u0368\001\002\000\002\001\uff87\000\004" +
    "\027\u02fa\001\ufd4b\000\012\006\210\007\207\011\213\013" +
    "\u0144\001\002\000\002\001\uff86\000\004\027\u02fa\001\ufd4b" +
    "\000\012\006\210\007\207\011\213\013\u0144\001\002\000" +
    "\002\001\uff7d\000\004\322\u0370\001\002\000\004\027\u02fa" +
    "\001\ufd4b\000\016\006\210\007\207\011\213\057\u0375\165" +
    "\u0372\166\u0374\001\002\000\002\001\ufec6\000\002\001\uff81" +
    "\000\002\001\ufec7\000\002\001\ufec8\000\002\001\ufec5\000" +
    "\004\027\u02fa\001\ufd4b\000\006\327\u037b\u018e\u037a\001\002" +
    "\000\002\001\uff79\000\002\001\ufe8a\000\002\001\ufe89\000" +
    "\002\001\uff97\000\004\u0119\u037e\001\002\000\002\001\uff96" +
    "\000\004\027\u0380\001\002\000\012\006\210\007\207\011" +
    "\213\013\u0144\001\002\000\002\001\uff95\000\004\027\u02fa" +
    "\001\ufd4b\000\024\004\040\006\210\007\207\011\213\013" +
    "\u0144\160\u0386\u0122\u02e8\u0142\u02ea\u0187\045\001\002\000\002" +
    "\001\ufe9c\000\002\001\ufe9a\000\002\001\ufe9b\000\002\001" +
    "\uff69\000\004\322\u0389\001\002\000\004\027\u02fa\001\ufd4b" +
    "\000\016\006\210\007\207\011\213\217\u038e\327\u037b\u018e" +
    "\u037a\001\002\000\002\001\ufebd\000\002\001\uff7b\000\002" +
    "\001\ufebb\000\002\001\ufebc\000\004\u0137\u0391\001\ufd2e\000" +
    "\004\u013c\u0392\001\002\000\002\001\ufd2f\000\004\227\u0393" +
    "\001\002\000\004\342\u039b\001\002\000\004\027\u02fa\001" +
    "\ufd4b\000\016\006\210\007\207\011\213\060\u0397\330\u0399" +
    "\u0134\u0396\001\002\000\002\001\ufea2\000\002\001\ufea4\000" +
    "\002\001\uff73\000\002\001\ufea3\000\002\001\ufea1\000\002" +
    "\001\ufd3e\000\004\027\u039d\001\002\000\012\006\210\007" +
    "\207\011\213\013\u0144\001\002\000\002\001\uff6d\000\012" +
    "\006\210\007\207\011\213\041\u02d8\001\002\000\002\001" +
    "\uff61\000\004\027\u02fa\001\ufd4b\000\024\004\040\006\210" +
    "\007\207\011\213\013\u03a4\160\u03a5\u0122\u02e8\u0142\u02ea\u0187" +
    "\045\001\002\000\002\001\uff9a\000\002\001\uff98\000\002" +
    "\001\uff99\000\002\001\uff9b\000\002\001\uffb0\000\002\001" +
    "\uffa8\000\004\u0158\u03aa\001\002\000\002\001\uffa7\000\004" +
    "\027\u02fa\001\ufd4b\000\012\006\210\007\207\011\213\013" +
    "\u0144\001\002\000\002\001\uffa6\000\004\027\u02fa\001\ufd4b" +
    "\000\024\004\040\006\210\007\207\011\213\013\u03a4\160" +
    "\u03a5\u0122\u02e8\u0142\u02ea\u0187\045\001\002\000\002\001\uffae" +
    "\000\004\264\u03b2\001\002\000\006\004\040\u0187\045\001" +
    "\002\000\002\001\uffce\000\002\001\000\000\002\001\ufe74" +
    "\000\006\004\073\043\075\001\uffbd\000\004\153\u03b8\001" +
    "\002\000\004\077\u03b9\001\002\000\004\u0137\u03ba\001\002" +
    "\000\006\004\040\u0187\045\001\002\000\004\062\u03bc\001" +
    "\002\000\006\004\040\u0187\045\001\002\000\002\001\uffd1" +
    "\000\002\001\uff4f\000\010\213\u0245\263\u0248\u013e\u0249\001" +
    "\uff50\000\004\264\u03c2\001\002\000\004\231\137\001\002" +
    "\000\014\004\040\006\210\007\207\011\213\u0187\045\001" +
    "\002\000\002\001\ufd19\000\002\001\uff4b\000\004\043\u03c7" +
    "\001\uff4c\000\002\001\ufd18\000\014\004\040\006\210\007" +
    "\207\011\213\u0187\045\001\002\000\002\001\uff4a\000\026" +
    "\223\201\227\u03d6\243\u0209\245\u0200\343\u0201\344\176\377" +
    "\u01ff\u014f\u01f6\u0151\u01fd\u0182\u020b\001\uff47\000\002\001\uff3d" +
    "\000\002\001\uff4d\000\002\001\uff3f\000\002\001\uff41\000" +
    "\002\001\uff3c\000\002\001\uff42\000\002\001\uff3e\000\026" +
    "\223\201\227\u03d6\243\u0209\245\u0200\343\u0201\344\176\377" +
    "\u01ff\u014f\u01f6\u0151\u01fd\u0182\u020b\001\uff48\000\002\001\uff43" +
    "\000\002\001\uff46\000\002\001\uff44\000\002\001\uff3b\000" +
    "\014\004\040\223\u03de\u0141\u03dc\u0166\u03d8\u0187\045\001\002" +
    "\000\002\001\uff40\000\004\u0179\u03e8\001\002\000\002\001" +
    "\ufeab\000\002\001\ufead\000\002\001\ufeac\000\010\004\ufd3f" +
    "\336\u03e2\u0187\ufd3f\001\ufea8\000\002\001\ufeba\000\004\u0179" +
    "\u03df\001\002\000\002\001\ufea6\000\002\001\ufeaa\000\006" +
    "\004\040\u0187\045\001\002\000\002\001\ufd40\000\004\043" +
    "\u03e6\001\ufea9\000\002\001\ufd80\000\002\001\ufd7e\000\006" +
    "\004\040\u0187\045\001\002\000\002\001\ufd7f\000\002\001" +
    "\ufea7\000\002\001\uff45\000\004\u011f\135\001\002\000\002" +
    "\001\uff4e\000\006\004\073\043\075\001\uffba\000\006\004" +
    "\040\u0187\045\001\002\000\004\u0161\u03f2\001\ufd67\000\002" +
    "\001\uffcd\000\004\u0164\u0410\001\uffc7\000\002\001\ufd68\000" +
    "\004\004\u03f3\001\002\000\050\111\u03fd\112\u03fc\171\u040d" +
    "\u015d\u0404\u016b\u03f8\u016f\u0400\u0170\u0407\u0171\u03fe\u0172\u0402\u0173" +
    "\u03fa\u0176\u0409\u0177\u03fb\u0178\u040a\u017d\u040b\u0183\u0405\u0186\u0406" +
    "\u0189\u0403\u018a\u0401\u018b\u03f7\001\002\000\002\001\ufd65\000" +
    "\004\004\u03f3\001\ufd66\000\002\001\ufd64\000\002\001\002" +
    "\000\002\001\002\000\002\001\ufdb3\000\002\001\002\000" +
    "\002\001\ufdb7\000\002\001\002\000\002\001\002\000\002" +
    "\001\002\000\002\001\ufd63\000\002\001\ufdb5\000\002\001" +
    "\002\000\002\001\002\000\002\001\002\000\002\001\002" +
    "\000\002\001\ufdb9\000\002\001\ufdb4\000\002\001\002\000" +
    "\002\001\002\000\002\001\ufdb8\000\002\001\002\000\002" +
    "\001\ufdb6\000\002\001\ufdb2\000\002\001\002\000\002\001" +
    "\ufdb1\000\010\041\130\u011f\135\u0145\u0415\001\002\000\004" +
    "\u0142\u0411\001\002\000\004\u0146\u0412\001\002\000\002\001" +
    "\uffc8\000\002\001\uffc6\000\002\001\uffc3\000\004\041\u0418" +
    "\001\002\000\002\001\uffc5\000\002\001\uffd0\000\112\004" +
    "\040\006\210\007\207\011\213\013\302\014\304\015\303" +
    "\017\270\020\271\025\267\026\276\041\320\045\217\106" +
    "\246\141\323\142\260\143\325\144\254\145\242\146\256" +
    "\147\314\154\263\160\u041d\250\253\320\247\321\255\324" +
    "\241\325\262\326\252\333\u041c\u011b\315\u0146\321\u0157\313" +
    "\u017a\305\u017b\324\u0187\045\001\ufd45\000\006\042\u041f\043" +
    "\u041e\001\002\000\002\001\uffbe\000\002\001\uffc2\000\002" +
    "\001\uffbf\000\002\001\uffc0\000\112\004\040\006\210\007" +
    "\207\011\213\013\302\014\304\015\303\017\270\020\271" +
    "\025\267\026\276\041\320\045\217\106\246\141\323\142" +
    "\260\143\325\144\254\145\242\146\256\147\314\154\263" +
    "\160\u041d\250\253\320\247\321\255\324\241\325\262\326" +
    "\252\333\u041c\u011b\315\u0146\321\u0157\313\u017a\305\u017b\324" +
    "\u0187\045\001\ufd45\000\002\001\uffc4\000\002\001\uffc1\000" +
    "\006\042\u0424\043\u0423\001\002\000\002\001\uffca\000\006" +
    "\004\040\u0187\045\001\002\000\002\001\uffcb\000\002\001" +
    "\uffc9" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0423\000\046\002\017\003\014\004\021\005\003\006" +
    "\016\007\011\010\007\011\027\012\031\013\025\014\012" +
    "\015\023\032\005\254\006\255\020\337\004\352\030\354" +
    "\013\001\001\000\002\001\001\000\006\340\u03ed\342\u03ee" +
    "\001\001\000\006\u0150\u03eb\u0152\073\001\001\000\012\034" +
    "\u03be\035\u03bd\162\u03bf\163\132\001\001\000\002\001\001" +
    "\000\004\u0155\u03b6\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\u0150\u03b5\u0152\073\001\001\000\002\001\001" +
    "\000\004\u011b\u03b4\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\u0156\u03b0" +
    "\001\001\000\002\001\001\000\004\u0159\u02c8\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\250\u0291\251\u0292\001\001\000\002\001\001\000\004\u0157" +
    "\u028d\001\001\000\004\u0180\u0258\001\001\000\004\u0154\u0253" +
    "\001\001\000\004\u0153\036\001\001\000\014\016\040\017" +
    "\041\021\043\u0121\045\u0126\046\001\001\000\004\u0127\u0252" +
    "\001\001\000\002\001\001\000\010\020\055\023\060\024" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\u0121" +
    "\045\u0126\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\u0121\045\u0126\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\u0150\u0251\u0151\u0250\u0152\073\001\001\000\016\022\u024f\024" +
    "\u024e\026\100\027\104\030\101\u013a\103\001\001\000\014" +
    "\022\077\026\100\027\104\030\101\u013a\103\001\001\000" +
    "\002\001\001\000\006\u0150\075\u0152\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\u0152\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\107\001" +
    "\001\000\006\030\106\u013a\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\u0137\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\025\123\137\122\254\124\255\020" +
    "\u0121\045\u0126\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\121\125\123\126\132\131" +
    "\133\130\162\133\163\132\001\001\000\002\001\001\000" +
    "\014\124\u0246\125\u0242\126\u0243\175\u0249\176\u0245\001\001" +
    "\000\016\121\173\123\126\132\131\133\130\162\133\163" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\u0129\u0231\001\001\000\004\207\135\001\001\000\002\001" +
    "\001\000\040\134\u01f4\135\u0201\136\u0202\142\u01f6\154\u01f8" +
    "\173\u01f7\211\u0205\213\u0203\216\u01fb\217\u01f9\220\u0204\223" +
    "\u0209\232\u01fa\237\u0207\253\u01fd\001\001\000\042\256\161" +
    "\257\150\260\141\262\145\264\164\265\143\273\142\274" +
    "\140\275\167\276\156\277\154\300\163\301\160\u0121\045" +
    "\u0126\155\u013f\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\u0121\045\u0126\u01f0\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\260\141\262\u01b7" +
    "\264\164\265\143\273\142\274\140\275\167\276\156\277" +
    "\154\300\163\301\160\u0121\045\u0126\155\u013f\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\u0135\u01cc\001\001" +
    "\000\004\u0135\u01b9\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\121\170\123\126\132\131\133" +
    "\130\162\133\163\132\274\171\275\167\276\156\277\154" +
    "\300\163\301\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\121\173\123\126\132\131" +
    "\133\130\162\133\163\132\274\171\275\167\276\156\277" +
    "\154\300\163\301\160\001\001\000\002\001\001\000\014" +
    "\127\202\130\177\131\203\223\176\232\201\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\131\232\223\176" +
    "\232\201\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\233\214\371\205" +
    "\u012e\210\u0149\215\u014a\211\u014d\213\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\372\231" +
    "\001\001\000\004\u0127\223\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\u0138\217\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\100\102\236\103\264\105\276\106\274\107\310\115" +
    "\247\116\234\203\321\204\277\224\305\225\243\226\237" +
    "\227\306\355\263\356\272\360\235\361\325\362\311\367" +
    "\271\370\315\371\250\373\316\374\273\u0111\256\u0121\045" +
    "\u0126\300\u012e\210\u0146\242\u0149\265\u014a\211\u014b\260\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\117\u0198\001\001\000\002\001\001\000\002\001\001" +
    "\000\102\102\236\103\264\105\276\106\274\107\310\115" +
    "\247\116\234\203\321\204\277\355\u0107\356\272\360\235" +
    "\361\325\362\311\367\271\370\315\371\250\373\316\374" +
    "\273\u0111\256\u0112\u010b\u0114\u0108\u0115\u010a\u0116\u0109\u0117\u010c" +
    "\u0121\045\u0126\300\u012e\210\u0146\242\u0149\265\u014a\211\u014b" +
    "\260\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\u0139\u0101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\357\374\364\370" +
    "\001\001\000\002\001\001\000\004\110\367\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\230\357" +
    "\231\354\001\001\000\002\001\001\000\004\110\351\001" +
    "\001\000\006\106\346\363\350\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\070\102\236\103\264\105\276\106\274" +
    "\107\310\115\247\116\234\203\321\204\277\355\344\356" +
    "\272\360\235\361\325\362\311\367\271\370\315\371\250" +
    "\373\316\374\273\u0111\256\u0121\045\u0126\300\u012e\210\u0146" +
    "\242\u0149\265\u014a\211\u014b\260\001\001\000\006\104\326" +
    "\110\330\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\111\336\112\335\113\332\114\334\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\070\102\236\103\264\105\276\106" +
    "\274\107\310\115\247\116\234\203\321\204\277\355\343" +
    "\356\272\360\235\361\325\362\311\367\271\370\315\371" +
    "\250\373\316\374\273\u0111\256\u0121\045\u0126\300\u012e\210" +
    "\u0146\242\u0149\265\u014a\211\u014b\260\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\113\342\114\334\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\106\346\363\347" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\u0110\353\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\u0121\045" +
    "\u0126\366\u0142\364\u0145\365\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\064\102\236\103\264\105" +
    "\276\106\274\107\310\115\247\116\234\203\321\204\277" +
    "\360\u0100\361\325\362\311\367\271\370\315\371\250\373" +
    "\316\374\273\u0111\256\u0121\045\u0126\300\u012e\210\u0146\242" +
    "\u0149\265\u014a\211\u014b\260\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\u0148\u0104\u0149\u0103\u014a\211\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\u0182\u011a\001\001\000\006\u0118\u0114\u0119\u0113" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\u0116" +
    "\u0112\001\001\000\004\u0113\u010e\001\001\000\002\001\001" +
    "\000\072\102\236\103\264\105\276\106\274\107\310\115" +
    "\247\116\234\203\321\204\277\355\u0111\356\272\360\235" +
    "\361\325\362\311\367\271\370\315\371\250\373\316\374" +
    "\273\u0111\256\u011a\u0110\u0121\045\u0126\300\u012e\210\u0146\242" +
    "\u0149\265\u014a\211\u014b\260\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\u0119\u0119\001\001\000" +
    "\070\102\236\103\264\105\276\106\274\107\310\115\247" +
    "\116\234\203\321\204\277\355\u0116\356\272\360\235\361" +
    "\325\362\311\367\271\370\315\371\250\373\316\374\273" +
    "\u0111\256\u0121\045\u0126\300\u012e\210\u0146\242\u0149\265\u014a" +
    "\211\u014b\260\001\001\000\002\001\001\000\072\102\236" +
    "\103\264\105\276\106\274\107\310\115\247\116\234\203" +
    "\321\204\277\355\u0111\356\272\360\235\361\325\362\311" +
    "\367\271\370\315\371\250\373\316\374\273\u0111\256\u011a" +
    "\u0118\u0121\045\u0126\300\u012e\210\u0146\242\u0149\265\u014a\211" +
    "\u014b\260\001\001\000\002\001\001\000\002\001\001\000" +
    "\114\102\236\103\264\105\276\106\274\107\310\115\247" +
    "\116\234\203\321\204\277\307\u0124\310\u011f\311\u0122\312" +
    "\u0129\313\u0128\314\u0127\316\u0120\334\u011b\335\u011d\336\u0125" +
    "\355\u0126\356\272\360\235\361\325\362\311\367\271\370" +
    "\315\371\250\373\316\374\273\u0111\256\u0121\045\u0126\300" +
    "\u012e\210\u0146\242\u0149\265\u014a\211\u014b\260\001\001\000" +
    "\006\u0132\u0170\u0183\u017c\001\001\000\002\001\001\000\002" +
    "\001\001\000\110\102\236\103\264\105\276\106\274\107" +
    "\310\115\247\116\234\203\321\204\277\307\u0124\310\u011f" +
    "\311\u0122\312\u0129\313\u0128\314\u0127\316\u0120\336\u0178\355" +
    "\u0126\356\272\360\235\361\325\362\311\367\271\370\315" +
    "\371\250\373\316\374\273\u0111\256\u0121\045\u0126\300\u012e" +
    "\210\u0146\242\u0149\265\u014a\211\u014b\260\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\116\102\236\103\264\105\276\106\274\107\310" +
    "\115\247\116\234\203\321\204\277\307\u0124\310\u011f\311" +
    "\u0122\312\u0129\313\u0128\314\u0127\316\u0120\317\u0155\334\u016e" +
    "\335\u011d\336\u0125\355\u016f\356\272\360\235\361\325\362" +
    "\311\367\271\370\315\371\250\373\316\374\273\u0111\256" +
    "\u0121\045\u0126\300\u012e\210\u0146\242\u0149\265\u014a\211\u014b" +
    "\260\001\001\000\004\333\u016b\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\315\u012d\320\u0134\321\u013a\323" +
    "\u013d\324\u013e\325\u013c\326\u0142\327\u0136\330\u0141\365\u0130" +
    "\366\u0139\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\u012a\u0165\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\100\102\236\103\264\105\276\106\274\107\310\115\247" +
    "\116\234\203\321\204\277\314\u0150\316\u0120\322\u014f\355" +
    "\u0126\356\272\360\235\361\325\362\311\367\271\370\315" +
    "\371\250\373\316\374\273\u0111\256\u0121\045\u0126\300\u012c" +
    "\u0151\u012e\210\u0146\242\u0149\265\u014a\211\u014b\260\001\001" +
    "\000\016\323\u014c\324\u013e\325\u013c\326\u0142\327\u0136\330" +
    "\u0141\001\001\000\070\102\236\103\264\105\276\106\274" +
    "\107\310\115\247\116\234\203\321\204\277\355\u0149\356" +
    "\272\360\235\361\325\362\311\367\271\370\315\371\250" +
    "\373\316\374\273\u0111\256\u0121\045\u0126\300\u012e\210\u0146" +
    "\242\u0149\265\u014a\211\u014b\260\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\u0149\u0144\u014a\211\u014e\u0145" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\150\u0147" +
    "\001\001\000\010\u0149\u0144\u014a\211\u014e\u0148\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\070" +
    "\102\236\103\264\105\276\106\274\107\310\115\247\116" +
    "\234\203\321\204\277\355\u014b\356\272\360\235\361\325" +
    "\362\311\367\271\370\315\371\250\373\316\374\273\u0111" +
    "\256\u0121\045\u0126\300\u012e\210\u0146\242\u0149\265\u014a\211" +
    "\u014b\260\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\074\102\236\103\264\105\276\106\274\107" +
    "\310\115\247\116\234\203\321\204\277\314\u015c\316\u0120" +
    "\355\u0126\356\272\360\235\361\325\362\311\367\271\370" +
    "\315\371\250\373\316\374\273\u0111\256\u0121\045\u0126\300" +
    "\u012e\210\u0146\242\u0149\265\u014a\211\u014b\260\001\001\000" +
    "\106\102\236\103\264\105\276\106\274\107\310\115\247" +
    "\116\234\121\u0156\123\126\132\131\133\130\162\133\163" +
    "\132\203\321\204\277\317\u0155\355\u0154\356\272\360\235" +
    "\361\325\362\311\367\271\370\315\371\250\373\316\374" +
    "\273\u0111\256\u0121\045\u0126\300\u012e\210\u0146\242\u0149\265" +
    "\u014a\211\u014b\260\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\104\102\236" +
    "\103\264\105\276\106\274\107\310\115\247\116\234\121" +
    "\173\123\126\132\131\133\130\162\133\163\132\203\321" +
    "\204\277\355\344\356\272\360\235\361\325\362\311\367" +
    "\271\370\315\371\250\373\316\374\273\u0111\256\u0121\045" +
    "\u0126\300\u012e\210\u0146\242\u0149\265\u014a\211\u014b\260\001" +
    "\001\000\002\001\001\000\070\102\236\103\264\105\276" +
    "\106\274\107\310\115\247\116\234\203\321\204\277\355" +
    "\u015b\356\272\360\235\361\325\362\311\367\271\370\315" +
    "\371\250\373\316\374\273\u0111\256\u0121\045\u0126\300\u012e" +
    "\210\u0146\242\u0149\265\u014a\211\u014b\260\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\072\102" +
    "\236\103\264\105\276\106\274\107\310\115\247\116\234" +
    "\203\321\204\277\317\u0155\355\u0154\356\272\360\235\361" +
    "\325\362\311\367\271\370\315\371\250\373\316\374\273" +
    "\u0111\256\u0121\045\u0126\300\u012e\210\u0146\242\u0149\265\u014a" +
    "\211\u014b\260\001\001\000\110\102\236\103\264\105\276" +
    "\106\274\107\310\115\247\116\234\121\u0161\123\126\132" +
    "\131\133\130\162\133\163\132\203\321\204\277\317\u0160" +
    "\332\u0162\355\u015f\356\272\360\235\361\325\362\311\367" +
    "\271\370\315\371\250\373\316\374\273\u0111\256\u0121\045" +
    "\u0126\300\u012e\210\u0146\242\u0149\265\u014a\211\u014b\260\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\331\u0168\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\074\102\236\103\264\105\276\106" +
    "\274\107\310\115\247\116\234\203\321\204\277\314\u016a" +
    "\316\u0120\355\u0126\356\272\360\235\361\325\362\311\367" +
    "\271\370\315\371\250\373\316\374\273\u0111\256\u0121\045" +
    "\u0126\300\u012e\210\u0146\242\u0149\265\u014a\211\u014b\260\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\371\205" +
    "\u012e\210\u0149\215\u014a\211\u014d\u016d\001\001\000\002\001" +
    "\001\000\004\u0132\u0170\001\001\000\002\001\001\000\112" +
    "\102\236\103\264\105\276\106\274\107\310\115\247\116" +
    "\234\203\321\204\277\307\u0124\310\u011f\311\u0122\312\u0129" +
    "\313\u0128\314\u0127\316\u0120\335\u0174\336\u0125\355\u0126\356" +
    "\272\360\235\361\325\362\311\367\271\370\315\371\250" +
    "\373\316\374\273\u0111\256\u0121\045\u0126\300\u012e\210\u0146" +
    "\242\u0149\265\u014a\211\u014b\260\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\121\u0176\123\126\132\131\133\130\162\133\163\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\u0150\u017a\u0152\073\001\001\000\004\u0152\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\072\102" +
    "\236\103\264\105\276\106\274\107\310\115\247\116\234" +
    "\203\321\204\277\355\u0111\356\272\360\235\361\325\362" +
    "\311\367\271\370\315\371\250\373\316\374\273\u0111\256" +
    "\u011a\u017e\u0121\045\u0126\300\u012e\210\u0146\242\u0149\265\u014a" +
    "\211\u014b\260\001\001\000\002\001\001\000\002\001\001" +
    "\000\074\102\236\103\264\105\276\106\274\107\310\115" +
    "\247\116\234\203\321\204\277\226\u0181\227\306\355\263" +
    "\356\272\360\235\361\325\362\311\367\271\370\315\371" +
    "\250\373\316\374\273\u0111\256\u0121\045\u0126\300\u012e\210" +
    "\u0146\242\u0149\265\u014a\211\u014b\260\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\120\u01a7\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\260\141\262\u01b4\264\164\265" +
    "\143\273\142\274\140\275\167\276\156\277\154\300\163" +
    "\301\160\u0121\045\u0126\155\u013f\152\001\001\000\002\001" +
    "\001\000\040\257\u01b6\260\141\262\145\264\164\265\143" +
    "\273\142\274\140\275\167\276\156\277\154\300\163\301" +
    "\160\u0121\045\u0126\155\u013f\152\001\001\000\036\260\141" +
    "\262\u01b7\264\164\265\143\273\142\274\140\275\167\276" +
    "\156\277\154\300\163\301\160\u0121\045\u0126\155\u013f\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\257\u01bb\260\141\262\145\264\164\265\143" +
    "\273\142\274\140\275\167\276\156\277\154\300\163\301" +
    "\160\u0121\045\u0126\155\u013f\152\001\001\000\036\260\141" +
    "\262\u01b7\264\164\265\143\273\142\274\140\275\167\276" +
    "\156\277\154\300\163\301\160\u0121\045\u0126\155\u013f\152" +
    "\001\001\000\020\302\u01c3\303\u01bf\305\u01c0\306\u01c1\u0121" +
    "\045\u0126\u01be\u0140\u01bd\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\304" +
    "\u01ca\001\001\000\020\302\u01c7\303\u01bf\305\u01c0\306\u01c1" +
    "\u0121\045\u0126\u01be\u0140\u01bd\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\303\u01c6\305\u01c0\306\u01c1\u0121\045" +
    "\u0126\u01be\u0140\u01bd\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\306\u01cb\u0121\045\u0126\u01be" +
    "\u0140\u01bd\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\257\u01ce\260\141\262\145\264\164" +
    "\265\143\273\142\274\140\275\167\276\156\277\154\300" +
    "\163\301\160\u0121\045\u0126\155\u013f\152\001\001\000\036" +
    "\260\141\262\u01b7\264\164\265\143\273\142\274\140\275" +
    "\167\276\156\277\154\300\163\301\160\u0121\045\u0126\155" +
    "\u013f\152\001\001\000\114\102\236\103\264\105\276\106" +
    "\274\107\310\115\247\116\234\203\321\204\277\307\u0124" +
    "\310\u011f\311\u0122\312\u0129\313\u0128\314\u0127\316\u0120\334" +
    "\u01d0\335\u011d\336\u0125\355\u0126\356\272\360\235\361\325" +
    "\362\311\367\271\370\315\371\250\373\316\374\273\u0111" +
    "\256\u0121\045\u0126\300\u012e\210\u0146\242\u0149\265\u014a\211" +
    "\u014b\260\001\001\000\004\u0132\u0170\001\001\000\034\121" +
    "\u01d4\123\126\132\131\133\130\162\133\163\132\261\u01d7" +
    "\263\u01d3\266\u01d8\270\u01d6\u0121\045\u0126\u01d9\u013b\u01d2\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\074\102\236\103\264\105\276\106\274" +
    "\107\310\115\247\116\234\203\321\204\277\271\u01db\272" +
    "\u01de\355\u01dc\356\272\360\235\361\325\362\311\367\271" +
    "\370\315\371\250\373\316\374\273\u0111\256\u0121\045\u0126" +
    "\300\u012e\210\u0146\242\u0149\265\u014a\211\u014b\260\001\001" +
    "\000\002\001\001\000\004\145\u01e2\001\001\000\002\001" +
    "\001\000\006\u0121\045\u0126\u01df\001\001\000\002\001\001" +
    "\000\002\001\001\000\072\102\236\103\264\105\276\106" +
    "\274\107\310\115\247\116\234\203\321\204\277\272\u01e6" +
    "\355\u01dc\356\272\360\235\361\325\362\311\367\271\370" +
    "\315\371\250\373\316\374\273\u0111\256\u0121\045\u0126\300" +
    "\u012e\210\u0146\242\u0149\265\u014a\211\u014b\260\001\001\000" +
    "\004\u0134\u01e4\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\371\205\u012e\210\u0149\215\u014a\211\u014d\u01e5\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\005\u01eb\007\u01ea\010\u01ee\015" +
    "\u01ed\267\u01ec\337\004\352\030\354\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\u0150\u01f2\u0152\073\001\001\000\004\u0152\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\u0181\u022a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\155\u0228\001\001\000\002\001\001\000\002\001" +
    "\001\000\114\102\236\103\264\105\276\106\274\107\310" +
    "\115\247\116\234\203\321\204\277\307\u0124\310\u011f\311" +
    "\u0122\312\u0129\313\u0128\314\u0127\316\u0120\334\u0223\335\u011d" +
    "\336\u0125\355\u0126\356\272\360\235\361\325\362\311\367" +
    "\271\370\315\371\250\373\316\374\273\u0111\256\u0121\045" +
    "\u0126\300\u012e\210\u0146\242\u0149\265\u014a\211\u014b\260\001" +
    "\001\000\002\001\001\000\034\136\u021f\142\u01f6\154\u01f8" +
    "\173\u01f7\211\u0205\213\u0203\216\u01fb\217\u01f9\220\u0204\223" +
    "\u0209\232\u01fa\237\u0207\253\u01fd\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\240\u0217\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\214\u020e\215\u020f\u0121\045\u0126\u0210" +
    "\001\001\000\010\215\u0213\u0121\045\u0126\u0210\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\u0121\045\u0126\u0212" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\221\u0219\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\222" +
    "\u021b\u0121\045\u0126\u01be\u0140\u021c\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\u0121\045\u0126\u01be\u0140\u021e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\u0138\u0222\001\001\000\002\001\001\000\004\u0132" +
    "\u0170\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\116\102\236\103\264\105\276\106\274\107\310" +
    "\115\247\116\234\203\321\204\277\212\u022c\307\u0124\310" +
    "\u011f\311\u0122\312\u0129\313\u0128\314\u0127\316\u0120\334\u022b" +
    "\335\u011d\336\u0125\355\u0126\356\272\360\235\361\325\362" +
    "\311\367\271\370\315\371\250\373\316\374\273\u0111\256" +
    "\u0121\045\u0126\300\u012e\210\u0146\u022d\u0149\265\u014a\211\u014b" +
    "\260\001\001\000\004\u0132\u0170\001\001\000\002\001\001" +
    "\000\006\117\u0198\u0147\u022e\001\001\000\006\u0121\045\u0126" +
    "\u0230\001\001\000\002\001\001\000\002\001\001\000\100" +
    "\102\236\103\264\105\276\106\274\107\310\115\247\116" +
    "\234\164\u0235\165\u0239\166\u023a\167\u0234\203\321\204\277" +
    "\355\u0238\356\272\360\235\361\325\362\311\367\271\370" +
    "\315\371\250\373\316\374\273\u0111\256\u0121\045\u0126\300" +
    "\u012e\210\u0146\242\u0149\265\u014a\211\u014b\260\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\170" +
    "\u0240\171\u023d\u0133\u023e\001\001\000\002\001\001\000\002" +
    "\001\001\000\074\102\236\103\264\105\276\106\274\107" +
    "\310\115\247\116\234\166\u023c\167\u0234\203\321\204\277" +
    "\355\u0238\356\272\360\235\361\325\362\311\367\271\370" +
    "\315\371\250\373\316\374\273\u0111\256\u0121\045\u0126\300" +
    "\u012e\210\u0146\242\u0149\265\u014a\211\u014b\260\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\126" +
    "\u024d\175\u0249\176\u0245\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\u012b\u024c\u012c\u024b\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\132\u024a" +
    "\133\130\162\133\163\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\u0152" +
    "\076\001\001\000\002\001\001\000\004\353\u0255\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\u0121\045\u0126" +
    "\155\u013f\u0257\001\001\000\002\001\001\000\010\u0121\045" +
    "\u0126\155\u013f\u0259\001\001\000\004\063\u025b\001\001\000" +
    "\002\001\001\000\010\064\u025c\u0121\045\u0126\u025d\001\001" +
    "\000\004\065\u025f\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\066\u0260\001\001\000\016\067\u027d\100\u0280" +
    "\101\u0282\154\u027f\211\u0281\253\u027e\001\001\000\014\070" +
    "\u0263\071\u0262\072\u0265\u0121\045\u0126\u0266\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\074\u0276\u0121\045\u0126" +
    "\u0277\001\001\000\002\001\001\000\002\001\001\000\074" +
    "\073\u0269\075\u0268\102\236\103\264\105\276\106\274\107" +
    "\310\115\247\116\234\203\321\204\277\355\u026a\356\272" +
    "\360\235\361\325\362\311\367\271\370\315\371\250\373" +
    "\316\374\273\u0111\256\u0121\045\u0126\300\u012e\210\u0146\242" +
    "\u0149\265\u014a\211\u014b\260\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\112\075\u026f\076\u0272\077\u0270\102\236\103" +
    "\264\105\276\106\274\107\310\115\247\116\234\121\u026e" +
    "\123\126\132\131\133\130\162\133\163\132\203\321\204" +
    "\277\355\u0271\356\272\360\235\361\325\362\311\367\271" +
    "\370\315\371\250\373\316\374\273\u0111\256\u0121\045\u0126" +
    "\300\u012e\210\u0146\242\u0149\265\u014a\211\u014b\260\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\072" +
    "\075\u0275\102\236\103\264\105\276\106\274\107\310\115" +
    "\247\116\234\203\321\204\277\355\u026a\356\272\360\235" +
    "\361\325\362\311\367\271\370\315\371\250\373\316\374" +
    "\273\u0111\256\u0121\045\u0126\300\u012e\210\u0146\242\u0149\265" +
    "\u014a\211\u014b\260\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\u0121\045\u0126\u027a\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\071\u027c\072" +
    "\u0265\u0121\045\u0126\u0266\001\001\000\002\001\001\000\012" +
    "\101\u0283\154\u027f\211\u0281\253\u027e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\u0149\u0289\u014a\211" +
    "\u014f\u028a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\u0149\u0289\u014a\211\u014f\u028c\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\u0121\045\u0126" +
    "\155\u013f\u028f\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\u010b\u0294\u010c\u0295\u0133\u0293\001\001\000\002\001" +
    "\001\000\006\u0121\045\u0126\u02bc\001\001\000\006\u010d\u0296" +
    "\u010e\u0298\001\001\000\002\001\001\000\006\210\u02b7\211" +
    "\u02b6\001\001\000\004\u0184\u0299\001\001\000\002\001\001" +
    "\000\024\376\u02a1\377\u029e\u0100\u029f\u0101\u029b\u0102\u02a0\u0104" +
    "\u029d\u0121\045\u0126\u01be\u0140\u029a\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\u0121\045\u0126\u02b0\u0141\u02af\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\u0100\u02a3\u0101" +
    "\u029b\u0102\u02a0\u0104\u029d\u0121\045\u0126\u01be\u0140\u029a\001\001" +
    "\000\002\001\001\000\004\u0105\u02a5\001\001\000\002\001" +
    "\001\000\100\102\236\103\264\105\276\106\274\107\310" +
    "\115\247\116\234\203\321\204\277\355\u02ab\356\272\360" +
    "\235\361\325\362\311\367\271\370\315\371\250\373\316" +
    "\374\273\u0103\u02a9\u0106\u02a8\u0107\u02aa\u010f\u02a7\u0111\256\u0121" +
    "\045\u0126\300\u012e\210\u0146\242\u0149\265\u014a\211\u014b\260" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\076\102\236" +
    "\103\264\105\276\106\274\107\310\115\247\116\234\203" +
    "\321\204\277\355\u02ab\356\272\360\235\361\325\362\311" +
    "\367\271\370\315\371\250\373\316\374\273\u0103\u02a9\u0107" +
    "\u02ae\u010f\u02a7\u0111\256\u0121\045\u0126\300\u012e\210\u0146\242" +
    "\u0149\265\u014a\211\u014b\260\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\u0121\045\u0126\u02b3\001\001\000\002\001\001\000\002\001" +
    "\001\000\072\102\236\103\264\105\276\106\274\107\310" +
    "\115\247\116\234\203\321\204\277\355\u02ab\356\272\360" +
    "\235\361\325\362\311\367\271\370\315\371\250\373\316" +
    "\374\273\u0103\u02b5\u0111\256\u0121\045\u0126\300\u012e\210\u0146" +
    "\242\u0149\265\u014a\211\u014b\260\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\153\u02b9\154\u02b8\001\001\000" +
    "\002\001\001\000\006\252\u02bb\u0120\u02ba\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\070\102\236" +
    "\103\264\105\276\106\274\107\310\115\247\116\234\203" +
    "\321\204\277\355\u02c1\356\272\360\235\361\325\362\311" +
    "\367\271\370\315\371\250\373\316\374\273\u0111\256\u0121" +
    "\045\u0126\300\u012e\210\u0146\242\u0149\265\u014a\211\u014b\260" +
    "\001\001\000\002\001\001\000\070\102\236\103\264\105" +
    "\276\106\274\107\310\115\247\116\234\203\321\204\277" +
    "\355\u02c3\356\272\360\235\361\325\362\311\367\271\370" +
    "\315\371\250\373\316\374\273\u0111\256\u0121\045\u0126\300" +
    "\u012e\210\u0146\242\u0149\265\u014a\211\u014b\260\001\001\000" +
    "\002\001\001\000\004\u0158\u02c5\001\001\000\010\u0121\045" +
    "\u0126\155\u013f\u02c6\001\001\000\006\252\u02c7\u0120\u02ba\001" +
    "\001\000\002\001\001\000\020\036\u02ca\041\u02ce\042\u02d5" +
    "\043\u02c9\044\u02d0\u0149\u02d1\u014a\211\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\u015d\u03ad\001\001\000\002" +
    "\001\001\000\004\u015c\u03a0\001\001\000\002\001\001\000" +
    "\004\u015e\u030a\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\u015a\u0306\001\001\000\004\u0163\u0301\001\001\000" +
    "\004\u015f\u02f5\001\001\000\002\001\001\000\004\u015b\u02e4" +
    "\001\001\000\004\045\u02d8\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\074\046\u02e0\047\u02dd" +
    "\102\236\103\264\105\276\106\274\107\310\115\247\116" +
    "\234\203\321\204\277\355\u02dc\356\272\360\235\361\325" +
    "\362\311\367\271\370\315\371\250\373\316\374\273\u0111" +
    "\256\u0121\045\u0126\300\u012e\210\u0146\242\u0149\265\u014a\211" +
    "\u014b\260\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\072" +
    "\047\u02e3\102\236\103\264\105\276\106\274\107\310\115" +
    "\247\116\234\203\321\204\277\355\u02dc\356\272\360\235" +
    "\361\325\362\311\367\271\370\315\371\250\373\316\374" +
    "\273\u0111\256\u0121\045\u0126\300\u012e\210\u0146\242\u0149\265" +
    "\u014a\211\u014b\260\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\037\u02eb\172\u02e6\u0121\045" +
    "\u0126\u02ee\u0149\u02ed\u014a\211\u014c\u02ec\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\u0131\u02f2\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\u0160\u02f7\001\001\000\004\u012d\u02f8\001\001\000\012\147" +
    "\u02fa\u0149\u0144\u014a\211\u014e\u02fb\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\146\u02fe\152\u02fc\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\u0149\u0144\u014a\211\u014e\u0300\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\u0164\u0303\001\001\000\004\u012d\u0304" +
    "\001\001\000\010\u0149\u0144\u014a\211\u014e\u0305\001\001\000" +
    "\002\001\001\000\014\u0121\045\u0126\u02ee\u0149\u02ed\u014a\211" +
    "\u014c\u0307\001\001\000\002\001\001\000\070\102\236\103" +
    "\264\105\276\106\274\107\310\115\247\116\234\203\321" +
    "\204\277\355\u0309\356\272\360\235\361\325\362\311\367" +
    "\271\370\315\371\250\373\316\374\273\u0111\256\u0121\045" +
    "\u0126\300\u012e\210\u0146\242\u0149\265\u014a\211\u014b\260\001" +
    "\001\000\002\001\001\000\004\040\u031f\001\001\000\004" +
    "\u017d\u039b\001\001\000\004\u017a\u038e\001\001\000\004\u0176" +
    "\u0387\001\001\000\004\u017f\u0381\001\001\000\002\001\001" +
    "\000\004\u0177\u0376\001\001\000\004\u0173\u036e\001\001\000" +
    "\004\u0175\u036b\001\001\000\004\u016f\u0366\001\001\000\004" +
    "\u0167\u0361\001\001\000\002\001\001\000\004\u017c\u035a\001" +
    "\001\000\004\u017b\u0357\001\001\000\004\u0174\u0350\001\001" +
    "\000\004\u0169\u034b\001\001\000\004\u017e\u0345\001\001\000" +
    "\004\u0179\u0342\001\001\000\004\u0171\u033b\001\001\000\004" +
    "\u016b\u032d\001\001\000\004\u016d\u0320\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\u016e\u0322\001\001\000\004" +
    "\u012d\u0323\001\001\000\010\052\u0327\u0149\u0328\u014a\211\001" +
    "\001\000\004\u0128\u032b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\u016c\u032f\001\001\000\004\u012d" +
    "\u0330\001\001\000\016\050\u0332\051\u0335\u0146\u0334\u0149\u0144" +
    "\u014a\211\u014e\u0336\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\u0131\u0337\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\051\u033a\u0146\u0334\u0149\u0144\u014a\211\u014e\u0336" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\u0172" +
    "\u033d\001\001\000\004\u012d\u033e\001\001\000\016\053\u0340" +
    "\371\205\u012e\210\u0149\215\u014a\211\u014d\u0341\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\u012d\u0343\001\001\000\010\u0149\u0144\u014a\211\u014e\u0344\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\157\u0349" +
    "\172\u0347\174\u0348\u0149\u0144\u014a\211\u014e\u034a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\u016a\u034d\001\001\000" +
    "\002\001\001\000\010\u0149\u0144\u014a\211\u014e\u034f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\u012d\u0353\001\001\000\012\160\u0354\u0149\u0144\u014a\211" +
    "\u014e\u0355\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\157\u0359\172\u0347" +
    "\u0149\u0144\u014a\211\u014e\u034a\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\u0149\u0144\u014a\211\u014e\u035c\001\001" +
    "\000\002\001\001\000\004\u0178\u035e\001\001\000\004\u012d" +
    "\u035f\001\001\000\010\u0149\u0144\u014a\211\u014e\u0360\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\u0168\u0363\001" +
    "\001\000\002\001\001\000\010\u0149\u0144\u014a\211\u014e\u0365" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\u0170" +
    "\u0368\001\001\000\004\u012d\u0369\001\001\000\010\u0149\u0144" +
    "\u014a\211\u014e\u036a\001\001\000\002\001\001\000\004\u012d" +
    "\u036c\001\001\000\010\u0149\u0144\u014a\211\u014e\u036d\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\u012d\u0370\001" +
    "\001\000\010\144\u0372\u0149\u0375\u014a\211\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\u012d\u0377\001\001\000\004" +
    "\201\u0378\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\u0165\u037c\001\001\000\002\001\001" +
    "\000\004\u0166\u037e\001\001\000\002\001\001\000\010\u0149" +
    "\u0144\u014a\211\u014e\u0380\001\001\000\002\001\001\000\004" +
    "\u012d\u0382\001\001\000\024\157\u0349\161\u0386\172\u0347\174" +
    "\u0383\u0121\045\u0126\u0384\u0149\u0144\u014a\211\u014e\u034a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\u012d\u0389\001\001" +
    "\000\012\151\u038b\201\u038a\u0149\u038c\u014a\211\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\u012f\u038f\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\u0130\u0393\001\001\000\002\001\001" +
    "\000\004\u012d\u0394\001\001\000\010\156\u0397\u0149\u0399\u014a" +
    "\211\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\u0149\u0144\u014a\211\u014e\u039d" +
    "\001\001\000\002\001\001\000\014\042\u02d5\043\u02c9\044" +
    "\u039f\u0149\u02d1\u014a\211\001\001\000\002\001\001\000\004" +
    "\u012d\u03a1\001\001\000\020\054\u03a6\172\u03a2\u0121\045\u0126" +
    "\u02ee\u0149\u02ed\u014a\211\u014c\u03a5\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\u0161\u03a8\001\001\000\002\001\001" +
    "\000\004\u0162\u03aa\001\001\000\004\u012d\u03ab\001\001\000" +
    "\010\u0149\u0144\u014a\211\u014e\u03ac\001\001\000\002\001\001" +
    "\000\004\u012d\u03ae\001\001\000\020\054\u03af\172\u03a2\u0121" +
    "\045\u0126\u02ee\u0149\u02ed\u014a\211\u014c\u03a5\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\u0121\045\u0126\155\u013f" +
    "\u03b2\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\u0152\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\u0121\045\u0126\u03ba" +
    "\001\001\000\002\001\001\000\006\u0121\045\u0126\u03bc\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\175\u03e9" +
    "\176\u0245\001\001\000\004\055\u03c0\001\001\000\004\207" +
    "\u03c8\001\001\000\020\057\u03c4\u0121\045\u0126\u03c2\u0143\u03c3" +
    "\u0149\265\u014a\211\u014b\u03c5\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\u0121\045\u0126\u03c2\u0143\u03c7\u0149\265\u014a\211\u014b\u03c5\001" +
    "\001\000\002\001\001\000\034\056\u03ca\061\u03d0\062\u03d2" +
    "\154\u03cb\173\u03c9\211\u03d3\213\u03d1\216\u03ce\217\u03cc\223" +
    "\u03d6\232\u03cd\234\u03d4\253\u03cf\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\062\u03e8\154\u03cb\173\u03c9\211\u03d3\213\u03d1\216\u03ce\217" +
    "\u03cc\223\u03d6\232\u03cd\234\u03d4\253\u03cf\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\235\u03dc\236\u03d8\241\u03da\u0121\045\u0126\u03d9" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\242\u03df" +
    "\u0136\u03e0\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\u0121\045\u0126\u03e4" +
    "\u013d\u03e2\u013e\u03e3\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\u0121\045" +
    "\u0126\u03e4\u013e\u03e6\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\035\u03ea\162\u03bf\163\132" +
    "\001\001\000\002\001\001\000\004\u0152\076\001\001\000" +
    "\012\341\u0420\u0121\045\u0126\u01be\u0140\u0421\001\001\000\006" +
    "\u011c\u03ef\u011e\u03f0\001\001\000\002\001\001\000\004\343" +
    "\u040e\001\001\000\002\001\001\000\006\u011d\u03f4\u011f\u03f3" +
    "\001\001\000\012\344\u03fe\u0122\u03f8\u0123\u040b\u0124\u0407\001" +
    "\001\000\002\001\001\000\004\u011f\u03f5\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\u0125\u040d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\121\u0413" +
    "\123\126\132\131\133\130\162\133\163\132\345\u0416\346" +
    "\u0412\347\u0415\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\074" +
    "\102\236\103\264\105\276\106\274\107\310\115\247\116" +
    "\234\203\321\204\277\350\u0418\351\u041a\355\u0419\356\272" +
    "\360\235\361\325\362\311\367\271\370\315\371\250\373" +
    "\316\374\273\u0111\256\u0121\045\u0126\300\u012e\210\u0146\242" +
    "\u0149\265\u014a\211\u014b\260\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\072\102\236\103\264\105\276\106\274\107" +
    "\310\115\247\116\234\203\321\204\277\351\u041f\355\u0419" +
    "\356\272\360\235\361\325\362\311\367\271\370\315\371" +
    "\250\373\316\374\273\u0111\256\u0121\045\u0126\300\u012e\210" +
    "\u0146\242\u0149\265\u014a\211\u014b\260\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\u0121\045\u0126\u01be\u0140\u0424\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$DMLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$DMLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$DMLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

  action_obj.initActionClass();

    }


   Configuration cfg = Configuration.getInstance();
   ParserInfo      info     = ParserInfo.getInstance();

      
/*
   Module module     = ModulesFactory.getCurrentModule();
   Summary summary   = module.getSummary();

          
*/
      public void syntax_error(Symbol token) {
           
          Symbol s = (Symbol) token.value;
          int col = cfg.getInteger(CFG.MARGIN_LEFT,  0);
          col = col + s.right + 1;

          throw new ParseException(MSG.EXCEPTION_SYNTAX, 
                                   info.getMemberName(), 
                                   info.getOffset() + s.left + 1, 
                                   col, 
                                   (String) s.value);
      }

      public void unrecovered_syntax_error(Symbol token) throws Exception {
          Symbol s = (Symbol) token.value;
          throw new ParseException(MSG.EXCEPTION_CUP, 
                                  info.getMemberName(), 
                                  info.getOffset() + s.left + 1,
                                  s.right + 1, 
                                  (String) s.value); 
      }
      

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$DMLParser$actions {


   ComplexSymbolFactory symbolFactory = new ComplexSymbolFactory();
   ParserInfo      info     = ParserInfo.getInstance();
   StmtSQL         stmt     = new StmtSQL();
   
/*
   Module          module   = null;
   DB2Code         code     = null;
   ParserInfo      info     = ParserInfo.getInstance();
         
   StmtSQL currStmt = new StmtSQL();  // Instruccion en proceso
   

   public String getSymbolName(Symbol s)    { return (String) s.value; }
   public int    getSymbolLine(Symbol s)    { return (int)    s.left;  }
   
   public void debug(String txt) { System.err.println(txt); }
*/   
   public void initActionClass() {
//      module = ModulesFactory.getCurrentModule();
//      code = new DB2Code(module);
   }

   public void print(String txt) { 
      System.out.println(txt); 
   }


  private final DMLParser parser;

  /** Constructor */
  CUP$DMLParser$actions(DMLParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$DMLParser$do_action(
    int                        CUP$DMLParser$act_num,
    java_cup.runtime.lr_parser CUP$DMLParser$parser,
    java.util.Stack            CUP$DMLParser$stack,
    int                        CUP$DMLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$DMLParser$result;

      /* select the action based on the action number */
      switch (CUP$DMLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 756: // eat_token ::= COMMA 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("eat_token",336, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 755: // eat_token ::= ID 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("eat_token",336, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 754: // eat ::= eat eat_token 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("eat",334, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 753: // eat ::= eat_token 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("eat",334, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 752: // eat_opt ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("eat_opt",335, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 751: // eat_opt ::= eat 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("eat_opt",335, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 750: // non_reserved_words ::= TIMESTAMP 
            {
              Symbol RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("non_reserved_words",287, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 749: // id_qualified ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("id_qualified",293, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 748: // id_qualified ::= IDQUALIFIED 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("id_qualified",293, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 747: // field_list ::= field_list COMMA field_name 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("field_list",322, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 746: // field_list ::= field_name 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("field_list",322, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 745: // field_name ::= host_field 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("field_name",321, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 744: // field_name ::= id 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("field_name",321, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 743: // column_list ::= column_list COMMA id 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("column_list",319, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 742: // column_list ::= id 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("column_list",319, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 741: // column_name ::= id 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("column_name",318, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 740: // table_name ::= id 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_name",317, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 739: // id_lst ::= id_lst COMMA id 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("id_lst",15, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 738: // id_lst ::= id 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("id_lst",15, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 737: // id ::= non_reserved_words 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("id",292, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 736: // id ::= ID id_qualified 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("id",292, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 735: // id_general ::= LITERAL 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("id_general",323, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 734: // id_general ::= NUM_ENTERO 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("id_general",323, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 733: // id_general ::= id 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("id_general",323, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 732: // host_field ::= host_var opt_indicator host_var_opt 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("host_field",329, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 731: // host_var_base ::= PREHOST ID 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("host_var_base",328, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 730: // host_var_base ::= HOSTVAR2 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("host_var_base",328, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 729: // host_var_base ::= HOSTVAR1 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("host_var_base",328, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 728: // host_var ::= host_var_base id_qualified 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("host_var",327, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 727: // host_var_opt ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("host_var_opt",326, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 726: // host_var_opt ::= host_var 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("host_var_opt",326, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 725: // with_without ::= WITHOUT 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("with_without",312, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 724: // with_without ::= WITH 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("with_without",312, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 723: // opt_table ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("opt_table",301, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 722: // opt_table ::= TABLE 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("opt_table",301, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 721: // opt_rows ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("opt_rows",310, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 720: // opt_rows ::= ROWS 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("opt_rows",310, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 719: // opt_return_caller ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("opt_return_caller",309, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 718: // opt_return_caller ::= TO CLIENT 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("opt_return_caller",309, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 717: // opt_return_caller ::= TO CALLER 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("opt_return_caller",309, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 716: // quantifier ::= ALL 
            {
              Symbol RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("quantifier",298, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 715: // quantifier ::= ANY 
            {
              Symbol RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("quantifier",298, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 714: // quantifier ::= SOME 
            {
              Symbol RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("quantifier",298, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 713: // opt_quantifier ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("opt_quantifier",297, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 712: // opt_quantifier ::= quantifier 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("opt_quantifier",297, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 711: // opt_package ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("opt_package",303, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 710: // opt_package ::= PACKAGE 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("opt_package",303, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 709: // opt_outer ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("opt_outer",307, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 708: // opt_outer ::= OUTER 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("opt_outer",307, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 707: // opt_optimization ::= FOR OPTIMIZATION 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("opt_optimization",302, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 706: // opt_of ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("opt_of",308, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 705: // opt_of ::= OF 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("opt_of",308, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 704: // opt_not ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("opt_not",296, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 703: // opt_not ::= NOT 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("opt_not",296, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 702: // opt_multiplier ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("opt_multiplier",306, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 701: // opt_multiplier ::= MULTIPLIER 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("opt_multiplier",306, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 700: // opt_minus ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("opt_minus",300, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 699: // opt_minus ::= SUBTRACT 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("opt_minus",300, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 698: // opt_indicator ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("opt_indicator",311, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 697: // opt_indicator ::= INDICATOR 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("opt_indicator",311, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 696: // final_old ::= OLD 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("final_old",313, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 695: // final_old ::= FINAL 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("final_old",313, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 694: // opt_eq ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("opt_eq",299, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 693: // opt_eq ::= EQ 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("opt_eq",299, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 692: // opt_as ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("opt_as",305, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 691: // opt_as ::= AS 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("opt_as",305, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 690: // opt_all_distinct ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("opt_all_distinct",295, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 689: // opt_all_distinct ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("opt_all_distinct",295, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 688: // opt_all_distinct ::= ALL 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("opt_all_distinct",295, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 687: // opt_acceleration_enable ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("opt_acceleration_enable",294, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 686: // opt_acceleration_enable ::= WITH FAILBACK 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("opt_acceleration_enable",294, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 685: // wrd_of ::= OF 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("wrd_of",325, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 684: // wrd_current ::= CURRENT 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("wrd_current",324, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 683: // var_time ::= host_var 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("var_time",333, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 682: // var_time ::= LITERAL 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("var_time",333, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 681: // var_int ::= host_var 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("var_int",331, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 680: // var_int ::= constant_numeric 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("var_int",331, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 679: // var_general ::= host_var 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("var_general",330, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 678: // var_general ::= id 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("var_general",330, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 677: // clause_queryno ::= QUERYNO NUM_ENTERO 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_queryno",169, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 676: // clause_queryno_opt ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_queryno_opt",168, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 675: // clause_queryno_opt ::= queryno 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_queryno_opt",168, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 674: // set ::= SET NT$49 clause_assignment 
            {
              Object RESULT =null;
              // propagate RESULT from NT$49
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("set",268, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 673: // NT$49 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.setVerb(s); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$49",386, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 672: // set_opt ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("set_opt",267, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 671: // set_opt ::= set 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("set_opt",267, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 670: // include_column_id ::= ID data_type 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("include_column_id",285, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 669: // include_columns_lst ::= include_columns_lst include_column_id 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("include_columns_lst",283, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 668: // include_columns_lst ::= include_column_id 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("include_columns_lst",283, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 667: // include_columns ::= INCLUDE include_columns_lst 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("include_columns",284, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 666: // include_columns_opt ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("include_columns_opt",282, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 665: // include_columns_opt ::= include_columns 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("include_columns_opt",282, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 664: // correlation_name ::= opt_as id 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("correlation_name",266, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 663: // correlation_name_opt ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("correlation_name_opt",265, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 662: // correlation_name_opt ::= correlation_name 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("correlation_name_opt",265, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 661: // constant_date ::= constant_string 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("constant_date",251, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 660: // constant_graphic ::= NUM_GRAPHIC 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("constant_graphic",250, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 659: // constant_binary ::= NUM_BINARY 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("constant_binary",249, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 658: // constant_number ::= NUM_SIGNED 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("constant_number",248, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 657: // constant_number ::= NUM_FLOAT 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("constant_number",248, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 656: // constant_number ::= NUM_DECIMAL 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("constant_number",248, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 655: // constant_number ::= NUM_ENTERO 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("constant_number",248, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 654: // constant_numeric ::= opt_minus constant_number 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("constant_numeric",247, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 653: // constant_string ::= LITERAL 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("constant_string",246, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 652: // constant ::= constant_graphic 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("constant",245, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 651: // constant ::= constant_binary 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("constant",245, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 650: // constant ::= constant_numeric 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("constant",245, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 649: // constant ::= constant_string 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("constant",245, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 648: // var_string ::= host_var 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("var_string",332, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 647: // var_string ::= LITERAL 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("var_string",332, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 646: // and_or ::= OR 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("and_or",304, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 645: // and_or ::= AND 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("and_or",304, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 644: // parameter_marker ::= QUESTION_MARK NUM_ENTERO 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("parameter_marker",314, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 643: // column ::= id 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("column",316, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 642: // column_lst ::= column_lst COMMA column 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("column_lst",315, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 641: // column_lst ::= column 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("column_lst",315, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 640: // clause_for_row_opt ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_for_row_opt",161, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 639: // clause_for_row_opt ::= FOR ROWS var_int OF ROWSET 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_for_row_opt",161, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 638: // clause_assignment_id_item ::= row_fullselect 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_assignment_id_item",261, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 637: // clause_assignment_id_item ::= clause_assignment_id_simple_value 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_assignment_id_item",261, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 636: // clause_assignment_id_list ::= clause_assignment_id_list COMMA clause_assignment_id_item 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_assignment_id_list",260, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 635: // clause_assignment_id_list ::= clause_assignment_id_item 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_assignment_id_list",260, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 634: // clause_assignment_id_right ::= LPAR clause_assignment_id_list RPAR 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_assignment_id_right",259, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 633: // clause_assignment_id_left ::= LPAR column_list RPAR 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_assignment_id_left",258, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 632: // clause_assignment_id_multiple ::= clause_assignment_id_left EQ clause_assignment_id_right 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_assignment_id_multiple",256, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 631: // clause_assignment_id_simple_value ::= expression 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_assignment_id_simple_value",257, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 630: // clause_assignment_id_host ::= host_var EQ expression 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_assignment_id_host",264, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 629: // clause_assignment_lst_host ::= clause_assignment_lst_host COMMA clause_assignment_id_host 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_assignment_lst_host",263, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 628: // clause_assignment_lst_host ::= clause_assignment_id_host 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_assignment_lst_host",263, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 627: // clause_assignment_host ::= clause_assignment_lst_host 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_assignment_host",262, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 626: // clause_assignment_id_simple ::= column_name EQ clause_assignment_id_simple_value 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_assignment_id_simple",255, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 625: // clause_assignment_id ::= clause_assignment_id_multiple 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_assignment_id",254, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 624: // clause_assignment_id ::= clause_assignment_id_simple 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_assignment_id",254, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 623: // clause_assignment_lst ::= clause_assignment_lst COMMA clause_assignment_id 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_assignment_lst",253, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 622: // clause_assignment_lst ::= clause_assignment_id 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_assignment_lst",253, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 621: // clause_assignment ::= clause_assignment_lst 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_assignment",252, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 620: // operator ::= CONCAT_SYM 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("operator",242, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 619: // operator ::= MULTIPLY 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("operator",242, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 618: // operator ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("operator",242, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 617: // operator ::= SUBTRACT 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("operator",242, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 616: // operator ::= PLUS 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("operator",242, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 615: // comparator_verb ::= LE 
            {
              Symbol RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("comparator_verb",244, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 614: // comparator_verb ::= LT 
            {
              Symbol RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("comparator_verb",244, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 613: // comparator_verb ::= GE 
            {
              Symbol RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("comparator_verb",244, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 612: // comparator_verb ::= GT 
            {
              Symbol RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("comparator_verb",244, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 611: // comparator_verb ::= NLT 
            {
              Symbol RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("comparator_verb",244, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 610: // comparator_verb ::= NGT 
            {
              Symbol RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("comparator_verb",244, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 609: // comparator_verb ::= NE2 
            {
              Symbol RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("comparator_verb",244, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 608: // comparator_verb ::= NE 
            {
              Symbol RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("comparator_verb",244, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 607: // comparator_verb ::= EQ 
            {
              Symbol RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("comparator_verb",244, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 606: // comparator ::= comparator_verb 
            {
              Symbol RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("comparator",243, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 605: // data_type_name ::= VARBINARY 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("data_type_name",290, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 604: // data_type_name ::= BINARY 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("data_type_name",290, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 603: // data_type_name ::= VARGRAPHIC 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("data_type_name",290, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 602: // data_type_name ::= GRAPHIC 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("data_type_name",290, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 601: // data_type_name ::= VARCHAR 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("data_type_name",290, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 600: // data_type_name ::= CHAR 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("data_type_name",290, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 599: // data_type_name ::= CHARACTER 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("data_type_name",290, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 598: // data_type_name ::= DECFLOAT 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("data_type_name",290, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 597: // data_type_name ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("data_type_name",290, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 596: // data_type_name ::= FLOAT 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("data_type_name",290, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 595: // data_type_name ::= NUMERIC 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("data_type_name",290, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 594: // data_type_name ::= DEC 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("data_type_name",290, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 593: // data_type_name ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("data_type_name",290, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 592: // data_type_def ::= data_type_name data_type_prec_opt 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("data_type_def",289, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 591: // data_type ::= data_type_def 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("data_type",226, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 590: // data_type ::= timestamp 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("data_type",226, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 589: // data_type ::= TIME 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("data_type",226, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 588: // data_type ::= DATE 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("data_type",226, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 587: // data_type ::= REAL 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("data_type",226, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 586: // data_type ::= INT 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("data_type",226, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 585: // data_type ::= INTEGER 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("data_type",226, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 584: // data_type ::= SMALLINT 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("data_type",226, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 583: // predicate_selectivity ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("predicate_selectivity",217, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 582: // predicate_selectivity ::= SELECTIVITY var_int 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("predicate_selectivity",217, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 581: // predicate_search ::= predicate predicate_selectivity 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("predicate_search",198, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 580: // search_condition_unary ::= LPAR search_condition RPAR 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("search_condition_unary",220, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 579: // search_condition_unary ::= predicate_search 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("search_condition_unary",220, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 578: // search_condition_not ::= search_condition_unary 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("search_condition_not",219, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 577: // search_condition_not ::= NOT search_condition_unary 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("search_condition_not",219, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 576: // search_condition ::= search_condition and_or search_condition_not 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("search_condition",218, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 575: // search_condition ::= search_condition_not 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("search_condition",218, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 574: // predicate_xmlexists ::= XMLEXISTS LPAR eat RPAR 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("predicate_xmlexists",201, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 573: // predicate_exists ::= EXISTS LPAR qry_fullselect RPAR 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("predicate_exists",200, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 572: // predicate_like ::= LIKE var_string clause_escape 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("predicate_like",213, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 571: // predicate_in_value ::= qry_fullselect 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("predicate_in_value",216, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 570: // predicate_in_value ::= predicate_lst 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("predicate_in_value",216, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 569: // predicate_in ::= IN LPAR predicate_in_value RPAR 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("predicate_in",212, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 568: // predicate_d_n ::= NULL 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("predicate_d_n",215, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 567: // predicate_d_n ::= DISTINCT FROM predicate_left 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("predicate_d_n",215, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 566: // predicate_distinct_null ::= IS opt_not predicate_d_n 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("predicate_distinct_null",211, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 565: // predicate_between ::= BETWEEN expression AND expression 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("predicate_between",210, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 564: // predicate_types ::= predicate_is 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("predicate_types",209, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 563: // predicate_types ::= predicate_like 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("predicate_types",209, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 562: // predicate_types ::= predicate_in 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("predicate_types",209, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 561: // predicate_types ::= predicate_distinct_null 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("predicate_types",209, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 560: // predicate_types ::= predicate_between 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("predicate_types",209, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 559: // predicate_negated ::= predicate_types 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("predicate_negated",207, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 558: // predicate_negated ::= NOT predicate_types 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("predicate_negated",207, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 557: // predicate_basic_right ::= LPAR qry_fullselect RPAR 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("predicate_basic_right",208, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 556: // predicate_basic_right ::= quantifier predicate_left 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("predicate_basic_right",208, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 555: // predicate_basic_right ::= predicate_left 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("predicate_basic_right",208, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 554: // predicate_basic ::= comparator predicate_basic_right 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("predicate_basic",206, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 553: // predicate_right ::= predicate_negated 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("predicate_right",203, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 552: // predicate_right ::= predicate_basic 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("predicate_right",203, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 551: // predicate_lst ::= predicate_lst COMMA expression 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("predicate_lst",205, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 550: // predicate_lst ::= expression 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("predicate_lst",205, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 549: // predicate_values ::= LPAR predicate_lst RPAR 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("predicate_values",204, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 548: // predicate_left ::= predicate_values 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("predicate_left",202, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 547: // predicate_left ::= expression 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("predicate_left",202, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 546: // predicate_common ::= predicate_left predicate_right 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("predicate_common",199, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 545: // predicate ::= predicate_xmlexists 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("predicate",197, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 544: // predicate ::= predicate_exists 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("predicate",197, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 543: // predicate ::= predicate_common 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("predicate",197, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 542: // expr_case_result ::= expression 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("expr_case_result",280, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 541: // expr_case_else_opt ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("expr_case_else_opt",273, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 540: // expr_case_else_opt ::= ELSE expr_case_result 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("expr_case_else_opt",273, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 539: // expr_case_simple_item ::= WHEN expression THEN expr_case_result 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("expr_case_simple_item",279, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 538: // expr_case_simple_lst ::= expr_case_simple_lst expr_case_simple_item 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("expr_case_simple_lst",278, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 537: // expr_case_simple_lst ::= expr_case_simple_item 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("expr_case_simple_lst",278, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 536: // expr_case_simple ::= expression expr_case_simple_lst 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("expr_case_simple",277, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 535: // expr_case_searched_item ::= WHEN NT$47 search_condition NT$48 THEN expr_case_result 
            {
              Object RESULT =null;
              // propagate RESULT from NT$48
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("expr_case_searched_item",276, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 534: // NT$48 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)).value;
 info.unsetInSearch(); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$48",385, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 533: // NT$47 ::= 
            {
              Object RESULT =null;
 info.setInSearch(); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$47",384, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 532: // expr_case_searched_lst ::= expr_case_searched_lst expr_case_searched_item 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("expr_case_searched_lst",275, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 531: // expr_case_searched_lst ::= expr_case_searched_item 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("expr_case_searched_lst",275, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 530: // expr_case_searched ::= expr_case_searched_lst 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("expr_case_searched",274, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 529: // expr_case_type ::= expr_case_simple 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("expr_case_type",272, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 528: // expr_case_type ::= expr_case_searched 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("expr_case_type",272, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 527: // expr_case ::= CASE expr_case_type expr_case_else_opt END 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("expr_case",271, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 526: // expression_attribute ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("expression_attribute",241, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 525: // expression_attribute ::= function_time_words 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("expression_attribute",241, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 524: // expression_var ::= constant 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("expression_var",240, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 523: // expression_var ::= id 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("expression_var",240, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 522: // expression_var ::= host_field 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("expression_var",240, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 521: // expression_id ::= expression_var expression_attribute 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("expression_id",239, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 520: // expression_primary ::= LPAR expression RPAR expression_attribute 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("expression_primary",238, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 519: // expression_primary ::= sequence 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("expression_primary",238, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 518: // expression_primary ::= expr_case 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("expression_primary",238, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 517: // expression_primary ::= register 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("expression_primary",238, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 516: // expression_primary ::= function 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("expression_primary",238, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 515: // expression_primary ::= expression_id 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("expression_primary",238, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 514: // expression_signed ::= NUM_SIGNED 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("expression_signed",237, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 513: // expression_signed ::= operator expression_primary 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("expression_signed",237, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 512: // expression_arit ::= expression_arit expression_signed 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("expression_arit",236, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 511: // expression_arit ::= expression_primary 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("expression_arit",236, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 510: // expression ::= expression_arit 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("expression",235, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 509: // reg_zone_opt ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("reg_zone_opt",78, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 508: // reg_zone_opt ::= ZONE 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("reg_zone_opt",78, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 507: // register_words ::= USER 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("register_words",77, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 506: // register_words ::= SESSION_USER 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("register_words",77, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 505: // register_words ::= ENCRYPTION PASSWORD 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("register_words",77, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 504: // register_words ::= TIME reg_zone_opt 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("register_words",77, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 503: // register_words ::= TIMESTAMP 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("register_words",77, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 502: // register_words ::= SQLID 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("register_words",77, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 501: // register_words ::= SERVER 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("register_words",77, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 500: // register_words ::= SCHEMA 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("register_words",77, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 499: // register_words ::= RULES 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("register_words",77, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 498: // register_words ::= ROUTINE VERSION 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("register_words",77, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 497: // register_words ::= REFRESH AGE 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("register_words",77, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 496: // register_words ::= QUERY ACCELERATION 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("register_words",77, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 495: // register_words ::= PRECISION 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("register_words",77, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 494: // register_words ::= PATH 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("register_words",77, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 493: // register_words ::= PACKAGESET 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("register_words",77, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 492: // register_words ::= PACKAGE PATH 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("register_words",77, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 491: // register_words ::= OPTIMIZATION HINT 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("register_words",77, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 490: // register_words ::= MEMBER 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("register_words",77, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // register_words ::= MAINTAINED TYPES 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("register_words",77, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // register_words ::= LC_CTYPE 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("register_words",77, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // register_words ::= GET_ACCEL_ARCHIVE 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("register_words",77, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // register_words ::= EXPLAIN MODE 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("register_words",77, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // register_words ::= DEGREE 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("register_words",77, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // register_words ::= DECFLOAT ROUNDING MODE 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("register_words",77, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // register_words ::= DEBUG MODE 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("register_words",77, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // register_words ::= DATE 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("register_words",77, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // register_words ::= CLIENT_WRKSTNNAME 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("register_words",77, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // register_words ::= CLIENT_USERID 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("register_words",77, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // register_words ::= CLIENT_APPLNAME 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("register_words",77, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // register_words ::= CLIENT_ACCTNG 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("register_words",77, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // register_words ::= APPLICATION ENCODING SCHEME 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("register_words",77, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // register_word ::= CURRENT_LC_CTYPE 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("register_word",76, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // register_word ::= CURRENT_TIMESTAMP 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("register_word",76, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // register_word ::= CURRENT_TIME 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("register_word",76, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // register_word ::= CURRENT_SCHEMA 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("register_word",76, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // register_word ::= CURRENT_PATH 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("register_word",76, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // register_word ::= CURRENT_DATE 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("register_word",76, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // register ::= wrd_current register_words 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("register",75, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // register ::= register_word 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("register",75, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // function_time_words ::= MICROSECONDS 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("function_time_words",68, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // function_time_words ::= SECONDS 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("function_time_words",68, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // function_time_words ::= MINUTES 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("function_time_words",68, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // function_time_words ::= HOURS 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("function_time_words",68, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // function_time_words ::= DAYS 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("function_time_words",68, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // function_time_words ::= MONTHS 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("function_time_words",68, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // function_time_words ::= YEARS 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("function_time_words",68, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // function_time ::= function_time_words function_parms 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("function_time",67, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // func_parm_quantifier ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("func_parm_quantifier",74, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // func_parm_quantifier ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("func_parm_quantifier",74, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // func_parm_quantifier ::= ALL 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("func_parm_quantifier",74, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // func_parm_item ::= MULTIPLY 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("func_parm_item",73, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // func_parm_item ::= func_parm_quantifier expression 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("func_parm_item",73, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // func_parms_lst ::= func_parms_lst COMMA func_parm_item 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("func_parms_lst",72, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // func_parms_lst ::= func_parm_item 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("func_parms_lst",72, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // func_parms_lst_opt ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("func_parms_lst_opt",71, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // func_parms_lst_opt ::= func_parms_lst 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("func_parms_lst_opt",71, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // function_parms ::= LPAR func_parms_lst_opt RPAR 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("function_parms",70, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // function_value_parms ::= function_parms 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("function_value_parms",66, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // function_value ::= VALUE function_value_parms 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("function_value",65, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // function_type ::= FUNCTION_BOTH 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("function_type",69, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // function_type ::= FUNCTION_ROW 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("function_type",69, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // function_type ::= FUNCTION_AGGREGATE 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("function_type",69, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // function_type ::= FUNCTION_SCALAR 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("function_type",69, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // function ::= function_time 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("function",64, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // function ::= function_value 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("function",64, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // function ::= function_type function_parms 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("function",64, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // clause_optimize ::= OPTIMIZE FOR NUM_ENTERO opt_rows 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_optimize",141, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // clause_isolation_type ::= UR 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_isolation_type",107, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // clause_isolation_type ::= CS 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_isolation_type",107, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // clause_isolation_type ::= RS 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_isolation_type",107, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // clause_isolation_type ::= RR 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_isolation_type",107, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // clause_isolation ::= SKIP LOCKED DATA 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_isolation",106, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // clause_isolation ::= WITH clause_isolation_type 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_isolation",106, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // clause_isolation_opt ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_isolation_opt",105, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // clause_isolation_opt ::= clause_isolation 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_isolation_opt",105, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // clause_update_lst ::= clause_update_lst COMMA column_name 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_update_lst",144, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // clause_update_lst ::= column_name 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_update_lst",144, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // clause_update_opt ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_update_opt",143, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // clause_update_opt ::= OF clause_update_lst 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_update_opt",143, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // clause_update ::= FOR UPDATE clause_update_opt 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_update",142, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // clause_having ::= HAVING search_condition 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_having",140, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // expr_grouping ::= expr_grouping COMMA id 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("expr_grouping",139, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // expr_grouping ::= id 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("expr_grouping",139, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // expr_grouping_lst ::= expr_grouping_lst expr_grouping 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("expr_grouping_lst",138, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // expr_grouping_lst ::= expr_grouping 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("expr_grouping_lst",138, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // clause_group ::= GROUP BY expr_grouping_lst 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_group",137, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // clause_where_condition ::= wrd_current wrd_of id 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_where_condition",136, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // clause_where_condition ::= search_condition 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_where_condition",136, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // clause_where ::= WHERE NT$46 clause_where_condition 
            {
              Object RESULT =null;
              // propagate RESULT from NT$46
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)).value;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_where",135, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // NT$46 ::= 
            {
              Object RESULT =null;
 info.setInSearch(); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$46",383, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // clause_where_opt ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_where_opt",134, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // clause_where_opt ::= clause_where 
            {
              Object RESULT =null;
		 info.unsetInSearch(); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_where_opt",134, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // clause_read ::= FETCH 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_read",158, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // clause_read ::= READ 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_read",158, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // clause_read_only ::= FOR clause_read ONLY 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_read_only",157, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // fetch_first_opt ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("fetch_first_opt",153, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // fetch_first_opt ::= var_int 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("fetch_first_opt",153, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // clause_fetch_first ::= FETCH FIRST fetch_first_opt opt_rows ONLY 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_fetch_first",152, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // sort_type ::= DESC 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sort_type",151, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // sort_type ::= ASC 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sort_type",151, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // sort_key ::= expression 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sort_key",149, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // sort_type_opt ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sort_type_opt",150, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // sort_type_opt ::= sort_type 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sort_type_opt",150, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // sort_key_mode ::= sort_key sort_type_opt 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sort_key_mode",148, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // order_lst ::= order_lst COMMA sort_key_mode 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("order_lst",147, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // order_lst ::= sort_key_mode 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("order_lst",147, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // order_mode ::= order_lst 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("order_mode",146, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // order_mode ::= ORDER OF table_designator 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("order_mode",146, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // order_mode ::= INPUT SEQUENCE 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("order_mode",146, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // clause_order ::= ORDER BY order_mode 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_order",145, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // clause_with ::= WITH expr_common_table_lst 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_with",171, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // clause_with_opt ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_with_opt",170, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // clause_with_opt ::= clause_with 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_with_opt",170, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // clause_values_data ::= LPAR sequence_lst RPAR 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_values_data",126, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // clause_values_data ::= sequence 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_values_data",126, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // clause_values ::= VALUES clause_values_data 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_values",125, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // clause_union_type ::= INTERSECT 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_union_type",124, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // clause_union_type ::= EXCEPT 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_union_type",124, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // clause_union_type ::= UNION 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_union_type",124, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // clause_union ::= clause_union_type opt_quantifier 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_union",123, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // sequence_from ::= FROM id 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sequence_from",132, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // sequence_from_opt ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sequence_from_opt",131, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // sequence_from_opt ::= sequence_from 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sequence_from_opt",131, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // sequence_name ::= id_general 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sequence_name",320, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // sequence_type ::= NEXTVAL 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sequence_type",130, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // sequence_type ::= PREVVAL 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sequence_type",130, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // sequence_type ::= NEXT VALUES 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sequence_type",130, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // sequence_type ::= PREVIOUS VALUES 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sequence_type",130, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // sequence ::= sequence_type FOR sequence_name 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sequence",129, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // sequence_lst ::= sequence_lst COMMA sequence 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sequence_lst",128, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // sequence_lst ::= sequence 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sequence_lst",128, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // clause_yes_no ::= NO 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_yes_no",127, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // clause_yes_no ::= YES 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_yes_no",127, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // clause_sqlid ::= clause_packageset 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_sqlid",122, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // clause_session ::= USER 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_session",120, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // clause_session ::= SESSION_USER 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_session",120, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // clause_select_column_as ::= opt_as ID 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_select_column_as",119, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // clause_select_column_as_opt ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_select_column_as_opt",118, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // clause_select_column_as_opt ::= clause_select_column_as 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_select_column_as_opt",118, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // clause_select_column ::= expression clause_select_column_as_opt 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_select_column",117, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // clause_select_item ::= FULLTABLE 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_select_item",116, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // clause_select_item ::= clause_select_column 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_select_item",116, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // clause_select_lst ::= clause_select_lst COMMA clause_select_item 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_select_lst",115, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // clause_select_lst ::= clause_select_item 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_select_lst",115, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // clause_select_data ::= clause_select_lst 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_select_data",114, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // clause_select_data ::= MULTIPLY 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_select_data",114, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // clause_select_verb ::= SELECT 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
		 stmt.setVerb(v); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_select_verb",113, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // clause_select ::= clause_select_verb opt_all_distinct clause_select_data 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_select",112, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // clause_schema ::= id 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_schema",111, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // clause_schema ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_schema",111, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // clause_schema ::= clause_sqlid 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_schema",111, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // clause_round ::= var_string 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_round",110, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // clause_round ::= ROUND_MODE 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_round",110, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // clause_packageset ::= clause_session 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_packageset",109, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // clause_packageset ::= var_string 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_packageset",109, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // clause_maintained ::= host_var 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_maintained",108, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // clause_maintained ::= SYSTEM 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_maintained",108, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // clause_maintained ::= NONE 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_maintained",108, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // clause_maintained ::= ALL 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_maintained",108, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // clause_hint ::= WITH HINT var_string 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_hint",104, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // clause_for_read_only ::= FETCH ONLY 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_for_read_only",156, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // clause_for_read_only ::= READ ONLY 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_for_read_only",156, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // clause_for_update_columns ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_for_update_columns",160, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // clause_for_update_columns ::= opt_of column_lst 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_for_update_columns",160, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // clause_for_update ::= UPDATE clause_for_update_columns 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_for_update",159, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // clause_for_type ::= clause_for_read_only 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_for_type",155, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // clause_for_type ::= clause_for_update 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_for_type",155, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // clause_for_type ::= id 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_for_type",155, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // clause_portion ::= FOR PORTION OF BUSINESS_TIME FROM expression TO expression 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_portion",167, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-7)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // clause_portion_opt ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_portion_opt",166, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // clause_portion_opt ::= clause_portion 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_portion_opt",166, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // clause_period_mode ::= BETWEEN expression AND expression 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_period_mode",165, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // clause_period_mode ::= FROM expression TO expression 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_period_mode",165, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // clause_period_mode ::= AS OF expression 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_period_mode",165, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // clause_period_time ::= BUSINESS_TIME 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_period_time",164, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // clause_period_time ::= SYSTEM_TIME 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_period_time",164, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // clause_period ::= FOR clause_period_time clause_period_mode 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_period",163, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // clause_period_opt ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_period_opt",162, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // clause_period_opt ::= clause_period 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_period_opt",162, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // clause_from ::= FROM table_reference_lst 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_from",133, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // clause_for ::= FOR clause_for_type 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_for",154, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // clause_explain ::= host_var 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_explain",103, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // clause_explain ::= EXPLAIN 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_explain",103, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // clause_explain ::= clause_yes_no 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_explain",103, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // clause_escape ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_escape",102, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // clause_escape ::= ESCAPE var_string 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_escape",102, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // clause_encryption ::= var_string clause_encryption_opc 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_encryption",101, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // clause_encryption_opc ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_encryption_opc",100, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // clause_encryption_opc ::= clause_hint 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_encryption_opc",100, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // clause_cardinality ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_cardinality",99, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // clause_cardinality ::= CARDINALITY opt_multiplier var_int 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_cardinality",99, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // clause_allow ::= host_var 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_allow",98, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // clause_allow ::= DISABLE 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_allow",98, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // clause_allow ::= DISALLOW 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_allow",98, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // clause_allow ::= ALLOW 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("clause_allow",98, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // table_xml ::= XMLTABLE LPAR eat RPAR 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_xml",185, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // table_join_condition_item ::= FUNCTION_SCALAR 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_join_condition_item",196, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // table_join_condition_item ::= column_name 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_join_condition_item",196, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // table_join_condition_right ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_join_condition_right",194, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // table_join_condition_right ::= EQ table_join_condition_item 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_join_condition_right",194, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // table_join_condition_unary ::= table_join_condition_item table_join_condition_right 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_join_condition_unary",195, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // table_join_condition_expr ::= LPAR table_join_condition RPAR 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_join_condition_expr",193, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // table_join_condition_expr ::= table_join_condition_unary 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_join_condition_expr",193, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // table_join_condition ::= table_join_condition AND table_join_condition_expr 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_join_condition",192, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // table_join_condition ::= table_join_condition_expr 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_join_condition",192, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // table_join_type ::= RIGHT 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_join_type",188, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // table_join_type ::= LEFT 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_join_type",188, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // table_join_type ::= INNER 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_join_type",188, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // table_join_not_full ::= table_join_type opt_outer JOIN table_reference ON search_condition 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_join_not_full",191, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // table_join_full ::= FULL opt_outer JOIN table_reference ON table_join_condition 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_join_full",190, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // table_join_cross ::= CROSS JOIN table_item 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_join_cross",189, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // table_join_mode ::= table_join_not_full 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_join_mode",187, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // table_join_mode ::= table_join_full 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_join_mode",187, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // table_join_mode ::= table_join_cross 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_join_mode",187, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // table_join ::= LPAR table_join RPAR 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_join",186, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // table_join ::= table_join_mode 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_join",186, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // table_change_sql ::= sql_merge 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_change_sql",181, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // table_change_sql ::= sql_delete 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_change_sql",181, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // table_change_sql ::= sql_update 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_change_sql",181, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // table_change_sql ::= sql_insert 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_change_sql",181, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // table_change ::= final_old TABLE LPAR table_change_sql RPAR 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_change",180, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // table_function_item ::= expression 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_function_item",184, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // table_function_item ::= TABLE id 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_function_item",184, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // table_function_data ::= table_function_data COMMA table_function_item 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_function_data",183, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // table_function_data ::= table_function_item 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_function_data",183, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // table_function ::= id table_function_data clause_cardinality 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_function",182, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // table_nested ::= LPAR qry_fullselect RPAR 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_nested",179, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // table_table ::= table_change 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_table",175, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // table_table ::= table_locator 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_table",175, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // table_table ::= table_function 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_table",175, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // table_table ::= qry_fullselect 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_table",175, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // table_table_prfx ::= TABLE LPAR table_table RPAR 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_table_prfx",174, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // table_single ::= table_name 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_single",178, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // table_item ::= AS id 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_item",176, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // table_item ::= FUNCTION_TABLE 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_item",176, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // table_item ::= table_xml 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_item",176, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // table_item ::= table_join 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_item",176, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // table_item ::= table_nested 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_item",176, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // table_item ::= table_table_prfx 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_item",176, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // table_item ::= table_single 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_item",176, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // table_reference ::= table_reference table_item 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_reference",173, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // table_reference ::= table_item 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_reference",173, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // table_reference_lst ::= table_reference_lst COMMA table_reference 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_reference_lst",172, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // table_reference_lst ::= table_reference 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("table_reference_lst",172, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // qry_select ::= clause_with_opt qry_fullselect 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("qry_select",93, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // qry_fullselect_clauses_item ::= clause_fetch_first 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("qry_fullselect_clauses_item",87, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // qry_fullselect_clauses_item ::= clause_order 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("qry_fullselect_clauses_item",87, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // qry_fullselect_clauses ::= qry_fullselect_clauses qry_fullselect_clauses_item 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("qry_fullselect_clauses",86, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // qry_fullselect_clauses ::= qry_fullselect_clauses_item 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("qry_fullselect_clauses",86, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // qry_fullselect_clauses_opt ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("qry_fullselect_clauses_opt",85, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // qry_fullselect_clauses_opt ::= qry_fullselect_clauses 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("qry_fullselect_clauses_opt",85, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // qry_fullselect_right ::= clause_union qry_fullselect_qry 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("qry_fullselect_right",84, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // qry_fullselect_right_lst ::= qry_fullselect_right_lst qry_fullselect_right 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("qry_fullselect_right_lst",83, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // qry_fullselect_right_lst ::= qry_fullselect_right 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("qry_fullselect_right_lst",83, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // qry_fullselect_qry ::= LPAR qry_fullselect RPAR qry_fullselect_clauses_opt 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("qry_fullselect_qry",88, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // qry_fullselect_qry ::= qry_subselect 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("qry_fullselect_qry",88, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // qry_fullselect_right_opt ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("qry_fullselect_right_opt",82, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // qry_fullselect_right_opt ::= qry_fullselect_right_lst 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("qry_fullselect_right_opt",82, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // qry_fullselect_left ::= qry_fullselect_qry 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("qry_fullselect_left",81, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // qry_fullselect ::= qry_fullselect_left qry_fullselect_right_opt 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("qry_fullselect",79, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // qry_select_clause ::= clause_skip 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("qry_select_clause",96, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // qry_select_clause ::= clause_queryno 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("qry_select_clause",96, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // qry_select_clause ::= clause_isolation 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("qry_select_clause",96, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // qry_select_clause ::= clause_optimize 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("qry_select_clause",96, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // qry_select_clause ::= clause_read_only 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("qry_select_clause",96, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // qry_select_clause ::= clause_update 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("qry_select_clause",96, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // qry_subselect_clause ::= qry_select_clause 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("qry_subselect_clause",92, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // qry_subselect_clause ::= clause_fetch_first 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("qry_subselect_clause",92, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // qry_subselect_clause ::= clause_order 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("qry_subselect_clause",92, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // qry_subselect_clause ::= clause_having 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("qry_subselect_clause",92, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // qry_subselect_clause ::= clause_group 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("qry_subselect_clause",92, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // qry_subselect_clause ::= clause_where 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("qry_subselect_clause",92, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // qry_subselect_clauses ::= qry_subselect_clauses qry_subselect_clause 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("qry_subselect_clauses",91, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // qry_subselect_clauses ::= qry_subselect_clause 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("qry_subselect_clauses",91, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // qry_subselect_clauses_opt ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("qry_subselect_clauses_opt",90, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // qry_subselect_clauses_opt ::= qry_subselect_clauses 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("qry_subselect_clauses_opt",90, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // qry_subselect ::= clause_select clause_from qry_subselect_clauses_opt 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("qry_subselect",89, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // sql_update_clause ::= clause_queryno 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_update_clause",63, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // sql_update_clause ::= clause_isolation 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_update_clause",63, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // sql_update_clause ::= clause_where 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_update_clause",63, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // sql_update_clauses ::= sql_update_clauses sql_update_clause 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_update_clauses",53, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // sql_update_clauses ::= sql_update_clause 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_update_clauses",53, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // sql_update_clauses_opt ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_update_clauses_opt",62, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // sql_update_clauses_opt ::= sql_update_clauses 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_update_clauses_opt",62, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // sql_update_value ::= NULL 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_update_value",59, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // sql_update_value ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_update_value",59, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // sql_update_value ::= expression 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_update_value",59, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // sql_update_right_lst ::= sql_update_right_lst COMMA sql_update_value 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_update_right_lst",61, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // sql_update_right_lst ::= sql_update_value 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_update_right_lst",61, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // sql_update_right_value ::= qry_fullselect 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_update_right_value",60, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // sql_update_right_value ::= sql_update_right_lst 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_update_right_value",60, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // sql_update_right ::= LPAR sql_update_right_value RPAR 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_update_right",57, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // sql_update_right ::= sql_update_value 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_update_right",57, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // sql_update_left_lst ::= sql_update_left_lst COMMA id 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_update_left_lst",58, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // sql_update_left_lst ::= id 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_update_left_lst",58, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // sql_update_left ::= LPAR sql_update_left_lst RPAR 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_update_left",56, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // sql_update_left ::= id 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_update_left",56, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // sql_update_assign ::= sql_update_left EQ sql_update_right 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_update_assign",55, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // sql_update_columns ::= sql_update_columns COMMA sql_update_assign 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_update_columns",54, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // sql_update_columns ::= sql_update_assign 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_update_columns",54, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // sql_update_set ::= SET sql_update_columns 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_update_set",52, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // sql_update_include_opt ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_update_include_opt",51, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // sql_update_include_opt ::= INCLUDE 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_update_include_opt",51, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // sql_update_correlation_opt ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_update_correlation_opt",50, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // sql_update_correlation_opt ::= id 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_update_correlation_opt",50, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // sql_update_period_opt ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_update_period_opt",49, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // sql_update_period_opt ::= FOR PORTION OF BUSINESS_TIME FROM var_time TO var_time 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_update_period_opt",49, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-7)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // sql_update ::= UPDATE NT$45 table_name sql_update_period_opt sql_update_correlation_opt sql_update_include_opt sql_update_set sql_update_clauses_opt 
            {
              Object RESULT =null;
              // propagate RESULT from NT$45
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-7)).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-7)).value;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_update",11, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-7)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // NT$45 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.setVerb(v); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$45",382, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // select_clause ::= clause_for 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("select_clause",48, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // select_clause ::= clause_fetch_first 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("select_clause",48, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // select_clause ::= clause_skip 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("select_clause",48, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // select_clause ::= clause_queryno 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("select_clause",48, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // select_clause ::= clause_isolation 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("select_clause",48, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // select_clause ::= clause_order 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("select_clause",48, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // select_clause ::= clause_optimize 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("select_clause",48, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // select_clause ::= clause_having 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("select_clause",48, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // select_clause ::= clause_group 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("select_clause",48, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // select_clause ::= clause_where 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("select_clause",48, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // select_clauses ::= select_clauses select_clause 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("select_clauses",47, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // select_clauses ::= select_clause 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("select_clauses",47, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // select_clauses_opt ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("select_clauses_opt",44, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // select_clauses_opt ::= select_clauses 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("select_clauses_opt",44, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // select_column ::= field_name 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("select_column",46, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // select_into_lst ::= select_into_lst COMMA field_name 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("select_into_lst",45, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // select_into_lst ::= field_name 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("select_into_lst",45, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // select_into ::= INTO select_into_lst 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("select_into",43, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // select_query ::= clause_select select_into clause_from select_clauses_opt 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("select_query",27, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // select_queries ::= select_queries clause_union select_query 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("select_queries",26, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // select_queries ::= select_query 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("select_queries",26, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // sql_select ::= clause_with_opt select_queries 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_select",8, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // refresh_opc ::= ANY 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("refresh_opc",41, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // refresh_opc ::= var_int 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("refresh_opc",41, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // acceleration_opc ::= host_var 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("acceleration_opc",40, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // acceleration_opc ::= ALL 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("acceleration_opc",40, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // acceleration_opc ::= ELIGIBLE 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("acceleration_opc",40, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // acceleration_opc ::= ENABLE opt_acceleration_enable 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("acceleration_opc",40, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // acceleration_opc ::= NONE 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("acceleration_opc",40, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // set_host_var_value ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("set_host_var_value",37, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // set_host_var_value ::= NULL 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("set_host_var_value",37, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // set_host_var_value ::= expression 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("set_host_var_value",37, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // set_host_var_value_lst ::= set_host_var_value_lst COMMA set_host_var_value 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("set_host_var_value_lst",36, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // set_host_var_value_lst ::= set_host_var_value 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("set_host_var_value_lst",36, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // set_host_var_multiple ::= LPAR set_host_var_lst RPAR EQ LPAR set_host_var_value_lst RPAR 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("set_host_var_multiple",32, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-6)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // set_host_var_simple ::= host_var EQ expression 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("set_host_var_simple",33, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // set_host_var ::= set_host_var_multiple 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("set_host_var",34, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // set_host_var ::= set_host_var_simple 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("set_host_var",34, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // set_host_variable ::= set_host_variable COMMA set_host_var 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("set_host_variable",31, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // set_host_variable ::= set_host_var 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("set_host_variable",31, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // package_item ::= wrd_current opt_package PATH 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("package_item",39, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // package_item ::= SESSION 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("package_item",39, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // package_item ::= SESSION_USER 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("package_item",39, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // package_item ::= var_string 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("package_item",39, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // package_lst ::= package_lst COMMA package_item 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("package_lst",38, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // package_lst ::= package_item 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("package_lst",38, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // set_current_commands ::= SCHEMA NT$44 opt_eq clause_schema 
            {
              Object RESULT =null;
              // propagate RESULT from NT$44
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).value;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("set_current_commands",30, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // NT$44 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.appendVerb(s); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$44",381, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // set_current_commands ::= SQLID NT$43 EQ clause_sqlid 
            {
              Object RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).value;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("set_current_commands",30, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NT$43 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.appendVerb(s); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$43",380, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // set_current_commands ::= RULES NT$42 EQ var_string 
            {
              Object RESULT =null;
              // propagate RESULT from NT$42
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).value;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("set_current_commands",30, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // NT$42 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.appendVerb(s); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$42",379, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // set_current_commands ::= PRECISION NT$41 EQ var_string 
            {
              Object RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).value;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("set_current_commands",30, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // NT$41 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.appendVerb(s); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$41",378, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // set_current_commands ::= PACKAGESET NT$40 EQ clause_packageset 
            {
              Object RESULT =null;
              // propagate RESULT from NT$40
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).value;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("set_current_commands",30, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // NT$40 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.appendVerb(s); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$40",377, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // set_current_commands ::= MAINTAINED NT$39 opt_table TYPES opt_optimization opt_eq clause_maintained 
            {
              Object RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-6)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-6)).value;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("set_current_commands",30, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-6)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // NT$39 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.appendVerb(s); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$39",376, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // set_current_commands ::= LC_TYPE NT$38 opt_eq var_string 
            {
              Object RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).value;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("set_current_commands",30, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // NT$38 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.appendVerb(s); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$38",375, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // set_current_commands ::= LOCALE LC_TYPE NT$37 opt_eq var_string 
            {
              Object RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).value;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("set_current_commands",30, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NT$37 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.appendVerb(s); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$37",374, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // set_current_commands ::= GET_ACCEL_ARCHIVE NT$36 opt_eq clause_yes_no 
            {
              Object RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).value;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("set_current_commands",30, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NT$36 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.appendVerb(s); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$36",373, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // set_current_commands ::= EXPLAIN NT$35 MODE opt_eq clause_explain 
            {
              Object RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-4)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-4)).value;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("set_current_commands",30, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NT$35 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.appendVerb(s); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$35",372, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // set_current_commands ::= DEGREE NT$34 opt_eq var_string 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).value;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("set_current_commands",30, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NT$34 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.appendVerb(s); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$34",371, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // set_current_commands ::= DECFLOAT NT$33 ROUNDING MODE opt_eq clause_round 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)).value;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("set_current_commands",30, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NT$33 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.appendVerb(s); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$33",370, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // set_current_commands ::= DEBUG NT$32 MODE opt_eq clause_allow 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-4)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-4)).value;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("set_current_commands",30, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NT$32 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.appendVerb(s); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$32",369, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // set_current_commands ::= REFRESH NT$30 AGE NT$31 opt_eq refresh_opc 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).value;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("set_current_commands",30, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$31 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.appendVerb(t); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$31",368, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$30 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.appendVerb(s); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$30",367, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // set_current_commands ::= ROUTINE NT$28 VERSION NT$29 opt_eq var_string 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).value;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("set_current_commands",30, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$29 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.appendVerb(t); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$29",366, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$28 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.appendVerb(s); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$28",365, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // set_current_commands ::= QUERY NT$26 ACCELERATION NT$27 opt_eq acceleration_opc 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).value;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("set_current_commands",30, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$27 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.appendVerb(t); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$27",364, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NT$26 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.appendVerb(s); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$26",363, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // set_current_commands ::= PACKAGE NT$24 PATH NT$25 opt_eq package_lst 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).value;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("set_current_commands",30, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$25 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.appendVerb(t); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$25",362, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$24 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.appendVerb(s); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$24",361, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // set_current_commands ::= OPTIMIZATION NT$22 HINT NT$23 EQ var_string 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).value;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("set_current_commands",30, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$23 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.appendVerb(t); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$23",360, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$22 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.appendVerb(s); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$22",359, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // set_current_commands ::= ENCODING NT$20 SCHEME NT$21 EQ var_string 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).value;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("set_current_commands",30, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$21 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.appendVerb(t); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$21",358, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$20 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.appendVerb(s); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$20",357, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // set_current_commands ::= APPLICATION ENCODING NT$18 SCHEME NT$19 EQ var_string 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).value;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("set_current_commands",30, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-6)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$19 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.appendVerb(t); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$19",356, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$18 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.appendVerb(s); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$18",355, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // schema_type ::= LITERAL 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("schema_type",42, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // schema_type ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("schema_type",42, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // schema_type ::= clause_session 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("schema_type",42, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // schema_type ::= var_general 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("schema_type",42, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // set_path ::= LITERAL 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("set_path",29, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // set_path ::= PATH 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("set_path",29, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // set_path ::= CURRENT opt_package PATH 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("set_path",29, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // set_path ::= clause_session 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("set_path",29, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // set_path ::= SYSTEM PATH 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("set_path",29, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // set_path ::= var_general 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("set_path",29, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sql_set_verbs ::= set_host_variable 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_set_verbs",28, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // sql_set_verbs ::= TIME NT$16 ZONE NT$17 opt_eq var_string 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).value;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_set_verbs",28, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$17 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.appendVerb(t); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$17",354, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$16 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.appendVerb(s); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$16",353, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sql_set_verbs ::= SESSION TIME NT$14 ZONE NT$15 opt_eq var_string 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).value;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_set_verbs",28, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-6)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$15 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.appendVerb(t); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$15",352, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$14 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.appendVerb(s); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$14",351, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sql_set_verbs ::= ENCRYPTION NT$12 PASSWORD NT$13 opt_eq clause_encryption 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).value;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_set_verbs",28, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-5)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.appendVerb(t); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$13",350, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$12 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.appendVerb(s); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$12",349, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sql_set_verbs ::= CURRENT NT$11 set_current_commands 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_set_verbs",28, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$11 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.appendVerb(s); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$11",348, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sql_set_verbs ::= CURRENT_SCHEMA NT$10 opt_eq schema_type 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).value;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_set_verbs",28, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$10 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.appendVerb(s); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$10",347, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sql_set_verbs ::= SCHEMA NT$9 opt_eq schema_type 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).value;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_set_verbs",28, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$9 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.appendVerb(s); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$9",346, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sql_set_verbs ::= PATH NT$8 EQ set_path 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).value;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_set_verbs",28, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$8 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.appendVerb(s); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$8",345, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sql_set_verbs ::= CONNECTION NT$7 var_general 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_set_verbs",28, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$7 ::= 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.appendVerb(s); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$7",344, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sql_set ::= SET NT$6 sql_set_verbs 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_set",9, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$6 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.setVerb(v); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$6",343, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // verb_refresh ::= REFRESH TABLE NT$5 table_name clause_queryno_opt 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-4)).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-4)).value;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("verb_refresh",24, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$5 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)).value;
 stmt.setVerb(v); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$5",342, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sql_refresh ::= verb_refresh eat 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_refresh",7, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // verb_merge ::= MERGE NT$4 INTO table_name 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).value;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("verb_merge",234, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$4 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.setVerb(v); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$4",341, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sql_merge ::= verb_merge eat 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_merge",6, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // insert_value ::= expression 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("insert_value",231, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // insert_value ::= NULL 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("insert_value",231, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // insert_value ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("insert_value",231, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // insert_value_lst ::= insert_value_lst COMMA insert_value 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("insert_value_lst",230, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // insert_value_lst ::= insert_value 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("insert_value_lst",230, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // insert_fullselect ::= qry_fullselect 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("insert_fullselect",229, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // insert_values ::= VALUES LPAR insert_value_lst RPAR 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("insert_values",228, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // insert_mode ::= insert_fullselect 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("insert_mode",227, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // insert_mode ::= insert_values 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("insert_mode",227, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // insert_override_opt ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("insert_override_opt",225, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // insert_override_opt ::= OVERRIDING USER VALUE 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("insert_override_opt",225, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // insert_columns_lst ::= insert_columns_lst COMMA column_name 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("insert_columns_lst",223, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // insert_columns_lst ::= column_name 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("insert_columns_lst",223, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // insert_columns ::= LPAR insert_columns_lst RPAR 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("insert_columns",224, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // insert_columns_opt ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("insert_columns_opt",222, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // insert_columns_opt ::= insert_columns 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("insert_columns_opt",222, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // verb_insert ::= INSERT NT$3 INTO table_name 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)).value;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("verb_insert",221, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$3 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.setVerb(v); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$3",340, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sql_insert ::= verb_insert insert_columns_opt include_columns_opt insert_override_opt insert_mode 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_insert",5, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sql_exchange ::= EXCHANGE NT$2 DATA BETWEEN TABLE id AND id 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-7)).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-7)).value;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_exchange",4, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-7)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$2 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.setVerb(v); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$2",339, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // del_object ::= ID 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("del_object",233, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // del_object ::= FROM table_name 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("del_object",233, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // verb_delete ::= DELETE NT$1 del_object 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("verb_delete",232, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$1 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.setVerb(v); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$1",338, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sql_delete ::= verb_delete clause_portion_opt correlation_name_opt set_opt clause_where_opt clause_isolation_opt clause_queryno_opt 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_delete",3, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-6)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cursor_type ::= qry_select 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("cursor_type",19, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cursor_type ::= id 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("cursor_type",19, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cursor_attr_item ::= ROWSET POSITIONING 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("cursor_attr_item",23, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cursor_attr_item ::= RETURN opt_return_caller 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("cursor_attr_item",23, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // cursor_attr_item ::= HOLD 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("cursor_attr_item",23, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cursor_attr_with ::= with_without cursor_attr_item 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("cursor_attr_with",22, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cursor_attr ::= cursor_attr cursor_attr_with 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("cursor_attr",21, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cursor_attr ::= cursor_attr_with 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("cursor_attr",21, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cursor_attr_opt ::= 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("cursor_attr_opt",20, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cursor_attr_opt ::= cursor_attr 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("cursor_attr_opt",20, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cursor_opc_item ::= SCROLL 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("cursor_opc_item",18, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cursor_opc_item ::= STATIC 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("cursor_opc_item",18, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // cursor_opc_item ::= DYNAMIC 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("cursor_opc_item",18, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // cursor_opc_item ::= INSENSITIVE 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("cursor_opc_item",18, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // cursor_opc_item ::= SENSITIVE 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("cursor_opc_item",18, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // cursor_opc_item ::= ASENSITIVE 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("cursor_opc_item",18, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // cursor_opc_item ::= NO 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("cursor_opc_item",18, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // cursor_opc ::= cursor_opc cursor_opc_item 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("cursor_opc",17, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cursor_opc ::= cursor_opc_item 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("cursor_opc",17, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declare_cursor ::= cursor_attr_opt FOR cursor_type 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("declare_cursor",16, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declare_type ::= cursor_opc declare_cursor 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("declare_type",14, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declare_type ::= VARIABLE eat_opt 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("declare_type",14, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declare_type ::= TABLE eat 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("declare_type",14, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declare_type ::= STATEMENT 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("declare_type",14, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declare_type ::= CURSOR declare_cursor 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("declare_type",14, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declare_vars ::= id_lst 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("declare_vars",13, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declare_clauses ::= GLOBAL TEMPORARY TABLE id 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("declare_clauses",12, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declare_clauses ::= declare_vars declare_type 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("declare_clauses",12, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sql_declare ::= DECLARE NT$0 declare_clauses 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)).value;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_declare",2, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-2)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$0 ::= 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()).right;
		Symbol v = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.peek()).value;
 stmt.setVerb(v); 
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("NT$0",337, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sql_dml ::= sql_update 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_dml",1, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sql_dml ::= sql_truncate 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_dml",1, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sql_dml ::= sql_set 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_dml",1, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sql_dml ::= sql_select 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_dml",1, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sql_dml ::= sql_refresh 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_dml",1, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sql_dml ::= sql_merge 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_dml",1, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sql_dml ::= sql_insert 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_dml",1, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sql_dml ::= sql_exchange 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_dml",1, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sql_dml ::= sql_delete 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_dml",1, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sql_dml ::= sql_declare 
            {
              Object RESULT =null;

              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_dml",1, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= sql_stmt EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)).right;
		Symbol start_val = (Symbol)((java_cup.runtime.Symbol) CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)).value;
		RESULT = start_val;
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.elementAt(CUP$DMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$DMLParser$parser.done_parsing();
          return CUP$DMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // sql_stmt ::= sql_dml 
            {
              Symbol RESULT =null;
		 RESULT = symbolFactory.newSymbol(stmt.getVerbName(), stmt.getVerbId(), stmt);  
              CUP$DMLParser$result = parser.getSymbolFactory().newSymbol("sql_stmt",0, ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DMLParser$stack.peek()), RESULT);
            }
          return CUP$DMLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

