package com.jgg.sdp.parser.lang;

import java_cup.runtime.*;

import com.jgg.sdp.module.base.*;
import com.jgg.sdp.module.items.*;
import com.jgg.sdp.module.factorias.*;
import com.jgg.sdp.core.ctes.*;
import com.jgg.sdp.core.config.*;
import com.jgg.sdp.core.exceptions.*;
import com.jgg.sdp.parser.info.*;
import com.jgg.sdp.parser.base.*;
import com.jgg.sdp.parser.work.*;
import com.jgg.sdp.parser.code.*;

parser code {:
      Module        module  = ModulesFactory.getCurrentModule();
      Summary       summary = module.getSummary();
      Configuration cfg     = Configuration.getInstance();
      ParserInfo    info    = ParserInfo.getInstance();
             
      public void syntax_error(Symbol token) {
           
          Symbol s = (Symbol) token.value;
          int col = cfg.getInteger(CFG.MARGIN_LEFT,  0);
          col = col + s.right + 1;

          throw new ParseException(MSG.EXCEPTION_SYNTAX, 
                                   info.getMemberName(), 
                                   s.left + 1, 
                                   col, 
                                   (String) s.value);
      }

      public void unrecovered_syntax_error(Symbol token) throws Exception {
          Symbol s = (Symbol) token.value;
          throw new ParseException(MSG.EXCEPTION_CUP, 
                                   info.getMemberName(), 
                                   s.left + 1,
                                   s.right + 1, 
                                   (String) s.value); 
      }
:}

action code {:
   Module          module   = null;
   Summary         summary  = null;
   COPYCode        code     = null;
      
   StmtCopy currStmt = null;  // Instruccion en proceso
   
   public void initActionClass() {
      module = ModulesFactory.getCurrentModule();
      summary = module.getSummary();
      code = new COPYCode(module);
   }

   public String getSymbolName(Symbol s)    { return (String) s.value; }
   public int    getSymbolLine(Symbol s)    { return (int)    s.left;  }
   
   public void debug(String txt) { System.err.println(txt); }
   public void print(String txt) { 
      System.out.println(txt); 
   }

:}

init with {:
  action_obj.initActionClass();
:}

scan with {:
    Symbol sym = ((GenericScanner) getScanner()).tokenCOPY();
    return (sym!=null) ? sym : getSymbolFactory().newSymbol("END_OF_FILE",EOF_sym());
 
:}

/****************************************************************************/
/****************************************************************************/
/*               TERMINALES                                                 */
/****************************************************************************/
/****************************************************************************/

terminal Symbol CPY_COPY      ;
terminal Symbol CPY_COPYEND   ;
terminal Symbol CPY_SUPPRESS  ;
terminal Symbol CPY_INCLUDE   ;
terminal Symbol CPY_REPLACING ;
terminal Symbol CPY_ID        ;
terminal Symbol CPY_LITERAL   ;
terminal Symbol CPY_IN        ;
terminal Symbol CPY_OF        ;

/****************************************************************************/
/****************************************************************************/
/*               NO TERMINALES                                              */
/****************************************************************************/
/****************************************************************************/

non terminal ax          ; 

non terminal StmtCopy   cpy_verb    ;
non terminal StmtCopy   cpy_stmt    ;
non terminal            cpy_member  ;
non terminal            cpy_options ;
         
non terminal            cpy_supress_opt     ;
non terminal            cpy_replacing_opt   ;
non terminal            cpy_replacing       ;
non terminal Symbol     cpy_member_id       ;
non terminal Symbol     cpy_lib_opt         ;
non terminal SymbolList cpy_replacing_lst   ;
non terminal Symbol     cpy_replacing_token ;

/**********************************************************************/
/**********************************************************************/
/**********************************************************************/
/*                        INICIO PARSER                               */
/**********************************************************************/
/**********************************************************************/
/**********************************************************************/

ax     ::=  cpy_stmt:c  {: code.processCopy(currStmt); :}
       ; 

/*********************************************************************/
/* COPYS                                                             */
/*********************************************************************/

cpy_stmt ::= cpy_verb cpy_member:m cpy_options CPY_COPYEND:e  {: currStmt.addSymbol(e); 
                                                              :}
         ;
         
cpy_verb ::= CPY_COPY:c     {: currStmt = new StmtCopy(c); :}
         |   CPY_INCLUDE:i  {: currStmt = new StmtCopy(i); :}
         ;

cpy_member ::= cpy_member_id:c cpy_lib_opt:p   {: currStmt.addRValue(new SymbolExt(c, p)); :}
           ;
         
cpy_options ::= cpy_supress_opt cpy_replacing_opt
            ;
                          

cpy_member_id ::= CPY_ID:s       {: RESULT = s; :}
              |   CPY_LITERAL:s  {: RESULT = s; :}
              ;

cpy_lib_opt ::= CPY_IN:c cpy_member_id:p {: RESULT = p;    :}
            |   CPY_OF:c cpy_member_id:p {: RESULT = p;    :}
            |                            {: RESULT = null; :}
            ;
                 
cpy_supress_opt ::= CPY_SUPPRESS:s  {: currStmt.addOption(new Option(s)); :}
                |
                ;
             
cpy_replacing_opt ::= cpy_replacing
                  |
                  ;

cpy_replacing ::= CPY_REPLACING:s  cpy_replacing_lst:l {: Option opt = new Option(s);
                                                          opt.add(l);
                                                          currStmt.addOption(opt); 
                                                       :}
              ;
              
cpy_replacing_lst ::= cpy_replacing_token:c                     {: RESULT = new SymbolList(c); :}
                  |   cpy_replacing_lst:l cpy_replacing_token:c {: RESULT = l.add(c);          :}
                  ;
                       
cpy_replacing_token ::= CPY_ID:s         {: RESULT = s; :}
                    |   CPY_LITERAL:s    {: RESULT = s; :}
                    ;
                                                                                                    
