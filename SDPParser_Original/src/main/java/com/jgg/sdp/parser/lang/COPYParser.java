
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Dec 01 09:52:42 CET 2016
//----------------------------------------------------

package com.jgg.sdp.parser.lang;

import java_cup.runtime.*;
import com.jgg.sdp.module.base.*;
import com.jgg.sdp.module.items.*;
import com.jgg.sdp.module.factorias.*;
import com.jgg.sdp.core.ctes.*;
import com.jgg.sdp.core.config.*;
import com.jgg.sdp.core.exceptions.*;
import com.jgg.sdp.parser.info.*;
import com.jgg.sdp.parser.base.*;
import com.jgg.sdp.parser.work.*;
import com.jgg.sdp.parser.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Dec 01 09:52:42 CET 2016
  */
public class COPYParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public COPYParser() {super();}

  /** Constructor which sets the default scanner. */
  public COPYParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public COPYParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\025\000\002\002\003\000\002\002\004\000\002\004" +
    "\006\000\002\003\003\000\002\003\003\000\002\005\004" +
    "\000\002\006\004\000\002\012\003\000\002\012\003\000" +
    "\002\013\004\000\002\013\004\000\002\013\002\000\002" +
    "\007\003\000\002\007\002\000\002\010\003\000\002\010" +
    "\002\000\002\011\004\000\002\014\003\000\002\014\004" +
    "\000\002\015\003\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\006\004\007\007\005\001\002\000\004\002" +
    "\001\001\002\000\006\011\ufffd\012\ufffd\001\002\000\006" +
    "\011\015\012\013\001\002\000\006\011\ufffe\012\ufffe\001" +
    "\002\000\004\002\011\001\002\000\004\002\000\001\002" +
    "\000\014\005\ufff6\006\ufff6\010\ufff6\013\033\014\032\001" +
    "\002\000\014\005\ufff9\006\ufff9\010\ufff9\013\ufff9\014\ufff9" +
    "\001\002\000\010\005\ufff4\006\016\010\ufff4\001\002\000" +
    "\014\005\ufffa\006\ufffa\010\ufffa\013\ufffa\014\ufffa\001\002" +
    "\000\006\005\ufff5\010\ufff5\001\002\000\004\005\031\001" +
    "\002\000\006\005\ufff2\010\023\001\002\000\004\005\ufff3" +
    "\001\002\000\004\005\ufffb\001\002\000\006\011\027\012" +
    "\026\001\002\000\010\005\ufff0\011\ufff0\012\ufff0\001\002" +
    "\000\010\005\ufff1\011\027\012\026\001\002\000\010\005" +
    "\uffed\011\uffed\012\uffed\001\002\000\010\005\uffee\011\uffee" +
    "\012\uffee\001\002\000\010\005\uffef\011\uffef\012\uffef\001" +
    "\002\000\004\002\uffff\001\002\000\006\011\015\012\013" +
    "\001\002\000\006\011\015\012\013\001\002\000\010\005" +
    "\ufffc\006\ufffc\010\ufffc\001\002\000\010\005\ufff8\006\ufff8" +
    "\010\ufff8\001\002\000\010\005\ufff7\006\ufff7\010\ufff7\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\010\002\007\003\005\004\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\013\012\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\033\001\001\000\002\001\001\000\006" +
    "\006\016\007\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\021\011\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\024\015" +
    "\023\001\001\000\002\001\001\000\004\015\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\035\001\001\000\004\012\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$COPYParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$COPYParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$COPYParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

  action_obj.initActionClass();

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    Symbol sym = ((GenericScanner) getScanner()).tokenCOPY();
    return (sym!=null) ? sym : getSymbolFactory().newSymbol("END_OF_FILE",EOF_sym());
 

    }


      Module        module  = ModulesFactory.getCurrentModule();
      Summary       summary = module.getSummary();
      Configuration cfg     = Configuration.getInstance();
      ParserInfo    info    = ParserInfo.getInstance();
             
      public void syntax_error(Symbol token) {
           
          Symbol s = (Symbol) token.value;
          int col = cfg.getInteger(CFG.MARGIN_LEFT,  0);
          col = col + s.right + 1;

          throw new ParseException(MSG.EXCEPTION_SYNTAX, 
                                   info.getMemberName(), 
                                   s.left + 1, 
                                   col, 
                                   (String) s.value);
      }

      public void unrecovered_syntax_error(Symbol token) throws Exception {
          Symbol s = (Symbol) token.value;
          throw new ParseException(MSG.EXCEPTION_CUP, 
                                   info.getMemberName(), 
                                   s.left + 1,
                                   s.right + 1, 
                                   (String) s.value); 
      }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$COPYParser$actions {


   Module          module   = null;
   Summary         summary  = null;
   COPYCode        code     = null;
      
   StmtCopy currStmt = null;  // Instruccion en proceso
   
   public void initActionClass() {
      module = ModulesFactory.getCurrentModule();
      summary = module.getSummary();
      code = new COPYCode(module);
   }

   public String getSymbolName(Symbol s)    { return (String) s.value; }
   public int    getSymbolLine(Symbol s)    { return (int)    s.left;  }
   
   public void debug(String txt) { System.err.println(txt); }
   public void print(String txt) { 
      System.out.println(txt); 
   }


  private final COPYParser parser;

  /** Constructor */
  CUP$COPYParser$actions(COPYParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$COPYParser$do_action(
    int                        CUP$COPYParser$act_num,
    java_cup.runtime.lr_parser CUP$COPYParser$parser,
    java.util.Stack            CUP$COPYParser$stack,
    int                        CUP$COPYParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$COPYParser$result;

      /* select the action based on the action number */
      switch (CUP$COPYParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // cpy_replacing_token ::= CPY_LITERAL 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$COPYParser$stack.peek()).value;
		 RESULT = s; 
              CUP$COPYParser$result = parser.getSymbolFactory().newSymbol("cpy_replacing_token",11, ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()), RESULT);
            }
          return CUP$COPYParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cpy_replacing_token ::= CPY_ID 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$COPYParser$stack.peek()).value;
		 RESULT = s; 
              CUP$COPYParser$result = parser.getSymbolFactory().newSymbol("cpy_replacing_token",11, ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()), RESULT);
            }
          return CUP$COPYParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // cpy_replacing_lst ::= cpy_replacing_lst cpy_replacing_token 
            {
              SymbolList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.elementAt(CUP$COPYParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.elementAt(CUP$COPYParser$top-1)).right;
		SymbolList l = (SymbolList)((java_cup.runtime.Symbol) CUP$COPYParser$stack.elementAt(CUP$COPYParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$COPYParser$stack.peek()).value;
		 RESULT = l.add(c);          
              CUP$COPYParser$result = parser.getSymbolFactory().newSymbol("cpy_replacing_lst",10, ((java_cup.runtime.Symbol)CUP$COPYParser$stack.elementAt(CUP$COPYParser$top-1)), ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()), RESULT);
            }
          return CUP$COPYParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // cpy_replacing_lst ::= cpy_replacing_token 
            {
              SymbolList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$COPYParser$stack.peek()).value;
		 RESULT = new SymbolList(c); 
              CUP$COPYParser$result = parser.getSymbolFactory().newSymbol("cpy_replacing_lst",10, ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()), RESULT);
            }
          return CUP$COPYParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cpy_replacing ::= CPY_REPLACING cpy_replacing_lst 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.elementAt(CUP$COPYParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.elementAt(CUP$COPYParser$top-1)).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$COPYParser$stack.elementAt(CUP$COPYParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()).right;
		SymbolList l = (SymbolList)((java_cup.runtime.Symbol) CUP$COPYParser$stack.peek()).value;
		 Option opt = new Option(s);
                                                          opt.add(l);
                                                          currStmt.addOption(opt); 
                                                       
              CUP$COPYParser$result = parser.getSymbolFactory().newSymbol("cpy_replacing",7, ((java_cup.runtime.Symbol)CUP$COPYParser$stack.elementAt(CUP$COPYParser$top-1)), ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()), RESULT);
            }
          return CUP$COPYParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cpy_replacing_opt ::= 
            {
              Object RESULT =null;

              CUP$COPYParser$result = parser.getSymbolFactory().newSymbol("cpy_replacing_opt",6, ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()), RESULT);
            }
          return CUP$COPYParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cpy_replacing_opt ::= cpy_replacing 
            {
              Object RESULT =null;

              CUP$COPYParser$result = parser.getSymbolFactory().newSymbol("cpy_replacing_opt",6, ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()), RESULT);
            }
          return CUP$COPYParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cpy_supress_opt ::= 
            {
              Object RESULT =null;

              CUP$COPYParser$result = parser.getSymbolFactory().newSymbol("cpy_supress_opt",5, ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()), RESULT);
            }
          return CUP$COPYParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cpy_supress_opt ::= CPY_SUPPRESS 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$COPYParser$stack.peek()).value;
		 currStmt.addOption(new Option(s)); 
              CUP$COPYParser$result = parser.getSymbolFactory().newSymbol("cpy_supress_opt",5, ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()), RESULT);
            }
          return CUP$COPYParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cpy_lib_opt ::= 
            {
              Symbol RESULT =null;
		 RESULT = null; 
              CUP$COPYParser$result = parser.getSymbolFactory().newSymbol("cpy_lib_opt",9, ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()), RESULT);
            }
          return CUP$COPYParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cpy_lib_opt ::= CPY_OF cpy_member_id 
            {
              Symbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.elementAt(CUP$COPYParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.elementAt(CUP$COPYParser$top-1)).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$COPYParser$stack.elementAt(CUP$COPYParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$COPYParser$stack.peek()).value;
		 RESULT = p;    
              CUP$COPYParser$result = parser.getSymbolFactory().newSymbol("cpy_lib_opt",9, ((java_cup.runtime.Symbol)CUP$COPYParser$stack.elementAt(CUP$COPYParser$top-1)), ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()), RESULT);
            }
          return CUP$COPYParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cpy_lib_opt ::= CPY_IN cpy_member_id 
            {
              Symbol RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.elementAt(CUP$COPYParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.elementAt(CUP$COPYParser$top-1)).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$COPYParser$stack.elementAt(CUP$COPYParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$COPYParser$stack.peek()).value;
		 RESULT = p;    
              CUP$COPYParser$result = parser.getSymbolFactory().newSymbol("cpy_lib_opt",9, ((java_cup.runtime.Symbol)CUP$COPYParser$stack.elementAt(CUP$COPYParser$top-1)), ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()), RESULT);
            }
          return CUP$COPYParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cpy_member_id ::= CPY_LITERAL 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$COPYParser$stack.peek()).value;
		 RESULT = s; 
              CUP$COPYParser$result = parser.getSymbolFactory().newSymbol("cpy_member_id",8, ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()), RESULT);
            }
          return CUP$COPYParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cpy_member_id ::= CPY_ID 
            {
              Symbol RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$COPYParser$stack.peek()).value;
		 RESULT = s; 
              CUP$COPYParser$result = parser.getSymbolFactory().newSymbol("cpy_member_id",8, ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()), RESULT);
            }
          return CUP$COPYParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cpy_options ::= cpy_supress_opt cpy_replacing_opt 
            {
              Object RESULT =null;

              CUP$COPYParser$result = parser.getSymbolFactory().newSymbol("cpy_options",4, ((java_cup.runtime.Symbol)CUP$COPYParser$stack.elementAt(CUP$COPYParser$top-1)), ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()), RESULT);
            }
          return CUP$COPYParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // cpy_member ::= cpy_member_id cpy_lib_opt 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.elementAt(CUP$COPYParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.elementAt(CUP$COPYParser$top-1)).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$COPYParser$stack.elementAt(CUP$COPYParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()).right;
		Symbol p = (Symbol)((java_cup.runtime.Symbol) CUP$COPYParser$stack.peek()).value;
		 currStmt.addRValue(new SymbolExt(c, p)); 
              CUP$COPYParser$result = parser.getSymbolFactory().newSymbol("cpy_member",3, ((java_cup.runtime.Symbol)CUP$COPYParser$stack.elementAt(CUP$COPYParser$top-1)), ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()), RESULT);
            }
          return CUP$COPYParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cpy_verb ::= CPY_INCLUDE 
            {
              StmtCopy RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$COPYParser$stack.peek()).value;
		 currStmt = new StmtCopy(i); 
              CUP$COPYParser$result = parser.getSymbolFactory().newSymbol("cpy_verb",1, ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()), RESULT);
            }
          return CUP$COPYParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cpy_verb ::= CPY_COPY 
            {
              StmtCopy RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$COPYParser$stack.peek()).value;
		 currStmt = new StmtCopy(c); 
              CUP$COPYParser$result = parser.getSymbolFactory().newSymbol("cpy_verb",1, ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()), RESULT);
            }
          return CUP$COPYParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cpy_stmt ::= cpy_verb cpy_member cpy_options CPY_COPYEND 
            {
              StmtCopy RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.elementAt(CUP$COPYParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.elementAt(CUP$COPYParser$top-2)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$COPYParser$stack.elementAt(CUP$COPYParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()).right;
		Symbol e = (Symbol)((java_cup.runtime.Symbol) CUP$COPYParser$stack.peek()).value;
		 currStmt.addSymbol(e); 
                                                              
              CUP$COPYParser$result = parser.getSymbolFactory().newSymbol("cpy_stmt",2, ((java_cup.runtime.Symbol)CUP$COPYParser$stack.elementAt(CUP$COPYParser$top-3)), ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()), RESULT);
            }
          return CUP$COPYParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= ax EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.elementAt(CUP$COPYParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.elementAt(CUP$COPYParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$COPYParser$stack.elementAt(CUP$COPYParser$top-1)).value;
		RESULT = start_val;
              CUP$COPYParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$COPYParser$stack.elementAt(CUP$COPYParser$top-1)), ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$COPYParser$parser.done_parsing();
          return CUP$COPYParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // ax ::= cpy_stmt 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()).right;
		StmtCopy c = (StmtCopy)((java_cup.runtime.Symbol) CUP$COPYParser$stack.peek()).value;
		 code.processCopy(currStmt); 
              CUP$COPYParser$result = parser.getSymbolFactory().newSymbol("ax",0, ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$COPYParser$stack.peek()), RESULT);
            }
          return CUP$COPYParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

