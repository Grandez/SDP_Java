
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Dec 01 09:52:42 CET 2016
//----------------------------------------------------

package com.jgg.sdp.parser.lang;

import java_cup.runtime.*;
import com.jgg.sdp.module.base.*;
import com.jgg.sdp.module.items.*;
import com.jgg.sdp.module.factorias.*;
import com.jgg.sdp.core.ctes.*;
import com.jgg.sdp.core.config.*;
import com.jgg.sdp.core.exceptions.*;
import com.jgg.sdp.parser.info.*;
import com.jgg.sdp.parser.base.*;
import com.jgg.sdp.parser.work.*;
import com.jgg.sdp.parser.code.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Dec 01 09:52:42 CET 2016
  */
public class DB2Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public DB2Parser() {super();}

  /** Constructor which sets the default scanner. */
  public DB2Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public DB2Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\060\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\006\003\000" +
    "\002\005\004\000\002\007\005\000\002\010\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\013\004" +
    "\000\002\014\004\000\002\015\003\000\002\022\003\000" +
    "\002\023\006\000\002\024\005\000\002\025\003\000\002" +
    "\025\003\000\002\026\003\000\002\026\003\000\002\027" +
    "\004\000\002\030\005\000\002\031\004\000\002\031\002" +
    "\000\002\033\003\000\002\033\002\000\002\032\003\000" +
    "\002\032\002\000\002\016\003\000\002\016\004\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\021\003" +
    "\000\002\021\003\000\002\017\003\000\002\017\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\075\000\032\004\016\005\010\006\034\010\012\011" +
    "\027\012\004\013\005\014\011\015\007\017\026\020\013" +
    "\023\032\001\002\000\004\010\077\001\002\000\022\002" +
    "\uffd6\005\uffd6\010\uffd6\011\uffd6\013\uffd6\014\uffd6\017\uffd6" +
    "\023\uffd6\001\002\000\010\005\062\010\060\011\061\001" +
    "\002\000\004\024\050\001\002\000\022\002\uffd5\005\uffd5" +
    "\010\uffd5\011\uffd5\013\uffd5\014\uffd5\017\uffd5\023\uffd5\001" +
    "\002\000\022\002\uffd8\005\uffd8\010\uffd8\011\uffd8\013\uffd8" +
    "\014\uffd8\017\uffd8\023\uffd8\001\002\000\022\002\uffda\005" +
    "\uffda\010\uffda\011\uffda\013\uffda\014\uffda\017\uffda\023\uffda" +
    "\001\002\000\010\002\uffde\021\uffde\025\042\001\002\000" +
    "\004\002\uffec\001\002\000\004\002\ufffe\001\002\000\006" +
    "\002\uffde\025\042\001\002\000\004\002\ufffd\001\002\000" +
    "\004\002\040\001\002\000\004\002\ufff9\001\002\000\004" +
    "\002\uffe6\001\002\000\004\002\uffe7\001\002\000\022\002" +
    "\uffdb\005\uffdb\010\uffdb\011\uffdb\013\uffdb\014\uffdb\017\uffdb" +
    "\023\uffdb\001\002\000\004\002\uffff\001\002\000\022\002" +
    "\uffd7\005\uffd7\010\uffd7\011\uffd7\013\uffd7\014\uffd7\017\uffd7" +
    "\023\uffd7\001\002\000\022\002\uffd9\005\uffd9\010\uffd9\011" +
    "\uffd9\013\uffd9\014\uffd9\017\uffd9\023\uffd9\001\002\000\004" +
    "\002\ufffb\001\002\000\022\002\uffd3\005\uffd3\010\uffd3\011" +
    "\uffd3\013\uffd3\014\uffd3\017\uffd3\023\uffd3\001\002\000\022" +
    "\002\uffd4\005\uffd4\010\uffd4\011\uffd4\013\uffd4\014\uffd4\017" +
    "\uffd4\023\uffd4\001\002\000\004\002\ufffc\001\002\000\010" +
    "\005\ufff6\010\ufff6\011\ufff6\001\002\000\004\002\001\001" +
    "\002\000\022\002\ufffa\005\010\010\012\011\027\013\005" +
    "\014\011\017\026\023\032\001\002\000\022\002\uffd2\005" +
    "\uffd2\010\uffd2\011\uffd2\013\uffd2\014\uffd2\017\uffd2\023\uffd2" +
    "\001\002\000\004\002\000\001\002\000\004\002\uffe5\001" +
    "\002\000\006\002\uffdf\021\uffdf\001\002\000\006\002\uffe2" +
    "\021\045\001\002\000\004\002\uffe4\001\002\000\006\002" +
    "\uffe0\010\046\001\002\000\004\002\uffe1\001\002\000\004" +
    "\002\uffe3\001\002\000\004\010\051\001\002\000\004\013" +
    "\052\001\002\000\006\007\056\022\055\001\002\000\004" +
    "\002\uffeb\001\002\000\004\016\057\001\002\000\004\016" +
    "\uffe9\001\002\000\004\016\uffe8\001\002\000\004\002\uffea" +
    "\001\002\000\010\005\ufff5\023\ufff5\024\ufff5\001\002\000" +
    "\010\005\ufff4\023\ufff4\024\ufff4\001\002\000\010\005\ufff3" +
    "\023\ufff3\024\ufff3\001\002\000\010\005\071\023\065\024" +
    "\070\001\002\000\004\002\ufff7\001\002\000\004\002\uffed" +
    "\001\002\000\004\002\ufff0\001\002\000\004\002\ufff2\001" +
    "\002\000\020\005\010\010\012\011\027\013\005\014\011" +
    "\017\026\023\032\001\002\000\020\005\010\010\012\011" +
    "\027\013\005\014\011\017\026\023\032\001\002\000\004" +
    "\002\ufff1\001\002\000\022\002\uffee\005\010\010\012\011" +
    "\027\013\005\014\011\017\026\023\032\001\002\000\022" +
    "\002\uffdd\005\uffdd\010\uffdd\011\uffdd\013\uffdd\014\uffdd\017" +
    "\uffdd\023\uffdd\001\002\000\022\002\uffdc\005\uffdc\010\uffdc" +
    "\011\uffdc\013\uffdc\014\uffdc\017\uffdc\023\uffdc\001\002\000" +
    "\022\002\uffef\005\010\010\012\011\027\013\005\014\011" +
    "\017\026\023\032\001\002\000\004\002\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\075\000\040\002\017\003\034\004\014\005\024\006" +
    "\016\007\020\010\005\017\035\020\030\021\023\022\032" +
    "\023\013\026\027\027\022\030\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\036\021\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\043\001\001\000\002\001\001\000\004" +
    "\033\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\052\001\001\000\004\025\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\063\013" +
    "\066\014\071\015\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\016" +
    "\075\020\073\021\023\001\001\000\010\016\072\020\073" +
    "\021\023\001\001\000\002\001\001\000\006\020\074\021" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\074\021\023\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$DB2Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$DB2Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$DB2Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

  action_obj.initActionClass();

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    Symbol sym = ((GenericScanner) getScanner()).tokenSQL();
    return (sym!=null) ? sym : getSymbolFactory().newSymbol("END_OF_FILE",EOF_sym());
 

    }


   Module module     = ModulesFactory.getCurrentModule();
   Summary summary   = module.getSummary();
   Configuration cfg = Configuration.getInstance();
   ParserInfo      info     = ParserInfo.getInstance();          
      public void syntax_error(Symbol token) {
           
          Symbol s = (Symbol) token.value;
          int col = cfg.getInteger(CFG.MARGIN_LEFT,  0);
          col = col + s.right + 1;

          throw new ParseException(MSG.EXCEPTION_SYNTAX, 
                                   info.getMemberName(), 
                                   info.getOffset() + s.left + 1, 
                                   col, 
                                   (String) s.value);
      }

      public void unrecovered_syntax_error(Symbol token) throws Exception {
          Symbol s = (Symbol) token.value;
          throw new ParseException(MSG.EXCEPTION_CUP, 
                                  info.getMemberName(), 
                                  info.getOffset() + s.left + 1,
                                  s.right + 1, 
                                  (String) s.value); 
      }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$DB2Parser$actions {


   Module          module   = null;
   DB2Code         code     = null;
   ParserInfo      info     = ParserInfo.getInstance();
         
   StmtSQL currStmt = new StmtSQL();  // Instruccion en proceso
   
   public void initActionClass() {
      module = ModulesFactory.getCurrentModule();
      code = new DB2Code(module);
   }

   public String getSymbolName(Symbol s)    { return (String) s.value; }
   public int    getSymbolLine(Symbol s)    { return (int)    s.left;  }
   
   public void debug(String txt) { System.err.println(txt); }
   public void print(String txt) { 
      System.out.println(txt); 
   }


  private final DB2Parser parser;

  /** Constructor */
  CUP$DB2Parser$actions(DB2Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$DB2Parser$do_action(
    int                        CUP$DB2Parser$act_num,
    java_cup.runtime.lr_parser CUP$DB2Parser$parser,
    java.util.Stack            CUP$DB2Parser$stack,
    int                        CUP$DB2Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$DB2Parser$result;

      /* select the action based on the action number */
      switch (CUP$DB2Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sql_resto ::= sql_resto cosas 
            {
              Object RESULT =null;

              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("sql_resto",13, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.elementAt(CUP$DB2Parser$top-1)), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sql_resto ::= cosas 
            {
              Object RESULT =null;

              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("sql_resto",13, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // words ::= STATEMENT 
            {
              Object RESULT =null;

              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("words",15, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // words ::= CURSOR 
            {
              Object RESULT =null;

              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("words",15, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cosas ::= IN 
            {
              Object RESULT =null;

              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("cosas",14, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cosas ::= NUMERO 
            {
              Object RESULT =null;

              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("cosas",14, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cosas ::= LITERAL 
            {
              Object RESULT =null;

              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("cosas",14, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cosas ::= ID_FULL 
            {
              Object RESULT =null;

              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("cosas",14, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cosas ::= ID 
            {
              Object RESULT =null;

              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("cosas",14, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cosas ::= words 
            {
              Object RESULT =null;

              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("cosas",14, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sql_eat ::= sql_eat cosas 
            {
              Object RESULT =null;

              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("sql_eat",12, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.elementAt(CUP$DB2Parser$top-1)), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sql_eat ::= cosas 
            {
              Object RESULT =null;

              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("sql_eat",12, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sql_work_opt ::= 
            {
              Object RESULT =null;

              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("sql_work_opt",24, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sql_work_opt ::= WORK 
            {
              Object RESULT =null;

              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("sql_work_opt",24, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // id_opt ::= 
            {
              Object RESULT =null;

              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("id_opt",25, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // id_opt ::= ID 
            {
              Object RESULT =null;

              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("id_opt",25, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sql_rollback_opt ::= 
            {
              Object RESULT =null;

              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("sql_rollback_opt",23, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sql_rollback_opt ::= SAVEPOINT id_opt 
            {
              Object RESULT =null;

              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("sql_rollback_opt",23, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.elementAt(CUP$DB2Parser$top-1)), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sql_rollback ::= ROLLBACK sql_work_opt sql_rollback_opt 
            {
              Object RESULT =null;

              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("sql_rollback",22, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.elementAt(CUP$DB2Parser$top-2)), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sql_commit ::= COMMIT sql_work_opt 
            {
              Object RESULT =null;

              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("sql_commit",21, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.elementAt(CUP$DB2Parser$top-1)), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sql_tcl ::= sql_rollback 
            {
              Object RESULT =null;

              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("sql_tcl",20, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sql_tcl ::= sql_commit 
            {
              Object RESULT =null;

              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("sql_tcl",20, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sql_lock_mode ::= EXCLUSIVE 
            {
              Object RESULT =null;

              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("sql_lock_mode",19, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sql_lock_mode ::= SHARE 
            {
              Object RESULT =null;

              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("sql_lock_mode",19, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sql_lock_resto ::= IN sql_lock_mode MODE 
            {
              Object RESULT =null;

              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("sql_lock_resto",18, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.elementAt(CUP$DB2Parser$top-2)), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sql_lock ::= LOCK TABLE ID sql_lock_resto 
            {
              Object RESULT =null;

              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("sql_lock",17, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.elementAt(CUP$DB2Parser$top-3)), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sql_dcl ::= sql_lock 
            {
              Object RESULT =null;

              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("sql_dcl",16, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sql_declare_statement ::= STATEMENT 
            {
              Integer RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()).right;
		Symbol s = (Symbol)((java_cup.runtime.Symbol) CUP$DB2Parser$stack.peek()).value;
		 currStmt.addOption(new Option(s)); RESULT = CDG.CPY_STATEMENT; 
              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("sql_declare_statement",11, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sql_declare_cursor ::= CURSOR sql_eat 
            {
              Integer RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.elementAt(CUP$DB2Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.elementAt(CUP$DB2Parser$top-1)).right;
		Symbol c = (Symbol)((java_cup.runtime.Symbol) CUP$DB2Parser$stack.elementAt(CUP$DB2Parser$top-1)).value;
		 currStmt.addOption(new Option(c)); RESULT = CDG.CPY_CURSOR;  
              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("sql_declare_cursor",10, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.elementAt(CUP$DB2Parser$top-1)), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sql_declare_table ::= TABLE sql_eat 
            {
              Integer RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.elementAt(CUP$DB2Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.elementAt(CUP$DB2Parser$top-1)).right;
		Symbol t = (Symbol)((java_cup.runtime.Symbol) CUP$DB2Parser$stack.elementAt(CUP$DB2Parser$top-1)).value;
		 currStmt.addOption(new Option(t)); RESULT = CDG.CPY_TABLE;  
              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("sql_declare_table",9, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.elementAt(CUP$DB2Parser$top-1)), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sql_declare_type ::= sql_declare_statement 
            {
              Integer RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$DB2Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("sql_declare_type",8, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sql_declare_type ::= sql_declare_cursor 
            {
              Integer RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$DB2Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("sql_declare_type",8, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sql_declare_type ::= sql_declare_table 
            {
              Integer RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$DB2Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("sql_declare_type",8, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sql_declare_name ::= CURSOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$DB2Parser$stack.peek()).value;
		 currStmt.addRValue(i); 
              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("sql_declare_name",7, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sql_declare_name ::= ID_FULL 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$DB2Parser$stack.peek()).value;
		 currStmt.addRValue(i); 
              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("sql_declare_name",7, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sql_declare_name ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$DB2Parser$stack.peek()).value;
		 currStmt.addRValue(i); 
              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("sql_declare_name",7, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sql_declare_verb ::= DECLARE 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()).right;
		Symbol d = (Symbol)((java_cup.runtime.Symbol) CUP$DB2Parser$stack.peek()).value;
		 currStmt.setVerb(d); 
              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("sql_declare_verb",6, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sql_declare ::= sql_declare_verb sql_declare_name sql_declare_type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$DB2Parser$stack.peek()).value;
		 info.setTypeCopy(t); 
              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("sql_declare",5, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.elementAt(CUP$DB2Parser$top-2)), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sql_include ::= INCLUDE ID 
            {
              StmtCopy RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.elementAt(CUP$DB2Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.elementAt(CUP$DB2Parser$top-1)).right;
		Symbol i = (Symbol)((java_cup.runtime.Symbol) CUP$DB2Parser$stack.elementAt(CUP$DB2Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()).right;
		Symbol m = (Symbol)((java_cup.runtime.Symbol) CUP$DB2Parser$stack.peek()).value;
		 StmtCopy stmt = new StmtCopy(i);
                                  stmt.addRValue(m);
                                  RESULT = stmt; 
                               
              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("sql_include",3, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.elementAt(CUP$DB2Parser$top-1)), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sql_cursor ::= sql_declare 
            {
              Object RESULT =null;
		 code.processDeclare(currStmt); 
              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("sql_cursor",4, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sql_stmt ::= sql_resto 
            {
              Object RESULT =null;

              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("sql_stmt",2, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sql_stmt ::= sql_tcl 
            {
              Object RESULT =null;

              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("sql_stmt",2, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sql_stmt ::= sql_dcl 
            {
              Object RESULT =null;

              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("sql_stmt",2, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sql_stmt ::= sql_cursor 
            {
              Object RESULT =null;

              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("sql_stmt",2, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sql_statement ::= sql_stmt 
            {
              Object RESULT =null;

              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("sql_statement",1, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sql_statement ::= sql_include 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()).right;
		StmtCopy i = (StmtCopy)((java_cup.runtime.Symbol) CUP$DB2Parser$stack.peek()).value;
		 code.processInclude(i); 
              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("sql_statement",1, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= ax EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.elementAt(CUP$DB2Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.elementAt(CUP$DB2Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$DB2Parser$stack.elementAt(CUP$DB2Parser$top-1)).value;
		RESULT = start_val;
              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.elementAt(CUP$DB2Parser$top-1)), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$DB2Parser$parser.done_parsing();
          return CUP$DB2Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // ax ::= sql_statement 
            {
              Object RESULT =null;

              CUP$DB2Parser$result = parser.getSymbolFactory().newSymbol("ax",0, ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DB2Parser$stack.peek()), RESULT);
            }
          return CUP$DB2Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

